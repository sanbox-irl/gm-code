{
  "functions": {
    "abs": {
      "name": "abs",
      "parameters": [
        {
          "parameter": "val",
          "description": "The number to turn absolute."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nx += abs (x - mouse_x)\n```\nThis will add an amount equal to the absolute value of the current x position of the instance and the mouse x position.\n",
      "description": "This function returns the absolute value of the input argument, so if it's a positive value then it will remain the same, but if it's negative it will be multiplied by -1 to make it positive.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/abs.htm"
    },
    "alarm_get": {
      "name": "alarm_get",
      "parameters": [
        {
          "parameter": "index",
          "description": "The alarm index to get, from 0 to 11."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < 12; i++)\n    {\n        if alarm_get(i) > 0 alarm_set(i, -1);\n    }\n```\nThe above code checks all the alarms in the calling instance and if they are greater than 0 it sets them to -1, stopping them from counting down any further.\n",
      "description": "This function can be used to get the current value of the given alarm. You supply the alarm number from 0 to 11 and this function will return the value that the alarm is currently on. This is an alternative method to getting the  [alarm array](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/alarm.htm) value directly.",
      "returns": "Real (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/alarm_get.htm"
    },
    "alarm_set": {
      "name": "alarm_set",
      "parameters": [
        {
          "parameter": "index",
          "description": "The alarm index to set, from 0 to 11."
        },
        {
          "parameter": "value",
          "description": "The value (an integer) to set the alarm to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < 12; i++)\n    {\n        if alarm_get(i) > 0 alarm_set(i, -1);\n    }\n```\nThe above code checks all the alarms in the calling instance and if they are greater than 0 it sets them to -1, stopping them from counting down any further.\n",
      "description": "This function can be used to set an alarm. You supply the alarm number from 0 to 11, and then the value to set the alarm to. The value must be an integer value, and you can set it to -1 to stop the alarm (non integer values will be rounded to the nearest integer). This is an alternative method to setting the  [alarm array](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/alarm.htm) directly.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/alarm_set.htm"
    },
    "analytics_event": {
      "name": "analytics_event",
      "parameters": [
        {
          "parameter": "string",
          "description": "A string to send to the provider"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif hs_new\n    {\n        analytics_event(\"New hiscore of \" + string (score));\n    }\n```\nThe above code will check a variable to see if it is `true` and if it is then a special analytics event will be triggered with the specified string.\n",
      "description": "This function will send the specified text to the analytics provider that you have set up through the  [HTML5 Game Options](https://manual.yoyogames.com/Settings/Game_Options/HTML5.htm). This function can be used to create a custom analytic to track something outside of the scope of the provider being used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/analytics_event.htm"
    },
    "analytics_event_ext": {
      "name": "analytics_event_ext",
      "parameters": [
        {
          "parameter": "string",
          "description": "A string to send to the provider."
        },
        {
          "parameter": "string_param[0 -9]",
          "description": "The parameter to send (a string)."
        },
        {
          "parameter": "value[0 - 9]",
          "description": "The value of the parameter (a real number)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar num, time; ini_open(\"Options.ini\");\n     num = ini_read_real(\"Data\", \"Plays\", 0); num += 1; time = current_time; analytics_event_ext(GAME_NAME, \"Plays\", num, \"Time\", time); ini_write_real(\"Data\", \"Plays\",\n    num); ini_close();\n  \n```\nThe above code will get play information from an ini file as well as the current time and then send those details to the analytics provider.\n",
      "description": "This function will send the specified text to the analytics provider that you have set up through the  [HTML5 Game Options](https://manual.yoyogames.com/Settings/Game_Options/HTML5.htm). This function can be used to create a custom analytic to track something\n    outside of the scope of the provider being used, and will also accept custom parameter/value pairs, where the parameter is a string and the value a real number. For Google Analytics, you can only add in one extra pair while Flurry will accept up to\n    7.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/analytics_event_ext.htm"
    },
    "angle_difference": {
      "name": "angle_difference",
      "parameters": [
        {
          "parameter": "dest",
          "description": "The destination or target angle"
        },
        {
          "parameter": "src",
          "description": "The source angle"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _dir = point_direction(x, y, mouse_x, mouse_y);\n    var _diff = angle_difference(_dir, image_angle);\n    image_angle += _diff * 0.1;\n```\nThe above code will get the direction from the instance to the mouse cursor, then get the difference between that angle and the current `image_angle`, using this value to gradually rotate the instance towards the mouse.\n",
      "description": "This function will return the smallest difference between the two specified angles, where the difference is calculated from the source angle towards the destination angle. The returned value will be between -180 and 180 degrees (where a positive angle is anti-clockwise and a negative angle is clockwise).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/angle_difference.htm"
    },
    "animcurve_channel_evaluate": {
      "name": "animcurve_channel_evaluate",
      "parameters": [
        {
          "parameter": "channel_struct",
          "description": "The struct pointer for the channel to evaluate."
        },
        {
          "parameter": "posx",
          "description": "The position in time to check (from 0 to 1)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _channel = animcurve_get_channel(ac_AlphaCurve, 0); var _val = animcurve_channel_evaluate(_channel, sin(current_time/1000)); image_alpha = _val;\n```\nThe above code gets the channel struct for the animation curve asset \"ac_AlphaCurve\". It then uses the returned evaluation value to set the image alpha for the instance.\n",
      "description": "This function can be used to get the value at a specific point in time from a channel  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm). You supply the struct pointer for the channel (as returned by the function `animcurve_get_channel()`,\n    or as returned in the animation curve struct from the function `animcurve_get()`) and the \"x\" (time) position along the curve channel to evaluate. This position should be between 0 and\n    1, and the function will return the curve value at that position, or it will return 0 if the channel struct supplied is invalid.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_channel_evaluate.htm"
    },
    "animcurve_channel_new": {
      "name": "animcurve_channel_new",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmy_curve = animcurve_create(); my_curve.name = \"My_Curve\"; var _channels = array_create(1); _channels[0] = animcurve_channel_new(); _channels[0].name = \"alpha\"; _channels[0].type = animcurvetype_catmullrom;    _channels[0].iterations = 8; var _points = array_create(3); _points[0] = animcurve_point_new(); _points[0].posx = 0; _points[0].value = 0; _points[1] = animcurve_point_new(); _points[1].posx = 0.5; _points[1].value\n    = 1; _points[2] = animcurve_point_new(); _points[2].posx = 1; _points[2].value = 0; _channels[0].points = _points; my_curve.channels = _channels;\n```\nThe above code creates a new animation curve struct and stores it in the variable \"my_curve\". This struct is then populated with a name and a channel array. The channel array contains a single channel with three points.\n",
      "description": "This function can be used to create a new animation curve channel  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm). A channel struct has the following variables:",
      "returns": "Struct Reference",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_channel_new.htm"
    },
    "animcurve_create": {
      "name": "animcurve_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmy_curve = animcurve_create(); my_curve.name = \"My_Curve\"; var _channels = array_create(1); _channels[0] = animcurve_channel_new(); _channels[0].name = \"alpha\"; _channels[0].type = animcurvetype_catmullrom;    _channels[0].iterations = 8; var _points = array_create(3); _points[0] = animcurve_point_new(); _points[0].posx = 0; _points[0].value = 0; _points[1] = animcurve_point_new(); _points[1].posx = 0.5; _points[1].value\n    = 1; _points[2] = animcurve_point_new(); _points[2].posx = 1; _points[2].value = 0; _channels[0].points = _points; my_curve.channels = _channels;\n```\nThe above code creates a new animation curve struct and stores it in the variable \"my_curve\". This struct is then populated with a name and a channel array. The channel array contains a single channel with three points.\n",
      "description": "This function will create an empty animation curve  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm), ready for you to populate with channel data. The function will return a pointer to the struct and this is then used to add channels\n    and other data to the animation curve. You can also supply this to functions like `animcurve_get()` to later get the data from the curve.",
      "returns": "Struct Reference",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_create.htm"
    },
    "animcurve_destroy": {
      "name": "animcurve_destroy",
      "parameters": [
        {
          "parameter": "curve_struct",
          "description": "The pointer to the curve struct to destroy."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nanimcurve_destroy(my_curve);\n```\nThe above code will destroy the (previously created) animation curve struct indexed in the variable \"my_curve\".\n",
      "description": "This function can be used to destroy any animation curves that have been previously created with the function `animcurve_create()`. Calling this function will remove the animation curve from memory\n    and clean up any channels or points that it contains as well (these never need to be cleaned up manually). Note that you **cannot destroy any animation curves created in the asset browser**, only those created at runtime.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_destroy.htm"
    },
    "animcurve_get": {
      "name": "animcurve_get",
      "parameters": [
        {
          "parameter": "curve_id",
          "description": "The asset browser ID (index) of the animation curve to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _curve = animcurve_get(ac_ButtonTween);\n    var _channel = _curve.channels[0];\n    if _channel.type != animcurvetype_linear\n    {\n        _channel.type = animcurvetype_linear;\n    }\n```\nThe above code retrieves the animation curve struct for the curve asset \"ac_ButtonTween\", then checks the curve type for the first channel, and if it's not linear it sets it to linear.\n",
      "description": "This function will return a  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) containing all the data for the given animation curve. You supply the animation curve asset ID (as defined in the Asset Browser), and the function will return a struct with the following variables:",
      "returns": "Struct or -1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_get.htm"
    },
    "animcurve_get_channel": {
      "name": "animcurve_get_channel",
      "parameters": [
        {
          "parameter": "curve_struct_or_id",
          "description": "The ID or struct pointer of the animation curve to target"
        },
        {
          "parameter": "channel_name_or_index",
          "description": "The channel name (a string) or the channel index (an integer)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _channeldata = animcurve_get_channel(ac_ButtonTween, 0);\n    var _points = _channeldata.points;\n    for (var i = 0; i < array_length(_points); ++i;)\n    {\n        _points[i].value += 1;\n    }\n```\nThe above code retrieves the channel struct for channel 0 in the curve asset \"ac_ButtonTween\", then loops through the points on the channel curve and adds one to their value.\n",
      "description": "This function will return the  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) containing the channel data for the channel specified in an animation curve asset. You supply the animation curve ID or struct as well as the channel name or index, and the function will return a struct with the following format:",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_get_channel.htm"
    },
    "animcurve_get_channel_index": {
      "name": "animcurve_get_channel_index",
      "parameters": [
        {
          "parameter": "curve_struct_or_id",
          "description": "The ID or struct pointer of the animation curve to target"
        },
        {
          "parameter": "channel_name",
          "description": "The channel name (a string)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _channelindex = animcurve_get_channel_index(ac_ButtonTween, \"x_pos\")\n    var _channeldata = animcurve_get_channel(ac_ButtonTween, _channelindex);\n    var _points = _channeldata.points;\n    for (var i = 0; i < array_length(_points); ++i;)\n    {\n        _points[i].value += 1;\n    }\n```\nThe above code retrieves the channel struct for the channel named \"x_pos\" in the curve asset \"ac_ButtonTween\", then loops through the points on the channel curve and adds one to their value.\n",
      "description": "This function will return the index value for any given animation curve channel. You supply the animation curve ID or struct, where the curve ID is the name of the animation curve as it was defined in the Asset Browser, or the struct pointer as returned by the function  [animcurve_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_create.htm). You then supply the name of the channel, as a string, and the function will return the index value associated with that channel. Note that if the curve or channel does not exist then you will get an error.",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_get_channel_index.htm"
    },
    "animcurve_point_new": {
      "name": "animcurve_point_new",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmy_curve = animcurve_create(); my_curve.name = \"My_Curve\"; var _channels = array_create(1); _channels[0] = animcurve_channel_new(); _channels[0].name = \"alpha\"; _channels[0].type = animcurvetype_catmullrom;    _channels[0].iterations = 8; var _points = array_create(3); _points[0] = animcurve_point_new(); _points[0].posx = 0; _points[0].value = 0; _points[1] = animcurve_point_new(); _points[1].posx = 0.5; _points[1].value\n    = 1; _points[2] = animcurve_point_new(); _points[2].posx = 1; _points[2].value = 0; _channels[0].points = _points; my_curve.channels = _channels;\n```\nThe above code creates a new animation curve struct and stores it in the variable \"my_curve\". This struct is then populated with a name and a channel array. The channel array contains a single channel with three points.\n",
      "description": "This function can be used to create a new points  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) to be added to an animation curve channel. When created a points struct is empty and you need to set the following variables to generate the point\n    data:",
      "returns": "Struct Reference",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Animation_Curves/animcurve_point_new.htm"
    },
    "ansi_char": {
      "name": "ansi_char",
      "parameters": [
        {
          "parameter": "val",
          "description": "The raw byte value."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str1 = ansi_char($EF); var str2 = ansi_char($BB); var str3 = ansi_char($BF); file_text_write_string(global.saveFile, str1 + str2 + str3);\n```\nThe above code creates a string from raw byte data and writes it to a (previously opened) file.\n",
      "description": "This function returns a string containing the character with raw BYTE value set. This will not, *and should not*, be displayed, but it will save correctly to disk for use in encoding.",
      "returns": "String (Single character)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/ansi_char.htm"
    },
    "application_get_position": {
      "name": "application_get_position",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar a = application_get_position(); xx = a[0]; yy = a[1]; ww = a[2] - a[0]; hh = a[3] - a[1];\n```\nThe above code will get the position of the application surface, as well as the absolute width and height in relation to the display window, and store them in four variables for future use.\n",
      "description": "When you have \"maintain aspect ratio\" ticked in the Game Options for a target platform, GameMaker Studio 2 will automatically set the draw position for the application surface so that it is displayed correctly centered and scaled on\n    the given display. However if you are manipulating this surface and wish to draw it yourself, then this function gives you an easy way to find exactly *where* within the display or window that the surface was being drawn so that you can then\n    draw it there yourself, or align GUI images or post draw images to it.",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/application_get_position.htm"
    },
    "application_surface_draw_enable": {
      "name": "application_surface_draw_enable",
      "parameters": [
        {
          "parameter": "flag",
          "description": "The flag will be either `true` (enabled, the default value) or `false` (disabled)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\napplication_surface_draw_enable(false);\n```\nThe above code will switch off the automatic drawing of the application surface.\n",
      "description": "You can use this function to enable or disable the automatic drawing of the application surface. By default this is enabled, but in many cases you will want to take over when and how the surface is drawn (when using shaders for example), in which case\n    you would use this function to set it to false so that you can draw it yourself when and how you require. It's important to note that when you switch off automatic drawing and draw the application surface yourself, that you may see certain issues\n    with the alpha component of sprites and the surface itself. This is because GameMaker Studio 2 will draw the application surface *without alpha blending* when the automatic drawing is on. If you switch off automatic drawing then you need\n    to handle this yourself, using the following code (for example):",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface_draw_enable.htm"
    },
    "application_surface_enable": {
      "name": "application_surface_enable",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Set to enable (`true`) or disable (`false`) the application surface."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_space)\n    {\n        if application_surface_is_enabled()\n        {\n            application_surface_enable(false);\n        }\n        else\n        {\n            application_surface_enable(true);\n        }\n    }\n```\nThe above code check for a key press and the toggle the application surface on or off depending on its state (like in an options menu).\n",
      "description": "With this function you can enable or disable the application surface. By default the application surface is enabled and all drawing for the Draw events will be done to that and the surface drawn to the screen. However on some older devices and specific chipsets this may result in poorer performance. In those cases you can switch off drawing to the application surface and all Draw event drawing will then be done directly to the screen buffer.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface_enable.htm"
    },
    "application_surface_is_enabled": {
      "name": "application_surface_is_enabled",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_space)\n    {\n        if application_surface_is_enabled()\n        {\n            application_surface_enable(false);\n        }\n        else\n        {\n            application_surface_enable(true);\n        }\n    }\n```\nThe above code check for a key press and the toggle the application surface on or off depending on its state (like in an options menu).\n",
      "description": "This function will return `true` if the application surface is being used for drawing, or `false` if the screen buffer is being used.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface_is_enabled.htm"
    },
    "arccos": {
      "name": "arccos",
      "parameters": [
        {
          "parameter": "x",
          "description": "The angle (in radians) to return the inverse cosine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = arccos(0);\n```\nThis will set val to pi/2.\n",
      "description": "Returns the inverse cosine of x, in that if cos(val)=n, arccos(n)=val, and the resulting number will be between pi and 0.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arccos.htm"
    },
    "arcsin": {
      "name": "arcsin",
      "parameters": [
        {
          "parameter": "x",
          "description": "The value to return the inverse sine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = arcsin(0);\n```\nThis will set val to 0.\n",
      "description": "Returns the inverse sine of x, in that if sin(x)=n, arcsin(n)=x, and the resulting number will be between -pi/2 and pi/2.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arcsin.htm"
    },
    "arctan": {
      "name": "arctan",
      "parameters": [
        {
          "parameter": "x",
          "description": "The angle (in radians) to return the inverse tangent of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = arctan( 0 );\n```\nThis will set val to 0.\n",
      "description": "Returns the inverse tangent of x. This will accept any number as, unlike  [tan()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/tan.htm), arctan() asymptotes are on the y axis so it just means you'll never get returned a number\n    greater than pi/2 or less than -pi/2.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arctan.htm"
    },
    "arctan2": {
      "name": "arctan2",
      "parameters": [
        {
          "parameter": "y",
          "description": "The y coordinate to calculate."
        },
        {
          "parameter": "x",
          "description": "The x coordinate to calculate."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nval = arctan2(1, 1);\n```\nThis will set val to the correct angle, in this case 0.79.\n",
      "description": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike  [arctan()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arctan.htm)    the function arctan2(y, x) is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/arctan2.htm"
    },
    "array_copy": {
      "name": "array_copy",
      "parameters": [
        {
          "parameter": "dest",
          "description": "The ID of the array to copy to."
        },
        {
          "parameter": "dest_index",
          "description": "The index within the array to copy to."
        },
        {
          "parameter": "src",
          "description": "The ID of the array to copy from."
        },
        {
          "parameter": "src_index",
          "description": "The index with the array to start copying from."
        },
        {
          "parameter": "length",
          "description": "The length (number of array indices) to copy."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif !array_equals(inventory_array, item_array)\n    {\n        var len = array_length(inventory_array);\n        array_copy(item_array, 0, inventory_array, 0, len);\n    }\n```\nThe above code will check two arrays to see if they hold equivalent values, and if they do not then the code will copy the entire contents of the array \"inventory_array\" into the array \"item_array\".\n",
      "description": "With this function you can copy all or part of an array into another array at any position. You need to supply both the source and the destination arrays (both need to have been created previously), as well as a position within the source array to copy from and a position within the destination array to copy to. Finally you need to specify the length of the array (or the length of the part that you want) to copy. If the data being copied exceeds the length of the destination array, the array will be extended to accept the data.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_copy.htm"
    },
    "array_create": {
      "name": "array_create",
      "parameters": [
        {
          "parameter": "size",
          "description": "The size of the array to create."
        },
        {
          "parameter": "value",
          "description": "The value to use to initialise all array indices (optional)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninstance_array = array_create(100, noone);\n```\nThe above code will create a new array of 100 entries, each one set to the keyword `noone`, and then assign it to the variable \"instance_array\".\n",
      "description": "With this function you can create a 1D array of a given size. You tell the function the length of the array to create, and it will return the \"handle\" for the array which you can then assign to a variable. Arrays created in this way will have\n    each entry initialised to 0 unless you specify an (optional) initialisation value. If you do supply the extra value for initialising the array, then all indices within the new array will be set to that instead of 0, but note that the function will\n    have a greater performance overhead in this case.",
      "returns": "Array Reference",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"
    },
    "array_delete": {
      "name": "array_delete",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        },
        {
          "parameter": "index",
          "description": "The index (position) in the array to delete the value(s) from."
        },
        {
          "parameter": "number",
          "description": "The number of values to delete."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\narray_delete(score_array, 0, 10);\n```\nThe above code will delete the first 10 values in the given array starting at index 0 (so indices 0 to 9 will be removed from the array).\n",
      "description": "With this function you can delete a value (or values) from an array at any given position. The function requires you to provide a variable that holds the array, the index (position) in the array to delete from, as well as the number of values to delete.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_delete.htm"
    },
    "array_equals": {
      "name": "array_equals",
      "parameters": [
        {
          "parameter": "var1",
          "description": "The index of the first array."
        },
        {
          "parameter": "var2",
          "description": "The index of the second array."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !array_equals(inventory_array, item_array)\n    {\n        var len = array_length(inventory_array);\n        array_copy(item_array, 0, inventory_array, 0, len);\n    }\n```\nThe above code will check two arrays to see if they hold equivalent values, and if they do not then the code will copy the entire contents of the array \"inventory_array\" to the array \"item_array\".\n",
      "description": "With this function you can check to see if two arrays are equal (equivalent or the same). You give the two arrays to check, and the function will return `true` if they are equal (either equivalent or the same) or `false` if they are not. Note that this is *not* the same as checking if two arrays are the same using ==, which will not check to see if the two arrays hold equivalent values, but only to see if the arrays are referencing the same initial array. For example:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_equals.htm"
    },
    "array_get": {
      "name": "array_get",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        },
        {
          "parameter": "index",
          "description": "The index of the array to get the value from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < 10; ++i;)\n    {\n        show_debug_message(array_get(my_array, i));\n    }\n```\nThe above code will output the first 10 items of the given to the console.\n",
      "description": "With this function you can retrieve the value from an index in an array. The function requires you to provide a variable that holds the array and the index to get the value from within that array. Note that if the array index given is out of bounds then the game will crash with an error. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to get when you supply the array index, following this pattern:",
      "returns": "Any valid data type that an array can hold.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_get.htm"
    },
    "array_insert": {
      "name": "array_insert",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        },
        {
          "parameter": "index",
          "description": "The index (position) in the array to insert the value(s) "
        },
        {
          "parameter": "value",
          "description": "The value to insert"
        },
        {
          "parameter": "[value], [value], [etc...]",
          "description": "(Optional) Further values to insert into the array"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\narray_insert(score_array, score_rank, current_score);\n```\nThe above code will insert the current score into the score array, at the index defined by the `score_rank` variable.\n",
      "description": "With this function you can insert a value (or values) into an array at any given position. The function requires you to provide a variable that holds the array, the index (position) in the array to insert at, as well as at least *one* value to\n    insert, although you can optionally provide further arguments and they will all be inserted into the array in consecutive order from the given index.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_insert.htm"
    },
    "array_length": {
      "name": "array_length",
      "parameters": [
        {
          "parameter": "array_index",
          "description": "The index of the array to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < array_length(a); ++i)\n    {\n        a[i] = -1;\n    }\n```\nThe above code will loop through an array and set each entry to -1.\n",
      "description": "With this function you can get the length (number of entries) of an array dimension. You supply the array index value and the function will return an integer value representing the number of entries the array contains. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to get the length of when you supply the array index, following this pattern:",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_length.htm"
    },
    "array_pop": {
      "name": "array_pop",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _lastscore = array_pop(score_array); draw_text(32, 32, \"Last Score = \" + string(_lastscore));\n```\nThe above code will pop the last value from the given array then draw it along with some text to the screen.\n",
      "description": "With this function you can retrieve a value from the end of an array without having to know the length of the array. You supply the variable that holds the array, and the function will return the contents of last entry in the array. If the array is\n    empty, the function will return undefined.",
      "returns": "Value (any data type) or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_pop.htm"
    },
    "array_push": {
      "name": "array_push",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        },
        {
          "parameter": "value",
          "description": "The value to push onto the end of the array"
        },
        {
          "parameter": "[value], [value], [etc...]",
          "description": "OPTIONAL! Further values to be pushed onto the array"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\narray_push(score_array, obj_Player1.scr, obj_Player2.scr, obj_Player3.scr, obj_Player4.scr);\n```\nThe above code will push four values onto the end of the given array.\n",
      "description": "With this function you can push a value (or values) onto the end of an array without having to know the length of the array. The function requires you to provide a variable that holds the array as well as at least *one* value to push, although\n    you can optionally provide further arguments and they will all be pushed onto the array in consecutive order.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_push.htm"
    },
    "array_resize": {
      "name": "array_resize",
      "parameters": [
        {
          "parameter": "array_index",
          "description": "The index of the array to resize."
        },
        {
          "parameter": "new_size",
          "description": "The new size for the array (an integer, starting from 0)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif array_length(a) > 10\n    {\n        array_resize(a, 10);\n    }\n```\nThe above code checks the length of an array and if it has more than 10 indices, it is resized.\n",
      "description": "With this function you can resize an existing array dimension to a new size. You supply the array to be resized as well as the new number of indices for the array, and the function will resize that array. Note that this function is designed for resizing an array *down* to a smaller length as you can resize up by simply setting a new index in the array. That said, if you do use it to size up an array, any new indices will be set to the default value of 0.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_resize.htm"
    },
    "array_set": {
      "name": "array_set",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        },
        {
          "parameter": "index",
          "description": "The index of the array to set the value for."
        },
        {
          "parameter": "value",
          "description": "The value to set."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < 10; ++i;)\n    {\n        array_set(score_array, i, i*100));\n    }\n```\nThe above code will set the first 10 items in the given array to a value.\n",
      "description": "With this function you can set the value of an index in an array to a value. The function requires you to provide a variable that holds the array as well as the index to set and the value to set it to. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to set when you supply the array index, following this pattern:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_set.htm"
    },
    "array_sort": {
      "name": "array_sort",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable that holds the array."
        },
        {
          "parameter": "sorttype_or_function ",
          "description": "The sort type (true for ascending or false for descending) or a function reference to use for sorting."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _a = [10, 9, 8, 7, 6, 5];\n    \n    array_sort(_a, function(elm1, elm2)\n        {\n            return elm1 - elm2;\n        });\n  \n```\nThe above code uses a custom sorting function to sort the array in an ascending order. The sorting function takes the two array elements as `elm1` and `elm2` and performs a subtraction on them. If `elm1` is greater than `elm2`, the subtraction results in a positive number which pushes `elm1` to be after `elm2`, hence putting them in an ascending order.\nHere is an extended example:\n```\nvar _xx, _yy, _a;\n    \n    for (var i = 0; i < 10; i++)\n    {\n        _xx = irandom(room_width);\n        _yy = irandom(room_height);\n        _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet);\n    }\n    \n    show_debug_message(_a);\n    \n    var _f = function(inst1, inst2)\n    {\n        return inst1.x - inst2.x;\n    }\n    \n    array_sort(_a, _f);\n    show_debug_message(_a);\n  \n```\nThe above code will create an array of 10 instances placed at random positions within the room. The debug message will show something like the following:\n```\n[ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]\n```\nThe code then creates a method to be used in the array_sort() function that returns the difference between each of the X positions of the instances in the room. Then the array_sort() function is run using that method, sorting the instances by X from lowest to highest. The output for the array would then look something like this:\n```\n[ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]\n```\n",
      "description": "With this function you can sort an array in ascending order or descending order or using a custom function to define the sort order. The function requires you to provide the array to sort, and then either of the following:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/array_sort.htm"
    },
    "asset_add_tags": {
      "name": "asset_add_tags",
      "parameters": [
        {
          "parameter": "name_or_index",
          "description": "The name of the asset (a string) or its index value (an integer)."
        },
        {
          "parameter": "tags",
          "description": "A single asset tag string or an array with various asset tags."
        },
        {
          "parameter": "[asset_type]",
          "description": "OPTIONAL! The type of asset to set the tags on, only used when supplying an index for the first argument."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _a = array_create(3); _a[0] = \"enemy\"; _a[1] = \"all_levels\"; _a[2] = \"boss\"; asset_add_tags(obj_Enemy_Boss_Parent, _a, asset_object);\n```\nThe above code will create an array of tags and then add them to the given object.\n",
      "description": "With this function you can add one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string.\n    If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed\n    in the table below:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_add_tags.htm"
    },
    "asset_clear_tags": {
      "name": "asset_clear_tags",
      "parameters": [
        {
          "parameter": "name_or_index",
          "description": "The name of the asset (a string) or its index value (an integer)."
        },
        {
          "parameter": "[asset_type]",
          "description": "OPTIONAL! The type of asset to clear the tags from, only used when supplying an index for the first argument."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nasset_clear_tags(obj_Enemy_Parent, asset_object);\n```\nThe above code will clear all tags from the given object asset.\n",
      "description": "With this function you can clear all the tags present on any asset from the asset browser. You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type\n    argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_clear_tags.htm"
    },
    "asset_get_index": {
      "name": "asset_get_index",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name of the game asset to get the index of (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar obj = asset_get_index(\"obj_Enemy_\" + string(global.Level));\n    if obj > -1\n    {\n        instance_create_layer(random(room_width), random(room_height), obj, \"Enemy_Layer\");\n    }\n```\nThe above code will get an object index from a string, and if that index exists, create an instance of the object in the game.\n",
      "description": "You can use this function to get the unique identifying index for a game asset from its name. If the asset is not found, the function will return a value of -1, otherwise it will return the unique index id for the asset being checked. This id can then be used in other functions as you would any other index value, like the `sprite_index` or the `path_index`, for example. Please note that although this function can be used to reference assets from strings (see example below) you should always make sure that the asset exists before using it otherwise you may get errors that will crash your game.",
      "returns": "Asset Index (Integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_index.htm"
    },
    "asset_get_tags": {
      "name": "asset_get_tags",
      "parameters": [
        {
          "parameter": "name_or_index",
          "description": "The name of the asset (a string) or its index value (an integer)."
        },
        {
          "parameter": "[asset_type]",
          "description": "OPTIONAL! The type of asset to get the tags for, only used when supplying an index for the first argument."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmy_tags = asset_get_tags(object_get_name(object_index));\n```\nThe above code will retrieve all the tags assigned to the object that the instance running the code has been created from.\n",
      "description": "With this function you can retrieve all the tags assigned to an asset from the Asset Browser. You supply either the asset name (as a string) or it's asset index, and the function will return an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm)    of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument\n    (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_tags.htm"
    },
    "asset_get_type": {
      "name": "asset_get_type",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name of the game asset to get the type of (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif asset_get_type(\"pth_Path_\" + string(global.Game)) == asset_unknown\n    {\n        show_debug_message(\"Path doesn't exist!!!\");\n    }\n    else\n    {\n        path_index = asset_get_index(\"pth_Path_\" + string(global.Game));\n    }\n```\nThe above code checks a dynamically created asset name to see if the asset is of the correct type. If it is not, then a debug message will be shown, otherwise the asset name is used to assign the asset to the instance.\n",
      "description": "With this function you can get the type of asset being referenced from its name (a string). One of the **constants** listed below will be returned.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm"
    },
    "asset_has_tags": {
      "name": "asset_has_tags",
      "parameters": [
        {
          "parameter": "name_or_index",
          "description": "The name of the asset (a string) or its index value (an integer)."
        },
        {
          "parameter": "tags",
          "description": "A single asset tag string or an array with various asset tags."
        },
        {
          "parameter": "[asset_type]",
          "description": "OPTIONAL! The type of asset to check the tags for, only used when supplying an index for the first argument."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _a = array_create(3);\n    _a[0] = \"enemy\";\n    _a[1] = \"level_\" + string(global.Level);\n    _a[2] = \"boss\";\n    if asset_has_tags(object_index, _a, asset_object)\n    {\n        instance_create_layer(0, 0, \"Overlay\", obj_Boss_Text);\n    }\n```\nThe above code will create an array of tags and then check to see if all of them are applied to the given object, and if they are it will create an instance of another object.\n",
      "description": "With this function you can check to see if one or more tag strings is assigned to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed in the table below:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_has_tags.htm"
    },
    "asset_remove_tags": {
      "name": "asset_remove_tags",
      "parameters": [
        {
          "parameter": "name_or_index",
          "description": "The name of the asset (a string) or its index value (an integer)."
        },
        {
          "parameter": "tags",
          "description": "A single asset tag string or an array with various asset tags."
        },
        {
          "parameter": "[asset_type]",
          "description": "OPTIONAL! The type of asset to remove the tags from, only used when supplying an index for the first argument."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _a = array_create(3); _a[0] = \"enemy\"; _a[1] = \"all_levels\"; _a[2] = \"boss\"; asset_remove_tags(obj_Enemy_Boss_Parent, _a, asset_object);\n```\nThe above code will create an array of tags and then remove them from the given object.\n",
      "description": "With this function you can remove one or more tag strings to any asset from the asset browser. You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string.\n    If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name. The available asset types are listed\n    in the table below:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_remove_tags.htm"
    },
    "audio_channel_num": {
      "name": "audio_channel_num",
      "parameters": [
        {
          "parameter": "num",
          "description": "Number of available audio channels (default is 128)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nswitch (os_browser)\n    {\n        case browser_not_a_browser:\n            switch (os_type)\n            {\n                case os_windows:\n                case os_macos:\n                    audio_channel_num(200);\n                break;\n    \n                default:\n                    audio_channel_num(64);\n                break;\n            }\n        break;\n    \n        default:\n            audio_channel_num(16);\n        break;\n    }\n  \n```\nThe above code checks the platform that the game is running on and changes the number of available sound channels to increase performance.\n",
      "description": "With this function you can set how many audio channels are available for playing audio in GameMaker Studio 2. What this basically means is that you give the number of simultaneous sounds that can be played at any one time, and if the number exceeds the amount, those sounds with a lower *priority* are stopped to free up a channel for the sounds with a higher *priority*. You can use this function to optimise your game for devices as the lower the number of channels for audio the better the performance, but bear in mind that this may also cause noticeable cut off of certain sounds if many are played at once.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_channel_num.htm"
    },
    "audio_create_buffer_sound": {
      "name": "audio_create_buffer_sound",
      "parameters": [
        {
          "parameter": "bufferId",
          "description": "The ID of the buffer to use."
        },
        {
          "parameter": "bufferFormat",
          "description": "The format of the data in the buffer (`buffer_u8` or `buffer_s16`)."
        },
        {
          "parameter": "bufferRate",
          "description": "The sample rate of the data in the buffer."
        },
        {
          "parameter": "bufferOffset",
          "description": "The offset into the buffer to read the sample data from (in bytes)."
        },
        {
          "parameter": "bufferLength",
          "description": "The length of the buffer (the number of bytes of audio data, excluding the header)."
        },
        {
          "parameter": "bufferChannels",
          "description": "The channels to use from one of the constants listed below."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nvar rate = 44100;\n    var hertz = irandom_range(220, 880);\n    var samples = 44100;\n    \n    var bufferId = buffer_create(rate, buffer_fast, 1);\n    buffer_seek(bufferId, buffer_seek_start, 0);\n    \n    var num_to_write = rate / hertz;\n    var length = buffer_get_size(bufferId);\n    var val_to_write = 1;\n    \n    for (var i = 0; i < (samples / num_to_write) + 1; i++)\n    {\n        for (var j = 0; j < num_to_write; j++)\n        {\n            buffer_write(bufferId, buffer_u8, val_to_write * 255);\n        }\n        val_to_write = (1 - val_to_write);\n    }\n    \n    soundId = audio_create_buffer_sound(bufferId, buffer_u8, rate, 0, length, audio_stereo);\n  \n```\nThe above creates a buffer and then procedurally fills it with data. This data is then used to create a new sound, which is stored in the variable \"soundId\".\n",
      "description": "With this function you can create a new sound from the contents of a buffer. The buffer will have been created previously (see the  [buffer functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm) for details on how to do this), and have had data added or loaded into it. You then pass it to this function with the data format (only `buffer_u8` or `buffer_s16` are currently supported), the sample rate (which can be between 1000hz and 48000hz), and an offset into the buffer to get the data from. You also need to supply the number of samples in the buffer and the channels that the sound requires. These channels are defined by one of the following constants:",
      "returns": "Integer (Sound ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_buffer_sound.htm"
    },
    "audio_create_play_queue": {
      "name": "audio_create_play_queue",
      "parameters": [
        {
          "parameter": "queueFormat",
          "description": "The format of the buffer data to use (`buffer_u8` or `buffer_s16`)."
        },
        {
          "parameter": "queueRate",
          "description": "The sample rate of the data in the buffer queue."
        },
        {
          "parameter": "queueChannels",
          "description": "The channels to use from one of the constants listed below."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\naudio_queue = audio_create_play_queue(buffer_s16, 11052, audio_mono);\n```\nThe above code creates a new audio queue and assigns its ID to a variable for future reference.\n",
      "description": "This function prepares a buffer queue for audio. You pass data format (only `buffer_u8` or `buffer_s16` are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from\n    one of the constants listed below:",
      "returns": "Real (Buffer ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm"
    },
    "audio_create_stream": {
      "name": "audio_create_stream",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The file (OGG only) to stream the audio from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsnd = audio_create_stream(\"Music/Track1.ogg\"); audio_play_sound(snd, 0, true);\n```\nThe above code creates a new sound index in the variable \"snd\" from the given file, then plays this sound.\n",
      "description": "With this function you can create a new sound index which can then be used in the regular audio functions to stream audio directly from an external OGG file source. The function requires the filename (which can be an included file, for example) and\n    will return the new sound index for use. Note that after you no longer need the sound you should call the function `audio_destroy_stream()` with the sound index to remove it from\n    memory otherwise you may get a memory leak which will slow down and eventually crash your game.",
      "returns": "Sound Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_create_stream.htm"
    },
    "audio_create_sync_group": {
      "name": "audio_create_sync_group",
      "parameters": [
        {
          "parameter": "loop",
          "description": "Whether the tracks in the group should loop (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsg = audio_create_sync_group(true); audio_play_in_sync_group(sg, sound1); audio_play_in_sync_group(sg, sound2); audio_sound_gain(sound2, 0, 0); audio_play_in_sync_group(sg, sound3); audio_sound_gain(sound3, 0, 0); audio_play_in_sync_group(sg,\n    sound4); audio_sound_gain(sound4, 0, 0); audio_start_sync_group(sg);\n  \n```\nThe above creates a new sync group and assigns the index of the group to the variable \"sg\". Four sounds are then added to the group, with the gain for three of them set to 0. Finally the sync group is played.\n",
      "description": "Creates a sync group and returns a unique ID value for it which should then be used in all further audio function calls for this group. If you want the group to loop then pass in `true`, otherwise pass in `false`, but note that if you\n    want them to loop, *all the tracks added later need to be the same length*. Note that when you create a sync group, you will need to free the memory and sounds associated with it when not in use using the `audio_destroy_sync_group()`    function - for example, in the **Room End** or **Destroy** events.",
      "returns": "index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_create_sync_group.htm"
    },
    "audio_debug": {
      "name": "audio_debug",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable (set to `true`) or disable (`false`) audio debugging."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (debug_mode)\n    {\n        audio_debug(true);\n    }\n    else\n    {\n        audio_debug(false);\n    }\n```\nThe above code will switch on or off the audio debug overlay depending on whether the game is running in debug mode or not.\n",
      "description": "This function can be used to display debug information about the audio system, with `true` switching it on and `false` to switch it off. When you are debugging audio in this way, the overlay will show the following information:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_debug.htm"
    },
    "audio_destroy_stream": {
      "name": "audio_destroy_stream",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The file to stream the audio from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naudio_destroy_stream(snd);\n```\nThe above code removes the sound indexed in the variable \"snd\" from memory.\n",
      "description": "If you have previously created an audio stream from a file using the function `audio_create_stream()` and no longer need that sound, you can call this function to delete it from\n    memory. Any further calls to the sound index after it has been destroyed will give an error. It should be noted that this will free up the stream but on the target platform this may not show up in a memory manager. This is because GameMaker Studio 2 pools\n    memory resources to prevent memory allocation overhead, and so the memory will remain allocated until required for something else or re-used for a new stream.",
      "returns": "NA",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_destroy_stream.htm"
    },
    "audio_destroy_sync_group": {
      "name": "audio_destroy_sync_group",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to be destroyed."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naudio_destroy_sync_group(sg);\n```\nThe above code destroys the sync group indexed in the variable \"sg\", and would probably be used in the **destroy** or **Room End** events.\n",
      "description": "Audio sync groups need to be destroyed when not in use to free up the memory and sound resources associated with them using this function. It takes the group index as returned when the group was created using the function `audio_create_sync_group()`,\n    and frees all resources used by the group.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_destroy_sync_group.htm"
    },
    "audio_emitter_create": {
      "name": "audio_emitter_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ns_emit = audio_emitter_create();\n```\nThe above code creates a new audio emitter and assigns its index to the variable \"s_emit\".\n",
      "description": "This function creates a new audio emitter and returns the index for it. This index should be stored in a variable for all further functions that relate to this emitter, and then when it is no longer needed it should be removed from memory using the\n    function `audio_emitter_free()` to prevent memory leaks which may eventually crash your game.",
      "returns": "Integer (emitter ID) ",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_create.htm"
    },
    "audio_emitter_exists": {
      "name": "audio_emitter_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the emitter to check the existence of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_exists(s_emit)\n    {\n        audio_play_sound_on(s_emit, snd_Explode, false, 1);\n    }\n    else\n    {\n        s_emit = audio_emitter_create();\n        audio_play_sound_on(s_emit, snd_Explode, false, 1);\n    }\n```\nThe above code checks to see if an emitter exists, indexed in the (previously initialised) variable \"s_emit\". If it does then a sound is played through it, but if it does not, it is created and then the sound is played.\n",
      "description": "This function returns whether an audio emitter exists (`true`) or not (`false`). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent indices.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_exists.htm"
    },
    "audio_emitter_falloff": {
      "name": "audio_emitter_falloff",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to change."
        },
        {
          "parameter": "falloff_ref",
          "description": "The falloff reference relative to the listener (clamp)."
        },
        {
          "parameter": "falloff_max",
          "description": "The maximum falloff distance relative to the listener."
        },
        {
          "parameter": "falloff_factor",
          "description": "The falloff factor (default 1)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ns_emit = audio_emitter_create(); audio_emitter_position(s_emit, x, y, 0); audio_emitter_falloff(s_emit, 100, 300, 1);\n```\nThe above code creates an audio emitter and assigns its index to the variable \"s_emit\". This emitter is then placed at the position of the instance creating it and is given a fall-off distance of 300, meaning that when the emitter is further\n    than 300 pixels from the *listener* position it will be silent. Its falloff factor is the default 1 and the falloff reference is 100, so at 100 pixels from the listener the falloff will start.\n",
      "description": "With this function you can set the fall-off distance for an emitter. This is the distance from the *listener* the emitter has to be before the sound will have \"fallen off\" to a volume of 0. The default value\n    for this is 100, but beware of setting this to any value lower than 1 as that will make any sound played through this emitter inaudible to the *listener*, however any other value will cause the sound to fade away the further that\n    the emitter is from the *listener*.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_falloff.htm"
    },
    "audio_emitter_free": {
      "name": "audio_emitter_free",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to free."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif lives = 0\n    {\n        audio_emitter_free(s_emit);\n        room_goto(rm_Menu);\n    }\n```\nThe above code checks the value of the global variable \"lives\" and if it returns 0, it will destroy the emitter indexed in the variable \"s_emit\" and then go to the room indexed in the variable \"rm_Menu\".\n",
      "description": "With this function you can remove the given emitter from memory. This should always be done whenever the emitter is not going to be used further in the room or the game, ie: in the  [Destroy Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Object_Events.htm) of the instance or in the  [Room End Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Other_Events.htm), otherwise you may end up with a memory leak that will slow down and eventually crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_free.htm"
    },
    "audio_emitter_gain": {
      "name": "audio_emitter_gain",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to change."
        },
        {
          "parameter": "gain",
          "description": "The maximum gain (default 1)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif up\n    {\n        gain += 0.05;\n        if gain >= 1 up = false;\n    }\n    else\n    {\n        gain += 0.05;\n        if gain <= 0 up = true;\n    }\n    \n    audio_emitter_gain(s_emit, gain);\n  \n```\nThe above code sets the variable \"gain\" to different values and then uses that same variable to set the gain of the emitter indexed in the variable \"s_emit\".\n",
      "description": "This function sets the maximum gain (volume) for the sound. The perceived volume for a sound can change depending on the  [fall-off value](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_falloff.htm) and the position it has relative to the *listener*, but by setting the gain with this function, the full volume will never exceed the specified gain value. The image below illustrates how gain affects the volume of the emitter when fall-off is greater than 0:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_gain.htm"
    },
    "audio_emitter_get_gain": {
      "name": "audio_emitter_get_gain",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_gain(emitter_player) < 1\n    {\n        audio_emitter_gain(emitter_player, 1);\n    }\n```\nThe above code checks the current gain of a given emitter and if it is less than 1 it is set to 1.\n",
      "description": "This function returns the current gain (volume) set for the given audio emitter, normally between 0 and 1, where 0 is silent and 1 is full volume. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_gain.htm"
    },
    "audio_emitter_get_listener_mask": {
      "name": "audio_emitter_get_listener_mask",
      "parameters": [
        {
          "parameter": "emitterID",
          "description": "The unique ID of the emitter to get the mask of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ns_emit = audio_emitter_create();\n    if audio_emitter_get_listener_mask(s_emit) != global.PlayerMask\n    {\n        audio_emitter_set_listener_mask(snd, global.PlayerMask);\n    }\n```\nThe above code creates an emitter then checks the listener mask data for it, and if it's not the same as that which is stored in a global variable, it sets the listener(s) to play from using the mask data stored in the global variable.\n",
      "description": "This function will return the bit-mask data that defines which audio listeners an emitter should play sounds from. For more information see the section on  [Audio Listeners](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/Audio_Listeners.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_listener_mask.htm"
    },
    "audio_emitter_get_pitch": {
      "name": "audio_emitter_get_pitch",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_pitch(emitter_player) != 1\n    {\n        audio_emitter_pitch(emitter_player, 1);\n    }\n```\nThe above code checks the current pitch of a given emitter and if it is not equal to 1 it is set to 1.\n",
      "description": "This function returns the current pitch value set for the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_pitch.htm"
    },
    "audio_emitter_get_vx": {
      "name": "audio_emitter_get_vx",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_vx(emitter_player) != 0\n    {\n        audio_emitter_velocity(emitter_player, 0, 0, 0);\n    }\n```\nThe above code checks the current x velocity of a given emitter and if it is not equal to 0, it is set to 0.\n",
      "description": "This function returns the current velocity along the x axis for the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_vx.htm"
    },
    "audio_emitter_get_vy": {
      "name": "audio_emitter_get_vy",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_vy(emitter_player) != 0\n    {\n        audio_emitter_velocity(emitter_player, 0, 0, 0);\n    }\n```\nThe above code checks the current y velocity of a given emitter and if it is not equal to 0, it is set to 0.\n",
      "description": "This function returns the current velocity along the y axis for the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_vy.htm"
    },
    "audio_emitter_get_vz": {
      "name": "audio_emitter_get_vz",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_vz(emitter_player) != 0\n    {\n        audio_emitter_velocity(emitter_player, 0, 0, 0);\n    }\n```\nThe above code checks the current z velocity of a given emitter and if it is not equal to 0, it is set to 0.\n",
      "description": "This function returns the current velocity along the z axis for the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_vz.htm"
    },
    "audio_emitter_get_x": {
      "name": "audio_emitter_get_x",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_x(emitter_player) != x\n    {\n        audio_emitter_position(emitter_player, x, y, 0);\n    }\n```\nThe above code checks the current x position of a given emitter and if it is not equal to the instance x position, it is set to the instance position.\n",
      "description": "This function returns the current x position of the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_x.htm"
    },
    "audio_emitter_get_y": {
      "name": "audio_emitter_get_y",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_y(emitter_player) != x\n    {\n        audio_emitter_position(emitter_player, x, y, 0);\n    }\n```\nThe above code checks the current y position of a given emitter and if it is not equal to the instance y position, it is set to the instance position.\n",
      "description": "This function returns the current y position of the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_y.htm"
    },
    "audio_emitter_get_z": {
      "name": "audio_emitter_get_z",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_emitter_get_z(emitter_player) != 0\n    {\n        var ex = audio_emitter_get_x(emitter_player);\n        var ey = audio_emitter_get_y(emitter_player);\n        audio_emitter_position(emitter_player, ex, ey, 0);\n    }\n```\nThe above code checks the current z position of a given emitter and if it is not equal to 0, it is set to 0.\n",
      "description": "This function returns the current z position of the given audio emitter.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_get_z.htm"
    },
    "audio_emitter_pitch": {
      "name": "audio_emitter_pitch",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to change."
        },
        {
          "parameter": "pitch",
          "description": "The pitch multiplier (default 1)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nswitch (gear)\n    {\n        case 1: audio_emitter_pitch(s_emit, 0.8); break;\n        case 2: audio_emitter_pitch(s_emit, 0.9); break;\n        case 3: audio_emitter_pitch(s_emit, 0.95); break;\n        case 4: audio_emitter_pitch(s_emit, 1); break;\n        case 5: audio_emitter_pitch(s_emit, 1.2); break;\n    }\n```\nThe above code will change the pitch of the audio played from the emitter indexed in the variable \"s_emit\" based on the value of the variable \"gear\".\n",
      "description": "This function can be used to change the pitch of all sounds emitted from the given emitter. It is a *pitch multiplier*, in that the input value multiplies the current pitch by that amount, so the default value of 1 is no pitch change, while a value of less than 1 will lower the pitch and greater than 1 will raise the pitch. It is best to use small increments for this function as any value under 0 or over 5 may not be audible anyway.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_pitch.htm"
    },
    "audio_emitter_position": {
      "name": "audio_emitter_position",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to change."
        },
        {
          "parameter": "x",
          "description": "The x position."
        },
        {
          "parameter": "y",
          "description": "The y position."
        },
        {
          "parameter": "z",
          "description": "The z position."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif speed > 0\n    {\n        audio_emitter_position(s_emit, x, y, 0);\n    }\n```\nThe above code checks to see if the instance speed is over 0 and if it is it updates the audio emitter indexed in the variable \"s_emit\" to the current x/y position.\n",
      "description": "With this function you can change the position of an audio emitter within the 3D audio space. The position will affect the sound in different ways depending on where the *listener* is positioned within the audio space too (default position is (0, 0, 0). See `audio_listener_position()` for more information), so for example if the emitter position is set to (100, 0, 0) and the current listener is at (200, 0, 0) the audio streamed from the emitter will appear to be on the left of the audio field. The image below shows a visual representation of emitters and their relative positions to the listener:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_position.htm"
    },
    "audio_emitter_set_listener_mask": {
      "name": "audio_emitter_set_listener_mask",
      "parameters": [
        {
          "parameter": "emitterID",
          "description": "The unique ID of the emitter to set the mask of"
        },
        {
          "parameter": "mask",
          "description": "The bitmask data to set for the sound"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ns_emit = audio_emitter_create(); audio_emitter_set_listener_mask(snd, global.PlayerMask);\n```\nThe above code creates an audio emitter and then sets the listener(s) to play from using the mask data stored in a global variable.\n",
      "description": "This function can be used to set the the bit-mask for an emitter so that all sounds played through the emitter will play only from those listeners specified. You can create a bit-mask by using the `audio_get_listener_info()` and\n    then using the bitwise `or` (\"|\") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the emitter. This mask will over-ride the default\n    mask or that which you may have set using the function `audio_set_listener_mask()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_set_listener_mask.htm"
    },
    "audio_emitter_velocity": {
      "name": "audio_emitter_velocity",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to change."
        },
        {
          "parameter": "vx",
          "description": "The x vector value (default 0)."
        },
        {
          "parameter": "vy",
          "description": "The y vector value (default 0)."
        },
        {
          "parameter": "vz",
          "description": "The z vector value (default 0)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ns_emit = audio_emitter_create(); audio_emitter_position(s_emit, room_width, 0, 0); audio_emitter_velocity(s_emit, -5, 0, 0);\n```\nThe above code creates an audio emitter and assigns its index to the variable \"s_emit\". This emitter is then placed at a position within the room and given a velocity of 5 pixels per step along the x axis (it will Doppler correctly in relation\n    to the listener as if it had a horizontal speed of 5 pixels per step).\n",
      "description": "This function can be used to give an emitter *Doppler *effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the emitter itself is not ever going to move you would normally not\n    need to set these values, but, for example, if you are making a scrolling shooter game where the enemies come from the right and scroll to the left, you would set this to have a velocity of (hspeed, 0, 0) in the create event of the enemies (and update\n    the emitter of each instance in the step event using `audio_emitter_position()`) to give any sounds emitted by the enemy instances the correct Doppler as they pass the player instance (which in turn\n    would be using the function `audio_listener_position()` to set the *listener* to the correct position).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_emitter_velocity.htm"
    },
    "audio_exists": {
      "name": "audio_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check the existence of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_exists(global.Music)\n    {\n        audio_play_sound(global.Music, 0, true);\n    }\n```\nThe above code checks to see if a sound exists. If it does it is set to play in a loop.\n",
      "description": "This function returns whether a sound exists (`true`) or not (`false`). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent asset indices. The sound to check can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_exists.htm"
    },
    "audio_falloff_set_model": {
      "name": "audio_falloff_set_model",
      "parameters": [
        {
          "parameter": "model",
          "description": "The **constant** used to set the falloff model."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naudio_falloff_set_model(audio_falloff_exponent_distance_clamped);\n    audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);\n```\nThe above code sets the falloff model and then plays the sound indexed in the variable \"snd_Waterfall\", which will be looped at its room position, with a fall-off reference of 100, a falloff distance of 300, a falloff factor of 1 and a low priority.\n",
      "description": "To add more versatility to the audio engine, GameMaker Studio 2 permits you to select the falloff model that suits your game. This model will be used for **all** the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function  [audio_play_sound_at()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_play_sound_at.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm"
    },
    "audio_free_buffer_sound": {
      "name": "audio_free_buffer_sound",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the buffered sound to free."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naudio_free_buffer_sound(soundID);\n```\nThe above code frees the buffered sound indexed in the variable \"soundID\".\n",
      "description": "With this function you can free up the pointer index value associated with the sound ID. Freed sounds will not be available for playing, and if multiple instances of the sound are being played they will all be stopped. Note that before you can delete\n    the buffer itself, you must first free all sound ID's associated with it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_buffer_sound.htm"
    },
    "audio_free_play_queue": {
      "name": "audio_free_play_queue",
      "parameters": [
        {
          "parameter": "queueIndex",
          "description": "The index of the queue to free."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar q_id = async_load[? \"queue_id\"];\n    if (q_id == audio_queue)\n    {\n        audio_free_play_queue(audio_queue);\n        buffer_delete(audio_buffer);\n    }\n```\nThe above code would go in the asynchronous  [Audio Playback](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Playback.htm) event and checks to see if the audio that has finished playing is from the \"audio_queue\" and if it is it frees the queue and the buffer associated with it.\n",
      "description": "This function is used to free up the memory associated with the given audio queue. The queue index is the value returned when you created the queue using the function `audio_create_play_queue()`, and this function should be called when the queue is no longer required to prevent memory leaks. Freeing the queue will stop any sound that is be playing, and you cannot delete the buffer that a sound is being streamed from until the queue it is assigned to has been freed. This function will trigger an  [Audio Playback Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Playback.htm), and in this event a special  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) will be created in the variable `async_load` with the following key/value pairs:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_play_queue.htm"
    },
    "audio_get_listener_count": {
      "name": "audio_get_listener_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.listener_num = audio_get_listener_count();\n```\nThe above code gets the number of available listeners and stores the return value in a global variable.\n",
      "description": "Certain target platforms permit more than one listener, so it is important that you know how many the target has before changing or using different listeners. This function will return the number of listeners available.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_count.htm"
    },
    "audio_get_listener_info": {
      "name": "audio_get_listener_info",
      "parameters": [
        {
          "parameter": "num",
          "description": "The listener number to get the data for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar num = audio_get_listener_count();\n    var mask = 0; for(var i = 0; i < num; ++i;)\n    {\n        var info = audio_get_listener_info(i);\n        var m = audio_listener_get_data(info[? \"mask\"]);\n        mask = mask | m;\n        ds_map_destroy(info);\n    }\n    audio_set_listener_mask(mask);\n```\nThe above code checks the number of listeners available then loops through them gets their mask bits, which are then combined to create a single bit mask which is applied to the global listener.\n",
      "description": "This function will create a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) and populate it with information for the given listener.",
      "returns": "ds_map",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_info.htm"
    },
    "audio_get_listener_mask": {
      "name": "audio_get_listener_mask",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar g_mask = audio_get_listener_mask();\n    if g_mask != global.Audio_Mask\n    {\n        var num = audio_get_listener_count();\n        global.Audio_Mask = 0;\n    \n        for(var i = 0; i < num; ++i;)\n        {\n            var info = audio_get_listener_info(i);\n            var m = audio_listener_get_data(info[? \"mask\"]);\n            global.Audio_Mask = global.Audio_Mask | m;\n            ds_map_destroy(info);\n        }\n        audio_set_listener_mask(mask);\n    }\n  \n```\nThe above code gets the current listener mask data and compares it to the data stored in a global variable. If they are not the same, the code checks the number of listeners available then loops through them and gets their mask bits, which are then combined to create a single mask which is applied to the audio system to define the global listeners.\n",
      "description": "This function will return the bit-mask data that defines the current default (global) mask for the audio listeners.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_mask.htm"
    },
    "audio_get_master_gain": {
      "name": "audio_get_master_gain",
      "parameters": [
        {
          "parameter": "listenerIndex",
          "description": "The index of the listener to get the gain of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar num = audio_get_listener_count();\n    for(var i = 0; i < num; ++i;)\n    {\n        var info = audio_get_listener_info(i);\n        var ind = info[? \"index\"];\n        if audio_get_master_gain(ind) != 1\n        {\n            audio_set_master_gain(info[? \"index\"], 1);\n        }\n        ds_map_destroy(info);\n    }\n```\nThe above code loops through the available listeners, checking to see if their gain is 1 or not, and if it is not it sets it to 1 for each of them.\n",
      "description": "With this function you can get the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function `audio_get_listener_info()` to get the different indices available for the target platform. The gain value returned is based on a linear scale from 0 (silent) to 1 (full volume). Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_get_master_gain.htm"
    },
    "audio_get_name": {
      "name": "audio_get_name",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar snd = audio_play_sound(choose(snd_One, snd_Two, snd_Three), 0, false); var name = audio_get_name(snd); show_debug_message(\"Sound = \" + name);\n```\nThe above code plays a random sound chosen from three different sound resources then shows a debug message with its name.\n",
      "description": "This function will return the name of a given audio resource as a string. The \"index\" value can be that of the resource itself (as seen in the Asset Browser) or the unique ID value that is given when you play the sound using, for example,\n    `audio_play_sound()`. Note that the string returned is *not* the same as the resource ID and cannot be used to access the resource itself, so should only be used for displaying or error checking.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_get_name.htm"
    },
    "audio_get_recorder_count": {
      "name": "audio_get_recorder_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif audio_get_recorder_count() > 0\n    {\n        channel_index = audio_start_recording(0);\n    }\n```\nThe above code checks the audio recorders available and if there are 1 or more, it starts recording from the first one indexed (source 0).\n",
      "description": "This function will return the number of audio recording sources (like microphones, etc...) currently available to your game. So, if you have a return value of, for example, four, then you will have audio input on the sources 0, 1, 2 and 3, with one of these values being that which you use to start recording from using the function `audio_start_recording()`. This value can change at any time as people plug/unplug microphones or other input sources to the device. Note that you can use the function `audio_get_recorder_info()` to get information on each device connected.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_get_recorder_count.htm"
    },
    "audio_get_recorder_info": {
      "name": "audio_get_recorder_info",
      "parameters": [
        {
          "parameter": "recorder_index",
          "description": "The index of the recorder source to get the information from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nlen = async_load[? \"data_len\"]; audio_buff = buffer_create(len, buffer_fast, 1); buffer_copy(async_load[? \"buffer_id\"], 0, len, buff, 0); audio_queue_sound(audio_queue, audio_buff, 0, len); audio_play_sound(audio_queue,\n    10, 0);\n```\nThe above code would be called in the asynchronous  [Audio Recording](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm) event and assigns some recorded data to a buffer, which is then added to an audio queue.\n    This is then played.\n",
      "description": "This function will return a  [DS Map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) with information about the given recorder source index. You can find out how many recorder sources are available using the function `audio_get_recorder_count()`,\n    and the map returned will contain the following key/value pairs:",
      "returns": "Integer (DS map ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_get_recorder_info.htm"
    },
    "audio_get_type": {
      "name": "audio_get_type",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntype = audio_get_type(snd_Music_1);\n```\nThe above code checks the type of audio indexed in the variable \"snd_Music_1\" and stores the returned value in the variable \"type\".\n",
      "description": "When adding audio to GameMaker Studio 2 it can be either *streamed* or *in memory*. If you need to know whether a given sound index is for streamed audio or not you can\n    use this function which will return 1 for streamed, 0 for sound in memory, and -1 if there is any error or the index does not point to a valid sound resource.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_get_type.htm"
    },
    "audio_group_is_loaded": {
      "name": "audio_group_is_loaded",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index of the audio group to check (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_group_is_loaded(audiogroup_level1)\n    {\n        audio_group_unload(audiogroup_level1);\n    }\n```\nThe above code checks to see if an audio group has been loaded and if it has it unloads it.\n",
      "description": "This function will check a specific audio group to see if it has been loaded into memory, ready for use.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_is_loaded.htm"
    },
    "audio_group_load": {
      "name": "audio_group_load",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index of the audio group to load (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !audio_group_is_loaded(audiogroup_level1)\n    {\n        audio_group_load(audiogroup_level1);\n    }\n```\nThe above code checks to see if an audio group has been loaded and if not, it loads it.\n",
      "description": "This function will load all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return `true` if loading is initiated and `false` if the group ID is invalid, or it has already been flagged for loading. The function is asynchronous so your game will continue to run while the audio is loaded in the background. This means that it will also trigger an  [Asynchronous Load/Save Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Save_Load.htm) to inform you that the whole group has been loaded into memory and the sounds can now be used.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_load.htm"
    },
    "audio_group_load_progress": {
      "name": "audio_group_load_progress",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index of the audio group to check (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif load\n    {\n        var pc = audio_group_load_progress(audiogroup_level1);\n        draw_text(32, 32, \"Loading: \" + string(pc));\n    }\n```\nThe above code checks a variable and if it returns `true` then some text will be drawn showing the progress of the audio being loaded.\n",
      "description": "This function will check the loading progress for an audio group and return an (approximate) value between 0 and 100.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_load_progress.htm"
    },
    "audio_group_name": {
      "name": "audio_group_name",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index value constant of the audio group to check (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar name = audio_group_name(audiogroup_level1);\n    draw_text(32, 32, \"Now Playing Group: \" + name);\n```\nThe above code retrieves the name of the given audio group constant and displays it on the screen.\n",
      "description": "This function will return a string containing the name of the given audio group for displaying or checking. When you define an audio group in the Game Options, you give it a unique \"name\" which is really a constant to use as an ID *v*alue for the group. All this function does is take the ID and return a string of the ID name you gave.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_name.htm"
    },
    "audio_group_set_gain": {
      "name": "audio_group_set_gain",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index of the audio group to stop (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        },
        {
          "parameter": "volume",
          "description": "The final value for the group volume."
        },
        {
          "parameter": "time",
          "description": "The length of the change in gain in milliseconds."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_space)\n    {\n        audio_group_set_gain(audiogroup1, 0, 5000);\n    }\n```\nThe above code checks for the \"space\" key and then fades all the audio for \"audiogroup1\" down to 0 over 5 seconds.\n",
      "description": "With this function you can fade a group of sounds in or out over a given length of time, or it can be used to set the group gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the group to have reached by the end of that time. This gain can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. To instantly change the gain, simply set the time argument to 0. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_set_gain.htm"
    },
    "audio_group_stop_all": {
      "name": "audio_group_stop_all",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index of the audio group to stop (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_space)\n    {\n        audio_group_stop_all(audiogroup_level1);\n    }\n```\nThe above code checks for the \"space\" key and then stops all the audio playing from the given group.\n",
      "description": "This function will stop all sounds from the given audio group that are currently playing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_stop_all.htm"
    },
    "audio_group_unload": {
      "name": "audio_group_unload",
      "parameters": [
        {
          "parameter": "groupID",
          "description": "The index of the audio group to unload (as defined in the  [Audio Groups Window](https://manual.yoyogames.com/Settings/Audio_Groups.htm))"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_group_is_loaded(audiogroup_level1)\n    {\n        audio_group_unload(audiogroup_level1);\n    }\n```\nThe above code checks to see if an audio group has been loaded and if it has it unloads it.\n",
      "description": "This function will unload all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return `true` if unloading is initiated and `false` if the group ID is invalid, or it has already been flagged for unloading. Note that any audio currently being played when this function is called will be stopped.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Groups/audio_group_unload.htm"
    },
    "audio_is_paused": {
      "name": "audio_is_paused",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_is_paused(snd_Waterfall)\n    {\n        audio_resume_sound(snd_Waterfall);\n    }\n```\nThe above code checks to see if the sound indexed in the variable \"snd_Waterfall\" is currently paused and if it returns `true` then the playing of the sound will be resumed.\n",
      "description": "This function will check the given sound to see if it is currently paused. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset, in which case *all* instances of the given sound will be checked and if any of them are paused the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_is_paused.htm"
    },
    "audio_is_playing": {
      "name": "audio_is_playing",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !audio_is_playing(snd_Waterfall)\n    {\n        audio_play_sound_at(snd_Waterfall, x, y, 0, 300, true, 1);\n    }\n```\nThe above code checks to see if the sound indexed in the variable \"snd_Waterfall\" is currently playing and if it returns `false` then the sound will be looped at its room position, with a fall-off distance of 300 and a low priority.\n",
      "description": "This function will check the given sound to see if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset, in which case *all* instances of the given sound will be checked and if any of them are playing the function will return `true` otherwise it will return `false`. Note that this function will still return `true` if the sound being checked has previously been paused using the `audio_pause_sound()` function.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_is_playing.htm"
    },
    "audio_listener_get_data": {
      "name": "audio_listener_get_data",
      "parameters": [
        {
          "parameter": "index",
          "description": "The listener to get the data for (default 0)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar num = audio_get_listener_count();\n    for(var i = 0; i < num; ++i;)\n    {\n        var info = audio_get_listener_info(i);\n        var data = audio_listener_get_data(info[? \"index\"]);\n        if data[? \"x\"] != 0\n        {\n            audio_listener_set_position(info[? \"index\"], 0, 0, 0);\n        }\n        ds_map_destroy(info);\n        ds_map_destroy(data);\n    }\n```\nThe above code checks the number of listeners available then loops through them and if their x position is not 0, it sets their position to 0, 0, 0.\n",
      "description": "This function will create a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) and populate it with the position, velocity and orientation values for the given listener. The default listener index is 0, but you can use the function `audio_get_listener_info()` to get the different indices available for the target platform. If you provide an incorrect listener index then the function will return -1.",
      "returns": "ds_map",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_get_data.htm"
    },
    "audio_listener_orientation": {
      "name": "audio_listener_orientation",
      "parameters": [
        {
          "parameter": "lookat_x",
          "description": "The x look vector (default 0)."
        },
        {
          "parameter": "lookat_y",
          "description": "The y look vector (default 0)."
        },
        {
          "parameter": "lookat_z",
          "description": "The z look vector (default 1000)."
        },
        {
          "parameter": "up_x",
          "description": "The x up vector (default 0)."
        },
        {
          "parameter": "up_y",
          "description": "The y up vector (default 1)."
        },
        {
          "parameter": "up_z",
          "description": "The z up vector (default 0)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nxt = x + dcos(direction); yt = y - dsin(direction); zt = z - dsin(zdirection); audio_listener_position(x, y, z) audio_listener_orientation(xt, yt, zt, 0, 0, 1)\n```\nThe above code use three variables to set the 3D audio listener position and orientation.\n",
      "description": "With this function you can change the orientation of the *listener* within the 3D audio space. The **look at** direction and **up** direction are based on the vectors\n    that are resolved from the given relative x, y and z positions, and default to (0, 0, 1000) for the look at direction and (0, 1, 0) for the up direction, as shown in the illustration below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_orientation.htm"
    },
    "audio_listener_position": {
      "name": "audio_listener_position",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position of the listener (default 0)."
        },
        {
          "parameter": "y",
          "description": "The y position of the listener (default 0)."
        },
        {
          "parameter": "z",
          "description": "The z position of the listener (default 0)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif speed > 0\n    {\n        audio_listener_position(x, y, 0);\n    }\n```\nThe above code checks to see if the player instance speed is over 0 and if it is it updates the audio listener to the current x/y position.\n",
      "description": "With this function you can change the position of the *listener* within the 3D audio space. The example image below shows the default position for the listener in the audio space:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_position.htm"
    },
    "audio_listener_set_orientation": {
      "name": "audio_listener_set_orientation",
      "parameters": [
        {
          "parameter": "index",
          "description": "The listener to set the orientation of."
        },
        {
          "parameter": "lookat_x",
          "description": "The x look vector (default 0)."
        },
        {
          "parameter": "lookat_y",
          "description": "The y look vector (default 0)."
        },
        {
          "parameter": "lookat_z",
          "description": "The z look vector (default -1)."
        },
        {
          "parameter": "up_x",
          "description": "The x up vector (default 0)."
        },
        {
          "parameter": "up_y",
          "description": "The y up vector (default 1)."
        },
        {
          "parameter": "up_z",
          "description": "The z up vector (default 0)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nvar _m = camera_get_view_mat(view_camera[0]); audio_listener_set_position(global.Player_Listener, _m[0], _m[1], _m[2]); audio_listener_set_orientation(info[? \"index\"], _m[3], _m[4], _m[5], _m[6], _m[7], _m[8]);\n```\nThe above code retrieves the view matrix for camera view [0] and then uses it to set the audio listener position and orientation for the listener with the ID stored in the global variable \"Player_Listener\".\n",
      "description": "With this function you can change the orientation of the given *listener* within the 3D audio space. The default listener index is 0, but you can use the function `audio_get_listener_info()` to\n    get the different indices available for the target platform.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_set_orientation.htm"
    },
    "audio_listener_set_position": {
      "name": "audio_listener_set_position",
      "parameters": [
        {
          "parameter": "index",
          "description": "The listener to set the position of (default 0)."
        },
        {
          "parameter": "x",
          "description": "The x position of the listener (default 0)."
        },
        {
          "parameter": "y",
          "description": "The y position of the listener (default 0)."
        },
        {
          "parameter": "z",
          "description": "The z position of the listener (default 0)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar _vmat = camera_get_view_mat(view_camera[0]);\n    audio_listener_set_position(global.Player_Listener, _vmat[0], _vmat[1], _vmat[2]);\n    audio_listener_set_orientation(info[? \"index\"], _vmat[3], _vmat[4], _vmat[5], _vmat[6], _vmat[7], _vmat[8]);\n```\nThe above code retrieves the view matrix for camera view [0] and then uses it to set the audio listener position and orientation for the listener with the ID stored in the global variable \"Player_Listener\".\n",
      "description": "With this function you can change the position of a given *listener* within the 3D audio space. The default listener index is 0, but you can use the function `audio_get_listener_info()` to get the different indices available for the target platform. The example image below shows the default position for the listener in the audio space:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_set_position.htm"
    },
    "audio_listener_set_velocity": {
      "name": "audio_listener_set_velocity",
      "parameters": [
        {
          "parameter": "index",
          "description": "The listener to change the velocity of (default 0)."
        },
        {
          "parameter": "x",
          "description": "The x velocity of the listener (default 0)."
        },
        {
          "parameter": "y",
          "description": "The y velocity of the listener (default 0)."
        },
        {
          "parameter": "z",
          "description": "The z velocity of the listener (default 0)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar num = audio_get_listener_count();\n    for(var i = 0; i < num; ++i;)\n    {\n        var info = audio_get_listener_info(i);\n        var data = audio_listener_get_data(info[? \"index\"]);\n        if data[? \"vx\"] != 0\n        {\n            audio_listener_set_velocity(info[? \"index\"], 0, 0, 0);\n        }\n        ds_map_destroy(info);\n        ds_map_destroy(data);\n    }\n```\nThe above code checks the number of listeners available then loops through them and if their x velocity is not 0, it sets their velocity values to 0, 0, 0.\n",
      "description": "This function can be used to give the given listener *Doppler *effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. The default listener index is 0, but you can use the function `audio_get_listener_info()` to get the different indices available for the target platform.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_set_velocity.htm"
    },
    "audio_listener_velocity": {
      "name": "audio_listener_velocity",
      "parameters": [
        {
          "parameter": "vx",
          "description": "The x velocity component of the listener (default 0)."
        },
        {
          "parameter": "vy",
          "description": "The y velocity component of the listener (default 0)."
        },
        {
          "parameter": "vz",
          "description": "The z velocity component of the listener (default 0)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif speed > 0\n    {\n        audio_listener_velocity(abs(hspeed), abs(vspeed), 0);\n    }\n```\nThe above code checks to see if the player instance speed is over 0 and if it is it then uses the appropriate absolute hspeed and vspeed components to set the listener velocity.\n",
      "description": "This function can be used to give the listener *Doppler *effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the listener itself is not ever going to move, or the movement is not a constant motion, you would normally not need to set these values, but, for example, if you are making a scrolling game where the player has a constant bottom to top movement and the enemies a constant top to bottom movement, you would set the listener *and* emitter velocities (for emitters you would use `audio_emitter_velocity()`) to the appropriate vectors to simulate the correct Doppler effect as they move past the player instance.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_listener_velocity.htm"
    },
    "audio_master_gain": {
      "name": "audio_master_gain",
      "parameters": [
        {
          "parameter": "gain",
          "description": "Value for the global volume (0 to 1)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_up)\n    {\n        if vol < 1 vol += 0.05;\n        audio_master_gain(vol);\n    }\n    if keyboard_check(vk_down)\n    {\n        if vol > 0 vol -= 0.05;\n        audio_master_gain(vol);\n    }\n```\nThe above code checks for key-presses of the up and down arrow keys, which then increase or decrease the variable \"vol\". This variable is then used to set the global gain of all sound and music in the game.\n",
      "description": "With this function you can set the absolute value for the global volume of all sounds and music. It is based on a linear scale from 0 (silent) to any value greater than 0, although normally you'd consider the maximum volume as 1. Anything over 1 can be used but, depending on the sound used and the platform being compiled to, you may get distortion or clipping when the sound is played back. This function will affect the relative volume of all sounds and music played from within your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_master_gain.htm"
    },
    "audio_pause_all": {
      "name": "audio_pause_all",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"P\"))\n    {\n        global.Pause = !global.Pause;\n        if global.Pause\n        {\n            audio_pause_all();\n        }\n        else\n        {\n            audio_resume_all();\n        }\n    }\n```\nThe above code checks for a press of the keyboard key \"P\" and if it detects one it sets the global variable \"Pause\" to `true` or false and then either pauses all sounds or restarts all previously paused sounds.\n",
      "description": "With this function you can pause all sounds that are currently playing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_pause_all.htm"
    },
    "audio_pause_sound": {
      "name": "audio_pause_sound",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to pause."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"P\"))\n    {\n        global.Pause = !global.Pause;\n        if global.Pause\n        {\n            audio_pause_sound(snd_Waterfall);\n        }\n        else\n        {\n            audio_resume_sound(snd_Waterfall);\n        }\n    }\n```\nThe above code checks for a press of the keyboard key \"P\" and if it detects one it sets the global variable \"Pause\" to `true` or false and then either pauses the sound indexed in the variable \"snd_Waterfall\" or it resumes the sound from its paused state.\n",
      "description": "With this function you can pause any sound that is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset, in which case *all* instances of the given sound will be paused.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_pause_sound.htm"
    },
    "audio_pause_sync_group": {
      "name": "audio_pause_sync_group",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to pause."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (keyboard_check_pressed((ord)\"P\"))\n    {\n        global.Pause = !global.Pause\n        if global.Pause\n        {\n            audio_pause_sync_group(sg);\n        }\n        else\n        {\n            audio_resume_sync_group(sg);\n        }\n    }\n```\nThe above code checks for a key press of the \"P\" key, and if one is detected it toggles the \"global.Pause\" variable then checks it to pause or resume the sync group indexed in the variable \"sg\".\n",
      "description": "his function will pause the given sync group if it is playing, with the group index being the value returned when you created the group using the function `audio_create_sync_group()`. This does not stop the sound, and calling `audio_resume_sync_group()`, will start it playing from the same position it was paused at again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_pause_sync_group.htm"
    },
    "audio_play_in_sync_group": {
      "name": "audio_play_in_sync_group",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to assign the sound to."
        },
        {
          "parameter": "sound_index",
          "description": "The sound index to be assigned to the group."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nsg = audio_create_sync_group(true); audio_play_in_sync_group(sg, sound1); audio_play_in_sync_group(sg, sound2); audio_play_in_sync_group(sg, sound3); audio_play_in_sync_group(sg, sound4); audio_start_sync_group(sg);\n  \n```\nThe above creates a new sync group and assigns the index of the group to the variable \"sg\". Four sounds are then added to the group, with the gain for three of them being set to 0. Finally the sync group is played.\n",
      "description": "With this function you can assign a sound to a previously create sync group. The group index is the value returned when you created the group using the function `audio_create_sync_group()`, and the sound\n    index is the index of any *compressed* sound (`*.ogg` or `*.mp3`) from the Asset Browser. This function only adds the sound to the group, but it does not play the sound, and will be a value > -1 if it succeeds and -1 if it fails,\n    where a successful value indicates the sounds order in the sync group (so 0 would be the first sound added, 1 would be the second, etc...).",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_play_in_sync_group.htm"
    },
    "audio_play_sound": {
      "name": "audio_play_sound",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to play."
        },
        {
          "parameter": "priority",
          "description": "Set the channel priority for the sound."
        },
        {
          "parameter": "loop",
          "description": "Sets the sound to loop or not."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif health <= 0\n    {\n        lives -= 1;\n        audio_play_sound(snd_PlayerDead, 10, false);\n    }\n```\nThe above code checks the \"health\" global variable and if it is less than or equal to 0, it will remove 1 from the \"lives\" global variable and play a sound.\n",
      "description": "With this function you can play any sound resource in your game. You provide the sound index and assign it a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function `audio_channel_num()`. Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as GameMaker Studio 2 will prioritize them the same). Note that when dealing with priority, the *higher* the number the *higher* the priority, such that a sound with priority 100 will be favoured over a sound with priority 1. The final argument is for making the sound loop and setting it to `true` will make the sound loop until it is stopped and setting it to `false` will play the sound once only.",
      "returns": "Index (sound ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_play_sound.htm"
    },
    "audio_play_sound_at": {
      "name": "audio_play_sound_at",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to play."
        },
        {
          "parameter": "x",
          "description": "The x position."
        },
        {
          "parameter": "y",
          "description": "The y position."
        },
        {
          "parameter": "z",
          "description": "The z position."
        },
        {
          "parameter": "falloff_ref",
          "description": "The falloff reference relative to the listener (clamp)."
        },
        {
          "parameter": "falloff_max",
          "description": "The maximum falloff distance relative to the listener."
        },
        {
          "parameter": "falloff_factor",
          "description": "The falloff factor (default 1)."
        },
        {
          "parameter": "loop",
          "description": "Flags the sound as looping or not."
        },
        {
          "parameter": "priority",
          "description": "Set the channel priority for the sound."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nif global.SFX\n    {\n        audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);\n    }\n```\nThe above code checks the global variable \"SFX\" and if it returns `true` then the sound indexed in the variable \"snd_Waterfall\" will be looped at its room position, with a fall-off reference of 100, a falloff distance of 300, a falloff factor of 1 and a low priority.\n",
      "description": "With this function you can play any sound resource at a given position within the audio space. You provide the sound index and then assign it a position within the 3D space. The default listener position is (0, 0, 0) so this means that if the listener has not been moved and you want the sound to come from the left (for example), you should set the x position to a negative value (for more information on setting the listener position see `audio_listener_position()`).",
      "returns": "Index (sound ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_play_sound_at.htm"
    },
    "audio_play_sound_on": {
      "name": "audio_play_sound_on",
      "parameters": [
        {
          "parameter": "emitter",
          "description": "The index of the emitter to use."
        },
        {
          "parameter": "sound",
          "description": "The index of the sound to use."
        },
        {
          "parameter": "loop",
          "description": "Flags the sound as looping or not."
        },
        {
          "parameter": "priority",
          "description": "Set the channel priority for the sound."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif global.SFX\n    {\n        audio_play_sound_on(s_emit, snd_Explode, false, 1);\n    }\n```\nThe above code checks the global variable \"SFX\" and if it returns `true` then the sound indexed in the variable \"snd_Explode\" will be played through the emitter indexed in the variable \"s_emit\" with a low priority and no looping.\n",
      "description": "With this function you can play any sound resource through an emitter, with any changes to the emitter gain, position, pitch or velocity affecting how the user hears the final sound being played. You provide the emitter index to use, the sound index of the sound to be played and then specify whether the sound is to loop or not. Finally you can assign a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function `audio_channel_num()`. Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as GameMaker Studio 2 will prioritize them the same). Note that when dealing with priority, the *higher* the number the *higher* the priority, such that a sound with priority 100 will be favoured over a sound with priority 1.",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Emitters/audio_play_sound_on.htm"
    },
    "audio_queue_sound": {
      "name": "audio_queue_sound",
      "parameters": [
        {
          "parameter": "queueIndex",
          "description": "The index of the queue to add to."
        },
        {
          "parameter": "bufferId",
          "description": "The buffer to add to the queue."
        },
        {
          "parameter": "bufferOffset",
          "description": "The offset within the source buffer to start from."
        },
        {
          "parameter": "bufferLength",
          "description": "The length of the buffer (the number of the bytes in the buffer)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nlen = async_load[? \"data_len\"]; audio_buff = buffer_create(len, buffer_fast, 1); buffer_copy(async_load[? \"buffer_id\"], 0, len, buff, 0); audio_queue_sound(audio_queue, audio_buff, 0, len); audio_play_sound(audio_queue,\n    10, 0);\n```\nThe above code would be called in the asynchronous  [Audio Recording](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm) event and assigns some recorded data to a buffer, which is\n    then added to an audio queue. This is then played.\n",
      "description": "This function will add the data from a buffer into the audio queue that you previously created using the function `audio_create_play_queue()`. You specify the queue index to add to, and the\n    buffer ID to get the data from as well as the position (offset) within the buffer and the number of bytes to add. Once you have added audio from a buffer to a queue, the buffer cannot be deleted until you have first freed the queue using the function \n    `audio_free_play_queue()`, and the buffer properties should match those of the the queue that you are adding the sound to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_queue_sound.htm"
    },
    "audio_resume_all": {
      "name": "audio_resume_all",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"P\"))\n    {\n        global.Pause = !global.Pause;\n        if global.Pause\n        {\n            audio_pause_all();\n        }\n        else\n        {\n            audio_resume_all();\n        }\n    }\n```\nThe above code checks for a press of the keyboard key \"P\" and if it detects one it sets the global variable \"Pause\" to `true` or false and then either pauses all sounds or restarts all previously paused sounds.\n",
      "description": "With this function you can resume all sounds that have been paused previously.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_resume_all.htm"
    },
    "audio_resume_sound": {
      "name": "audio_resume_sound",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to resume."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"P\"))\n    {\n        global.Pause = !global.Pause;\n        if global.Pause\n        {\n            audio_pause_sound(snd_Waterfall);\n        }\n        else\n        {\n            audio_resume_sound(snd_Waterfall);\n        }\n    }\n```\nThe above code checks for a press of the keyboard key \"P\" and if it detects one it sets the global variable \"Pause\" to `true` or false and then either pauses the sound indexed in the variable \"snd_Waterfall\" or it resumes the sound from its paused state.\n",
      "description": "With this function you can resume any sound that is currently paused (after using the function `audio_pause_sound()`). The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset, in which case *all* instances of the given sound will be re-started.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_resume_sound.htm"
    },
    "audio_resume_sync_group": {
      "name": "audio_resume_sync_group",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to resume."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (keyboard_check_pressed((ord)\"P\"))\n    {\n        global.Pause = !global.Pause\n        if global.Pause\n        {\n            audio_pause_sync_group(sg);\n        }\n        else\n        {\n            audio_resume_sync_group(sg);\n        }\n    }\n```\nThe above code checks for a key press of the \"P\" key, and if one is detected it toggles the \"global.Pause\" variable then checks it to pause or resume the sync group indexed in the variable \"sg\".\n",
      "description": "This function will resume the given sync group if it is playing and has previously been paused (using the function `audio_pause_sync_group`). The group index is the value returned when you created the group using the function `audio_create_sync_group()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_resume_sync_group.htm"
    },
    "audio_set_listener_mask": {
      "name": "audio_set_listener_mask",
      "parameters": [
        {
          "parameter": "mask",
          "description": "The bit-mask data to set for the listeners"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar num = audio_get_listener_count();\n    var mask = 0; for(var i = 0; i < num; ++i;)\n    {\n        var info = audio_get_listener_info(i);\n        var m = audio_listener_get_data(info[? \"mask\"]);\n        mask = mask | m;\n        ds_map_destroy(info);\n    }\n    audio_set_listener_mask(mask);\n```\nThe above code checks the number of listeners available then loops through them gets their mask bits, which are then combined to create a single bit mask which is applied to the global listener.\n",
      "description": "When using multiple listeners on a system, you can set the bit-mask for a sound and have it heard from the flagged listener only. However, you can also set the *global* mask using this function and all sounds played normally will be heard from the listeners flagged by this mask, without the need to set the mask for each sound individually.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_set_listener_mask.htm"
    },
    "audio_set_master_gain": {
      "name": "audio_set_master_gain",
      "parameters": [
        {
          "parameter": "listenerIndex",
          "description": "The index of the listener to set the gain on."
        },
        {
          "parameter": "gain",
          "description": "Value for the global volume (0 to 1)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar num = audio_get_listener_count();\n    for( var i = 0; i < num; i++;)\n    {\n        var info = audio_get_listener_info(i);\n        audio_set_master_gain(info[? \"index\"], 0.75);\n        ds_map_destroy(info);\n    }\n```\nThe above code loops through the available listeners and then sets their master gain to 0.75.\n",
      "description": "With this function you can set the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function  [audio_get_listener_info()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/audio_get_listener_info.htm) to get the different indices available for the target platform. The gain value is based on a linear scale from 0 (silent) to 1 (full volume) and will affect the relative volume of all sounds and music played from within your game through that listener.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_set_master_gain.htm"
    },
    "audio_sound_gain": {
      "name": "audio_sound_gain",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to set the gain for."
        },
        {
          "parameter": "volume",
          "description": "Value for the music volume."
        },
        {
          "parameter": "time",
          "description": "The length for the change in gain in milliseconds."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif val\n    {\n        var snd = audio_play_sound(snd_fountain);\n        audio_sound_gain(snd, 0, 0);\n        audio_sound_gain(snd, 1, 5000);\n    }\n```\nThe above code checks a variable and if it returns `true` it will then assign the index of a sound to be played to the local variable \"snd\". This variable is then used to reduce the volume of that specific sound to 0 and fade up to full volume over 5 seconds.\n",
      "description": "With this function you can fade a sound in or out over a given length of time, or it can be used to set the sound gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the sound to have reached by the end of that time. This gain can be between 0 (silent) and any value greater than 0, although normally you'd consider the maximum volume as 1. Anything over 1 can be used but, depending on the sound used and the platform being compiled to, you may get distortion or clipping when the sound is played back. Note that the gain scale is linear, and to instantly change the gain, simply set the time argument to 0.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_gain.htm"
    },
    "audio_sound_get_gain": {
      "name": "audio_sound_get_gain",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to get the gain of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_sound_get_gain(snd_Music) != 1\n    {\n        audio_sound_gain(snd_Music, 1, 0);\n    }\n```\nThe above code will change the gain of the audio played from the sound indexed as \"snd_Music\" if its gain is not equal to 1.\n",
      "description": "This function will return the current gain value for the given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions, or an actual sound asset from the Asset Browser. Gain is usually calculated as a value from 0 to 1, but on some platforms you can have a gain of greater than 1, although a value of 1 is considered \"full volume\" and anything greater may introduce audio clipping.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_gain.htm"
    },
    "audio_sound_get_listener_mask": {
      "name": "audio_sound_get_listener_mask",
      "parameters": [
        {
          "parameter": "soundID",
          "description": "The unique ID of the sound to get the mask of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar snd = audio_play_sound(snd_PlayerDead, 10, false);\n    if audio_sound_get_listener_mask(snd) != global.PlayerMask\n    {\n        audio_sound_set_listener_mask(snd, global.PlayerMask);\n    }\n```\nThe above code plays a sound then checks the listener mask data for the sound, and if it's not the same as that which is stored in a global variable, it sets the listener(s) to play from using the mask data stored in the global variable.\n",
      "description": "This function will return the bit-mask data that defines which audio listeners a sound should be played from. See the section on  [Audio Listeners](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Listeners/Audio_Listeners.htm) for more information.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_listener_mask.htm"
    },
    "audio_sound_get_pitch": {
      "name": "audio_sound_get_pitch",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to get the pitch of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_sound_get_pitch(snd_Explode) != 1\n    {\n        audio_sound_pitch(snd_Explode, 1);\n    }\n```\nThe above code will change the pitch of the audio played from the sound indexed as \"snd_Explode\" if its pitch is not equal to 1.\n",
      "description": "This function can be used to get the get pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions, or an actual sound asset from the Asset Browser.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_pitch.htm"
    },
    "audio_sound_get_track_position": {
      "name": "audio_sound_get_track_position",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to get the play position of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_sound_get_track_position(global.Music) != 0\n    {\n        audio_sound_set_track_position(global.Music, 0);\n    }\n```\nThe above code checks a track to get it's start position and if it's not 0 seconds it sets it to 0 seconds.\n",
      "description": "This function will get the position (in seconds) within the sound file for the sound to play from. The sound can only be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_get_track_position.htm"
    },
    "audio_sound_is_playable": {
      "name": "audio_sound_is_playable",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_sound_get_pitch(snd_Explode) != 1\n    {\n        audio_sound_pitch(snd_Explode, 1);\n    }\n```\nThe above code will change the pitch of the audio played from the sound indexed as \"snd_Explode\" if its pitch is not equal to 1.\n",
      "description": "This function can be used to check if the given sound index can be played currently. This is needed due to the different ways streamed and unstreamed sound playback is handled on the **HTML5** target platform, and will return `true` if the sound can be played and `false` if it can't. Note that on all other platforms other than HTML5, the function will always return true.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_is_playable.htm"
    },
    "audio_sound_length": {
      "name": "audio_sound_length",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar len; len = audio_sound_length(snd_Beam); audio_play_sound(snd_Beam, 1, false); alarm[0] = room_speed * len;\n```\nThe above code gets the length (in seconds) of the sound indexed in the variable \"snd_Beam\", then plays the sound and sets an alarm to go off when the sound has finished playing using the length of the sound to calculate the time needed for\n    the alarm.\n",
      "description": "This function will return the length of the given sound in seconds. The sound can either be a referenced from index for an individual sound being played which has been stored in a variable when using the `audio_play_sound()` or \n    `audio_play_sound_at()` functions, or an actual sound asset from the Asset Browser.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_length.htm"
    },
    "audio_sound_pitch": {
      "name": "audio_sound_pitch",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to change."
        },
        {
          "parameter": "pitch",
          "description": "The pitch multiplier (default 1)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar s_engine = audio_play_sound(snd_CarEngine, 10, false);\n    switch (gear)\n    {\n        case 1: audio_sound_pitch(s_engine, 0.8); break;\n        case 2: audio_sound_pitch(s_engine, 0.9); break;\n        case 3: audio_sound_pitch(s_engine, 0.95); break;\n        case 4: audio_sound_pitch(s_engine, 1); break;\n        case 5: audio_sound_pitch(s_engine, 1.2); break;\n    }\n```\nThe above code will change the pitch of the audio played from the sound indexed in the variable \"s_engine\" based on the value of the variable \"gear\".\n",
      "description": "This function can be used to change the pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions, or an actual sound asset from the Asset Browser. If it is an index of a playing sound, then only that instance will be changed, however when using a sound asset from the Asset Browser, all further instances being played of that sound will be changed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_pitch.htm"
    },
    "audio_sound_set_listener_mask": {
      "name": "audio_sound_set_listener_mask",
      "parameters": [
        {
          "parameter": "soundID",
          "description": "The unique ID of the sound to set the mask of"
        },
        {
          "parameter": "mask",
          "description": "The bitmask data to set for the sound"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar snd = audio_play_sound(snd_PlayerDead, 10, false); audio_sound_set_listener_mask(snd, global.PlayerMask);\n```\nThe above code plays a sound then sets the listener(s) to play from using the mask data stored in a global variable.\n",
      "description": "This function can be used to set the the bit-mask for a sound so that it will play only from those listeners specified. You can create a bit-mask by using the `audio_get_listener_info()` and\n    then using the bitwise `or` (\"|\") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the sound after you have played it. This mask will\n    over-ride the default mask or that which you may have set using the function `audio_set_listener_mask()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_set_listener_mask.htm"
    },
    "audio_sound_set_track_position": {
      "name": "audio_sound_set_track_position",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to change."
        },
        {
          "parameter": "time",
          "description": "The time (in seconds) to set the start point to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar snd = audio_play_sound(snd_MainTrack, 0, false); audio_sound_set_track_position(snd, 32);\n```\nThe above code plays a sound and then uses the returned ID value to set the start position for the sound to 32 seconds.\n",
      "description": "This function will set the position (in seconds) within the sound file for the sound to play from. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the \n    `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset. If it is a unique sound ID that you use, then the position will change immediately\n      to the new time given, and if it is a Asset Browser asset then all further plays of the given sound will start at the new time. The function will ignore any value given that is longer than the length of the sound given for the \"index\"\n      value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_sound_set_track_position.htm"
    },
    "audio_start_recording": {
      "name": "audio_start_recording",
      "parameters": [
        {
          "parameter": "recorder_index",
          "description": "The index of the recorder source to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naudio_record = audio_start_recording(0);\n```\nThe above code starts recording from the recorder source 0, storing the channel index of the recording in the variable \"audio_record\" for use in the asynchronous  [Audio Recording](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm)    event.\n",
      "description": "This function will start recording audio from the recorder source indexed. You can get the number of recorder sources using the function `audio_get_recorder_count()`, and once you start recording the\n    audio will be stored in a temporary buffer and start triggering an  [Audio Recording Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm). This event is triggered every step that recording\n    takes place and will create the special  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) in the variable `async_load` with the following\n    key/value pairs:",
      "returns": "Real (Buffer ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_start_recording.htm"
    },
    "audio_start_sync_group": {
      "name": "audio_start_sync_group",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to play."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsg = audio_create_sync_group(true); audio_play_in_sync_group(sg, sound1); audio_play_in_sync_group(sg, sound2); audio_sound_gain(sound2, 0, 0); audio_play_in_sync_group(sg, sound3); audio_sound_gain(sound3, 0, 0); audio_play_in_sync_group(sg,\n    sound4); audio_sound_gain(sound4, 0, 0); audio_start_sync_group(sg);\n  \n```\nThe above creates a new sync group and assigns the index of the group to the variable \"sg\". Four sounds are then added to the group, with the gain for three of them set to 0. Finally the sync group is played.\n",
      "description": "With this function you can start playing a previously created sync group. You need to supply the *group index* which is the value returned when you created the group using the function `audio_create_sync_group()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_start_sync_group.htm"
    },
    "audio_stop_all": {
      "name": "audio_stop_all",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !global.SFX\n    {\n        audio_stop_all();\n    }\n```\nThe above code checks the global variable \"SFX\" and if it returns `false`, it will stop all sounds that are currently playing.\n",
      "description": "This function will stop *all* sounds that are currently playing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_stop_all.htm"
    },
    "audio_stop_recording": {
      "name": "audio_stop_recording",
      "parameters": [
        {
          "parameter": "channel_index",
          "description": "The index of the recorder channel to stop."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naudio_stop_recording(audio_channel);\n```\nThe above code tells GameMaker Studio 2 to stop recording on the given audio channel index.\n",
      "description": "This function will stop recording on the given recorder channel (the channel index is returned when you call the function `audio_start_recording()`). When you stop recording, no further      [Audio Recording Asynchronous Events](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Audio_Recording.htm) will be triggered for the given recorder channel, so you would normally use this function in the actual\n    asynchronous event to ensure that you have captured all the data.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_stop_recording.htm"
    },
    "audio_stop_sound": {
      "name": "audio_stop_sound",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sound to stop."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !global.SFX\n    {\n        audio_stop_sound(snd_Waterfall);\n    }\n    else\n    {\n        audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);\n    }\n```\nThe above code checks the global variable \"SFX\" and if it returns `false`, it will stop the sound indexed in the variable \"snd_Waterfall\" that is currently playing, and if it returns `true`, it will loop the sound.\n",
      "description": "This function will stop the given sound if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the `audio_play_sound()` or `audio_play_sound_at()` functions) or a sound asset, in which case *all* instances of the given sound will be stopped.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_stop_sound.htm"
    },
    "audio_stop_sync_group": {
      "name": "audio_stop_sync_group",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to stop playing."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        audio_stop_sync_group(sg);\n    }\n```\nThe above code checks for a mouse click, and if one is detected it stops the sync group indexed in the variable \"sg\".\n",
      "description": "This function will stop the given sync group if it is playing, with the group index being the value returned when you created the group using the function `audio_create_sync_group()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_stop_sync_group.htm"
    },
    "audio_sync_group_debug": {
      "name": "audio_sync_group_debug",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to debug, or -1 to switch off the debugging."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (debug_mode)\n    {\n        audio_sync_group_debug(sg);\n    }\n    else\n    {\n        audio_sync_group_debug(-1);\n    }\n```\nThe above code will switch on or off the audio sync group debug overlay showing the sync group indexed in the variable \"sg\" depending on whether the game is run in debug mode or not.\n",
      "description": "his function can be used to display debug information about any given sync group (the group index is the value returned when the group was created using the function `audio_create_sync_group()`). You can call the function with a value of -1 to switch off the overlay.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_sync_group_debug.htm"
    },
    "audio_sync_group_get_track_pos": {
      "name": "audio_sync_group_get_track_pos",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to get the position of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar real_secs = audio_sync_group_get_track_pos(sg);\n    var secs = real_secs mod 60;\n    var mins = string(real_secs div 60);\n    if (secs > 9)\n    {\n        secs = string(secs);\n    }\n    else\n    {\n        secs = \"0\" + string(secs);\n    }\n    \n    draw_text(32, 32, \"Time = \" + mins + \":\" + secs);\n  \n```\nThe above code gets the time position for the sync group indexed in the variable \"sg\", then uses this value to draw the time played on the screen.\n",
      "description": "This function returns the current play position of the given sync group. The group index is the value returned when you created the group using the function `audio_create_sync_group()`, and the return value is the time in seconds that the tracks have been playing.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_sync_group_get_track_pos.htm"
    },
    "audio_sync_group_is_playing": {
      "name": "audio_sync_group_is_playing",
      "parameters": [
        {
          "parameter": "group_index",
          "description": "The group index to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif audio_sync_group_is_playing(group_one)\n    {\n        audio_stop_sync_group(group_one);\n    }\n```\nThe above code checks to see if the sync group `group_one` is currently playing and if it is, the group is stopped.\n",
      "description": "This function can be used to check if any audio in a synchronised group is playing. You are required to supply the sync group ID as returned by the function `audio_create_sync_group()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Synchronisation/audio_sync_group_is_playing.htm"
    },
    "audio_system_is_available": {
      "name": "audio_system_is_available",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif audio_system_is_available()\n    {\n        if audio_is_paused(global.Music)\n        {\n            audio_resume_sound(global.Music)\n        }\n        else\n        {\n            if !audio_is_playing(global.Music)\n            {\n                global.Music = audio_play_sound(snd_Music, 0, true);\n            }\n        }\n    }\n    else\n    {\n        if audio_is_playing(global.Music)\n        {\n            audio_pause_sound(global.Music);\n        }\n    }\n```\nThe above code will pause/unpause an audio track depending on whether the audio system is initialised and available or not.\n",
      "description": "This function can be used to check and see if the audio system has been initialised, or if the audio context is running. On all platforms, this function will return true immediately after Game Start when the audio engine is initialised, *except on the ***HTML5*** target*. On HTML5, the audio context status can change at any time depending on user input, the browser being used, and its version, so this function can be used to check and see if audio can be played or not. If the function returns `false` (ie: the audio context status is not running), then only unstreamed sounds *may* play (but it's not guaranteed, and you should assume that no audio can be played), while if it returns `true` then all audio will play.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_system_is_available.htm"
    },
    "base64_decode": {
      "name": "base64_decode",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to decode."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str, file; str = base64_encode(game_data); file = file_text_open_read(\"save.txt\"); str = file_text_read_string(file); level_data = base64_decode(str); file_text_close(file);\n  \n```\nThe above code will open a text file and read a string from it into the local variable \"str\". This string is then decoded and the result stored in the instance variable \"level_data\".\n",
      "description": "This function will convert a string encoded previously using base64 format, into standard text. Base64 is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders\n    the output unreadable to the human eye.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/base64_decode.htm"
    },
    "base64_encode": {
      "name": "base64_encode",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to encode."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str, file; str = base64_encode(game_data); file = file_text_open_write(\"save.txt\"); file_text_write_string(file, str); file_text_close(file);\n  \n```\nThe above code will covert the string stored in \"game_data\" into a base64 encoded string which is then stored in an external text file.\n",
      "description": "This function will convert a string into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to\n    the human eye.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/base64_encode.htm"
    },
    "bool": {
      "name": "bool",
      "parameters": [
        {
          "parameter": "n",
          "description": "The value to convert."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_bool(val)\n    {\n        val = bool(val);\n    }\n```\nThe above code checks the variable \"val\" to see if it is a boolean and if it is not then it is converted to one.\n",
      "description": "This function will attempt to convert a given value into a boolean data type, where the value will be returned as `true` if it is greater than 0.5 and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/bool.htm"
    },
    "browser_input_capture": {
      "name": "browser_input_capture",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nbrowser_input_capture(true);\n```\nThe above code sets the game to capture all browser input on the HTML5 target platform.\n",
      "description": "With this function you can set whether the browser window should capture all input (set it to `false`) or whether the game should capture the input (set it to `true`). Note that this function is for use with the HTML5 module only.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/browser_input_capture.htm"
    },
    "buffer_async_group_begin": {
      "name": "buffer_async_group_begin",
      "parameters": [
        {
          "parameter": "groupname",
          "description": "The name of the group (as a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nbuffer_async_group_begin(\"SaveGame\");\n    save1 = buffer_save_async(buff1, \"Player_Save1.sav\", 0, 16384);\n    save2 = buffer_save_async(buff2, \"Player_Save2.sav\", 0, 16384);\n    save3 = buffer_save_async(buff3, \"Player_Save3.sav\", 0, 16384);\n    save4 = buffer_save_async(buff4, \"Player_Save4.sav\", 0, 16384);\n    buffer_async_group_end();\n```\nThe above code starts a buffer group then sets it to save out 4 files asynchronously. The group definition is then ended (at which point saving will begin).\n",
      "description": "This function is called when you want to begin the saving out of multiple buffers to multiple files. The \"groupname\" is a string and will be used as the directory name for where the files will be saved, and should be used as part of the file path when loading the files back into the IDE later (using any of the `buffer_load()` functions). This function is *only* for use with the `buffer_save_async()` function and you must also finish the save definition by calling `buffer_async_group_end()` function otherwise the files will not be saved out.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_async_group_begin.htm"
    },
    "buffer_async_group_end": {
      "name": "buffer_async_group_end",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "The `buffer_async_group_end()` function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:\n```\nbuffer_async_group_begin(\"SaveGame\");\n    save1 = buffer_save_async(buff1, \"Player_Save1.sav\", 0, 16384);\n    save2 = buffer_save_async(buff2, \"Player_Save2.sav\", 0, 16384);\n    save3 = buffer_save_async(buff3, \"Player_Save3.sav\", 0, 16384);\n    save4 = buffer_save_async(buff4, \"Player_Save4.sav\", 0, 16384);\n    save_id = buffer_async_group_end();\n```\nThe above code starts a buffer group then sets it to save out 4 files asynchronously. The group definition is then ended (at which point saving will begin), storing the ID of the function call in the variable \"*save_id*\". When the save is complete, the asynchronous Save/Load event will be triggered and you can parse the `async_load` map for the correct ID of the function, like this:\n```\nif ds_map_find_value(async_load, \"id\") == saveid\n    {\n        if ds_map_find_value(async_load, \"status\") == false\n        {\n            show_debug_message(\"Save failed!\");\n        }\n    }\n```\nThe above code will first check the id of the DS map that has been created, then check the status of the callback, posting a debug message if there has been any issues.\n",
      "description": "This function finishes the definition of a buffer save group. You must have previously called the function `buffer_async_group_begin()` to initiate the group, then call the function `buffer_save_async()` for each file that you wish to save out. Finally you call this function, which will start the saving of the files. The function will return a unique ID value for the save, which can then be used in the  [Asynchronous Save / Load event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Save_Load.htm) to parse the results from the  [async_load](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm) DS map.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_async_group_end.htm"
    },
    "buffer_async_group_option": {
      "name": "buffer_async_group_option",
      "parameters": [
        {
          "parameter": "option",
          "description": "The option to set."
        },
        {
          "parameter": "value",
          "description": "The value to set (can be string or real, depending on the option)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbuffer_async_group_begin(\"save_folder_name\");\n    buffer_async_group_option(\"showdialog\", false);\n    buffer_async_group_option(\"slottitle\", \"Catch The Haggis Save\");\n    buffer_async_group_option(\"subtitle\", \"All your haggis are saved here!\");\n    save = buffer_save_async(buff, \"Player_Save.sav\", 0, 16384);\n    buffer_async_group_end();\n```\nThe above code starts a buffer group then sets the group options before it sets 4 files to save asynchronously. The group definition is then ended (at which point saving will begin).\n",
      "description": "With this function you can set some platform specific options for the buffer group being saved. The options available are as follows:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_async_group_option.htm"
    },
    "buffer_base64_decode": {
      "name": "buffer_base64_decode",
      "parameters": [
        {
          "parameter": "string",
          "description": "The base64 encoded string to decode"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"Save.ini\"); buff = buffer_base64_decode(ini_read_string(\"Save\", \"Slot1\", \"\")); ini_close();\n  \n```\nThe above code will open an ini file and then read a string from it into the decode function. This function will return a buffer index, which is stored in the variable \"buff\", containing the data previously encoded and saved. The ini file\n    is then closed.\n",
      "description": "With this function you can decode a base64 encoded string (created using the `buffer_base64_encode()` function) into a buffer. This function will create the buffer (as a 1 byte aligned \"grow\" buffer\")\n    and return the unique index for the buffer which should be used in all further function calls.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_base64_decode.htm"
    },
    "buffer_base64_decode_ext": {
      "name": "buffer_base64_decode_ext",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to decode the string into."
        },
        {
          "parameter": "string",
          "description": "The base64 encoded string to decode."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuff = buffer_create(16384, buffer_grow, 2); ini_open(\"Save.ini\");\n     var str = ini_read_string(\"Save\", \"Slot1\", \"\"); buffer_base64_decode_ext(buff, str, 0); ini_close();\n  \n```\nThe above code will create a buffer and store the unique id for it in the variable \"buff\", then open an ini file and read a string from it into the local variable \"str\". This string is then decoded into the newly created buffer before\n    closing the ini file again.\n",
      "description": "With this function you can decode a base64 encoded string (created using the `buffer_base64_encode()` function) into a buffer. Unlike the function `buffer_base64_decode()`,\n    this will *not* create a buffer for you, but rather you should already have created the buffer (see `buffer_create()`), the id of which you would then use with this function. The \"offset\" is the\n    position within the buffer to decode the given string (in bytes).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_base64_decode_ext.htm"
    },
    "buffer_base64_encode": {
      "name": "buffer_base64_encode",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar b_str = buffer_base64_encode(buff, 0, buffer_get_size(buff))\n```\nThe above code will create encode the full data stored in the buffer indexed by the variable \"buff\", and store the returned string in the local variable \"b_str\".\n",
      "description": "This function will convert the data from the given buffer into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the\n    output unreadable to the human eye. To use this you need to specify an already created buffer, the offset value (which is the point within the buffer at which you wish to start encoding) as well as the size, in bytes, of the buffer memory to encode.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_base64_encode.htm"
    },
    "buffer_compress": {
      "name": "buffer_compress",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to compress."
        },
        {
          "parameter": "offset",
          "description": "The offset within the buffer to compress (in bytes)."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer area to compress (in bytes)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar srcBuff = buffer_create(1024, buffer_grow, 1); buffer_write(srcBuff, global.DataString); var cmpBuff = buffer_compress(srcBuff, 0, buffer_tell(srcBuff)); buffer_save(cmpBuff, \"Player_Save.sav\"); buffer_delete(srcBuff);\n     buffer_delete(cmpBuff);\n  \n```\nThe above code will create a buffer then populate it with the data from a string. This buffer is then compressed and saved, and both the source and compressed buffers are deleted\n",
      "description": "With this function you can compress part (or all) of a buffer using  [zlib compression](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/https://en.wikipedia.org/wiki/Zlib). You supply the ID of the buffer to compress (as returned by `buffer_create()`),\n    the offset within the buffer to use in bytes, and the size of the buffer data to compress (also in bytes). The function will return a new buffer ID value for the compressed buffer, or a value less than 0 if it has failed for any reason. This function\n    will not alter the original buffer.",
      "returns": "Int (Buffer ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_compress.htm"
    },
    "buffer_copy": {
      "name": "buffer_copy",
      "parameters": [
        {
          "parameter": "src_buffer",
          "description": "The index of the buffer to copy *from*."
        },
        {
          "parameter": "src_offset",
          "description": "The data offset to start copying from (in bytes)."
        },
        {
          "parameter": "size",
          "description": "The size of the data to copy (in bytes)."
        },
        {
          "parameter": "dest_buffer",
          "description": "The index of the buffer to copy *to*."
        },
        {
          "parameter": "dest_offset",
          "description": "The offset position to copy the data to (in bytes)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nbuffer_copy(buff1, 0, 2048, buff2, 2048);\n```\nThe above code will copy the data stored in the buffer indexed in the variable \"buff1\", and then paste it into the buffer indexed in the variable \"buff2\", but offset by 2048 bytes.\n",
      "description": "This function can be used to copy a segment (or all) of the data stored in one buffer to another. When using two buffers and copying from one to the other, both buffers must have previously been created using the `buffer_create()`    function (for example), and you can specify a data offset (in bytes) for the start point of the data to be copied from the source buffer relative to the start of the buffer, as well as another data offset to define the position to copy the data to\n    in the destination buffer.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_copy.htm"
    },
    "buffer_copy_from_vertex_buffer": {
      "name": "buffer_copy_from_vertex_buffer",
      "parameters": [
        {
          "parameter": "vertex_buffer",
          "description": "The index of the vertex buffer to copy *from*."
        },
        {
          "parameter": "start_vertex",
          "description": "The starting vertex."
        },
        {
          "parameter": "num_vertices",
          "description": "The total number of vertices to use."
        },
        {
          "parameter": "dest_buffer",
          "description": "The index of the buffer to copy *to*."
        },
        {
          "parameter": "dest_offset",
          "description": "The offset position to copy the data to (in bytes)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar v_num = vertex_get_number(model_buff); buffer_copy_from_vertex_buffer(model_buffer, 0, v_num - 1, player_buffer, 0);\n```\nThe above code will copy the vertex data stored in the vertex buffer indexed in the variable \"model_buffer\", and then paste it into the buffer indexed in the variable \"player_buffer\".\n",
      "description": "This function can be used to copy some (or all) of the vertex data stored in one vertex buffer into a previously created regular buffer. When copying from a vertex buffer into a regular buffer with this function, both buffers must have previously been\n    created (using the `vertex_create_buffer()` and `buffer_create()` functions, for example). You can specify the range of vertex data that you\n    wish to copy into the buffer, where the start vertex can be anywhere between 0 and the number of vertices -1, and you can give the number of vertices from that point on to copy. You can use the function `vertex_get_number()`    on the vertex buffer to get the total number of vertices stored. Finally you give the buffer index to copy the vertex data into, as well as a data offset to define the position to copy the vertex data to in the destination buffer.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_copy_from_vertex_buffer.htm"
    },
    "buffer_crc32": {
      "name": "buffer_crc32",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncheck_val = buffer_crc32(buff, 0, buffer_get_size(buff));\n```\nThe above code will create a crc32 checksum hash value for the full data stored in the buffer indexed by the variable \"buff\", and store the returned integer hash value in the variable \"check_val\".\n",
      "description": "This function will take input data from a buffer and returns a crc32 checksum hash. You specify the buffer ID of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed, and\n    the function will return a 32 bit integer value for that region.",
      "returns": "Int 32",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_crc32.htm"
    },
    "buffer_create": {
      "name": "buffer_create",
      "parameters": [
        {
          "parameter": "size",
          "description": "The size (in bytes) of the buffer."
        },
        {
          "parameter": "type",
          "description": "The type of buffer to create (see the constants list above)."
        },
        {
          "parameter": "alignment",
          "description": "The byte alignment for the buffer"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nplayer_buffer = buffer_create(16384, buffer_fixed, 2);\n```\nThe above code allocates 16384 bytes of memory to a buffer and returns the index of that buffer, which is stored in the variable \"player_buffer\", for future use. The buffer is aligned to a two byte boundary.\n",
      "description": "You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique *buffer id* that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the `buffer_write()` function, with the following constants being used to define the buffer type:",
      "returns": "Int (Vertex buffer ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_create.htm"
    },
    "buffer_create_from_vertex_buffer": {
      "name": "buffer_create_from_vertex_buffer",
      "parameters": [
        {
          "parameter": "vertex_buffer",
          "description": "The vertex buffer index to use."
        },
        {
          "parameter": "type",
          "description": "The type of buffer to create (see the constants list above)."
        },
        {
          "parameter": "alignment",
          "description": "The byte alignment for the buffer"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nplayer_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1);\n```\nThe above code allocates memory to a buffer then copies the data from the given vertex buffer into it, returning the index of the new buffer which is stored in the variable \"player_buffer\", for future use.\n",
      "description": "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created  [vertex buffer](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm). The function returns a unique *buffer id*    that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function `vertex_create_buffer()`,\n    for example) with the following constants being used to define the buffer type:",
      "returns": "Int (Vertex buffer ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_create_from_vertex_buffer.htm"
    },
    "buffer_create_from_vertex_buffer_ext": {
      "name": "buffer_create_from_vertex_buffer_ext",
      "parameters": [
        {
          "parameter": "vertex_buffer",
          "description": "The vertex buffer index to use."
        },
        {
          "parameter": "type",
          "description": "The type of buffer to create (see the constants list below)."
        },
        {
          "parameter": "alignment",
          "description": "The byte alignment for the buffer"
        },
        {
          "parameter": "start_vertex",
          "description": "The starting vertex."
        },
        {
          "parameter": "num_vertices",
          "description": "The total number of vertices to copy."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar v_num = vertex_get_number(model_buff); player_buffer = buffer_create_from_vertex_buffer(model_buffer, buffer_grow, 1, 0, v_num - 1);\n```\nThe above code allocates memory to a buffer then copies the data of all vertices from the given vertex buffer into it, returning the index of the new buffer which is stored in the variable \"player_buffer\", for future use.\n",
      "description": "You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created  [vertex buffer](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm). The function returns a unique *buffer id*    that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function `vertex_create_buffer()`,\n    for example) with the following constants being used to define the buffer type:",
      "returns": "Int (Vertex buffer ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_create_from_vertex_buffer_ext.htm"
    },
    "buffer_decompress": {
      "name": "buffer_decompress",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to decompress."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar cmpBuff = buffer_load(\"Player_Save.sav\"); var srcBuff = buffer_decompress(cmpBuff); global.DataString = buffer_read(srcBuff, buffer_string);\n```\nThe above code will first load a saved buffer, then decompress it and finally read the string data from the decompressed buffer into a global variable.\n",
      "description": "With this function you can decompress a previously compressed buffer using  [zlib compression](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/https://en.wikipedia.org/wiki/Zlib). You supply the buffer ID to decompress, and the function will return a new buffer ID that contains the uncompressed\n    data. If the decompression has failed (for example, you are supplying a buffer that hasn't been compressed) then the function will instead return a value less than 0.",
      "returns": "Buffer ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_decompress.htm"
    },
    "buffer_delete": {
      "name": "buffer_delete",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nbuffer_delete(player_buffer); player_buffer = -1;\n```\nThe above code will delete the previously created buffer with the id stored in the variable \"player_buffer\" and then sets the variable to -1.\n",
      "description": "With this function you can delete a buffer previously have created using the function `buffer_create()` from memory, releasing the resources used to create it and removing any data that it may currently contain.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_delete.htm"
    },
    "buffer_exists": {
      "name": "buffer_exists",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif buffer_exists(buff)\n    {\n        buffer_delete(buff);\n    }\n```\nThe above code checks to see if the variable \"`buff`\" holds a buffer ID and if it does, the buffer is deleted.\n",
      "description": "This function can be used to check a variable to see if it holds a valid buffer ID value or not. If it does the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_exists.htm"
    },
    "buffer_fill": {
      "name": "buffer_fill",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to fill."
        },
        {
          "parameter": "offset",
          "description": "The data offset value (in bytes)."
        },
        {
          "parameter": "type",
          "description": "The type of data that is to be written to the buffer (see the list of constants  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_write.htm))."
        },
        {
          "parameter": "value",
          "description": "The data to write."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer (in bytes) that you wish to fill."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nmap_buffer = buffer_create(16384, buffer_fixed, 0); buffer_fill(map_buffer, 0, buffer_u16, 0, 16384);\n```\nThe above code finds the start of the buffer with the id stored in the variable \"buff\" them writes a series of signed 16bit integer values to it.\n",
      "description": "This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the \"type\" argument of this function, meaning that you can't try to fill with a\n    string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the `buffer_read()` and `buffer_write()` functions. The \"size\"\n    is the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_fill.htm"
    },
    "buffer_get_address": {
      "name": "buffer_get_address",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar b_address = buffer_get_address(buff_model); var b_end_address = b_address + buffer_get_size(buff_model);\n```\nThe above code will get the memory address of the buffer indexed in the variable \"buff_model\" and then get the memory address for the end of the buffer using the `buffer_get_size()` function, storing both values in local variables for\n    further use.\n",
      "description": "With this function you can get the a *pointer* to the raw, *aligned* buffer address. This is primarily for use with extensions as you can pass this value through to them, allowing them to access the buffer data. Note that there are a few things\n    you cannot do with the buffer when accessing from an extension:",
      "returns": "pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_get_address.htm"
    },
    "buffer_get_alignment": {
      "name": "buffer_get_alignment",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nalignment = buffer_get_alignment(buff);\n```\nThe above code will get the alignment of the buffer from the value indexed in the variable \"buff\" and store it in a variable.\n",
      "description": "With this function you can get the a *byte alignment* for the given buffer ID.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_get_alignment.htm"
    },
    "buffer_get_size": {
      "name": "buffer_get_size",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the buffer to get the size of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _size = buffer_get_size(player_data); var _temp = buffer_create(_size, buffer_fixed, 0);\n```\nThe above code will create a new buffer and store its index in the local variable \"_temp\", with size of this new buffer being the same as that of the buffer indexed in the variable \"player_data\".\n",
      "description": "With this function you can get the size of the given buffer in bytes.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_get_size.htm"
    },
    "buffer_get_surface": {
      "name": "buffer_get_surface",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "surface",
          "description": "The index of the surface to use."
        },
        {
          "parameter": "offset",
          "description": "The data offset value (in bytes)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuffer = buffer_create(surf_width * surf_height * 4, buffer_fixed, 0);\n    buffer_get_surface(buffer, surface, 0);\n```\nThis code will create a fixed-size buffer which has the capacity to store 4 bytes per pixel (for the R, G, B and A components) based on the exact size of the surface, and then copy the surface data into it.\n",
      "description": "With this function you can write information from a surface to a given buffer. The buffer must have been created previously and should be a 1-byte aligned buffer large enough to store data for the surface you are going to write (if unsure, use a  [grow](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_create.htm) buffer or see the example at the bottom of this page).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_get_surface.htm"
    },
    "buffer_get_type": {
      "name": "buffer_get_type",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntype = buffer_get_type(buff);\n```\nThe above code will get the type of buffer from the value indexed in the variable \"buff\" and store it in a variable.\n",
      "description": "With this function you retrieve the type of buffer that is being referenced by a buffer ID value. The return value will be one of the following constants:",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_get_type.htm"
    },
    "buffer_load": {
      "name": "buffer_load",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to load from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nplayer_buffer = buffer_load(\"Player_Save.sav\");\n```\nThe above code will load a previously saved buffer into memory, creating a new buffer. The index of this new buffer is stored in the variable \"player_buffer\".\n",
      "description": "This function is used to load a buffer that was previously saved using the `buffer_save()` functions, as well as any  [Included Files](https://manual.yoyogames.com/Settings/Included_Files.htm) or files loaded externally. It will return a new buffer's ID which is created by the function as a \"grow\" buffer (see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_create.htm)) with a byte alignment of 1. This ID should be stored in a variable and used in all further function calls to this buffer. If the load fails for whatever reason, the function will return -1 and a message will be shown in the compiler output window saying that the load has failed.",
      "returns": "real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_load.htm"
    },
    "buffer_load_async": {
      "name": "buffer_load_async",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to load."
        },
        {
          "parameter": "filename",
          "description": "The name of the file to load."
        },
        {
          "parameter": "offset",
          "description": "The offset within the buffer to load to (in bytes)."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer area to load (in bytes)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "The `buffer_load_async()` function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:\n```\nloadid = buffer_load_async(buff, \"Player_Save.sav\", 0, 16384);\n```\nThe above code loads the contents of the file \"*Player_Save.sav*\" to the given buffer, storing the ID of the function call in the variable \"*loadid*\". When the load is complete, the asynchronous Save/Load event will be triggered and you can parse the `async_load` map for the correct ID of the function, like this:\n```\nif ds_map_find_value(async_load, \"id\") == loadid\n    {\n        if ds_map_find_value(async_load, \"status\") == false\n        {\n            show_debug_message(\"Load failed!\");\n        }\n    }\n```\nThe above code will first check the ID of the DS map that has been created, then check the status of the callback, posting a debug message if there has been any issues.\n",
      "description": "With this function you can load a file that you have created previously using the `buffer_save()` function (or any of the other functions for saving buffers) into a buffer. The \"offset\" defines the start position within the buffer for loading (in bytes), and the \"size\" is the size of the buffer area to be loaded from that offset onwards (also in bytes). You can supply a value of -1 for the size argument and the entire buffer will be loaded. Note that the function will load from a \"default\" folder, which does *not* need to be included as part of the file path you provide. This folder will be created if it doesn't exist or when you save a file using `buffer_save_async()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_load_async.htm"
    },
    "buffer_load_ext": {
      "name": "buffer_load_ext",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to load into."
        },
        {
          "parameter": "filename",
          "description": "The name of the file to load from."
        },
        {
          "parameter": "offset",
          "description": "The offset within the buffer to load to (in bytes)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar pos = buffer_seek(player_buffer, buffer_seek_end, 0);\n    buffer_load(player_buffer, \"Data_Save.sav\", pos);\n```\nThe above code will first get the position of the end of the buffer indexed in the variable \"player_buffer\" and then loads the data from the given into that position (note that this example will only work with \"grow\" or \"wrap\" buffer types).\n",
      "description": "This function will load the buffer data that was previously saved using the `buffer_save()` functions into an existing buffer. You give the ID of the previously created buffer to load into, then the saved buffer file to load, and finally the offset from the start of the buffer (in bytes) that you wish to load the data to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_load_ext.htm"
    },
    "buffer_load_partial": {
      "name": "buffer_load_partial",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to load."
        },
        {
          "parameter": "filename",
          "description": "The name of the file to load."
        },
        {
          "parameter": "offset",
          "description": "The offset within the buffer to load to (in bytes)."
        },
        {
          "parameter": "src_len",
          "description": "The length of the part of the buffer to load (in bytes)."
        },
        {
          "parameter": "dest_offset",
          "description": "The offset where to start putting the partial data in the new buffer (in bytes)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nbuff = buffer_create(256, buffer_grow, 1);\n    var _file = \"save.dat\";\n    var _so = 6;\n    var _sl = 5;\n    var _do= 0;\n    buffer_load_partial(buff, _file, _so, _sl, _do);\n```\nThe above code will create a new \"grow\" buffer and then load in a part of the data saved in the file \"save.dat\" to it.\n",
      "description": "This function will load some of the buffer data that was previously saved using the `buffer_save()` functions into an existing buffer. You give the id of the previously created buffer to load into, then the saved buffer file to load, and then the offset from the start of the buffer (in bytes) that you wish to load the data from. The following arguments are for setting the length of the buffer data (in bytes) from the initial offset point that you wish to load and the offset point to load the data to in the buffer (again, in bytes).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_load_partial.htm"
    },
    "buffer_md5": {
      "name": "buffer_md5",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncheck_string = buffer_md5(buff, 0, buffer_get_size(buff));\n```\nThe above code will create an md5 hash for the full data stored in the buffer indexed by the variable \"buff\", and store the returned hash in the variable \"check_string\".\n",
      "description": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hashing (tooltip) function with a 128-bit hash value and has been employed in a wide variety of security applications.\n    It is also commonly used to check the integrity of data. This function will take the input data from a given buffer (or part of the buffer) and return the 32-character hexadecimal MD5 hash that is unique to that data. In this way you can generate\n    a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to\n    use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_md5.htm"
    },
    "buffer_peek": {
      "name": "buffer_peek",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "offset",
          "description": "The offset position (in bytes) within the buffer to read the given data from."
        },
        {
          "parameter": "type",
          "description": "The type of data that is to be read from the buffer (see the list of constants  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_read.htm))."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar red = buffer_peek(buff, 1, buffer_u8); var green = buffer_peek(buff, 2, buffer_u8); var blue = buffer_peek(buff, 3, buffer_u8); image_blend = make_colour_rgb(red, green, blue);\n```\nThe above code will get three values from three different positions within the buffer indexed in the variable \"buff\" and then use those values to set the image blend of the instance.\n",
      "description": "With the `buffer_read()` function, you can read data from the given buffer at the current \"seek\" position, with each piece of data being read advancing this position by the bytes being read or written.\n    However, it may be necessary for you to read a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer id, and then an offset position (from\n    the buffer start) within that buffer to read from, as well as the data type that you are wanting to read.",
      "returns": "Real/String or 0 if it fails.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_peek.htm"
    },
    "buffer_poke": {
      "name": "buffer_poke",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "offset",
          "description": "The offset position (in bytes) within the buffer to write the given data to."
        },
        {
          "parameter": "type",
          "description": "The type of data that is to be written to the buffer (see the list of constants  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_write.htm))."
        },
        {
          "parameter": "value",
          "description": "The data to add to the buffer, in accordance with the type specified."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nbuffer_poke(buff, 3, buffer_u8, colour_get_blue(image_blend));\n```\nThe above code will add the blue component value of the colour used for the image blend into the buffer indexed in the variable \"buff\", at the third position in the buffer and as an unsigned 8bit value.\n",
      "description": "With the `buffer_write()` function, you can write data to the given buffer at the current \"seek\" position, with each piece of data advancing this position by the bytes being written or read. However, it\n    may be necessary for you to change a given piece of data without wanting to change the current seek position, and that's when you would use this function. You simply supply the function with a buffer index, and then the offset position from the\n    buffer start (in bytes) within that buffer to write to, as well as the data type and the value to be written.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_poke.htm"
    },
    "buffer_read": {
      "name": "buffer_read",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to read from."
        },
        {
          "parameter": "type",
          "description": "The type of data that is to be read from the buffer (see the list of constants above)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar cmd = buffer_read(buff, buffer_s16);\n```\nThe above code reads from the buffer with the id stored in the variable \"buff\" a signed 16bit value into the local variable \"cmd\".\n",
      "description": "This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by the following constants:",
      "returns": "Real/String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_read.htm"
    },
    "buffer_resize": {
      "name": "buffer_resize",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to change the size of."
        },
        {
          "parameter": "newsize",
          "description": "The new size of the buffer (in bytes)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (buffer_get_size(buff) < 16384)\n    {\n        buffer_resize(buff, 16384);\n    }\n```\nThe above code will check the size of the buffer indexed in the variable \"buff\" and if it is less than the given value, the buffer is resized.\n",
      "description": "With this function you can resize a given buffer to be the size (in bytes) that you specify.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_resize.htm"
    },
    "buffer_save": {
      "name": "buffer_save",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to save."
        },
        {
          "parameter": "filename",
          "description": "The name of the file to save as."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbuffer_save(buff, \"Player_Save.sav\");\n```\nSaves the current contents of the buffer with the id stored in the variable \"buff\" to a file.\n",
      "description": "With this function you can save the contents of a buffer to a file, ready to be read back into memory using the `buffer_load()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_save.htm"
    },
    "buffer_save_async": {
      "name": "buffer_save_async",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to save."
        },
        {
          "parameter": "filename",
          "description": "The name of the file to save as."
        },
        {
          "parameter": "offset",
          "description": "The offset within the buffer to save from (in bytes)."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer area to save (in bytes)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "The `buffer_save_async()` function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:\n```\nsaveid = buffer_save_async(buff, \"Player_Save.sav\", 0, 16384);\n```\nThe above code saves the contents of the buffer \"*buff*\" to the given save file, storing the ID of the function call in the variable \"*saveid*\". When the save is complete, the asynchronous Save/Load event will be triggered and you can parse the `async_load` map for the correct ID of the function, like this:\n```\nif ds_map_find_value(async_load, \"id\") == saveid\n    {\n        if ds_map_find_value(async_load, \"status\") == false\n        {\n            show_debug_message(\"Save failed!\");\n        }\n    }\n```\nThe above code will first check the id of the DS map that has been created, then check the status of the callback, posting a debug message if there has been any issues.\n",
      "description": "With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the `buffer_load()` function (or any of the other functions for loading buffers). The \"offset\" defines the start position within the buffer for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes). This function works asynchronously, and so the game will continue running while being saved, and all files saved using this function will be placed in a \"default\" folder. This folder does *not* need to be included in the filename as it is added automatically by GameMaker. For example the filename path \"`Data\\Player_Save.sav`\" would actually be saved to \"`default\\Data\\Player_Save.sav`\". However, if you then load the file using the function `buffer_load_async()`, you do not need to supply the \"default\" part of the path either (but any other file function *will* require it, except on consoles Xbox One, PS4 and Nintendo Switch).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_save_async.htm"
    },
    "buffer_save_ext": {
      "name": "buffer_save_ext",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to save."
        },
        {
          "parameter": "filename",
          "description": "The name of the file to save as."
        },
        {
          "parameter": "offset",
          "description": "The offset within the buffer to save from (in bytes)."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer area to save (in bytes)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nbuffer_save_ext(buff, \"Player_Save.sav\", 0, 16384);\n```\nSaves part of the current contents of the buffer with the id stored in the variable \"buff\" to a file.\n",
      "description": "With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the `buffer_load()` function. The \"offset\" defines the start position within the buffer\n    for saving (in bytes), and the \"size\" is the size of the buffer area to be saved from that offset onwards (also in bytes).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_save_ext.htm"
    },
    "buffer_seek": {
      "name": "buffer_seek",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "base",
          "description": "The base position to seek."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuffer_seek(buff, buffer_seek_start, 0);\n    buffer_write(buff, buffer_s16, 0);\n    buffer_write(buff, buffer_s16, x);\n    buffer_write(buff, buffer_s16, y);\n```\nThe above code finds the start of the buffer with the id stored in the variable \"buff\" them writes a series of signed 16bit integer values to it.\n",
      "description": "This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The \"offset\" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"
    },
    "buffer_set_surface": {
      "name": "buffer_set_surface",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "surface",
          "description": "The index of the surface to use."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuffer_set_surface(buff, application_surface, 0);\n```\nThe above code will copy all the data stored in the buffer indexed in the variable \"buff\" to the application surface with no offset.\n",
      "description": "With this function you can write information from a buffer to a given surface. Both the buffer being read from and the surface being written to must have been created previously, and you can provide an offset into the buffer to start reading from. Note that reading will always start at the beginning of the buffer plus the offset value and *not* at the current seek position plus the offset value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_set_surface.htm"
    },
    "buffer_set_used_size": {
      "name": "buffer_set_used_size",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "size",
          "description": "The number of bytes to set as the \"used\" size."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbuffer_write(_bufferAddress, buffer_u8, 1); buffer_write(_bufferAddress, buffer_u8, 2); buffer_write(_bufferAddress, buffer_u16, 400);\n     buffer_set_used_size(_bufferAddress, 4);\n```\nThe above functions would be called in an extension to write some data to a GameMaker buffer (through its memory address), and then set the number of bytes that were written to it so the engine can read that data.\n",
      "description": "This function is primarily for use within extensions, and allows you to set the \"used\" size of the given buffer, which is the number of bytes that have been written to it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_set_used_size.htm"
    },
    "buffer_sha1": {
      "name": "buffer_sha1",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        },
        {
          "parameter": "offset",
          "description": "The data offset value."
        },
        {
          "parameter": "size",
          "description": "The size of the buffer."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncheck_string = buffer_sha1(buff, 0, buffer_get_size(buff));\n```\nThe above code will create a sha1 hash for the full data stored in the buffer indexed by the variable \"buff\", and store the returned hash in the variable \"check_string\".\n",
      "description": "In cryptography, SHA-1 is a cryptographic hashing (tooltip) function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular\n    **Git** where it is used to check for file changes. This function will take input data from a buffer and returns a 160 bit message digest in ASCII format. In this way you can generate a secure key which can be stored and used to check the integrity\n    of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to use, then an offset value (in bytes) for where to begin, and then\n    a size (again in bytes) for the region to be hashed.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_sha1.htm"
    },
    "buffer_sizeof": {
      "name": "buffer_sizeof",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of data that is to be checked (see the list of constants  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_read.htm))."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar b = 12 * buffer_sizeof(buffer_u8); buff = buffer_create(b, buffer_fixed, 1);\n```\nThe above code first calculates the size of the buffer to create by multiplying the unsigned 8bit data type by 12 (since we will be using the buffer to hold 12 pieces of data), and then uses this value to set a fixed buffer to the correct size.\n",
      "description": "This function will return the size (in bytes) of any of the given data constants (listed  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_write.htm)).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_sizeof.htm"
    },
    "buffer_tell": {
      "name": "buffer_tell",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar pos = buffer_tell(buff); buffer_seek(buff, buffer_seek_start, 0); val[0] = buffer_read(buff, buffer_S16); val[1] = buffer_read(buff, buffer_S16); val[2] = buffer_read(buff, buffer_S16); buffer_seek(buff, buffer_seek_start, pos);\n```\nThe above code will store the current seek position within the buffer indexed in the variable \"buff\" to the local variable \"pos\". The buffer seek position will then be set to the start of the buffer, and three pieces of data are\n    read into an array, before finally re-setting the buffer seek position to where it was previously.\n",
      "description": "When you read or write data to a buffer using the `buffer_read()` or `buffer_write()` the current \"seek\" position is advanced by the bytes written or read, and with\n    this function you can get the current \"seek\" position for use in other buffer functions. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a `buffer_tell()`,\n    you'll get an return value of 1. However, if you write another piece of data, also 1 byte in size, then do a `buffer_tell()`, you'll get a return value of 5 as the alignment has \"padded\" the data to that position.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_tell.htm"
    },
    "buffer_write": {
      "name": "buffer_write",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The index of the buffer to write to."
        },
        {
          "parameter": "type",
          "description": "The type of data that is to be written to the buffer (see the list of constants above)."
        },
        {
          "parameter": "value",
          "description": "The data to write."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuffer_seek(buff, buffer_seek_start, 0); buffer_write(buff, buffer_s16, 0); buffer_write(buff, buffer_s16, x); buffer_write(buff, buffer_s16, y);\n```\nThe above code finds the start of the buffer with the id stored in the variable \"buff\" them writes a series of signed 16bit integer values to it.\n",
      "description": "This function can be used to write data to a previously created buffer. The data you write must be in agreement with the \"type\" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example.\n    The following constants can be used to define the data type:",
      "returns": "0 if success, or -1 if it fails",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_write.htm"
    },
    "camera_apply": {
      "name": "camera_apply",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_current == 0\n    {\n        camera_apply(cutscene_cam);\n    }\n```\nThe above code (in a Draw Event) checks to see which camera view is currently being rendered and if it is camera view[0] then the settings for the camera referenced by the variable \"cutscene_cam\" are applied to it.\n",
      "description": "This function will apply the given camera settings to the current camera view being rendered immediately. While you can set any view camera using the specific `camera_set_*` functions, the new settings will not be used for rendering until the *next* game frame, but with this function you can make those changes immediately. If you are using multiple views then the function should be used in the **Draw Event** and you can use the variable `view_current` to selectively apply the given camera only to the camera view currently being rendered. Note that this does NOT change the camera ID value, only the settings for that camera, and that if you use this function on the default camera (ie: the internal camera GameMaker Studio 2 uses when no view cameras are active) the changes will be overwritten the very next game frame by the internal settings for drawing the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_apply.htm"
    },
    "camera_create": {
      "name": "camera_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nview_camera[0] = camera_create(); var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0); var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0); camera_set_view_mat(view_camera[0], viewmat); camera_set_proj_mat(view_camera[0],\n    projmat);\n```\nThe above code creates a new camera and assigns its ID to view[0]. The view and projection matrices are then created and stored in local variables before being used to set the camera.\n",
      "description": "This function will create an \"empty\" camera, ie: a camera with no view or projection settings defined. Once you have created the camera you can then use the different  [matrix functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm)    to set the view and projection matrices. You can also use this function to create the camera and then use the different `camera_set_*` functions to set up the view, however note that you *must* provide at least a position and view size,\n    otherwise the resulting camera will not be valid and give odd results if applied to a view port (if you do not set the object following, borders or move speed these will be set to the default values for a view camera in the Room Editor).",
      "returns": "Real (unique camera ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_create.htm"
    },
    "camera_create_view": {
      "name": "camera_create_view",
      "parameters": [
        {
          "parameter": "room_x",
          "description": "The x position (within the room) of the left side of the area the camera view captures."
        },
        {
          "parameter": "room_y",
          "description": "The y position (within the room) of the top of the area the camera view captures."
        },
        {
          "parameter": "width",
          "description": "The width of the area the view captures."
        },
        {
          "parameter": "height",
          "description": "The height of the area the view captures."
        },
        {
          "parameter": "angle",
          "description": "The angle to set the for the camera view(from 0° - 360°, default is 0)."
        },
        {
          "parameter": "object",
          "description": "The object ID (or instance ID) for the camera view to follow (default is -1, no object)."
        },
        {
          "parameter": "x_speed",
          "description": "The maximum horizontal speed the view can move at (set to -1 for \"instant\" following, default is -1)."
        },
        {
          "parameter": "y_speed",
          "description": "The maximum vertical speed the view can move at (set to -1 for \"instant\" following, default is -1)."
        },
        {
          "parameter": "x_border",
          "description": "The minimum horizontal space between the edge of the view area and the instance it is set to follow (before the view begins moving and if it is set to follow an instance, default is 0)."
        },
        {
          "parameter": "y_border",
          "description": "The minimum vertical space between the edge of the view area and the instance it is set to follow (before the view begins moving and if it is set to follow an instance, default is 0)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ncamera_destroy(view_camera[0]); view_camera[0] = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1);\n```\nThe above code removes the current camera assigned to viewport[0] and then creates a new camera, defines its view properties and then assigns that to viewport[0].\n",
      "description": "This function will create a new camera and then set its view into the room, before return the unique ID value to identify the camera in future function calls. The camera will be created using the values that you set in this function for position, size\n    and other details which correlate to the values you set in the Room Editor (see  [here](https://manual.yoyogames.com/The_Asset_Editors/Rooms.htm)). Note that this function can take a *variable number of arguments* with only the x/y position and width/height\n    arguments being obligatory. Any arguments not supplied will use their default arguments.",
      "returns": "Real (unique camera ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_create_view.htm"
    },
    "camera_destroy": {
      "name": "camera_destroy",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ncamera_destroy(view_camera[0]); view_camera[0] = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1);\n```\nThe above code destroys the camera currently assigned to view port [0] then creates a new camera and assigns its ID to that port.\n",
      "description": "With this function you can destroy any camera. When calling the function you supply the unique camera ID value, which you get from the `camera_create_*` functions or from the `view_camera` array if using the\n    Room Editor to set up the view port and view. You should *never* destroy a camera that is currently assigned to a visible view, unless you are assigning a new camera to that view in the same step, and you should *always* destroy any cameras\n    that you have created through code when no longer required by your game to prevent memory leaks, and you can also destroy the default cameras if you have any assigned in the Room Editor, but you should assign a new camera to the view port (or disable\n    it) otherwise you will get odd results.",
      "returns": "Real (unique camera ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_destroy.htm"
    },
    "camera_get_active": {
      "name": "camera_get_active",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar active = camera_get_active();\n    if active != view_camera[0]\n    {\n        view_camera[0] = active;\n    }\n```\nThe above code gets the camera ID for the active camera and sets the view camera for port[0] to use it.\n",
      "description": "This function can be used to retrieve the unique camera ID value of the currently active camera.",
      "returns": "Camera index (real).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_active.htm"
    },
    "camera_get_begin_script": {
      "name": "camera_get_begin_script",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar scr = camera_get_begin_script(camera_view[0]);\n    if scr != cutScene\n    {\n        camera_set_update_script(camera_view[0], cutScene);\n    }\n```\nThe above code checks the script function assigned as the begin script for the camera assigned to view port[0] and if it is not \"cutScene\" it is set to that function.\n",
      "description": "This function can be used to retrieve the ID of the  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) assigned as the begin script for the given camera. If no script function is assigned then the function will return -1.",
      "returns": "Script function ID or -1 if no script assigned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_begin_script.htm"
    },
    "camera_get_default": {
      "name": "camera_get_default",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar def = camera_get_default(); view_camera[0] = def;\n```\nThe above code gets the camera ID for the default camera and sets the view camera for port[0] to use it.\n",
      "description": "This function can be used to retrieve the unique camera ID value of the default camera (the camera that GameMaker Studio 2 uses when no camera views or ports are active in a game room).",
      "returns": "Camera index (real).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_default.htm"
    },
    "camera_get_end_script": {
      "name": "camera_get_end_script",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar scr = camera_get_end_script(camera_view[0]);\n    if scr != cutScene\n    {\n        camera_set_update_script(camera_view[0], cutScene);\n    }\n```\nThe above code checks the script function assigned as the begin script for the camera assigned to view port[0] and if it is not \"cutScene\" it is set to that function.\n",
      "description": "This function can be used to retrieve the ID of the  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) assigned as the end function for the given camera. If no script function is assigned then the function will return -1.",
      "returns": "Script function ID or -1 if no funciton is assigned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_end_script.htm"
    },
    "camera_get_proj_mat": {
      "name": "camera_get_proj_mat",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmat = camera_get_proj_mat(camera_view[0]);\n```\nThe above code gets the projection matrix for the camera assigned to view port[0].\n",
      "description": "This function can be used to retrieve the projection matrix. The function returns the matrix ID value which can then be used in other  [matrix functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm) or to set the projection\n    matrix of another camera (using `camera_set_proj_mat()`).",
      "returns": "Matrix ID (real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_proj_mat.htm"
    },
    "camera_get_update_script": {
      "name": "camera_get_update_script",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar scr = camera_get_update_script(camera_view[0]);\n    if scr != scr_cutscene\n    {\n        camera_set_update_script(camera_view[0], scr_cutscene);\n    }\n```\nThe above code checks the script function assigned as the update function for the camera assigned to view port[0] and if it is not \"cutScene\" it is set to that script.\n",
      "description": "This function can be used to retrieve the ID of the  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) assigned as the update script for the given camera. If no script is assigned then the function will return -1.",
      "returns": "Script function ID or -1 if no function is assigned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_update_script.htm"
    },
    "camera_get_view_angle": {
      "name": "camera_get_view_angle",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar ang = camera_get_view_angle(view_camera[0]);\n    if ang != 0\n    {\n        camera_set_view_angle(view_camera[0], 0);\n    }\n```\nThe above code retrieves the angle of the camera assigned to view port[0] and then checks this to see if it matches the given value. If it does not then the view camera is set to that angle.\n",
      "description": "This function can be used to retrieve the angle of the given camera. The return value will be between 0 and 360. Note that this function is *only* valid for cameras created using `camera_create_view()` or for those added in the room editor.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_angle.htm"
    },
    "camera_get_view_border_x": {
      "name": "camera_get_view_border_x",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar xb = camera_get_view_border_x(view_camera[0]);\n    var yb = camera_get_view_border_y(view_camera[0]);\n    if xb != 200 || yb != 200\n    {\n        camera_set_view_border(view_camera[0], 200, 200);\n    }\n```\nThe above code retrieves the xborder and yborder values of the camera assigned to view port[0] and then checks this to see if it matches the given value. If it does not then the view camera is set to the given value.\n",
      "description": "This function can be used to retrieve the border value for object/instance following of the given camera along the x axis (horizontal border). The return value will be in pixels.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_border_x.htm"
    },
    "camera_get_view_border_y": {
      "name": "camera_get_view_border_y",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar xb = camera_get_view_border_x(view_camera[0]);\n    var yb = camera_get_view_border_y(view_camera[0]);\n    if xb != 200 || yb != 200\n    {\n        camera_set_view_border(view_camera[0], 200, 200);\n    }\n```\nThe above code retrieves the xborder and yborder values of the camera assigned to view port[0] and then checks this to see if it matches the given value. If it does not then the view camera is set to the given value.\n",
      "description": "This function can be used to retrieve the border value for object/instance following of the given camera along the y axis (vertical border). The return value will be in pixels.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_border_y.htm"
    },
    "camera_get_view_height": {
      "name": "camera_get_view_height",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar vw = camera_get_view_width(view_camera[0]) / 2; var vh = camera_get_view_height(view_camera[0]) / 2; camera_set_view_pos(view_camera[0], x - vw, y - vh);\n```\nThe above code retrieves the width and height of the camera assigned to view port[0] and then sets its position relative to the center.\n",
      "description": "This function can be used to retrieve the height (in pixels) of the given camera. Note that this function is *only* valid for cameras created using `camera_create_view()` or for those added in the room\n    editor.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_height.htm"
    },
    "camera_get_view_mat": {
      "name": "camera_get_view_mat",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmat = camera_get_view_mat(camera_view[0]);\n```\nThe above code gets the view matrix for the camera assigned to view port[0].\n",
      "description": "This function can be used to retrieve the view matrix. The function returns the matrix ID value which can then be used in other  [matrix functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm) or to set the view matrix of\n    another camera (using `camera_set_view_mat()`). Note that this function is generally for use with cameras created using `camera_create()`, but it can also be used\n    on those created in the room editor (or with `camera_create_view()`) - in which case the returned matrix will only be valid after the given camera is used in a view port for the first time.",
      "returns": "Matrix ID (real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_mat.htm"
    },
    "camera_get_view_speed_x": {
      "name": "camera_get_view_speed_x",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar xs = camera_get_view_speed_x(view_camera[0]);\n    var ys = camera_get_view_speed_y(view_camera[0]);\n    if xs != 5 || ys != 5\n    {\n        camera_set_view_speed(view_camera[0], 5, 5);\n    }\n```\nThe above code retrieves the xspeed and yspeed of the camera assigned to view port[0] and then checks this to see if it matches the given value. If it does not then the view camera is set to that speed.\n",
      "description": "This function can be used to retrieve the movement speed of the given camera along the x axis (horizontal movement). The return value will be in pixels per game frame.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_speed_x.htm"
    },
    "camera_get_view_speed_y": {
      "name": "camera_get_view_speed_y",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar xs = camera_get_view_speed_x(view_camera[0]);\n    var ys = camera_get_view_speed_y(view_camera[0]);\n    if xs != 5 || ys != 5\n    {\n        camera_set_view_speed(view_camera[0], 5, 5);\n    }\n```\nThe above code retrieves the xspeed and yspeed of the camera assigned to view port[0] and then checks this to see if it matches the given value. If it does not then the view camera is set to that speed.\n",
      "description": "This function can be used to retrieve the movement speed of the given camera along the y axis (vertical movement). The return value will be in pixels per game frame.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_speed_y.htm"
    },
    "camera_get_view_target": {
      "name": "camera_get_view_target",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar target = camera_get_view_target(view_camera[0]);\n    if target != obj_Player\n    {\n        camera_set_view_target(view_camera[0], obj_Player);\n    }\n```\nThe above code retrieves the follow target of the camera assigned to view port[0] and then checks this to see if it matches the object index \"obj_Player\". If it does not then the view camera is set to follow an instance of that object.\n",
      "description": "This function can be used to retrieve the follow target of the given camera. The return value can be an object index, an instance ID or -1 if no follow target has been set.",
      "returns": "Object Index, Instance ID, or -1 if no target is set.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_target.htm"
    },
    "camera_get_view_width": {
      "name": "camera_get_view_width",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar vw = camera_get_view_width(view_camera[0]) / 2; var vh = camera_get_view_height(view_camera[0]) / 2; camera_set_view_pos(view_camera[0], x - vw, y - vh);\n```\nThe above code retrieves the width and height of the camera assigned to view port[0] and then sets its position relative to the center.\n",
      "description": "This function can be used to retrieve the width (in pixels) of the given camera. Note that this function is *only* valid for cameras created using `camera_create_view()` or for those added in the room\n    editor.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_width.htm"
    },
    "camera_get_view_x": {
      "name": "camera_get_view_x",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar vx = camera_get_view_x(view_camera[0]); var vy = camera_get_view_y(view_camera[0]); draw_text(vx + 5, vy + 5, \"SCORE\" + string(score));\n```\nThe above code retrieves the position of the camera assigned to view port[0] and then draws text relative to that position.\n",
      "description": "This function can be used to retrieve the x position of the view for a given camera. Note that this function is *only* valid for cameras created using `camera_create_view()` or for those added in the\n    room editor.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_x.htm"
    },
    "camera_get_view_y": {
      "name": "camera_get_view_y",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar vx = camera_get_view_x(view_camera[0]); var vy = camera_get_view_y(view_camera[0]); draw_text(vx + 5, vy + 5, \"SCORE\" + string(score));\n```\nThe above code retrieves the position of the camera assigned to view port[0] and then draws text relative to that position.\n",
      "description": "This function can be used to retrieve the y position of the view for a given camera. Note that this function is *only* valid for cameras created using `camera_create_view()` or for those added in the\n    room editor.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_get_view_y.htm"
    },
    "camera_set_begin_script": {
      "name": "camera_set_begin_script",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "script",
          "description": "The script function to run each game frame"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ncamera_set_begin_script(view_camera[0], beginCamera);\n```\nThe above code sets the begin script function for the camera assigned to view port [0].\n",
      "description": "This function can be used to set a  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) that will be called at the beginning of every game frame that the camera is assigned to a visible and active view port. You give the unique camera\n    ID value (as returned by the different  [camera_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_create.htm) functions) and the ID of the function to be called. The order in which scripts attached to cameras and the actual rendering of the camera view is as follows:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_begin_script.htm"
    },
    "camera_set_default": {
      "name": "camera_set_default",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar new_cam = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1); camera_set_default(new_cam);\n  \n```\nThe above code creates a new camera and then assigns it as the default camera to use.\n",
      "description": "This function can be used to set the default camera to use a custom camera that you have previously created using one of the `camera_create()` functions. When you create a room with *no* active view ports\n    or view cameras, GameMaker Studio 2 still uses a camera to show the action in the game. This camera is called the **default** camera and can be set and manipulated (and even destroyed) just like any other camera.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_default.htm"
    },
    "camera_set_end_script": {
      "name": "camera_set_end_script",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "script",
          "description": "The script to run each game frame"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ncamera_set_end_script(view_camera[0], endCamera);\n```\nThe above code sets the end script for the camera assigned to view port [0].\n",
      "description": "This function can be used to set a  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) that will be called at the end of every game frame that the camera is assigned to a visible and active view port, after everything for that view\n    camera has been rendered. You give the unique camera ID value (as returned by the different `camera_create()` functions) and the ID of the function to be called. The order in which functions attached to cameras\n    and the actual rendering of the camera view is as follows:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_end_script.htm"
    },
    "camera_set_proj_mat": {
      "name": "camera_set_proj_mat",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "matrix",
          "description": "The unique matrix ID returned when you created the matrix."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nview_camera[0] = camera_create();\n    var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);\n    var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);\n    camera_set_view_mat(view_camera[0], viewmat);\n    camera_set_proj_mat(view_camera[0], projmat);\n```\nThe above code creates a new camera and assigns it to view port[0]. This camera then has its view and projection matrices set.\n",
      "description": "This function will set the **projection matrix** for a given camera. You give the unique camera ID value (as returned by the different `camera_create()` functions) and a projection matrix to be applied. You can find out more about creating projection matrices from the section  [Matrix Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm), specifically  [matrix_build_projection_perspective()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_perspective.htm) and `matrix_build_projection_ortho()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_proj_mat.htm"
    },
    "camera_set_update_script": {
      "name": "camera_set_update_script",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "script",
          "description": "The script function to run each game frame"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ncamera_set_update_script(view_camera[0], updateCamera);\n```\nThe above code sets the update function for the camera assigned to view port [0].\n",
      "description": "This function can be used to set a  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) that will be called every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned\n    by the different `camera_create` functions) and the ID of the function to be called. The order in which functions attached to cameras and the actual rendering of the camera view is as follows:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_update_script.htm"
    },
    "camera_set_view_angle": {
      "name": "camera_set_view_angle",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        },
        {
          "parameter": "angle",
          "description": "The new angle to set the camera view to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ncamera_set_view_angle(view_camera[0], point_direction(x, y, mouse_x, mouse_y));\n```\nThe above code will set the view camera angle for the camera assigned to view port[0].\n",
      "description": "You can use this function to update the angle of the view camera within the room. You give the unique camera ID value (as returned by the different `camera_create()` functions) and then give the angle that you\n    wish to set the camera view to. The default value is 0° with positive values rotating the camera **counter-clockwise**, ie: setting the value to 90 will rotate the camera 90° to the left.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_angle.htm"
    },
    "camera_set_view_border": {
      "name": "camera_set_view_border",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "x_border",
          "description": "The border (in pixels) for the view camera along the horizontal axis"
        },
        {
          "parameter": "y_border",
          "description": "The border (in pixels) for the view camera along the vertical axis"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncamera_set_view_border(view_camera[0], 64, 64);\n```\nThe above code will set the view camera border for the camera assigned to view port[0].\n",
      "description": "You can use this function to set the follow border of the view camera within the room. You give the unique camera ID value (as returned by the different `camera_create` functions) and then give the x border size and the y border size (horizontal\n    and vertical). These values will only be used when the view camera has been assigned an instance target to follow (either in the Room Editor or using the function `camera_set_view_target()`) and relate\n    to how far from the border of the view the instance needs to be before the view will update its position to follow.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_border.htm"
    },
    "camera_set_view_mat": {
      "name": "camera_set_view_mat",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "matrix",
          "description": "The unique matrix ID returned when you created the matrix."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nview_camera[0] = camera_create();\n    var viewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0);\n    var projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0);\n    camera_set_view_mat(view_camera[0], viewmat);\n    camera_set_proj_mat(view_camera[0], projmat);\n```\nThe above code creates a new camera and assigns it to view port[0]. This camera then has its view and projection matrices set.\n",
      "description": "This function will set the **view matrix** for a given camera. You give the unique camera ID value (as returned by the different `camera_create()` functions) and a view matrix to be applied. You can find out more about creating view matrices from the section  [Matrix Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm), specifically `matrix_build_lookat()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_mat.htm"
    },
    "camera_set_view_pos": {
      "name": "camera_set_view_pos",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "x",
          "description": "The x position to place the view at (in the room)"
        },
        {
          "parameter": "y",
          "description": "The y position to place the view at (in the room)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncamera_set_view_pos(view_camera[0], x - (view_wport[0] / 2), y - (view_hport[0] / 2));\n```\nThe above code will set the view camera position for the camera assigned to view port[0].\n",
      "description": "You can use this function to update the position of the camera view within the room. You give the unique camera ID value (as returned by the different  [camera_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_create.htm) functions) and then give the x and y positions\n    to set the camera to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_pos.htm"
    },
    "camera_set_view_size": {
      "name": "camera_set_view_size",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "width",
          "description": "The width of the camera view in pixels"
        },
        {
          "parameter": "height",
          "description": "The height of the camera view in pixels"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncamera_set_view_size(view_camera[0], view_wport[0], view_hport[0]);\n```\nThe above code will set the view camera size for the camera assigned to view port[0].\n",
      "description": "You can use this function to update the size of the view camera within the room. You give the unique camera ID value (as returned by the different `camera_create()` functions) and then give the width and height\n    (in pixels) to set the camera to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_size.htm"
    },
    "camera_set_view_speed": {
      "name": "camera_set_view_speed",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera."
        },
        {
          "parameter": "xspeed",
          "description": "The speed (number of pixels per game frame) that the view should move on the horizontal (x) axis"
        },
        {
          "parameter": "yspeed",
          "description": "The speed (number of pixels per game frame) that the view should move on the vertical (y) axis"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncamera_set_view_speed(view_camera[0], 5, 5);\n```\nThe above code will set the view camera speed for the camera assigned to view port[0].\n",
      "description": "You can use this function to update the speed of the view camera within the room. You give the unique camera ID value (as returned by the different `camera_create()` functions) and then give the x and y (horizontal\n    and vertical) speed that it should move when set to follow a given instance. The speed is calculated as pixels per step and can be set to \"-1\" to make the camera move instantly, but if the camera is not set to follow any instance then the\n    values set here will have no visible effect.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_speed.htm"
    },
    "camera_set_view_target": {
      "name": "camera_set_view_target",
      "parameters": [
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        },
        {
          "parameter": "instance_id/object_id",
          "description": "Instance or object to have the camera target for following"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ncamera_set_view_target(view_camera[0], id);\n```\nThe above code will set the view camera target for the camera assigned to view port[0] to that of the instance running the code.\n",
      "description": "You can use this function to set the follow target of the view camera within the room. You give the unique camera ID value (as returned by the different `camera_create()` functions) and then give the target instance\n    or object ID that you wish to set the camera view to. Note that if you choose an object ID and there is more than one instance of that object in the room, there is no way for GameMaker Studio 2 to know which instance you wish to follow and\n    so it could be any of them.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/camera_set_view_target.htm"
    },
    "ceil": {
      "name": "ceil",
      "parameters": [
        {
          "parameter": "x",
          "description": "The number to change."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = ceil( 3.4 );\n```\nThis will set val to 4.\n",
      "description": "This function takes any real number and rounds it up to the nearest integer. Care should be taken with this function as one common mistake is to use it round up a random value and expect it always to be greater than 1, ie:",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/ceil.htm"
    },
    "choose": {
      "name": "choose",
      "parameters": [
        {
          "parameter": "val0... max_val",
          "description": "An input value that can be string, integer, variable or constant."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\nsprite_index = choose(spr_Cactus, spr_Flower, spr_Tree, spr_Shrub); hp = choose(5, 8, 15, 32, 40); name = choose(\"John\", \"Steven\", \"Graham\", \"Jack\", \"Emily\", \"Tina\", \"Jill\",\n    \"Helen\");\n```\nThe above code uses choose to set a number of properties for the instance.\n",
      "description": "Sometimes you want to specify something other than numbers for a random selection, or the numbers you want are not in any real order or within any set range. In these cases you would use `choose()` to generate a random result. For example, say\n    you want to create an object with a random sprite at the start, then you could use this function to set the sprite index to one of a set of given sprites. Note that you can have as many as you require (note that more arguments will mean that the function\n    will be slower to parse).",
      "returns": "One of the given arguments",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/choose.htm"
    },
    "chr": {
      "name": "chr",
      "parameters": [
        {
          "parameter": "val",
          "description": "The Unicode code value to get the string from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmystring = chr(53) + chr(48);\n```\nThis would set mystring to \"50\" (a string, not an integer) as chr(53) is \"5\" and chr(48) is \"0\".\n",
      "description": "This function returns a string containing the character which relates to the input Unicode code for displaying. This character depends on the current drawing fonts character set code page and if no font is set, it will use the default code page for\n    the machine.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/chr.htm"
    },
    "clamp": {
      "name": "clamp",
      "parameters": [
        {
          "parameter": "val",
          "description": "The value to clamp."
        },
        {
          "parameter": "min",
          "description": "The minimum value to clamp between."
        },
        {
          "parameter": "max",
          "description": "The maximum value to clamp between."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nspeed = clamp(speed, 1, 10);\n```\nThe above code will clamp the speed so that it never falls below 1 or goes over 10.\n",
      "description": "With this function you can maintain an input value between a specified range.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/clamp.htm"
    },
    "clickable_add": {
      "name": "clickable_add",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position within the *window*."
        },
        {
          "parameter": "y",
          "description": "The y position within the *window*."
        },
        {
          "parameter": "tpe",
          "description": "The texture page entry for the sprite to be used."
        },
        {
          "parameter": "url",
          "description": "The URL (website address) to link to, or the script to be run."
        },
        {
          "parameter": "target",
          "description": "This is the target area to open the URL in (see description)."
        },
        {
          "parameter": "params",
          "description": "The various parameters for the icon (see description)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nhome_but = clickable_add(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\");\n```\nThe above code creates a clickable DOM icon at the position (32, 32) of the page that the game canvas is running on. The icon uses the sprite referenced from the texture page as \"spr_MS_Home\" and when clicked the icon will open a new window for the specified URL and with the defined properties for that window.\n",
      "description": "With this function you can create a custom, clickable, icon that acts as a \"button\" outside of the game canvas, but within the browser window itself. The function will return an id value which must be stored in a variable to be used in all further button functions that reference the new icon. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through GameMaker Studio 2 itself.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_add.htm"
    },
    "clickable_add_ext": {
      "name": "clickable_add_ext",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position within the *window*."
        },
        {
          "parameter": "y",
          "description": "The y position within the *window*."
        },
        {
          "parameter": "tpe",
          "description": "The texture page entry for the sprite to be used."
        },
        {
          "parameter": "url",
          "description": "The URL (website address) to link to, or the script to be run."
        },
        {
          "parameter": "target",
          "description": "This is the target area to open the URL in (see description)."
        },
        {
          "parameter": "params",
          "description": "The various parameters for the icon (see description)."
        },
        {
          "parameter": "alpha",
          "description": "The image alpha of the icon (default 1)."
        },
        {
          "parameter": "scale",
          "description": "The scale of the icon (default 1)."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nhome_but = clickable_add_ext(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\", 1, 2);\n```\nThe above code creates a clickable DOM icon at the position (32, 32) of the page that the game canvas is running on. The icon uses the sprite referenced from the texture page as \"spr_MS_Home\" and when clicked the icon will open a new window\n    for the specified URL and with the defined properties for that window. the button will also be scaled to twice the original sprite size and half an image alpha of 1.\n",
      "description": "With this function you can create a custom, clickable, icon that acts as a \"button\" outside of the game canvas, but within the browser window itself. The function will return an id value which must be stored in a variable to be used in all\n    further button functions that reference the new icon. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through GameMaker Studio 2 itself.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_add_ext.htm"
    },
    "clickable_change": {
      "name": "clickable_change",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the clickable icon to change."
        },
        {
          "parameter": "tpe",
          "description": "The texture page entry for the sprite to be used."
        },
        {
          "parameter": "x",
          "description": "The new x position within the *window*."
        },
        {
          "parameter": "y",
          "description": "The new y position within the *window*."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nswitch (room)\n    {\n        case rm_Menu: clickable_change(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 1), 32, 32); break;\n        case rm_Game: clickable_change(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 0), 200, 32); break;\n    }\n```\nThe above code will change the image index and position of the clickable icon indexed in the variable \"global.Help\" depending on the current room.\n",
      "description": "With this function you can change the sprite and position of a clickable icon previously created with `clickable_add()`. Please note that the position is based on the window, *not* the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: `sprite_get_tpe()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_change.htm"
    },
    "clickable_change_ext": {
      "name": "clickable_change_ext",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the clickable icon to change."
        },
        {
          "parameter": "tpe",
          "description": "The texture page entry for the sprite to be used"
        },
        {
          "parameter": "x",
          "description": "The new x position within the *window*."
        },
        {
          "parameter": "y",
          "description": "The new y position within the *window*."
        },
        {
          "parameter": "scale",
          "description": "The scale of the icon (default 1)."
        },
        {
          "parameter": "alpha",
          "description": "The image alpha of the icon (default 1)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nswitch (room)\n    {\n        case rm_Menu: clickable_change_ext(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 1), 32, 32, 2, 1); break;\n        case rm_Game: clickable_change_ext(global.Help_Icon, sprite_get_tpe(spr_MS_Help, 0), 200, 32, 1, 0.5); break;\n    }\n```\nThe above code will change the image index and position of the clickable icon indexed in the variable \"global.Help\" depending on the current room, changing the icon scale and alpha too.\n",
      "description": "With this function you can change the sprite and position of a clickable icon previously created with `clickable_add()`. Bear in mind that the position is based on the window, *not* the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: `sprite_get_tpe()`). This function also permits you to change the scale of the sprite used (as a multiplier so that 1 is the default, 0.5 would be half and 2 would be double) and the alpha value from 0 (fully transparent) to 1 (fully opaque) for the final icon on the screen.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_change_ext.htm"
    },
    "clickable_delete": {
      "name": "clickable_delete",
      "parameters": [
        {
          "parameter": "index",
          "description": "Index of the clickable icon to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif clickable_exists(global.Help_Icon)\n    {\n        clickable_delete(global.Help_Icon);\n    }\n```\nThe above code removes the clickable icon indexed in the global variable \"Help_Icon\" from the game window, if it exists.\n",
      "description": "This function must be used to remove a clickable icon previously created with `clickable_add()` from the game window.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_delete.htm"
    },
    "clickable_exists": {
      "name": "clickable_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the clickable to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !clickable_exists(home_but)\n    {\n        home_but = clickable_add(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\");\n    }\n```\nThe above code checks the variable \"home_but\" to see if it already exists, and if it does not it creates a clickable DOM icon at the position (32, 32) of the page that the game canvas is running on. The icon uses the sprite referenced from the texture page as \"spr_MS_Home\" and when clicked the icon will open a new window for the specified URL and with the defined properties for that window.\n",
      "description": "This function returns whether a clickable DOM icon has been created with the specified index exists or not. Please note, that the value used for checking *must have been initialised previously* or else you will get an error causing GameMaker Studio 2 to close.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_exists.htm"
    },
    "clickable_set_style": {
      "name": "clickable_set_style",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the clickable icon to style."
        },
        {
          "parameter": "map",
          "description": "The index of the `DS Map` to set the style from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create(); ds_map_add(map, \"opacity\", \"0.5\"); clickable_set_style(button, map); ds_map_destroy();\n  \n```\nThe above code will change the style of the clickable button with the index stored in the variable \"button\".\n",
      "description": "This function lets you set the CSS style properties for the given button via the key/value pairs in the provided `DS Map`. You need to have previously created the both the button element (using\n    `clickable_add()`) and the `DS Map` and supply the stored indices to each as arguments.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_set_style.htm"
    },
    "clipboard_get_text": {
      "name": "clipboard_get_text",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif clipboard_has_text()\n    {\n        str = clipboard_get_text();\n        clipboard_set_text(\"\");\n    }\n```\nThe above code checks the clipboard for text and if it contains any, it is read as a string into the variable \"str\". Finally the clipboard is cleared by setting it to an empty string.\n",
      "description": "This function will return a string of the text contained on the clipboard. if no text is stored it will return an empty string \"\".",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/clipboard_get_text.htm"
    },
    "clipboard_has_text": {
      "name": "clipboard_has_text",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif clipboard_has_text()\n    {\n        str = clipboard_get_text();\n        clipboard_set_text(\"\");\n    }\n```\nThe above code checks the clipboard for text and if it contains any, it is read as a string into the variable \"str\". Finally the clipboard is cleared by setting it to an empty string.\n",
      "description": "This function will return `true` if the clipboard contains text or `false` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/clipboard_has_text.htm"
    },
    "clipboard_set_text": {
      "name": "clipboard_set_text",
      "parameters": [
        {
          "parameter": "string",
          "description": "The text (as a string) to set the clipboard to hold."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif clipboard_has_text()\n    {\n        str = clipboard_get_text();\n        clipboard_set_text(\"\");\n    }\n```\nThe above code checks the clipboard for text and if it contains any, it is read as a string into the variable \"str\". Finally the clipboard is cleared by setting it to an empty string.\n",
      "description": "This function will set the clipboard to hold the defined string. You can set it to an empty string \"\" to effectively clear the clipboard of text.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/clipboard_set_text.htm"
    },
    "cloud_file_save": {
      "name": "cloud_file_save",
      "parameters": [
        {
          "parameter": "string",
          "description": "The file to be uploaded (as a string)."
        },
        {
          "parameter": "description",
          "description": "A brief description of the data being stored."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar t_str = \"\";\n    for (var i = 0; i < 10; i++;)\n    {\n        t_str += string(global.Highscore[i]) + \"|\"\n    }\n    var file = file_text_open_write(\"Highscores.txt\");\n    file_text_write_string(file, t_str);\n    file_text_close(file);\n    save_check = cloud_file_save(\"Highscores.txt\", \"Current Highscores\");\n```\nThe above code creates a string from the values stored in the global array \"Highscores\" and then writes this string to a file for local storage. The file is then sent to the cloud service for storage.\n",
      "description": "This function will commit a file to the chosen cloud service for storage. The function will return a unique **id** value that should then be used in the appropriate asynchronous event to identify the DS map that is returned as a \"call back\" from the cloud service. The file should contain *all* the information that you need to save for your game as you can only store one single \"data blob\" to the cloud, and running this function again will overwrite any previously stored values (as will using the `cloud_string_save()` function). The description should be a short string of information that describes the save, eg: \"Level2, Stage2\".",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Cloud_Saving/cloud_file_save.htm"
    },
    "cloud_string_save": {
      "name": "cloud_string_save",
      "parameters": [
        {
          "parameter": "string",
          "description": "The data string to be uploaded."
        },
        {
          "parameter": "description",
          "description": "A brief description of the data being stored."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar t_str = \"\";\n    for (var i = 0; i < 10; i++;)\n    {\n        t_str += string(global.Highscore[i]) + \"|\"\n    }\n    save_check = cloud_string_save(t_str, \"Current Highscores\");\n    var file = file_text_open_write(\"Highscores.txt\");\n    file_text_write_string(file, t_str);\n    file_text_close(file);\n```\nThe above code creates a string from the values stored in the global array \"Highscores\" and then writes this string to the cloud service for storage, as well as writing it to a file for local storage.\n",
      "description": "This function will commit a string to the chosen cloud service for storage. The function will return a unique **id** value that should then be used in the appropriate asynchronous event to identify the DS map that is returned as a \"call back\" from the cloud service. The string should contain *all* the information that you need to save for your game as you can only store one single \"data blob\" to the cloud, and running this function again will overwrite any previously stored values (as will using the `cloud_file_save()` function). The description should be a short string of information that describes the save, eg: \"Level2, Stage2\".",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Cloud_Saving/cloud_string_save.htm"
    },
    "cloud_synchronise": {
      "name": "cloud_synchronise",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "This function would be called in an event like the **Game Start Event** or in an object that is placed in the first room of your game, with the idea being that you check the current data blob from the cloud server to see if it is up to date or not.\n```\ncloud_check = cloud_synchronise();\n```\nYou would then want to check the returned `DS Map` in the asynchronous **Cloud Event** to get the status and the returned string, if there is one, with something like the following code:\n```\nif ds_map_find_value(async_load, \"id\") == cloud_check\n    {\n        if ds_map_find_value(async_load, \"status\") < 0\n        {\n            show_message_async(\"Cloud Services not available. Please check connectivity.\");\n        }\n        else\n        {\n            if ds_map_find_value(async_load, \"status\") == 0\n            {\n                var file = file_text_open_write(\"Save.txt\");\n                file_text_write_string(file, ds_map_find_value(async_load, \"resultString\"));\n                file_text_close(file);\n            }\n        }\n    }\n```\nThe above code checks to make sure that the correct asynchronous function call is being revised, then goes on to get the status of the returned cloud DS map. if the status is a negative number, something has gone wrong and the user is informed, otherwise the code will continue and retrieve the synchronised data and write it to a text file for later use.\n",
      "description": "This function would normally be called at the start of a new game and is used to retrieve the current status of the cloud service at game start up. The function returns a unique **id** value which would then be used in the  [Asynchronous Cloud Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Cloud.htm) to retrieve the relevant information from the DS map that is created.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Cloud_Saving/cloud_synchronise.htm"
    },
    "code_is_compiled": {
      "name": "code_is_compiled",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif code_is_compiled()\n    {\n        show_debug_message(\"Compiler okay!\");\n    }\n```\nThe above code checks to see if the game was compiled using the YoYo Compiler and shows a debug message if it was.\n",
      "description": "This function will return `true` if the platform compiles outside of the virtual machine, such as for the YYC and JS platforms.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/code_is_compiled.htm"
    },
    "collision_circle": {
      "name": "collision_circle",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the center of the circle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the center of the circle to check."
        },
        {
          "parameter": "rad",
          "description": "The radius (distance in pixels from its center to its edge)."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif collision_circle(x, y, 20, obj_Cursor, false, true)\n    {\n        image_index = 1;\n    }\n    else image_index = 0;\n```\nThe code above will check a circular are with a 20pixel radius for a collision with \"obj_Cursor\" and if there is one it will set the image_index of the object running the code to 1, but if there is not it will set the image_index of the object to 0.\n",
      "description": "Collision_circle creates a circular zone of the radius given by the user around the points x1,y1 and then checks that zone for a collision with **any** instance of the object specified by the argument \"obj\". This check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for *must* also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:",
      "returns": "Instance id or noone",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_circle.htm"
    },
    "collision_circle_list": {
      "name": "collision_circle_list",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the center of the circle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the center of the circle to check."
        },
        {
          "parameter": "rad",
          "description": "The radius (distance in pixels from its center to its edge)."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = collision_circle_list(x, y, 100, obj_Enemy, false, true, _list, false);\n    if (_num > 0)\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    ds_list_destroy(_list);\n```\nThe code above will check a circular area with a 100 pixel radius around the calling instance position for collisions with instances of \"obj_Enemy\". If there are any collisions, then the pre-created list is looped through and each instance that was in the collision is destroyed.\n",
      "description": "This function is the same as the `collision_circle()` function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the center of the circular area to check along with the radius and the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have *precise* collision masks) and whether the check should include the calling instance or not.",
      "returns": "Int (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_circle_list.htm"
    },
    "collision_ellipse": {
      "name": "collision_ellipse",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the ellipse to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the ellipse to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the ellipse to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom side of the ellipse to check."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nif collision_ellipse(50, 50, 200, 100, obj_Player, false, true)\n    {\n        instance_create_layer(obj_Player.x, obj_Player.y, \"Effects\", obj_Splash);\n    }\n```\nThis will check an elliptical zone within the bounds of 50x, 50y and 200x, 100y for the object \"obj_Player\". If there is a collision with that object, then it will create an instance of \"obj_Splash\" at the x/y coordinates of obj_Player.\n",
      "description": "Collision_ellipse uses the first four arguments (x1,y1,x2,y2) to define the width and height of an ellipse within the current room and then checks to see if **any** object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:",
      "returns": "Instance id or noone",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_ellipse.htm"
    },
    "collision_ellipse_list": {
      "name": "collision_ellipse_list",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the ellipse to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the ellipse to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the ellipse to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom side of the ellipse to check."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = collision_ellipse_list(x - 100, y - 100, x + 100, y + 100, obj_Enemy, false, true, _list, false);\n    if _num > 0\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    ds_list_destroy(_list);\n```\nThe code above will check an elliptical area 100 pixels around the calling instance position for collisions with instances of \"obj_Enemy\". If there are any collisions, then the pre-created list is looped through and each instance that was in the collision is destroyed.\n",
      "description": "This function is the same as the `collision_ellipse()` function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the top left and bottom right of the elliptical area to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have *precise* collision masks) and whether the check should include the calling instance or not.",
      "returns": "Int (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_ellipse_list.htm"
    },
    "collision_line": {
      "name": "collision_line",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nwith (obj_Enemy)\n    {\n        if collision_line(100, 400, 100, 600, id, false, false) instance_destroy();\n    }\n```\nThis code gets all instances of \"obj_Enemy\" to check along a line from 100x, 400y to 100x, 600y for a collision with themselves, and if there is one then they are destroyed.\n",
      "description": "Collision_line checks along a line from point x1,y1 to point x2,y2 for a collision with **any** instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for *must* also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:",
      "returns": "Instance id or noone",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_line.htm"
    },
    "collision_line_list": {
      "name": "collision_line_list",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = collision_line_list(x - 100, y, x + 100, y, obj_Enemy, false, true, _list, false);\n    if _num > 0\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    ds_list_destroy(_list);\n```\nThe code above will check a line 100 pixels either side of the calling instance position for collisions with instances of \"obj_Enemy\". If there are any collisions, then the pre-created list is looped through and each instance that was in the collision is destroyed.\n",
      "description": "This function is the same as the `collision_line()` function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the start and end of the line to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have *precise* collision masks) and whether the check should include the calling instance or not.",
      "returns": "Integer (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_line_list.htm"
    },
    "collision_point": {
      "name": "collision_point",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the point to check."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the point to check."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif collision_point(x, y, obj_Cursor, false, true)\n    {\n        score += 10S;\n    }\n```\nHere we are checking the point at the position of the object that has the code for the object \"obj_Cursor\". If there is one, then we add 10 onto the score variable.\n",
      "description": "Collision_point checks the point specified by the arguments x1,y1 for a collision with **any** instance of the object specified by the argument \"obj\". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for *must* also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:",
      "returns": "Instance id or noone",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_point.htm"
    },
    "collision_point_list": {
      "name": "collision_point_list",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the point to check."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the point to check."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = collision_point_list(x, y, obj_Enemy, false, true, _list, false);\n    if _num > 0\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    ds_list_destroy(_list);\n```\nThe code above will check the position of the calling instance for collisions with instances of \"obj_Enemy\". If there are any collisions, then the pre-created list is looped through and each instance that was in the collision is destroyed.\n",
      "description": "This function is the same as the `collision_point()` function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the point to check and you can set the check to be precise (in which case all instances being checked will need to have *precise* collision masks) and whether the check should include the calling instance or not.",
      "returns": "Integer (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_point_list.htm"
    },
    "collision_rectangle": {
      "name": "collision_rectangle",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the rectangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the rectangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the rectangle to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom side of the rectangle to check."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nvar inst;\n    inst = collision_rectangle(50, 50, 200, 100, obj_Ball, false, true);\n    if inst != noone\n    {\n        with (inst) instance_destroy();\n    }\n```\nThis short code uses collision_rectangle check an area in the room from 50x, 50y (top left of the rectangle) to 200x, 200y (bottom right of the rectangle) for an instance of an object called \"obj_ball\". It stores the return value in a temporary variable which is then checked to see if that value is an instance id, or the keyword **noone**. If it is *not* **noone** then it uses the stored instance id to destroy the object.\n",
      "description": "Collision_rectangle uses the first four arguments (x1,y1,x2,y2) to define an area within the current room and then checks to see if **any** object that is defined by the \"obj\" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:",
      "returns": "Instance id or noone",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_rectangle.htm"
    },
    "collision_rectangle_list": {
      "name": "collision_rectangle_list",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the rectangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the rectangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the rectangle to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom side of the rectangle to check."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instance collisions."
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on precise collisions (`true`, which is slower) or its bounding box in general (`false`, faster)."
        },
        {
          "parameter": "notme",
          "description": "Whether the calling instance, if relevant, should be excluded (`true`) or not (`false`)."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = collision_rectangle_list(x - 100, y - 100, x + 100, y + 100, obj_Enemy, false, true, _list, false);\n    if _num > 0\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    ds_list_destroy(_list);\n```\nThe code above will check a rectangular area 100 pixels around the calling instance position for collisions with instances of \"obj_Enemy\". If there are any collisions, then the pre-created list is looped through and each instance that was in the collision is destroyed.\n",
      "description": "This function is the same as the `collision_rectangle()` function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the top left and bottom right of the area to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have *precise* collision masks) and whether the check should include the calling instance or not.",
      "returns": "Integer (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/collision_rectangle_list.htm"
    },
    "colour_get_blue": {
      "name": "colour_get_blue",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nb_comp = colour_get_blue(c_teal);\n```\nThe above code will get the blue component of the colour constant \"c_teal\" and store the value in the variable \"b_comp\".\n",
      "description": "This function returns the amount of blue used to make the given colour, with the value being between 0 and 255, where 0 is no blue and 255 is all blue. The following image illustrates this:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_blue.htm"
    },
    "colour_get_green": {
      "name": "colour_get_green",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ng_comp = colour_get_green(c_teal);\n```\nThe above code will get the green component of the colour constant \"c_teal\" and store the value in the variable \"g_comp\".\n",
      "description": "This function returns the amount of green used to make the given colour, with the value being between 0 and 255, where 0 is no green and 255 is all green. The following image illustrates this:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_green.htm"
    },
    "colour_get_hue": {
      "name": "colour_get_hue",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ncol = merge_colour(colour_get_hue(c_teal), c_white, 0.5);\n```\nThe above code gets the hue used to make the colour constant \"c_teal\" and then merges it with white at a 50:50 ratio, storing the resulting colour in the variable \"col\".\n",
      "description": "This function will return the hue of the given colour. This is the \"pure\" colour tone which is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the\n    HSV scale of colour:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_hue.htm"
    },
    "colour_get_red": {
      "name": "colour_get_red",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nr_comp = colour_get_red(c_teal);\n```\nThe above code will get the red component of the colour constant \"c_teal\" and store the value in the variable \"r_comp\".\n",
      "description": "This function returns the amount of red used to make the given colour, with the value being between 0 and 255, where 0 is no red and 255 is all red. The following image illustrates this:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_red.htm"
    },
    "colour_get_saturation": {
      "name": "colour_get_saturation",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ncol = make_colour_hsv(random(255), colour_get_sat(c_teal), 255);\n```\nThe above code gets the saturation used to make the colour constant \"c_teal\" and then uses that value to set a random colour to have the same saturation, storing the resulting colour in the variable \"col\".\n",
      "description": "This function will return the saturation of the given colour. This is the amount of the colour tone that is mixed into the final colour and is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates\n    how this value corresponds to the HSV scale of colour:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_saturation.htm"
    },
    "colour_get_value": {
      "name": "colour_get_value",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ncol = make_colour_hsv(random(255), 255, colour_get_value(c_teal));\n```\nThe above code gets the value used to make the colour constant \"c_teal\" and then uses that value to set a random colour to have the same luminosity, storing the resulting colour in the variable \"col\".\n",
      "description": "This function will return the value (luminosity) of the given colour. This is the amount of the \"light\" that is mixed into the final colour and is part of the hue, saturation and value method for defining a colour. The following image illustrates\n    how this value corresponds to the HSV scale of colour:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/colour_get_value.htm"
    },
    "cos": {
      "name": "cos",
      "parameters": [
        {
          "parameter": "val",
          "description": "The angle (in radians) to return the cosine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = cos( 0 );\n```\nThis will set val to 1.\n",
      "description": "In a right angled triangle *cos(val) = Adjacent / Hypotenuse* where val is one of the three angles. This function will always return a number between 1 and -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/cos.htm"
    },
    "darccos": {
      "name": "darccos",
      "parameters": [
        {
          "parameter": "x",
          "description": "The value to return the inverse cosine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = arccos(-1);\n```\nThis will set \"val\" to 180.\n",
      "description": "Returns the inverse cosine of x, in that if dcos(val)=n, darccos(n)=val, and the resulting number will be between 180 and 0.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darccos.htm"
    },
    "darcsin": {
      "name": "darcsin",
      "parameters": [
        {
          "parameter": "val",
          "description": "The value to return the inverse sine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = darcsin(-1);\n```\nThis will set \"val\" to -90.\n",
      "description": "Returns the inverse sine of x, in that if dsin(x)=n, darcsin(n)=x, and the resulting number will be between -90 and 90.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darcsin.htm"
    },
    "darctan": {
      "name": "darctan",
      "parameters": [
        {
          "parameter": "val",
          "description": "The value to return the inverse tangent of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = darctan(1);\n```\nThis will set \"val\" to -45.\n",
      "description": "Returns the inverse tangent of x. This will accept any number as, unlike dtan(), darctan() asymptotes are on the y axis so it just means you'll never get returned a number\n    greater than 90 or less than -90.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darctan.htm"
    },
    "darctan2": {
      "name": "darctan2",
      "parameters": [
        {
          "parameter": "y",
          "description": "The y coordinate to calculate."
        },
        {
          "parameter": "x",
          "description": "The x coordinate to calculate."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nval = darctan2(1, 1);\n```\nThis will set \"val\" to the correct angle.\n",
      "description": "This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike darctan()    the function darctan2() is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/darctan2.htm"
    },
    "date_compare_date": {
      "name": "date_compare_date",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first date."
        },
        {
          "parameter": "date2",
          "description": "The date to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nd = date_compare_date(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());\n```\nThis would set \"d\" to the corresponding value depending on which of the dates was the earliest, likely 1 since the current date would be further ahead than 15th September 2011.\n",
      "description": "With this function you can check two dates to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 0 if both dates are the same, and 1 if date1 is later.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_compare_date.htm"
    },
    "date_compare_datetime": {
      "name": "date_compare_datetime",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nd = date_compare_datetime(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());\n```\nThis would set d to the corresponding value depending on which of the datetimes was the earliest, likely -1 since the current date would be further ahead than 15th September 2011.\n",
      "description": "With this function you can check two dates and times to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 1 if date1 is later and 0 if they are the same, although since this takes time into account as\n    well, a 0 for matching is very rare (it literally has to be the same second of the same day of the same month of the same year to return a 0).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_compare_datetime.htm"
    },
    "date_compare_time": {
      "name": "date_compare_time",
      "parameters": [
        {
          "parameter": "datetime1",
          "description": "The first datetime."
        },
        {
          "parameter": "datetime2",
          "description": "The datetime to compare the first one to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nd = date_compare_time(date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime());\n```\nThis would set \"d\" to the corresponding value depending on which of the times was the earliest. Basically, if the current time is later than 11:04 am, it would return 1. If earlier, -1. If the time is 11:04, it would return 0.\n",
      "description": "With this function you can check two dates and times to see which one has the time component earlier or later than the other. The function returns -1 if datetime1 is earlier, 1 if datetime1 is later and 0 if they are the same, and it ignores the date,\n    so literally just which of the times is further through its given day.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_compare_time.htm"
    },
    "date_create_datetime": {
      "name": "date_create_datetime",
      "parameters": [
        {
          "parameter": "year",
          "description": "The year to set."
        },
        {
          "parameter": "month",
          "description": "The month to set."
        },
        {
          "parameter": "day",
          "description": "The day to set."
        },
        {
          "parameter": "hour",
          "description": "The hour to set."
        },
        {
          "parameter": "minute",
          "description": "The minute to set."
        },
        {
          "parameter": "second",
          "description": "The second to set."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nmydatetime = date_create_datetime(2011, 9, 15, 9, 43, 30);\n```\nThis would set \"mydatetime\" to the given date and time and store the returned value in the variable \"mydatetime\".\n",
      "description": "This function will create a datetime value from the component given as the arguments.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_create_datetime.htm"
    },
    "date_current_datetime": {
      "name": "date_current_datetime",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmyhour = date_get_hour(date_current_datetime()); myday = date_get_day(date_current_datetime());\n```\nThis would set local variable myhour to the hour of the current time, and myday to the day of the current date.\n",
      "description": "Returns the date-time value of the current moment. The time returned is based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function `date_set_timezone()`",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_current_datetime.htm"
    },
    "date_date_string": {
      "name": "date_date_string",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr = date_date_string(date_current_datetime()); draw_text(32, 32, str);\n```\nThis would set \"str\" to hold a formatted string of the current date and time as shown by the system.\n",
      "description": "With this function you can create a string containing the given date, formatted as day/month/year.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_date_string.htm"
    },
    "date_datetime_string": {
      "name": "date_datetime_string",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr = date_datetime_string(date_current_datetime());\n```\nThis would set \"str\" to something like \"September 15th 2011, 11:33.00\" depending on the system settings for date/time displaying and the current date and time.\n",
      "description": "With this function you can create a string containing the given datetime, formatted for the system or device that is running the game when the function is called.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_datetime_string.htm"
    },
    "date_day_span": {
      "name": "date_day_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_day_span(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());\n```\nThis would set diff to the number of days between 15th September 2011, 11:04.0 and the current date and time.\n",
      "description": "With this function you can get the number of days between two dates. This value is always positive, and incomplete days will be returned as a fraction.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_day_span.htm"
    },
    "date_days_in_month": {
      "name": "date_days_in_month",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndays = date_days_in_month(date_current_datetime());\n```\nThis would set \"days\" to the number of days in the current month.\n",
      "description": "With this function you can get the number of days that the given month has, either 28, 29, 30 or 31.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_days_in_month.htm"
    },
    "date_days_in_year": {
      "name": "date_days_in_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndays = date_days_in_year(date_current_datetime());\n```\nThis would set \"days\" to the number of days in the current year.\n",
      "description": "With this function you can get the number of days that the given year has, returning 365 for a normal year, and 366 for a leap year.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_days_in_year.htm"
    },
    "date_get_day": {
      "name": "date_get_day",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyday = date_get_day( date_current_datetime() );\n```\nThis would set \"myday\" to the current day.\n",
      "description": "This function returns the day (from 1 to 31) of the given datetime.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_day.htm"
    },
    "date_get_day_of_year": {
      "name": "date_get_day_of_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmydayyear = date_get_day_of_year(date_current_datetime());\n```\nThis would set mydayyear to the current day of the year.\n",
      "description": "This function returns the day (from 1 to 366) within the year of the given datetime.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_day_of_year.htm"
    },
    "date_get_hour": {
      "name": "date_get_hour",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyhour = date_get_hour(date_current_datetime());\n```\nThis would set \"myhour\" to the current hour.\n",
      "description": "This function returns the hour of the given datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_hour.htm"
    },
    "date_get_hour_of_year": {
      "name": "date_get_hour_of_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyhouryear = date_get_hour_of_year(date_current_datetime());\n```\nThis would set \"myhouryear\" to the current hour of the year.\n",
      "description": "This function returns the hour of the given datetime value within the year (from the total number of hours for the year, taking into account leap years).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_hour_of_year.htm"
    },
    "date_get_minute": {
      "name": "date_get_minute",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyminute = date_get_minute(date_current_datetime());\n```\nThis would set \"myminute\" to the current minute.\n",
      "description": "This function returns the minute of the given datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_minute.htm"
    },
    "date_get_minute_of_year": {
      "name": "date_get_minute_of_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyminuteyear = date_get_minute_of_year(date_current_datetime());\n```\nThis would set myminuteyear to the current minute of the year.\n",
      "description": "This function returns the minute of the given datetime value within the year (from the total number of minutes for the year, taking into account leap years).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_minute_of_year.htm"
    },
    "date_get_month": {
      "name": "date_get_month",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmymonth = date_get_month(date_current_datetime());\n```\nThis would set mymonth to the current month.\n",
      "description": "This function returns the month of the given datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_month.htm"
    },
    "date_get_second": {
      "name": "date_get_second",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmysecond = date_get_second(date_current_datetime());\n```\nThis would set mysecond to the current second.\n",
      "description": "This function returns the second of the given datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_second.htm"
    },
    "date_get_second_of_year": {
      "name": "date_get_second_of_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmysecondyear = date_get_second_of_year(date_current_datetime());\n```\nThis would set \"mysecondyear\" to the current second of the year.\n",
      "description": "This function returns the second of the given datetime value within the year (from the total number of seconds for the year, taking into account leap years).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_second_of_year.htm"
    },
    "date_get_timezone": {
      "name": "date_get_timezone",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (date_get_timezone() != timezone_utc)\n    {\n        date_set_timezone(timezone_utc);\n    }\n```\nThis code checks the base time zone setting for the game and if it is not UTC it then changes it.\n",
      "description": "Gets the base time zone being used for all the rest of the date and time functions. This time zone can either be *local* (as set by the system) or *UTC*, and the function will return one of the following constants:",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_timezone.htm"
    },
    "date_get_week": {
      "name": "date_get_week",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyweek = date_get_week(date_current_datetime());\n```\nThis would set myweek to the current week.\n",
      "description": "This function returns the week of the given datetime value within the year.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_week.htm"
    },
    "date_get_weekday": {
      "name": "date_get_weekday",
      "parameters": [
        {
          "parameter": "date",
          "description": "The date to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyweekday = date_get_weekday(date_current_datetime());\n```\nThis would set \"myweekday\" to the current weekday.\n",
      "description": "This function returns the week day value of the given datetime. This will be a value from 0 to 6.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_weekday.htm"
    },
    "date_get_year": {
      "name": "date_get_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyyear = date_get_year(date_current_datetime());\n```\nThis would set \"myyear\" to the current year.\n",
      "description": "This function returns the year of the given datetime.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_year.htm"
    },
    "date_hour_span": {
      "name": "date_hour_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare the first one to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_hour_span(date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime());\n```\nThis would set \"diff\" to the number of hours between 15th September 2011, 11:04.0 and the current date and time.\n",
      "description": "With this function you can get the number of hours between two dates. This value is always positive, and incomplete hours will be returned as a fraction.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_hour_span.htm"
    },
    "date_inc_day": {
      "name": "date_inc_day",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to."
        },
        {
          "parameter": "amount",
          "description": "The number of days (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_day(date_current_datetime(), 365);\n```\nThis would set \"mynewdatetime\" to the current date but with 365 days added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of days, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_day.htm"
    },
    "date_inc_hour": {
      "name": "date_inc_hour",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to."
        },
        {
          "parameter": "amount",
          "description": "The number of hours (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_hour(date_current_datetime(), 24);\n```\nThis would set mynewdatetime to the current date but with 24 hours added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of hours, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_hour.htm"
    },
    "date_inc_minute": {
      "name": "date_inc_minute",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to."
        },
        {
          "parameter": "amount",
          "description": "The number of minutes (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_minute(date_current_datetime(), 60);\n```\nThis would set \"mynewdatetime\" to the current date but with 60 minutes added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of minutes, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_minute.htm"
    },
    "date_inc_month": {
      "name": "date_inc_month",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to."
        },
        {
          "parameter": "amount",
          "description": "The number of months (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_month(date_current_datetime(), 12);\n```\nThis would set \"mynewdatetime\" to the current date but with 12 months added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of months, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_month.htm"
    },
    "date_inc_second": {
      "name": "date_inc_second",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to."
        },
        {
          "parameter": "amount",
          "description": "The number of seconds (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_second(date_current_datetime(), 60);\n```\nThis would set \"mynewdatetime\" to the current date but with 60 seconds added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of seconds, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_second.htm"
    },
    "date_inc_week": {
      "name": "date_inc_week",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to."
        },
        {
          "parameter": "amount",
          "description": "The number of weeks (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_week(date_current_datetime(), 52);\n```\nThis would set mynewdatetime to the current date but with 52 weeks added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of weeks, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_week.htm"
    },
    "date_inc_year": {
      "name": "date_inc_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to add to"
        },
        {
          "parameter": "amount",
          "description": "The number of years (must be an integer) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmynewdatetime = date_inc_year(date_current_datetime(), 1000);\n```\nThis would set mynewdatetime to the current date but with 1000 years added.\n",
      "description": "With this function you can increment a given datetime value by a specific number of years, and it will return the new datetime value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_inc_year.htm"
    },
    "date_is_today": {
      "name": "date_is_today",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif date_is_today(global.Halloween)\n    {\n        global.Max_Levels = 200;\n    }\n```\nThe above code will check the datetime stored in the global variable \"Halloween\" to see if it is today, and if it is it sets another global variable to a new value.\n",
      "description": "This function will return `true` if the given datetime value is the day it is being checked on (ie: today), or `false` otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking seasonal content. Note that this function will be affected by the time zone set (default is local time) which you can change using the `date_set_timezone()` function.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_is_today.htm"
    },
    "date_leap_year": {
      "name": "date_leap_year",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif date_leap_year(date_current_datetime())\n    {\n        if !global.ExtraContent\n        {\n            global.ExtraContent = true;\n        }\n    }\n```\nThe above code will check the current datetime to see if the year is a leap year or not. If it is it sets a global variable.\n",
      "description": "This function will return `true` if the year component of the given datetime value is a leap year or `false` otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking special content.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_leap_year.htm"
    },
    "date_minute_span": {
      "name": "date_minute_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_minute_span(date_create_datetime(2011, 9, 15, 11, 4, 0 ), date_current_datetime());\n```\nThis would set \"diff\" to the number of minutes between 15th September 2011, 11:04.0 and the current date and time.\n",
      "description": "With this function you can get the number of minutes between two dates. This value is always positive, and incomplete minutes will be returned as a fraction.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_minute_span.htm"
    },
    "date_month_span": {
      "name": "date_month_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_month_span(date_create_datetime(2011, 9, 15, 11, 4, 0 ), date_current_datetime());\n```\nThis would set \"diff\" to the number of months between 15th September 2011, 11:04.0 and the current date and time.\n",
      "description": "With this function you can get the number of months between two dates. This value is always positive, and incomplete months will be returned as a fraction.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_month_span.htm"
    },
    "date_second_span": {
      "name": "date_second_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_second_span(date_create_datetime(2011, 9, 15, 11, 4, 0 ), date_current_datetime());\n```\nThis would set \"diff\" to the number of seconds between 15th September 2011, 11:04 and the current date and time.\n",
      "description": "With this function you can get the number of seconds between two dates. The return value is always positive and will be a whole number.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_second_span.htm"
    },
    "date_set_timezone": {
      "name": "date_set_timezone",
      "parameters": [
        {
          "parameter": "timezone",
          "description": "The time zone to use for the base time."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (date_get_timezone() != timezone_utc)\n    {\n        date_set_timezone(timezone_utc);\n    }\n```\nThis code checks the base time zone setting for the game and if it is not UTC it then changes it.\n",
      "description": "Sets the base time zone to use for all the rest of the date and time functions. This time zone can either be *local* (as set by the system) or *UTC*, and you would use one of the following constants to define which is being used (by default this is local time):",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_set_timezone.htm"
    },
    "date_time_of": {
      "name": "date_time_of",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to extract the time from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntime = date_time_of(date_current_datetime());\n```\nThis would return the current time only and store the value in the variable \"time\".\n",
      "description": "Returns the time value of the given datetime. The time returned ignores Daylight Saving Time (and so is Universal Time) and would normally be used in conjunction with another date/time handling function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_time_of.htm"
    },
    "date_time_string": {
      "name": "date_time_string",
      "parameters": [
        {
          "parameter": "date",
          "description": "The datetime to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr = date_time_string(date_current_datetime());\n```\nThis would set the given variable to something like \"11:36.00\" depending on the system settings for date/time displaying and the current date and time.\n",
      "description": "With this function you can create a string containing the given time, formatted for the system or device that is running the game when the function is called.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_time_string.htm"
    },
    "date_valid_datetime": {
      "name": "date_valid_datetime",
      "parameters": [
        {
          "parameter": "year",
          "description": "The year to check."
        },
        {
          "parameter": "month",
          "description": "The month to check."
        },
        {
          "parameter": "day",
          "description": "The day to check."
        },
        {
          "parameter": "hour",
          "description": "The hour to check."
        },
        {
          "parameter": "minute",
          "description": "The minute to check."
        },
        {
          "parameter": "second",
          "description": "The second to check."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif date_valid_datetime(2011, 9, 15, 10, 3, 30)\n    {\n        mydatetime = date_create_datetime(2011, 9, 15, 10, 3, 30);\n    }\n```\nThis will set \"mydatetime\" to 15th September 2011, 10:03.30, if it is a valid value (which it is).\n",
      "description": "With this function you can check a datetime value to see if it is valid (returns `true`) or not (returns `false`). Note that this function will only consider a valid datetime as being *after* 1/1/1970 and anything before that will return `false`, so the earliest you can check would be:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_valid_datetime.htm"
    },
    "date_week_span": {
      "name": "date_week_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_week_span( date_create_datetime( 2011, 9, 15, 11, 4, 0 ), date_current_datetime() );\n```\nThis would set \"diff\" to the number of weeks between 15th September 2011, 11:04.0 and the current date and time.\n",
      "description": "With this function you can get the number of weeks between two dates. This value is always positive, and incomplete weeks will be returned as a fraction.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_week_span.htm"
    },
    "date_year_span": {
      "name": "date_year_span",
      "parameters": [
        {
          "parameter": "date1",
          "description": "The first datetime."
        },
        {
          "parameter": "date2",
          "description": "The datetime to compare it to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndiff = date_year_span(date_create_datetime(2011, 9, 15, 11, 4, 0), date_current_datetime());\n```\nThis would set diff to the number of years between 15th September 2011, 11:04.0 and the current date and time.\n",
      "description": "With this function you can get the number of years between two dates. This value is always positive, and incomplete years will be returned as a fraction.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_year_span.htm"
    },
    "dcos": {
      "name": "dcos",
      "parameters": [
        {
          "parameter": "val",
          "description": "The angle (in degrees) to return the cosine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = dcos(45);\n```\nThis will set \"val\" to 0.71.\n",
      "description": "In a right angled triangle *cos(val) = Adjacent / Hypotenuse* where val is one of the three angles. This function will always return a number between 1 and -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dcos.htm"
    },
    "debug_event": {
      "name": "debug_event",
      "parameters": [
        {
          "parameter": "string",
          "description": "The custom debug event string to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !surface_exists(global.EffectsSurface)\n    {\n        debug_event(\"Recreating Effects Surface\");\n        global.EffectsSurface = surface_create(room_width, room_height);\n    }\n```\nThe above code checks to see if an surface exists and if it does not, a debug event is triggered in the graph view of the debugger (the game must have been run in Debug Mode for this to be visible) and the surface is recreated.\n",
      "description": "This function generates a custom debug event that will be shown in the Graph View of the debugger when a game is being run in  [Debug Mode](https://manual.yoyogames.com/Introduction/Debugging.htm). If you require messages to be displayed when *not* in debug mode, then you should be using `show_debug_message()`. It is worth noting that the function will also take two reserved strings to help perform debugging using external applications like Visual Studio. These strings are:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/debug_event.htm"
    },
    "debug_get_callstack": {
      "name": "debug_get_callstack",
      "parameters": [
        {
          "parameter": "[maxdepth]",
          "description": "The maximum depth of the callstack"
        }
      ],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif debug_mode\n    {\n        if keyboard_check(vk_escape)\n        {\n            var _a = debug_get_callstack(4);\n            for (var i = 0; i < array_length_id(_a); ++i;)\n            {\n                show_debug_message(_a[i]);\n            }\n        }\n    }\n```\nThe above code checks to see if debug mode is enabled and if it is, checks to see if a key is being held down. In that case, it outputs the current call stack to the console, with a maximum depth of 4.\n",
      "description": "This function generates an array of strings as the \"callstack\" where the current script is listed first, and then all the other scripts that were run in order for the current script to be executed. The exact string format will vary depending on the target platform chosen, but it will mostly have the script/event name, then a colon : and the line number, similar to this:",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/debug_get_callstack.htm"
    },
    "degtorad": {
      "name": "degtorad",
      "parameters": [
        {
          "parameter": "deg",
          "description": "The degrees to convert."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = degtorad(90);\n```\nThis will set val to pi/2.\n",
      "description": "In GM all the trigonometric functions work in radians, but most people work in degrees and this means that to convert your degrees into radians you need to use this function. For example, `degtorad(180) `returns 3.14159265 radians. This function\n    translates degrees into radians using the formula:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/degtorad.htm"
    },
    "device_get_tilt_x": {
      "name": "device_get_tilt_x",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif display_get_orientation() = display_landscape\n    {\n        x += sign(device_get_tilt_y());\n    }\n    else\n    {\n        x += sign(device_get_tilt_x());\n    }\n```\nThe above code checks the orientation of the display and then uses the corresponding tilt value to move the player along the x axis.\n",
      "description": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90°. The image below shows how each if the available functions relates to the device:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_get_tilt_x.htm"
    },
    "device_get_tilt_y": {
      "name": "device_get_tilt_y",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif display_get_orientation() = display_landscape\n    {\n        x += sign(device_get_tilt_y());\n    }\n    else\n    {\n        x += sign(device_get_tilt_x());\n    }\n```\nThe above code checks the orientation of the display and then uses the corresponding tilt value to move the player along the x axis.\n",
      "description": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90°. The image below shows how each if the available functions relates to the device:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_get_tilt_y.htm"
    },
    "device_get_tilt_z": {
      "name": "device_get_tilt_z",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ny += sign(device_get_tilt_z());\n```\nThe above code uses the tilt value to move the player along the y axis.\n",
      "description": "This function returns a value between -1 and 1 depending upon the angle of \"tilt\" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or\n    -1 is the same as +/-90°. The image below shows how each if the available functions relates to the device:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_get_tilt_z.htm"
    },
    "device_mouse_check_button": {
      "name": "device_mouse_check_button",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked"
        },
        {
          "parameter": "button",
          "description": "The button of the device that is being checked."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left) && device_mouse_check_button(1, mb_left) {\n         room_goto(rm_Menu); }\n  \n```\nThe above code checks to see if the two touches are being held down at the same time and if they then it goes to another room.\n",
      "description": "This function returns `true` or `false` depending on whether the given **mouse button** is being held down on the given **device**. For the mouse button you can supply one of the constants listed  [on this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_check_button.htm"
    },
    "device_mouse_check_button_pressed": {
      "name": "device_mouse_check_button_pressed",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        },
        {
          "parameter": "button",
          "description": "The button of the device that is being checked."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button_pressed(0, mb_left)\n    {\n        press = true;\n    }\n```\nThe above code checks to see if the device has been pressed and sets a variable to true if it has.\n",
      "description": "This function returns `true` or `false` depending on whether the device that you specify has been \"touched\" (clicked) or not. The device argument refers to the touch number, which can be from 0 to n and the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs (most devices will support at least 4 simultaneous touches). This function is only triggered *once *by the actual pressing action, and the constants listed  [on this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm) can be used to check for the mouse buttons. Note that `mb_right` will only be detected if a double tap touch is detected and held on the second tap (this behavior can be disabled using the function  [device_mouse_dbclick_enable()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_dbclick_enable.htm)).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_check_button_pressed.htm"
    },
    "device_mouse_check_button_released": {
      "name": "device_mouse_check_button_released",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        },
        {
          "parameter": "button",
          "description": "The button of the device that is being checked."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button_released(0, mb_left)\n    {\n        press = false;\n    }\n```\nThe above code checks to see if the device has been pressed and sets a variable to false if it has.\n",
      "description": "This function returns `true` or `false` depending on whether the device touch that you specify has been released or not. The device argument refers to the device touch number, which can be from 0 to n and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs (most devices will support at least 4 simultaneous touches). This function is only triggered once by the actual releasing action, and the constants listed  [on this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm) can be used to check for the mouse buttons. Note that `mb_right` will only have been detected if a double tap touch is detected and held on the second tap before release (this behavior can be disabled using the function  [device_mouse_dbclick_enable()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_dbclick_enable.htm)).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_check_button_released.htm"
    },
    "device_mouse_dbclick_enable": {
      "name": "device_mouse_dbclick_enable",
      "parameters": [
        {
          "parameter": "bool",
          "description": "Set double-click detection on (`true`) or off (`false`)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif os_type == os_windows || os_type == os_mac\n    {\n        device_mouse_dbclick_enable(false);\n    }\n```\nThe above code checks to see if the device running the game is a Windows PC or a Mac and if it is either of them, it disables the double tap function.\n",
      "description": "This function can be used to set the device to detect a double tap of the `mb_left` (left mouse button) as an `mb_right` (right mouse button) tap or not. By default this is set to `true`, meaning that every time the user taps the device screen twice quickly and consecutively, the return value is the same as if the right mouse button had been clicked. When this is on, the first tap will be detected as `mb_left`, and the second as `mb_right`, so make sure that any code you use takes this into account.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_dbclick_enable.htm"
    },
    "device_mouse_raw_x": {
      "name": "device_mouse_raw_x",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left) && device_mouse_check_button(1, mb_left)\n    {\n        x_av = mean(device_mouse_raw_x(0), device_mouse_raw_x(1));\n        y_av = mean(device_mouse_raw_y(0), device_mouse_raw_y(1));\n    }\n```\nThe above code checks to see if device1 and device2 are being pressed, and if they are it calculates the average position of the x/y coordinates between each press point.\n",
      "description": "This function returns the raw x position of a touch on the device. What this means is that it returns the actual device definition of the x position that is being touched, *not* the GameMaker Studio 2 one, and as such will ignore things like view position and scaling. Note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_raw_x.htm"
    },
    "device_mouse_raw_y": {
      "name": "device_mouse_raw_y",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left) && device_mouse_check_button(1, mb_left)\n    {\n        x_av = mean(device_mouse_raw_x(0), device_mouse_raw_x(1));\n        y_av = mean(device_mouse_raw_y(0), device_mouse_raw_y(1));\n    }\n```\nThe above code checks to see if device1 and device2 are being pressed, and if they are it calculates the average position of the x/y coordinates between each press point.\n",
      "description": "This function returns raw y position of the touch on a device. What this means is that it returns the actual device definition of the y position that is being touched, *not* the GameMaker Studio 2 one, and as such will ignore things like view position and scaling. Note that the maximum number of device touches that can be detected will depend very much on the device being used and the OS it runs",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_raw_y.htm"
    },
    "device_mouse_x": {
      "name": "device_mouse_x",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left)\n    {\n        if device_mouse_x(0) > x-32 && device_mouse_x(0) < x+32\n        {\n            pressed = true;\n        }\n        else\n        {\n            pressed = false;\n        }\n    }\n```\nThe above code checks to see if the device is being pressed and if so it then polls the device x position to see if it is within the parameters. If it is it sets the variable \"pressed\" to `true`, other wise it sets it to `false`.\n",
      "description": "This function returns the x position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_x.htm"
    },
    "device_mouse_x_to_gui": {
      "name": "device_mouse_x_to_gui",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left)\n    {\n        if device_mouse_x_to_gui(0) > 0 && device_mouse_x_to_gui(0) < 32\n        {\n            pressed = true;\n        }\n        else\n        {\n            pressed = false;\n        }\n    }\n```\nThe above code checks to see if the device mouse is being pressed and if so it then polls the device x position on the GUI layer to see if it is within the parameters. If it is it sets the variable \"pressed\" to `true`, other wise it sets it to `false`.\n",
      "description": "This function returns the x position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution *and* the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_x_to_gui.htm"
    },
    "device_mouse_y": {
      "name": "device_mouse_y",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left)\n    {\n        if device_mouse_y(0) > y-32 && device_mouse_y(0) < y+32\n        {\n            pressed = true;\n        }\n        else\n        {\n            pressed = false;\n        }\n    }\n```\nThe above code checks to see if the device is being pressed and if so it then polls the device y position to see if it is within the parameters. If it is it sets the variable \"pressed\" to `true`, other wise it sets it to `false`.\n",
      "description": "This function returns the y position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_y.htm"
    },
    "device_mouse_y_to_gui": {
      "name": "device_mouse_y_to_gui",
      "parameters": [
        {
          "parameter": "device",
          "description": "The device (from 0 - *n*) that is being checked."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif device_mouse_check_button(0, mb_left)\n    {\n        if device_mouse_y_to_gui(0) > 0 && device_mouse_y_to_gui(0) < 32\n        {\n            pressed = true;\n        }\n        else\n        {\n            pressed = false;\n        }\n    }\n```\nThe above code checks to see if the device mouse is being pressed and if so it then polls the device x position on the GUI layer to see if it is within the parameters. If it is it sets the variable \"pressed\" to `true`, other wise it sets it to `false`.\n",
      "description": "This function returns the y position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution *and* the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_mouse_y_to_gui.htm"
    },
    "directory_create": {
      "name": "directory_create",
      "parameters": [
        {
          "parameter": "dname",
          "description": "The name of the directory to create."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !directory_exists(\"Games\")\n    {\n        directory_create(\"Games\");\n    }\n```\nThis will check to see if the specified directory exists in the local data folder and, if it does not, it creates it for you.\n",
      "description": "This function will creates a directory with the given name in the save area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_create.htm"
    },
    "directory_destroy": {
      "name": "directory_destroy",
      "parameters": [
        {
          "parameter": "dname",
          "description": "The name of the directory to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif directory_exists(\"DLC\")\n    {\n        directory_destroy(\"DLC\");\n    }\n```\nThis will check to see if the specified directory exists in the local data folder and, if it does, it is removed.\n",
      "description": "This function will remove a directory with the given name in the save area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_destroy.htm"
    },
    "directory_exists": {
      "name": "directory_exists",
      "parameters": [
        {
          "parameter": "dname",
          "description": "The name of the directory to look for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif directory_exists(working_directory + \"Saves/\")\n    {\n        file = file_find_first(working_directory + \"Saves/*.doc\", fa_readonly);\n    }\n```\nThis will check to see if the specified directory exists then, if it does, go there and return the first \"read only\" `doc` file found.\n",
      "description": "This function will return `true` if the indicated directory exists or `false` if it does not. The specified name must include the full path, not a relative path and by default you cannot access any directories from out-with the game bundle as all games are sandboxed (see the section on the  [File System](https://manual.yoyogames.com/Additional_Information/The_File_System.htm) for more information).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Directories/directory_exists.htm"
    },
    "display_get_dpi_x": {
      "name": "display_get_dpi_x",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndpx = display_get_dpi_x();\n```\nThis would set the variable \"dpx\" to the dpi value of the x axis.\n",
      "description": "Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60 and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_dpi_x.htm"
    },
    "display_get_dpi_y": {
      "name": "display_get_dpi_y",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndpy = display_get_dpi_y();\n```\nThis would set the variable \"dpy\" to the dpi value of the y axis.\n",
      "description": "Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this\n    is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60\n    and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_dpi_y.htm"
    },
    "display_get_frequency": {
      "name": "display_get_frequency",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _freq = display_get_frequency();\n    \n    if (_freq >= 240)\n    {\n        game_set_speed(240, gamespeed_fps);\n    }\n    else if (_freq >= 120)\n    {\n        game_set_speed(120, gamespeed_fps);\n    }\n    else if (_freq >= 60)\n    {\n        game_set_speed(60, gamespeed_fps);\n    }\n    else\n    {\n        game_set_speed(30, gamespeed_fps);\n    }\n  \n```\nThe above code gets the frequency of the display, and runs some conditions to set the game running at 240, 120, 60 or 30 fps. This means that if your display is 90hz the game will run at 60 fps, if it's 144hz then it will run at 120 fps, etc. Of course, you can pass the frequency of the display directly into  [game_set_speed()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_set_speed.htm) so it's used as the game's frame rate.\n",
      "description": "This function returns the frequency (or refresh rate) of the display that the game is being played on. It will return a real value as frames-per-second, so for example if your monitor is 60hz you will get 60, if it's running at 144hz then you will get 144, and so on.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_frequency.htm"
    },
    "display_get_gui_width": {
      "name": "display_get_gui_width",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nads_move(display_get_gui_width() - ads_get_display_width(0), 0, 0);\n```\nThe above code will set an advert to display at the top right-hand of the display.\n",
      "description": "With this function you can get the width (in pixels) of the GUI as used in the  [Draw GUI Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Draw_Events.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"
    },
    "display_get_height": {
      "name": "display_get_height",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmyheight = display_get_height();\n```\nThis would set the variable \"myheight\" to the display's height.\n",
      "description": "This function will return the height of the display (in pixels). Note that on the HTML5 target, this value is the height of the *browser window*, rather than the physical display size.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_height.htm"
    },
    "display_get_orientation": {
      "name": "display_get_orientation",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif display_get_orientation() == display_landscape\n    {\n        global.Config = 0;\n    }\n    else\n    {\n        global.Config = 1;\n    }\n```\nThe above code checks the orientation of the device and sets a global variable depending on the value returned.\n",
      "description": "This function will return one of two constants GameMaker Studio 2 has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below). Note that this function may not correctly detect the orientation of the device when used in the HTML5 target module. However this is easily mimicked by the use of the following script:",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm"
    },
    "display_get_sleep_margin": {
      "name": "display_get_sleep_margin",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif display_get_timing_method() != tm_sleep\n    {\n        display_set_timing_method(tm_sleep);\n        if display_get_sleep_margin() != 20\n        {\n            display_set_sleep_margin(20);\n        }\n    }\n```\nThe above code will check the timing method and then if it's not set to `tm_sleep` it will be set to that and the sleep margin set to 20.\n",
      "description": "This function can be used to get the current sleep margin value used for the render timing of your game, and will return a millisecond value. For more information on display timing, please see `display_set_timing_method()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_sleep_margin.htm"
    },
    "display_get_timing_method": {
      "name": "display_get_timing_method",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif display_get_timing_method() != tm_sleep\n    {\n        display_set_timing_method(tm_sleep);\n        if display_get_sleep_margin() != 20\n        {\n            display_set_sleep_margin(20);\n        }\n    }\n```\nThe above code will check the timing method and then if it's not set to `tm_sleep` it will be set to that and the sleep margin set to 20.\n",
      "description": "This function can be used to retrieve the timing method to be used for rendering your game. The method can be one of the constants listed below.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_timing_method.htm"
    },
    "display_get_width": {
      "name": "display_get_width",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmywidth = display_get_width();\n```\nThis would set the variable \"mywidth\" to the display's width.\n",
      "description": "This function will return the width of the display (in pixels). Note that on the HTML5 target, this value is the width of the *browser window*, rather than the physical display size.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_width.htm"
    },
    "display_mouse_get_x": {
      "name": "display_mouse_get_x",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmy_x = display_mouse_get_x();\n```\nThis would set my_x to the x coordinate of the mouse relative to the display.\n",
      "description": "This function will return the mouse x position within the *screen*. It should be noted that this function only works properly when used on the Windows target. It can be used for HTML5 too, but will only return a value *relative* to the 0,0\n    of the canvas itself, and will not return any value while the mouse is outside of the canvas. For other devices it will return 0, and you should use the `device_mouse_raw_x()`and\n    `device_mouse_raw_y()` functions instead.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_mouse_get_x.htm"
    },
    "display_mouse_get_y": {
      "name": "display_mouse_get_y",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmy_y = display_mouse_get_y();\n```\nThis would set my_y to the y coordinate of the mouse relative to the display.\n",
      "description": "This function will return the mouse y position within the *screen*. It should be noted that this function only works properly when used on the Windows target. It can be used for HTML5 too, but will only return a value *relative* to the 0,0\n    of the canvas itself, and will not return any value while the mouse is outside of the canvas. For other devices it will return 0, and you should use the `device_mouse_raw_x()`    and `device_mouse_raw_y()` functions instead.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_mouse_get_y.htm"
    },
    "display_mouse_set": {
      "name": "display_mouse_set",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate in the display."
        },
        {
          "parameter": "y",
          "description": "The y coordinate in the display."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndisplay_mouse_set(display_get_width() / 2, display_get_height() / 2);\n```\nThe above code would center the mouse in the game display.\n",
      "description": "With this function you can change or set the position of the mouse within the game display which can be useful for FPS games, for example. The function will only work while the game is in focus and using `ALT + Tab` will unlock the mouse.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_mouse_set.htm"
    },
    "display_reset": {
      "name": "display_reset",
      "parameters": [
        {
          "parameter": "aa",
          "description": "The level of anti-aliasing filtering (0, 2, 4 or 8)."
        },
        {
          "parameter": "vsync",
          "description": "Toggle vertical synchronisation to on (true) or off (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (display_aa > 12)\n    {\n        display_reset(8, true);\n    }\n```\nThe above code will set the anti-aliasing level to 8 if supported and switch v-sync to on.\n",
      "description": "This function Resets the display settings to the ones that were set when the game was started, but also allows you to change the current level of full screen anti-aliasing being used and whether to use vertical synchronisation. The available anti-aliasing levels are 0,2,4 and 8, with the default startup value being set to 0, and the default v-sync setting is false (off). Switching v-sync on may give a smoother gaming experience but it will also need more processing power and so its impact must be considered careful before use, and the same goes for the anti-aliasing where the higher the number the more processing that is required.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_reset.htm"
    },
    "display_set_gui_maximise": {
      "name": "display_set_gui_maximise",
      "parameters": [
        {
          "parameter": "xscale",
          "description": "*<Optional>* The horizontal scaling factor (use -1 to reset to default)."
        },
        {
          "parameter": "yscale",
          "description": "*<Optional>* The vertical scaling factor (use -1 to reset to default)."
        },
        {
          "parameter": "xoffset",
          "description": "*<Optional>* The x offset position for drawing."
        },
        {
          "parameter": "yoffset",
          "description": "*<Optional>* The y offset position for drawing."
        }
      ],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndisplay_set_gui_size(display_get_width() / 2, display_get_height() / 2); display_set_gui_maximise(2, 2, 0, 0);\n```\nThe above code will lock the draw GUI event to the given width and height, scaling all components to fit the display, using that proportion.\n",
      "description": "This function can be used to maximise the GUI layer and set it to be scaled and offset in relation to the screen dimensions, rather than the default application surface position and dimensions. By default, the GUI layer is 1:1 with the application surface\n    resolution and drawn at the (0,0) position of the surface too. However this is not always what you want and so you can use this function to set it to be drawn relative to the absolute (0,0) position of the display or game window. What arguments you\n    provide to this function will depend on the effect you wish it to have on the GUI layer. Simply calling the function with no arguments will set the GUI layer to be drawn at the (0,0) position of the screen or game window, with the width and height\n    being scaled to fit the whole area:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_maximise.htm"
    },
    "display_set_gui_size": {
      "name": "display_set_gui_size",
      "parameters": [
        {
          "parameter": "width",
          "description": "The width of the GUI"
        },
        {
          "parameter": "height",
          "description": "The height of the GUI"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndisplay_set_gui_size(768, 1024);\n```\nThe above code will lock the draw GUI event to the given width and height, scaling all components to fit either the application surface, or the display, using that proportion.\n",
      "description": "This function will only affect things drawn in the  [Draw GUI Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Draw_Events.htm) and can be used to set a specific width and height for all GUI components in that event, and no matter what\n    size of display or window is used to display the GUI, it will be scaled to fit correctly. Where the GUI is positioned (ie: the (0,0) position) will depend on whether you have used the function `display_set_gui_maximise()`    or not. If you do not use this function (the default setting) then the GUI layer will be positioned with its (0,0) point at the same position as that for the application surface (the area where your game is being drawn) and the width and height will\n    be stretched to fit the this surface, such that setting a GUI width of 256px with this function when the application surface is 512px would stretch those 256 pixels to fit, effectively making the pixels twice as large. This is ideal for those games\n    that have aspect ratio correction set in the global Game Settings.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_size.htm"
    },
    "display_set_sleep_margin": {
      "name": "display_set_sleep_margin",
      "parameters": [
        {
          "parameter": "milliseconds",
          "description": "The number of milliseconds for the sleep margin"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif display_get_timing_method() != tm_sleep\n    {\n        display_set_timing_method(tm_sleep);\n        if display_get_sleep_margin() != 20\n        {\n            display_set_sleep_margin(20);\n        }\n    }\n```\nThe above code will check the timing method and then if it's not set to `tm_sleep` it will be set to that and the sleep margin set to 20.\n",
      "description": "This function can be used to set the sleep margin value used for the render timing of your game, and requires a millisecond value. The default values are as follows:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_sleep_margin.htm"
    },
    "display_set_timing_method": {
      "name": "display_set_timing_method",
      "parameters": [
        {
          "parameter": "method",
          "description": "The timing method to use (see the list of constants, above)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif display_get_timing_method() != tm_sleep\n    {\n        display_set_timing_method(tm_sleep);\n        if display_get_sleep_margin() != 20\n        {\n            display_set_sleep_margin(20);\n        }\n    }\n```\nThe above code will check the timing method and then if it's not set to `tm_sleep` it will be set to that and the sleep margin set to 20.\n",
      "description": "This function can be used to set the timing method to be used for rendering your game. The method can be one of the following constants:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_timing_method.htm"
    },
    "display_set_ui_visibility": {
      "name": "display_set_ui_visibility",
      "parameters": [
        {
          "parameter": "flags",
          "description": "The Android SYSTEM flags to use (as an integer value)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar flags = 1024|4096; display_set_ui_visibility(flags);\n  \n```\nThe above code will use the Android system flags \"SYSTEM_UI_FLAG_IMMERSIVE_STICKY\" and \"SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\" to set the visibility of the display.\n",
      "description": "This function can be used to show or hide the system UI on **Android** *only*. The function requires you to supply one or more system *flags* as an integer value. When using more than a single flag, these need to be merged using the bitwise\n    \"or\", as shown in the example below. You can find a list of Android system flags  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_FULLSCREEN).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_ui_visibility.htm"
    },
    "distance_to_object": {
      "name": "distance_to_object",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (distance_to_object(obj_Player) < range)\n    {\n        canshoot = true;\n    }\n```\nThe above code will check for the distance to the player object and if it is less than the value stored in the variable \"range\" the variable \"canshoot\" is set to true.\n",
      "description": "This function calculates the distance from the edge of the bounding box of the calling instance to the nearest edge of the nearest instance of the object specified. The object can be an object index or a specific instance ID as well as the *keyword* **other**, and the distance is returned in pixels. Note that if either of the objects have no sprite or no mask defined, the results will be incorrect.",
      "returns": "Real.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/distance_to_object.htm"
    },
    "distance_to_point": {
      "name": "distance_to_point",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check."
        },
        {
          "parameter": "y",
          "description": "The y position to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (distance_to_point(obj_Player.x, obj_Player.y) < range)\n    {\n        canshoot = true;\n    }\n```\nThe above code will check for the distance to the player object x/y position and if it is less than the value stored in the variable \"range\" the variable \"canshoot\" is set to true.\n",
      "description": "This function calculates the distance from the edge of the bounding box of the calling instance to the specified x/y position in the room, with the return value being in pixels. Note that if the calling object have no sprite or no mask defined, the results will be incorrect.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/distance_to_point.htm"
    },
    "dot_product": {
      "name": "dot_product",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first vector."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first vector."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second vector."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second vector."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar x1, y1, x2, y2; x1 = lengthdir_x(1, image_angle); y1 = lengthdir_y(1, image_angle); x2 = o_Player.x - x; y2 = o_Player.y - y; if dot_product(x1, y1, x2, y2) > 0 seen=true else seen=false;\n```\nThe above code creates a vector using the instances image angle, and then gets the vector of the player object \"o_Player\" to itself. Finally it calculates the dot product of these two vectors and if it is greater than 0 it sets the variable\n    \"seen\" to true, and if it is equal to or less than 0 it sets it to \"false\".\n",
      "description": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\"\n    that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product.htm"
    },
    "dot_product_3d": {
      "name": "dot_product_3d",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first vector."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first vector."
        },
        {
          "parameter": "z1",
          "description": "The z coordinate of the first vector."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second vector."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second vector."
        },
        {
          "parameter": "z2",
          "description": "The z coordinate of the second vector."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nvar x1, y1, x2, y2; x1 = 0; y1 = 1; z1 = 0; x2 = o_Player.x - x; y2 = o_Player.y - y; z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) > 0 above=true else above=false;\n```\nThe above code creates a vector normal along the instances y (up) axis, and then gets the vector of the player object \"o_Player\" to itself. Finally it calculates the dot product of these two vectors and if it is greater tan 0 it sets the variable\n    \"above\" to true, and if it is less than or equal to 0 it sets it to \"false\".\n",
      "description": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\"\n    that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_3d.htm"
    },
    "dot_product_3d_normalised": {
      "name": "dot_product_3d_normalised",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first vector."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first vector."
        },
        {
          "parameter": "z1",
          "description": "The z coordinate of the first vector."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second vector."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second vector."
        },
        {
          "parameter": "z2",
          "description": "The z coordinate of the second vector."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nvar x1, y1, x2, y2; x1 = 0; y1 = 1; z1 = 0; x2 = o_Player.x - x; y2 = o_Player.y - y; z2 = o_Player.z - z; if dot_product_3d_normalised(x1, y1, z1, x2, y2, z2) > 0 above=true else above=false;\n```\nThe above code creates a vector normal along the instances y (up) axis, and then gets the vector of the player object \"o_Player\" to itself. Finally it calculates the dot product of these two vectors and if it is greater tan 0 it sets the variable\n    \"above\" to true, and if it is less than or equal to 0 it sets it to \"false\".\n",
      "description": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\"\n    that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_3d_normalised.htm"
    },
    "dot_product_normalised": {
      "name": "dot_product_normalised",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first vector."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first vector."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second vector."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second vector."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar x1, y1, x2, y2; x1 = lengthdir_x(1, image_angle); y1 = lengthdir_y(1, image_angle); x2 = o_Player.x - x; y2 = o_Player.y - y; if dot_product_normalised(x1, y1, x2, y2) > 0 seen=true else seen=false;\n```\nThe above code creates a vector using the instances image angle, and then gets the vector of the player object \"o_Player\" to itself. Finally it calculates the dot product of these two vectors and if it is greater than 0 it sets the variable\n    \"seen\" to true, and if it is equal to or less than 0 it sets it to \"false\".\n",
      "description": "The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name \"dot product\" is derived from the centered dot \"·\"\n    that is often used to designate this operation (the alternative name \"scalar product\" emphasizes the scalar rather than vector nature of the result).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dot_product_normalised.htm"
    },
    "draw_arrow": {
      "name": "draw_arrow",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line (where the arrowhead ends)."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line (where the arrowhead ends)."
        },
        {
          "parameter": "size",
          "description": "The length of the arrow in pixels."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_arrow(x, y, mouse_x, mouse_y, 10);\n```\nThe above code will draw an arrow from the position of the instance to the position of the mouse, with the arrow head being 10 pixels long.\n",
      "description": "This function will draw an arrow from point (x1,y1) to point (x2,y2). The stem of the arrow is drawn along these points with the actual arrow head being drawn at the end, where the size of the arrowhead is defined by the argument \"size\" and\n    is calculated as being part of the stem so that the end point is always aligned with the position defined by x2,y2. The width of the arrow head is calculated automatically in proportion to the length.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_arrow.htm"
    },
    "draw_button": {
      "name": "draw_button",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the button"
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the button"
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the button"
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the button"
        },
        {
          "parameter": "up",
          "description": "Whether the button is up (`true`) or down (`false`)"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_button(100, 100, 200, 150, !mouse_check_button(mb_left));\n```\nThis will draw a button which will appear pressed if the left mouse button is held down.\n",
      "description": "This function will draw a very simple, rectangular \"button\" using the currently selected draw colour and alpha where the *up* argument defines how the beveled edge effect looks, as shown in the image below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_button.htm"
    },
    "draw_circle": {
      "name": "draw_circle",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the center of the circle."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the center of the circle."
        },
        {
          "parameter": "r",
          "description": "The circle's radius (length from its center to its edge)"
        },
        {
          "parameter": "outline",
          "description": "Whether the circle is drawn filled (`false`) or as a one pixel wide outline (`true`)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_white); draw_circle(100, 100, 50, true);\n```\nThis will draw a one pixel wide white circle outline with a radius of 50 pixels.\n",
      "description": "With this function you can draw either an outline of a circle or a filled circle. You can define how precise the drawing is with the function `draw_set_circle_precision()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_circle.htm"
    },
    "draw_circle_colour": {
      "name": "draw_circle_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the center of the circle."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the center of the circle."
        },
        {
          "parameter": "r",
          "description": "The radius (distance from center to edge) of the circle in pixels."
        },
        {
          "parameter": "col1",
          "description": "The colour at the center of the circle."
        },
        {
          "parameter": "col2",
          "description": "The colour at the edge of the circle."
        },
        {
          "parameter": "outline",
          "description": "Whether the circle is an outline (`true`) or not (`false`). If true, col1 is irrelevant."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ndraw_circle_colour(x, y, 100, c_white, c_black, false);\n```\nThis would draw a filled circle with its center at the executing instance's x and y position, with a radius of 100 pixels, from white in the center to black at the outside.\n",
      "description": "With this function you can draw either an outline of a circle or a filled circle, and if it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other and\n    the colour settings will over-ride the base colour set with the function `draw_set_colour()`. You can define how precise the drawing is with the function `draw_set_circle_precision()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_circle_colour.htm"
    },
    "draw_clear": {
      "name": "draw_clear",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour with which the screen will be cleared"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_clear(c_blue);\n```\nThis will clear the screen with the colour blue.\n",
      "description": "This function can be used to clear the entire screen (with no alpha blend) to the given colour, and is only for use in the draw event of an instance (it will not show if used in any other event). It can also be useful for clearing  [surfaces](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm)    when they are newly created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_clear.htm"
    },
    "draw_clear_alpha": {
      "name": "draw_clear_alpha",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour with which the screen will be cleared"
        },
        {
          "parameter": "alpha",
          "description": "The transparency of the colour with which the screen will be cleared"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndraw_clear_alpha(c_red, 0.5);\n```\nThis will clear the screen with 50% (0.5) transparency with the colour red.\n",
      "description": "This function can be used to clear the entire screen with a given colour and the alpha component of the destination is set to the value you have set - this function does *not* do any blending as it works but any subsequent blend operations can\n    be set up to use the destination alpha that you have set. This is only for use in the draw event of an instance (it will not show if used in any other event), and it can also be very useful for clearing  [surfaces](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm)    when they are newly created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_clear_alpha.htm"
    },
    "draw_ellipse": {
      "name": "draw_ellipse",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the ellipse."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the ellipse."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the ellipse."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the ellipse."
        },
        {
          "parameter": "outline",
          "description": "Whether the ellipse is drawn filled (false) or as a one pixel wide outline (true)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_white); draw_ellipse(100, 100, 300, 200, false);\n```\nThis will draw a filled ellipse within the defined rectangular area.\n",
      "description": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. You can define how precise the drawing is with the function `draw_set_circle_precision()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_ellipse.htm"
    },
    "draw_ellipse_colour": {
      "name": "draw_ellipse_colour",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the ellipse."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the ellipse."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the ellipse."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the ellipse."
        },
        {
          "parameter": "col1",
          "description": "The colour of the center."
        },
        {
          "parameter": "col2",
          "description": "The colour of the edge."
        },
        {
          "parameter": "outline",
          "description": "Whether the ellipse is an outline (true) or filled in (false)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_ellipse_colour(50, 50, 200, 100, c_black, c_white, false);\n```\nThis would draw a filled-in, horizontally-stretched ellipse with a black center and white edge.\n",
      "description": "With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. If it is filled you can define the interior and exterior fill colours. If these colours\n    are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function `draw_set_colour()`). You can define how\n    precise the drawing is with the function `draw_set_circle_precision()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_ellipse_colour.htm"
    },
    "draw_enable_drawevent": {
      "name": "draw_enable_drawevent",
      "parameters": [
        {
          "parameter": "Enable",
          "description": "Set to `true` or `false`."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nframe_skip ++;\n    if (frame_skip mod 5) == 0\n    {\n        draw_enable_drawevent(true);\n    }\n    else\n    {\n        draw_enable_drawevent(false);\n    }\n```\nThe above code checks a variable and if it returns `true`, it enables the draw event, otherwise the draw event is disabled.\n",
      "description": "With this function you can choose to enable (`true`) or disable (`false`) the draw event for **all instances in the game**, thus giving you control over how and when things are drawn, which is useful if you wish to implement a \"frame skip\" technique. Note that this doesn't just prevent instances drawing to the screen, it suppresses the draw event completely meaning that care should be taken since any game logic that is present in that event will not be run either.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/draw_enable_drawevent.htm"
    },
    "draw_enable_swf_aa": {
      "name": "draw_enable_swf_aa",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable (`true`) or disable (`false`) AA for all SWF sprites."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif draw_get_swf_aa_level() == 0\n    {\n        draw_enable_swf_aa(true);\n        draw_set_swf_aa_level(0.5);\n    }\n```\nThe above code will check the AA value for SWF format sprites, and if it is 0 it enables AA and sets the value to 0.5.\n",
      "description": "With this function you can enable or disable anti-aliasing (AA) for SWF format vector sprites. AA simply smooths the edges of vector images to give them a nicer look. The amount of AA used will depend on the value set using the function `draw_set_swf_aa_level()`. By default this is disabled.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_enable_swf_aa.htm"
    },
    "draw_flush": {
      "name": "draw_flush",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndraw_flush();\n```\nThe above code flushes the draw pipeline.\n",
      "description": "With this function you can flush the entire draw pipeline. This is a **debug only** function and in general *it should not be used* unless indicated by a member of the YoYo Games Support\n      staff, as indiscriminate use will cause serious performance issues with your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/draw_flush.htm"
    },
    "draw_get_alpha": {
      "name": "draw_get_alpha",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _cur_alpha = draw_get_alpha();\n    draw_set_alpha(text_alpha);\n    draw_text(x, y, text);\n    draw_set_alpha(_cur_alpha);\n```\nThe above code stores the current draw alpha into a local variable, and changes the draw alpha based on an instance variable. After drawing some text, it resets the alpha back to the value stored in the local variable.\n",
      "description": "This function returns the current value of the draw alpha, which will range between 0 (fully transparent) and 1 (fully opaque). The draw alpha affects the transparency of all draw functions, and can be set with the  [draw_set_alpha()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_set_alpha.htm) function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_get_alpha.htm"
    },
    "draw_get_colour": {
      "name": "draw_get_colour",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _cur_color = draw_get_color();\n    draw_set_color(text_color);\n    draw_text(x, y, text);\n    draw_set_color(_cur_color);\n```\nThe above code stores the current draw colour into a local variable, and changes the draw colour based on an instance variable. After drawing some text, it resets the colour back to the value stored in the local variable.\n",
      "description": "This function returns the current draw colour which is used for drawing forms, text, primitives and un-textured 3D models. This can be set with the `draw_set_colour()` function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_get_colour.htm"
    },
    "draw_get_font": {
      "name": "draw_get_font",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _cur_font = draw_get_font();\n    var _y_offset = 0;\n    \n    switch (_cur_font)\n    {\n        case ft_small:\n            _y_offset = 10;\n        break;\n    \n        case ft_medium:\n            _y_offset = 22;\n        break;\n    \n        case ft_big:\n            _y_offset = 34;\n        break;\n    \n        default:\n            _y_offset = 8;\n    }\n    \n    draw_text(room_width / 2, 200 + _y_offset, \"MENU\");\n  \n```\nThe above code gets the currently applied font and runs a switch statement on it, applying a different Y offset value depending on the font. It then uses that offset value while drawing some text.\n",
      "description": "This function will get the font currently assigned for drawing text. The function will return -1 if no font is set, or the ID value (a positive integer) for the font resource assigned.",
      "returns": "Integer (-1 or font ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_font.htm"
    },
    "draw_get_halign": {
      "name": "draw_get_halign",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _cur_halign = draw_get_halign();\n    var _cur_valign = draw_get_valign();\n    \n    draw_set_halign(fa_right);\n    draw_set_valign(fa_bottom);\n    \n    draw_text(100, 32, \"Score: \" + string(score));\n    \n    draw_set_halign(_cur_halign);\n    draw_set_valign(_cur_valign);\n  \n```\nThe above code saves the currently applied \"halign\" and \"valign\" values to local variables, and then changes the alignments to draw some text. After drawing it, it resets the alignments back to the values stored in the local variables.\n",
      "description": "This function is used to get the text alignment setting along the horizontal axis, and will return one of the constants listed below.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm"
    },
    "draw_get_lighting": {
      "name": "draw_get_lighting",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !draw_get_lighting()\n    {\n        draw_set_lighting(true);\n    }\n```\nThe above code will check to see if lighting is enabled for the scene, and if not it enables it.\n",
      "description": "This function will return whether lighting is enabled (`true`) or not (`false`) for the whole scene.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_get_lighting.htm"
    },
    "draw_get_swf_aa_level": {
      "name": "draw_get_swf_aa_level",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif draw_get_swf_aa_level() == 0\n    {\n        draw_enable_swf_aa(true);\n        draw_set_swf_aa_level(0.5);\n    }\n```\nThe above code will check the AA value for SWF format sprites, and if it is 0 it enables AA and sets the value to 0.5.\n",
      "description": "This function can be used to get the anti-aliasing (AA) level for SWF format vector sprites. The return value will between 0 and 1 and shows how \"smooth\" the edges of these sprites will be drawn. You can set the AA level using the function `draw_set_swf_aa_level()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_get_swf_aa_level.htm"
    },
    "draw_get_valign": {
      "name": "draw_get_valign",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _cur_halign = draw_get_halign();\n    var _cur_valign = draw_get_valign();\n    \n    draw_set_halign(fa_right);\n    draw_set_valign(fa_bottom);\n    \n    draw_text(100, 32, \"Score: \" + string(score));\n    \n    draw_set_halign(_cur_halign);\n    draw_set_valign(_cur_valign);\n  \n```\nThe above code saves the currently applied \"halign\" and \"valign\" values to local variables, and then changes the alignments to draw some text. After drawing it, it resets the alignments back to the values stored in the local variables.\n",
      "description": "This function is used to get the text alignment setting along the vertical axis, and will return one of the constants listed below.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm"
    },
    "draw_getpixel": {
      "name": "draw_getpixel",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the pixel to check"
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the pixel to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(draw_getpixel(500,200));\n```\nThe above code will set the drawing colour for all text, forms and primitives to the colour of the pixel at (500,200) on the game screen.\n",
      "description": "With this function you can get the colour value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used. Note that\n    this will *not* return any alpha values, for that you should use `draw_getpixel_ext()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_getpixel.htm"
    },
    "draw_getpixel_ext": {
      "name": "draw_getpixel_ext",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the pixel to check"
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the pixel to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ncol = draw_getpixel_ext(mouse_x, mouse_y); alpha = (col >> 24) & 255; blue = (col >> 16) & 255; green = (col >> 8) & 255; red = col & 255;\n```\nThe above code will get the 32bit colour value at the position of the mouse and then split it into its component values, storing them in variables.\n",
      "description": "With this function you can get the full **abgr 32bit** value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being\n    used.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_getpixel_ext.htm"
    },
    "draw_healthbar": {
      "name": "draw_healthbar",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the healthbar"
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the healthbar"
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the healthbar"
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the healthbar"
        },
        {
          "parameter": "amount",
          "description": "The variable which defines total health (between 0 and 100)"
        },
        {
          "parameter": "backcol",
          "description": "The colour of the background for the bar"
        },
        {
          "parameter": "mincol",
          "description": "The colour of the bar when at no health (0)"
        },
        {
          "parameter": "maxcol",
          "description": "The colour of the bar when at full health (100)"
        },
        {
          "parameter": "direction",
          "description": "Where the bar is \"anchored\" (0 = left, 1 = right, 2 = top, 3 = bottom)"
        },
        {
          "parameter": "showback",
          "description": "Whether the bar's background is drawn (`true`) or not (`false`). If false, the backcol argument is disregarded."
        },
        {
          "parameter": "showborder",
          "description": "Whether the bar's elements have a 1px wide black border (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": "```\nvar pc; pc = (hp / max_hp) * 100; draw_healthbar(100, 100, 500, 200, pc, c_black, c_red, c_lime, 0, true, true)\n```\nThe above code uses the percentage value that you get from the variables \"hp\" and \"hp_max\" to draw a standard red/green healthbar.\n",
      "description": "With this function you can draw a coloured bar to show a constant value. Although the function uses the word \"healthbar\" you can use this to display anything you wish as long as the amount to be displayed is a percentage value between 0 and\n    100 (a percentage of any value can be calculated with the formula **(CURRENT_Value / MAXIMUM_value) * 100**), so, for example, you can use this to display power, health, mana, time or anything else that would benefit from a bar display.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_healthbar.htm"
    },
    "draw_highscore": {
      "name": "draw_highscore",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the highscore rectangle."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the highscore rectangle."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the highscore rectangle."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the highscore rectangle."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ndraw_highscore(100, 100, room_width - 100, room_height - 100);\n```\nThis would draw the highscore table in a rectangle in the middle of the room with a 100px border.\n",
      "description": "This simple function will draw the current list of internally stored high scores using the currently set font, colour and alpha values within the specified rectangle. You provide the coordinates for the upper left corner and lower right corner of the\n    rectangular area to draw the text, and GameMaker Studio 2 will take care of the rest, with spacing and position being done automatically.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_highscore.htm"
    },
    "draw_light_define_ambient": {
      "name": "draw_light_define_ambient",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to use (either a constant, a real or a hex value)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_light_define_ambient(c_white);\n```\nThe above code will define the ambient lighting as being white.\n",
      "description": "This function is used to control the ambient light of a scene, which is the light that you have in a scene even without having defined any point or directional light sources. It is effectively the overall colour and brightness (or darkness) of a scene.\n    The default colour is `c_black`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_define_ambient.htm"
    },
    "draw_light_define_direction": {
      "name": "draw_light_define_direction",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index number of the light (arbitrary)"
        },
        {
          "parameter": "x",
          "description": "The x component of the light vector"
        },
        {
          "parameter": "y",
          "description": "The y component of the light vector"
        },
        {
          "parameter": "z",
          "description": "The z component of the light vector"
        },
        {
          "parameter": "col",
          "description": "The colour to use for the light (either a constant, a real or a hex value)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_set_lighting(true); draw_light_define_direction(1, 0, 1, 0, c_white); draw_light_enable(1, true);\n```\nThe above code will enable lighting for the whole scene, then define a white directional light in the room space, and then finally turn that light on.\n",
      "description": "This function is for defining a directional light, where the direction and intensity are set by the values input for the x, y and z unit vector (meaning that they must be between -1 and 1, where 1 or -1 is full intensity, and 0 is no intensity). The\n    lights can also be given a colour, which will also affect the perceived intensity of the light as certain colours appear \"darker\" than others. You must also give the light an index number which what will be used in other functions to reference\n    it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_define_direction.htm"
    },
    "draw_light_define_point": {
      "name": "draw_light_define_point",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index number of the light (arbitrary)"
        },
        {
          "parameter": "x",
          "description": "The x position of the light"
        },
        {
          "parameter": "y",
          "description": "The y position of the light"
        },
        {
          "parameter": "z",
          "description": "The z position of the light"
        },
        {
          "parameter": "range",
          "description": "The light range (in pixels)"
        },
        {
          "parameter": "col",
          "description": "The colour to use for the light (either a constant, a real or a hex value)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ndraw_set_lighting(true); draw_light_define_point(1, 200, 123, 50, 2000, c_white); draw_light_enable(1, true);\n```\nThe above code will enable lighting for the whole scene, then define a white light at a specific point in the room space, and then finally turn that light on.\n",
      "description": "This function is for defining a positional light, where you can define the x, y and z position of the light, the light range and its colour (which will also affect the perceived intensity of the light as certain colours appear \"darker\" than\n    others). You must also give the light an index number which what will be used in other functions to reference it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_define_point.htm"
    },
    "draw_light_enable": {
      "name": "draw_light_enable",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index number of the light (from 0 to 7)"
        },
        {
          "parameter": "enable",
          "description": "Enable or disable all lighting (`true` or false)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndraw_set_lighting(true); draw_light_define_direction(1, 0, 1, 0, c_white); draw_light_enable(1, true);\n```\nThe above code will enable lighting for the whole scene, then define a white directional light in the room space, and then finally turn that light on.\n",
      "description": "This function is used to enable a defined light. When you define a positional or a directional light you must assign it an index number which is then used by this function to switch the light on or off. Default is disabled (`false`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_enable.htm"
    },
    "draw_light_get": {
      "name": "draw_light_get",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index number of the light (from 0 to 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nlight_a = draw_light_get(1);\n    if light_a[5] < 200\n    {\n        light_a[5] += 5;\n        draw_light_define_point(1, 200, 123, 50, light_a[5], c_white);\n    }\n```\nThe above code will get the values used to define the light indexed as \"1\", then check the radius and if it is less than 200 it will be increased and the light radius set to the new value.\n",
      "description": "This function will get the specified light parameters as an array with the following 6 elements -",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_get.htm"
    },
    "draw_light_get_ambient": {
      "name": "draw_light_get_ambient",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nlight_col = draw_light_get_ambient();\n```\nThe above code will get the current ambient light colour and store it in a variable.\n",
      "description": "This function will return the current colour used for ambient lighting.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_get_ambient.htm"
    },
    "draw_line": {
      "name": "draw_line",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_lime); draw_line(50,50,150,50);\n  \n```\nThis will draw a light green horizontal line from point (50,50) to point (150,50).\n",
      "description": "With this function you can draw a 1 pixel wide line between any two points in the game room. Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various\n    supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line.htm"
    },
    "draw_line_colour": {
      "name": "draw_line_colour",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line."
        },
        {
          "parameter": "col1",
          "description": "The colour of the start of the line."
        },
        {
          "parameter": "col2",
          "description": "The colour of the end of the line."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ndraw_line_colour(50, 50, 300, 50, c_red, c_blue);\n```\nThis would draw a horizontal line from (50,50) to (300,50) with a smooth red to blue gradient.\n",
      "description": "With this function you can draw a 1 pixel wide line with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function `draw_set_colour()`.\n    Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_colour.htm"
    },
    "draw_line_width": {
      "name": "draw_line_width",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line."
        },
        {
          "parameter": "w",
          "description": "The width of the line in pixels."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_red); draw_line_width(100, 100, 200, 200, 6);\n```\nThis will draw a red diagonal line, 6 pixels wide, from point (100,100) to point (200,200).\n",
      "description": "With this function you can draw a line of a specified width between any two points in the game room. Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across\n    the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_width.htm"
    },
    "draw_line_width_colour": {
      "name": "draw_line_width_colour",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the start of the line."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the start of the line."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the end of the line."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the end of the line."
        },
        {
          "parameter": "w",
          "description": "The width in pixels of the line."
        },
        {
          "parameter": "col1",
          "description": "The colour of the start of the line."
        },
        {
          "parameter": "col2",
          "description": "The colour of the end of the line."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_line_width_colour(50, 50, 300, 50, 4, c_red, c_blue);\n```\nThis would draw a horizontal line from (50,50) to (300,50), four pixels wide, with a smooth red to blue gradient.\n",
      "description": "With this function you can draw a line of a specific width with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function `draw_set_colour()`.\n    Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_line_width_colour.htm"
    },
    "draw_path": {
      "name": "draw_path",
      "parameters": [
        {
          "parameter": "path",
          "description": "The path to draw"
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where the path is drawn"
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where the path is drawn"
        },
        {
          "parameter": "absolute",
          "description": "Whether the path is drawn at the absolute position (`true`) or the relative position (`false`)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif mp_grid_path(grid, path, x, y, obj_Player.x, obj_Player.y, 1)\n    {\n        draw_path(path, x, y, false);\n    }\n```\nThe above code will use the `mp_grid_path` function to generate a path and store it in the variable \"path\". If the path is successfully created, it is then drawn on the screen at a position relative to the instance running the code.\n",
      "description": "With this function you can get GameMaker Studio 2 to draw a path to the screen. The path will be drawn as a simple line, and can be either relative to the calling instance or at the absolute position it was created at in the path editor or through code. This function is extremely useful when debugging dynamic paths (for example, those created for instances with the `mp_grid_path()` function).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_path.htm"
    },
    "draw_point": {
      "name": "draw_point",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the point to be drawn."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the point to be drawn."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_yellow); draw_point(100,100);\n  \n```\nThis will draw a yellow pixel at position (100,100).\n",
      "description": "With this function you can draw a single pixel anywhere on the screen, using the currently set draw colour and alpha.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_point.htm"
    },
    "draw_point_colour": {
      "name": "draw_point_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the point."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the point."
        },
        {
          "parameter": "col1",
          "description": "The colour of the point."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ndraw_point_colour(50, 50, c_red);\n```\nThis would draw a red pixel at (50,50).\n",
      "description": "With this function you can draw a single pixel anywhere on the screen with a colour that you define. The colour settings will over-ride the base colour set with the function `draw_set_colour()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_point_colour.htm"
    },
    "draw_primitive_begin": {
      "name": "draw_primitive_begin",
      "parameters": [
        {
          "parameter": "kind",
          "description": "The kind of primitive you are going to draw."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _steps = 20;\n    var _xx = 50;\n    var _yy = 50;\n    var _radius = 30;\n    draw_primitive_begin(pr_trianglefan);\n    draw_vertex(_xx, _yy);\n    for(var i = 0; i <= _steps; ++i;)\n    {\n        draw_vertex(_xx + lengthdir_x(_radius, 270 * i / _steps), _yy + lengthdir_y(_radius, 270 * i / _steps));\n    }\n    draw_primitive_end();\n```\nThe above code will draw three quarters of a circle made from primitives.\n",
      "description": "This function must be called before you can define any primitives. There are 6 types of primitives you can define with the following constants:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm"
    },
    "draw_primitive_begin_texture": {
      "name": "draw_primitive_begin_texture",
      "parameters": [
        {
          "parameter": "kind",
          "description": "The kind of primitive you are going to draw."
        },
        {
          "parameter": "tex",
          "description": "The texture to use with the primitive."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_white); var tex = sprite_get_texture(spr_Background, 0); draw_primitive_begin_texture(pr_trianglestrip, tex); draw_vertex_texture(0, 0, 0, 0); draw_vertex_texture(640, 0, 1, 0); draw_vertex_texture(0, 480,\n    0, 1); draw_vertex_texture(640, 480, 1, 1); draw_primitive_end();\n  \n```\nThe above code will draw a 4 vertex triangle strip (making a rectangle) textured with the texture held in the \"tex\" variable, and the whole texture will be used to cover the completed primitive.\n",
      "description": "This function must be called before you define the vertices of a textured primitive. You must give the kind of primitive to use (see `draw_primitive_begin()` for more information) and the **id** of a\n    texture to use, which can be a sprite or background image asset. This asset **id** can be gotten from the functions `sprite_get_texture()`, for example\n    (use -1 for no texture).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin_texture.htm"
    },
    "draw_primitive_end": {
      "name": "draw_primitive_end",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_white); var tex = sprite_get_texture(spr_Background, 0); draw_primitive_begin_texture(pr_trianglestrip, tex); draw_vertex_texture(0, 0, 0, 0); draw_vertex_texture(640, 0, 1, 0); draw_vertex_texture(0, 480,\n    0, 1); draw_vertex_texture(640, 480, 1, 1); draw_primitive_end();\n  \n```\nThe above code will draw a 4 vertex triangle strip textured with the texture held in the \"tex\" variable.\n",
      "description": "This function must be called when you have finished defining the points of your primitive. If you do not call this function, *nothing will be drawn* as this effectively tells GameMaker Studio 2 that you have finished and that it can now\n    draw the defined primitive.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_end.htm"
    },
    "draw_rectangle": {
      "name": "draw_rectangle",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the top left corner of the rectangle."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top left corner of the rectangle."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the bottom right corner of the rectangle."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom right corner of the rectangle."
        },
        {
          "parameter": "outline",
          "description": "Whether the rectangle is drawn filled (false) or as a one pixel wide outline (true)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_yellow); draw_rectangle(100, 100, 300, 200, true);\n```\nThis will draw a rectangle outline, with its top left corner at (100,100) and its bottom right corner at (300,200).\n",
      "description": "With this function you can draw either an outline of a rectangle or a filled rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. Please note that the rectangle being drawn may need different\n    values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_rectangle.htm"
    },
    "draw_rectangle_colour": {
      "name": "draw_rectangle_colour",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the rectangle."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the rectangle."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the rectangle."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the rectangle."
        },
        {
          "parameter": "col1",
          "description": "The colour of the top left corner."
        },
        {
          "parameter": "col2",
          "description": "The colour of the top right corner."
        },
        {
          "parameter": "col3",
          "description": "The colour of the bottom right corner."
        },
        {
          "parameter": "col4",
          "description": "The colour of the bottom left corner."
        },
        {
          "parameter": "outline",
          "description": "Whether the rectangle is an outline (true) or filled in (false)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\ndraw_rectangle_colour(50, 50, 200, 200, c_black, c_white, c_black, c_white, false);\n```\nThis would draw a filled-in square with a smooth black/white gradient between the corners.\n",
      "description": "With this function you can draw either an outline of a rectangle or a filled rectangle by defining an area where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual\n    colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function `draw_set_colour()`).\n    Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_rectangle_colour.htm"
    },
    "draw_roundrect": {
      "name": "draw_roundrect",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "outline",
          "description": "Whether the rounded rectangle is drawn filled (false) or as a one pixel wide outline (true)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_lime); draw_roundrect(50, 100, 250, 200, 0);\n```\nThis will draw a filled rounded rectangle, with its theoretical (before being curved) top left corner at (50,100) and its theoretical bottom right corner at (250,200).\n",
      "description": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You can define how precise the drawing of the\n    corners is with the function `draw_set_circle_precision()`, but this function uses a fixed radius for them (should you need to change the corner radius, use the function `draw_roundrect_ext()`).\n    Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect.htm"
    },
    "draw_roundrect_colour": {
      "name": "draw_roundrect_colour",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the rounded rectangle."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the rounded rectangle."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the rounded rectangle."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the rounded rectangle."
        },
        {
          "parameter": "col1",
          "description": "The center colour."
        },
        {
          "parameter": "col2",
          "description": "The outside edge colour."
        },
        {
          "parameter": "outline",
          "description": "Whether the rectangle is an outline (true) or filled in (false)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_roundrect_colour(50, 50, 200, 200, c_black, c_white, false);\n```\nThis would draw a filled-in square with rounded corners and with a smooth black/white gradient from the center to the edges.\n",
      "description": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual\n    colours for the centre and the edges, and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function `draw_set_colour()`).You\n    can define how precise the drawing of the corners is with the function `draw_set_circle_precision()`, but the corners are always drawn with a fixed radius. Should you need to change the corner radius\n    you should use the function `draw_roundrect_colour_ext()`. Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired\n    dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_colour.htm"
    },
    "draw_roundrect_colour_ext": {
      "name": "draw_roundrect_colour_ext",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the left of the rounded rectangle."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top of the rounded rectangle."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right of the rounded rectangle."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom of the rounded rectangle."
        },
        {
          "parameter": "xrad",
          "description": "The radius of the curve along the x axis from the rectangle corners."
        },
        {
          "parameter": "yrad",
          "description": "The radius of the curve along the y axis from the rectangle corners."
        },
        {
          "parameter": "col1",
          "description": "The center colour."
        },
        {
          "parameter": "col2",
          "description": "The outside edge colour."
        },
        {
          "parameter": "outline",
          "description": "Whether the rectangle is an outline (true) or filled in (false)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nvar dist = point_distance(x, y, mouse_x, mouse_y) / 10; var col = make_colour_hsv(clamp(dist, 0, 255), 255, 255); draw_roundrect_colour_ext(x - 50, y - 50, x + 50, y + 50, dist, dist, col, c_white, 0);\n```\nThis would draw a filled-in square with rounded corners, the radius of which is defined by the distance from the instance doing the drawing to the mouse. This value is also used to calculate the centre blend colour.\n",
      "description": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If the rectangle is filled, then the colour\n    arguments will be used to generate a colour gradient from the centre to the edges, where colour 1 is the centre colour and colour 2 the edge colour. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded\n    by these amounts. You can define how precise the drawing of the corners is with the function `draw_set_circle_precision()`. Please note that the rectangle being drawn may need different values (+/-1\n    on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_colour_ext.htm"
    },
    "draw_roundrect_ext": {
      "name": "draw_roundrect_ext",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle)."
        },
        {
          "parameter": "xrad",
          "description": "The radius of the curve along the x axis from the rectangle corners."
        },
        {
          "parameter": "yrad",
          "description": "The radius of the curve along the y axis from the rectangle corners."
        },
        {
          "parameter": "outline",
          "description": "Whether the rounded rectangle is drawn filled (false) or as a one pixel wide outline (true)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nvar dist = point_distance(x, y, mouse_x, mouse_y) / 10; draw_set_colour(c_lime);\n     draw_roundrect_ext(x - 50, y - 50, x + 50, y + 50, dist, dist, 0);\n```\nThis will draw a filled rounded rectangle with the corners being rounded by an amount based on the mouse position relative to the instance doing the drawing.\n",
      "description": "With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You must also supply radius values for the\n    x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function `draw_set_circle_precision()`. Please note that\n    the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_roundrect_ext.htm"
    },
    "draw_self": {
      "name": "draw_self",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndraw_self();\n```\nThis makes the instance draw itself with the properties defined by the in built sprite variables.\n",
      "description": "This function draws the sprite assigned to the instance exactly as it would be drawn if the draw event held no code or actions, and will reflect and changes that have been made to the  [sprite variables](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm)    in other events.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"
    },
    "draw_set_alpha": {
      "name": "draw_set_alpha",
      "parameters": [
        {
          "parameter": "alpha",
          "description": "The alpha to set (between 0 and 1)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_alpha(0.5); draw_set_colour(c_black);\n     draw_text(x+5, y+5, \"LEVEL 1\"); draw_set_alpha(1);\n     draw_set_colour(c_white);\n     draw_text(x, y, \"LEVEL 1\");\n```\nThe above code will draw some text at the specified position with a shadow effect created by modified draw alpha and colour.\n",
      "description": "With this function you can set the base draw alpha for the game. This value can be set from 0 to 1 with 0 being fully transparent and 1 being fully opaque (the default value), and will affect all further drawing, including backgrounds, sprites, fonts,\n    primitives and 3D.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_set_alpha.htm"
    },
    "draw_set_circle_precision": {
      "name": "draw_set_circle_precision",
      "parameters": [
        {
          "parameter": "precision",
          "description": "The precision of all circles drawn after this function is called."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_circle_precision(12);\n```\nThe above code will draw all circles using a 12 sided polygon.\n",
      "description": "To optimise performance when drawing circles, GameMaker Studio 2 basically draws a polygon shape with enough sides to make it *appear* circular. However, depending on how big or small you need your circles to be, you may find that changing\n    this value can help increase the performance of your game, or make the circles look better. The precision value that you can input into this function is the number of sides the circle polygon has, and this number can be anything between 4 and 64,\n    *but must be a number divisible by 4*, with a default value of 24.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_set_circle_precision.htm"
    },
    "draw_set_colour": {
      "name": "draw_set_colour",
      "parameters": [
        {
          "parameter": "col",
          "description": "The colour to set for drawing."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_alpha(0.5); draw_set_colour(c_black);\n     draw_text(x+5, y+5, \"LEVEL 1\"); draw_set_alpha(1);\n     draw_set_colour(c_white);\n     draw_text(x, y, \"LEVEL 1\");\n```\nThe above code will draw some text at the specified position with a shadow effect created by modified draw alpha and colour.\n",
      "description": "With this function you can set the base draw colour for the game. This value will affect all further drawing where appropriate, including fonts, forms, primitives and 3D. If any of those assets are drawn with their own colour value changed, this value\n    will be ignored.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_set_colour.htm"
    },
    "draw_set_font": {
      "name": "draw_set_font",
      "parameters": [
        {
          "parameter": "font",
          "description": "The name of the font to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_blue);\n    draw_set_font(fnt_Game);\n    draw_text(200, 200, \"Hello World\");\n```\nThe above code will draw the given text using the font indexed in the variable \"fnt_Game\" and coloured blue.\n",
      "description": "This function will set the font to be used for all further text drawing. This font must have been added into the  [font assets](https://manual.yoyogames.com/The_Asset_Editors/Fonts.htm) of the game or have been created using either the `font_add()` or `font_add_sprite()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_set_font.htm"
    },
    "draw_set_halign": {
      "name": "draw_set_halign",
      "parameters": [
        {
          "parameter": "halign",
          "description": "Horizontal alignment."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_halign(fa_left);\n    draw_text(100, 32, \"Score: \" + string(score));\n    draw_set_halign(fa_right);\n    draw_text(room_width - 100, 32, \"Health: \" + string(health));\n```\nThe above code will draw two strings on the same line, with the score being left-hand aligned and the health being right-hand aligned.\n",
      "description": "This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being `fa_left`. The following constants are accepted:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_set_halign.htm"
    },
    "draw_set_lighting": {
      "name": "draw_set_lighting",
      "parameters": [
        {
          "parameter": "enable",
          "description": "enable or disable all lighting (`true` or false)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_lighting(true); draw_light_define_direction(1, 0, 1, 0, c_white); draw_light_enable(1, true);\n```\nThe above code will enable lighting for the whole scene, then define a white directional light in the room space, and then finally turn that light on.\n",
      "description": "This function is used to enable all lighting effects. Default is disabled (`false`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_set_lighting.htm"
    },
    "draw_set_swf_aa_level": {
      "name": "draw_set_swf_aa_level",
      "parameters": [
        {
          "parameter": "AA",
          "description": "The anti-aliasing value to use from 0 to 1."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif draw_get_swf_aa_level() == 0\n    {\n        draw_enable_swf_aa(true);\n        draw_set_swf_aa_level(0.5);\n    }\n```\nThe above code will check the AA value for SWF format sprites, and if it is 0 it enables AA and sets the value to 0.5.\n",
      "description": "This function can be used to set the anti-aliasing (AA) level for SWF format vector sprites. This can be a real value from 0 to 1 and will \"smooth\" the edges of these sprites. Note that to see this effect, you must first have enabled AA using the function `draw_enable_swf_aa()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_set_swf_aa_level.htm"
    },
    "draw_set_valign": {
      "name": "draw_set_valign",
      "parameters": [
        {
          "parameter": "valign",
          "description": "Vertical alignment."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_halign(fa_center);\n    draw_set_valign(fa_middle);\n    draw_text(100, 32, \"Score: \" + string(score));\n```\nThe above code will draw the score centered around the very center of the text.\n",
      "description": "This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being `fa_top`. The following constants are accepted:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_set_valign.htm"
    },
    "draw_skeleton": {
      "name": "draw_skeleton",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "animname",
          "description": "The name of the animation to get the frame from (a string)."
        },
        {
          "parameter": "skinname",
          "description": "The name of the skin to use (a string)."
        },
        {
          "parameter": "frame",
          "description": "The animation frame to draw (from 0 to image_number - 1)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": " \n```\ndraw_skeleton(spr_Jump, \"jump\", \"skin1\", 0, x, y, image_xscale, image_yscale, image_angle, c_white, 0.5);\n```\nThe above code will draw the first frame of the given skeletal animation sprite, using the \"jump\" animation set, the skin defined as \"skin1\" and at the same scale and position as the instance properties define, but with an alpha\n    of 0.5.\n",
      "description": "This function is *only* for use with sprites that have been created using a skeletal animation program like Spine. While you can draw these sprites using the normal draw functions (like `draw_self()`),\n    there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties. In these cases you can draw the sprite with this function, where you give the sprite index and then the name\n    of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling GameMaker Studio\n    2 what part of the animation to show and is a value between 0 and the `image_number`. The rest of the arguments are the same as those used for normal sprite drawing and will change\n    the scale, angle, blend colour and alpha of the final animation frame being drawn.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton.htm"
    },
    "draw_skeleton_collision": {
      "name": "draw_skeleton_collision",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "animname",
          "description": "The name of the animation to get the frame from (a string)."
        },
        {
          "parameter": "frame",
          "description": "The animation frame to draw (from 0 to image_number - 1)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\ndraw_skeleton_collision(sprite_index, \"jump\", image_index, x, y, image_xscale, image_yscale, image_angle, c_white);\n```\nThe above code will draw the collision mask data for the current sprite, using the current transforms, for the animation set \"jump\".\n",
      "description": "This function will draw the collision masks associated with the given skeletal animation. You supply the base sprite, the animation set to use and the frame to get the information from, and you can also set the transform properties to suit.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton_collision.htm"
    },
    "draw_skeleton_instance": {
      "name": "draw_skeleton_instance",
      "parameters": [
        {
          "parameter": "instance",
          "description": "The index of the instance to draw the sprite from."
        },
        {
          "parameter": "animname",
          "description": "The name of the animation to get the frame from (a string)."
        },
        {
          "parameter": "skinname",
          "description": "The name of the skin to use (a string)."
        },
        {
          "parameter": "frame",
          "description": "The animation frame to draw (from 0 to image_number - 1)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": "```\ndraw_skeleton_instance(obj_Player, \"jump\", \"skin1\", 0, x, y, 1, 1, 0, c_white, 1);\n```\nThe above code will draw the first frame of the skeletal animation sprite assigned to the instance given, using the \"jump\" animation set and the skin defined as \"skin1\".\n",
      "description": "This function is *only* for use with instances which have sprites assigned to them created using the skeletal animation program Spine. While you can draw these sprites using the normal draw functions (like `draw_self()`),\n    there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties for an instance. In these cases you can draw the sprite that has been assigned to the instance with this function,\n    where you give the unique Instance ID and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a\n    frame value. The frame value is for telling GameMaker Studio 2 what part of the animation to show and is a value between 0 and the `image_number`. The rest of the arguments are\n    the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton_instance.htm"
    },
    "draw_skeleton_time": {
      "name": "draw_skeleton_time",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "animname",
          "description": "The name of the animation to get the frame from (a string)."
        },
        {
          "parameter": "skinname",
          "description": "The name of the skin to use for drawing (a string)."
        },
        {
          "parameter": "time",
          "description": "The time-frame to draw the animation at (from 0 to the end duration, in seconds)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite."
        }
      ],
      "requiredParameters": 10,
      "isVariadic": false,
      "example": "```\nvar time += delta_time / 1000000; var d = skeleton_animation_get_duration(\"walk\"); if time > d time -= d; draw_skeleton_time(sprite_index, \"walk\", \"skin1\", time, x, y, image_xscale, image_yscale, image_angle,\n    c_white);\n```\nThe above code will draw the given skeletal animation sprite using delta-time to set the frame being drawn.\n",
      "description": "This function will draw the given animation using the given skin at a specific time in the animation. The time value should be between 0 (the beginning) and the end duration of the animation, which you can find using the function `skeleton_animation_get_duration()`.\n    You *can* set the time value to values higher than the total duration of the animation and the animation will loop back to the beginning, but you run the risk of losing floating point accuracy as the accumulated time\n    gets larger.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/draw_skeleton_time.htm"
    },
    "draw_sprite": {
      "name": "draw_sprite",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The sub-image (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ndraw_sprite(sprite_index, image_index, x, y); draw_sprite(spr_Halo, 0, x, y-32);\n```\nThis will draw the instances assigned sprite (sprite_index) with the current sub-image at the x and y position of the instance within the room. It will then draw the first frame of the sprite indexed by \"spr_Halo\" at the same x and y position\n    but 32 pixels 'above'.\n",
      "description": "This function draws the given sprite and sub-image at a position within the game room. For the sprite you can use the instance variable `sprite_index` to\n    get the current sprite that is assigned to the instance running the code, or you can use any other sprite asset. The same goes for the sub-image, as this can also be set to the instance variable `image_index`    which will set the sub-image to that selected for the current instance sprite (note, that you can draw a different sprite and still use the sub-image value for the current instance), or you can use any other value for this to draw a specific sub-image\n    of the chosen sprite. If the value is larger than the number of sub-images, then GameMaker Studio 2 will automatically loop the number to select the corresponding image (for example, if the sprite being drawn has 5 sub-images numbered 0 to\n    4 and we set the index value to 7, then the function will draw sub-image 3, numbered 0). Finally, the x and y position is the position within the room that the sprite will be drawn, and it is centered on the sprite  [x offset](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_xoffset.htm)    and  [y offset](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_yoffset.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite.htm"
    },
    "draw_sprite_ext": {
      "name": "draw_sprite_ext",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the sprite. 0=right way up, 90=rotated 90 degrees counter-clockwise etc..."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite. `c_white` is to display it normally."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\ndraw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);\n```\nThis will draw the instances assigned sprite with all its default values (essentially the same as using `draw_self`).\n",
      "description": "This function will draw the given sprite as in the function `draw_sprite()` but with additional options to change the scale, blending, rotation and alpha of the sprite being drawn. Changing these values does *not* modify the resource in any way (only how it is drawn), and you can use any of the available  [sprite variables](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm) instead of direct values for all the arguments in the function. The image below illustrates how different values affect the drawing of the sprite:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_ext.htm"
    },
    "draw_sprite_general": {
      "name": "draw_sprite_general",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "left",
          "description": "The x position on the sprite of the top left corner of the area to draw."
        },
        {
          "parameter": "top",
          "description": "The y position on the sprite of the top left corner of the area to draw."
        },
        {
          "parameter": "width",
          "description": "The width of the area to draw."
        },
        {
          "parameter": "height",
          "description": "The height of the area to draw."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc."
        },
        {
          "parameter": "c1",
          "description": "The colour with which to blend the top left area of the sprite."
        },
        {
          "parameter": "c2",
          "description": "The colour with which to blend the top right area of the sprite."
        },
        {
          "parameter": "c3",
          "description": "The colour with which to blend the bottom right area of the sprite."
        },
        {
          "parameter": "c4",
          "description": "The colour with which to blend the bottom left area of the sprite."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 16,
      "isVariadic": false,
      "example": "```\ndraw_sprite_general(sprite_index, image_index, 8, 8, sprite_width-16, sprite_height-16, x, y, 2, 0.5, 180, c_white, c_white, c_black, c_black, 1);\n```\nThis will draw the instances assigned sprite (sprite_index) and its current frame of animation (image_index), however it will shave an 8px margin off all four sides of the sprite. It will be stretched to double its usual width but half its usual height.\n    It will be opaque, and upside down. The top area of the sprite will be blended white and hence normal, but the bottom area will be black, meaning the sprite will go from normal to a silhouette downwards in a smooth gradient.\n",
      "description": "This function combines the function `draw_sprite_ext()` with the function `draw_sprite_part()`, adding in some additional blending options so that each corner of the\n    final sprite part can be blended with an individual colour.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_general.htm"
    },
    "draw_sprite_part": {
      "name": "draw_sprite_part",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "left",
          "description": "The x position on the sprite of the top left corner of the area to draw."
        },
        {
          "parameter": "top",
          "description": "The y position on the sprite of the top left corner of the area to draw."
        },
        {
          "parameter": "width",
          "description": "The width of the area to draw."
        },
        {
          "parameter": "height",
          "description": "The height of the area to draw."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\ndraw_sprite_part(sprite_index, image_index, 4, 0, sprite_width-16, sprite_height-16, x, y );\n```\nThis will draw the instances assigned sprite (sprite_index) and its current frame of animation (image_index), however it will shave a 4px margin off the width on both sides, and an 8 pixel margin off the height from the bottom of the original 24x24\n    pixel sprite.\n",
      "description": "With this function you can draw part of any sprite at a given position within the room. As with `draw_sprite()` you can specify a sprite and a sub-image for drawing, then you must give the *relative coordinates*    within the sprite of the area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the sprite and all further coordinates should be taken from that position. The image below shows an example\n    of how this works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_part.htm"
    },
    "draw_sprite_part_ext": {
      "name": "draw_sprite_part_ext",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "left",
          "description": "The x position on the sprite of the top left corner of the area to draw."
        },
        {
          "parameter": "top",
          "description": "The y position on the sprite of the top left corner of the area to draw."
        },
        {
          "parameter": "width",
          "description": "The width of the area to draw."
        },
        {
          "parameter": "height",
          "description": "The height of the area to draw."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite. c_white is to display it normally."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 12,
      "isVariadic": false,
      "example": "```\ndraw_sprite_part_ext(sprite_index, image_index, 8, 8, sprite_width-16, sprite_height-16, x, y, 2, 0.5, c_black, 1);\n```\nThis will draw the instances assigned sprite (sprite_index) and its current frame of animation (image_index), however it will shave an 8px margin off all four sides of the sprite. It will then be stretched to double its usual width but half its usual\n    height, and although the alpha is still 1, it will be blended with black (turning it into a silhouette).\n",
      "description": "This function will draw a part of the chosen sprite at the given position following the same rules as per `draw_sprite_part()`, only now you can scale the part, blend a colour with it, or change its alpha when\n    drawing it to the screen (the same as when drawing a sprite with `draw_sprite_ext()`). You should note that if the texture page permits automatic cropping then this function may not work as expected, since\n    the extra \"empty\" space around the sprite will have been removed for creating the texture page. To resolve this issue, you will need to set the texture page settings (in the  [Texture Group Editor](https://manual.yoyogames.com/Settings/Texture_Groups.htm))\n    to disable the **Automatic Crop**.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_part_ext.htm"
    },
    "draw_sprite_pos": {
      "name": "draw_sprite_pos",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x1",
          "description": "The first x coordinate."
        },
        {
          "parameter": "y1",
          "description": "The first y coordinate."
        },
        {
          "parameter": "x2",
          "description": "The second x coordinate."
        },
        {
          "parameter": "y2",
          "description": "The second y coordinate."
        },
        {
          "parameter": "x3",
          "description": "The third x coordinate."
        },
        {
          "parameter": "y3",
          "description": "The third y coordinate."
        },
        {
          "parameter": "x4",
          "description": "The fourth x coordinate."
        },
        {
          "parameter": "y4",
          "description": "The fourth y coordinate."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": "```\ndraw_sprite_pos(sprite_index, image_index, x - 100, y - 50, x - 50, y +150, x + 100, y + 200, x + 100, y, 1);\n```\nThe above code will draw the sprite associated with the instance running the code distorted around the x / y position of the instance and with a fully opaque alpha.\n",
      "description": "With this function you can draw a sprite distorted over the area defined by the four corner coordinates. The first two arguments are the sprite to draw and the sub-image of the sprite (the same as in the function `draw_sprite()`)\n    but the next ones are those that define the position of each of the four corners of the **bounding box** of the given sprite. These should be given in *clockwise* order, so the first coordinate is the top left, then the top right, then bottom\n    right and finally the bottom left. You can also set a value for the alpha of the sprite to draw it with transparency. The image below illustrates how this function works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_pos.htm"
    },
    "draw_sprite_stretched": {
      "name": "draw_sprite_stretched",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "w",
          "description": "The width of the area the stretched sprite will occupy."
        },
        {
          "parameter": "h",
          "description": "The height of the area the stretched sprite will occupy."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ndraw_sprite_stretched(sprite_index, image_index, x, y, sprite_width, sprite_height / 2);\n```\nThis will draw the instance's assigned sprite and its sub-image with the left corner at the instance x/y position. Its width is set to the same as the sprite, and the height is the sprite height divided by two.\n",
      "description": "This function simply takes a sprite resource and stretches it over the given width and height so that it occupies that area. As with `draw_sprite()` you can specify a sprite and a sub-image for drawing, then the x / y position in the room for the sprite to be drawn at and finally a width and a height (which must be pixel values). The image below shows the result of this function with different sets of arguments:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_stretched.htm"
    },
    "draw_sprite_stretched_ext": {
      "name": "draw_sprite_stretched_ext",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "w",
          "description": "The width of the area the stretched sprite will occupy."
        },
        {
          "parameter": "h",
          "description": "The height of the area the stretched sprite will occupy."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite. c_white is to display it normally."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\ndraw_sprite_stretched_ext(sprite_index, image_index, x, y, sprite_width, sprite_height / 2, c_white, 0.5);\n```\nThis will draw the instances assigned sprite and its sub-image with the left corner at the instance x /y position. Its width is set to the same as the sprite, and the height is the sprite height divided by two. It will also be blended normally but have a partially transparent alpha value.\n",
      "description": "This function does exactly the same as the `draw_sprite_stretched()` function with the added ability to set the colour blending and alpha value for the sprite when it is drawn (similar to the function `draw_sprite_ext()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_stretched_ext.htm"
    },
    "draw_sprite_tiled": {
      "name": "draw_sprite_tiled",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ndraw_sprite_tiled(sprite_index, image_index, x, y);\n```\nThis will draw the instances assigned sprite (sprite_index) and its current frame of animation (image_index) at the instances own x and y position, and tiled horizontally and vertically across the view.\n",
      "description": "This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function. Tiling is based on the width and height of the sprite as defined by the\n     [sprite variables](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm) of the instance running the code. This function is for 2D (orthographic) projections only, and will not work correctly when a 3D\n    camera projection is used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_tiled.htm"
    },
    "draw_sprite_tiled_ext": {
      "name": "draw_sprite_tiled_ext",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to draw."
        },
        {
          "parameter": "subimg",
          "description": "The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object)."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the sprite."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the sprite."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the sprite. A multiplier ' 1 = normal scaling, 0.5 is half etc."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the sprite. A multiplier ' 1 = normal scaling, 0.5 is half etc."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to blend the sprite. c_white is to display it normally."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque)."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\ndraw_sprite_tiled_ext(sprite_index, image_index, x, y, 2, 2, c_red, 0.5);\n```\nThis will draw the instances assigned sprite (sprite_index) and its current frame of animation (image_index) at the instances own x and y position, but scaled to twice the normal size, blended red and with half the normal alpha. The sprite will be tiled\n    horizontally and vertically across the view.\n",
      "description": "This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define\n    (these properties are the same as those used in `draw_sprite_ext()`). This function is for 2D (orthographic) projections only, and will not work correctly when a 3D camera projection is used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_tiled_ext.htm"
    },
    "draw_surface": {
      "name": "draw_surface",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); draw_surface(surf, _vx, _vy);\n```\nThe above code draws the surface indexed in \"surf\" at same position as camera view[0].\n",
      "description": "With this function you can draw a surface at a given position within the room, with the top left corner of the image being drawn at the specified x/y position.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface.htm"
    },
    "draw_surface_ext": {
      "name": "draw_surface_ext",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scale."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scale."
        },
        {
          "parameter": "rot",
          "description": "The rotation or angle to draw the surface."
        },
        {
          "parameter": "col",
          "description": "The colour with which to blend the surface."
        },
        {
          "parameter": "alpha",
          "description": "The alpha transparency for drawing the surface."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\ndraw_surface_ext(surf, 0, 0, 2, 2, 0, c_red, 0.5);\n```\nThe above code will draw a the surface indexed in the variable \"surf\" at the (0,0) position in the room, with twice the original scale, blended red and semi transparent.\n",
      "description": "This function will draw the given surface as in the function `draw_surface()` but with additional options to change the scale, blending, rotation and alpha of the surface being drawn. Changing these values does\n    *not* modify the resource in any way (only how it is drawn).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_ext.htm"
    },
    "draw_surface_general": {
      "name": "draw_surface_general",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "left",
          "description": "The left position in the surface of the part to be drawn."
        },
        {
          "parameter": "top",
          "description": "The top position in the surface of the part to be drawn."
        },
        {
          "parameter": "w",
          "description": "The width of the part to be draw, from left."
        },
        {
          "parameter": "h",
          "description": "The height of the part to be draw, from top."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling to draw the surface with."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling to draw the surface with."
        },
        {
          "parameter": "rot",
          "description": "The rotation or angle to draw the surface with."
        },
        {
          "parameter": "c1",
          "description": "The colour of the top left corner of the surface."
        },
        {
          "parameter": "c2",
          "description": "The colour of the top right corner of the surface."
        },
        {
          "parameter": "c3",
          "description": "The colour of the bottom right corner of the surface."
        },
        {
          "parameter": "c4",
          "description": "The colour of the bottom left corner of the surface."
        },
        {
          "parameter": "alpha",
          "description": "The alpha transparency to draw the surface with.."
        }
      ],
      "requiredParameters": 15,
      "isVariadic": false,
      "example": "```\ndraw_surface_general(surf, 8, 8, 32, 32, x, y, 2, 0.5, 180, c_white, c_white, c_black, c_black, 1);\n```\nThis will draw a 32x32 pixel area from 8x8 pixels into the surface. It will be stretched to double its usual width but half its usual height. It will be opaque, and upside down. The top area of the surface will be blended white and hence normal, but\n    the bottom area will be black, meaning the surface will go from normal to silhouette downwards in a smooth gradient.\n",
      "description": "This function combines the function `draw_surface_ext()` with the function `draw_surface_part()`, adding in some additional blending options so that each corner of\n    the final surface part can be blended with an individual colour.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_general.htm"
    },
    "draw_surface_part": {
      "name": "draw_surface_part",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "left",
          "description": "The left position in the surface of the part to be drawn."
        },
        {
          "parameter": "top",
          "description": "The top position in the surface of the part to be drawn."
        },
        {
          "parameter": "w",
          "description": "The width of the part to be draw, from left."
        },
        {
          "parameter": "h",
          "description": "The height of the part to be drawn, from top."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_surface_part(surf, 8, 8, 32, 32, x, y);\n```\nThis will draw a 32x32 area 8px by 8px in from the top left of the surface indexed in \"surf\", at the instances (x,y) position.\n",
      "description": "With this function you can draw part of any surface at a given position within the room. As with  [draw_surface()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface.htm) you can specify a surface, but you then need to specify the *relative coordinates* within the\n    surface of an area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the surface and all further coordinates should be taken from that position.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_part.htm"
    },
    "draw_surface_part_ext": {
      "name": "draw_surface_part_ext",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "left",
          "description": "The left position in the surface of the part to be drawn."
        },
        {
          "parameter": "top",
          "description": "The top position in the surface of the part to be drawn."
        },
        {
          "parameter": "w",
          "description": "The width of the part to be draw, from left."
        },
        {
          "parameter": "h",
          "description": "The height of the part to be drawn, from top."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling the part should be drawn with."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling the part should be drawn with."
        },
        {
          "parameter": "colour",
          "description": "The colour blending the part should be drawn with."
        },
        {
          "parameter": "alpha",
          "description": "The alpha transparency the part should be drawn with."
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": "```\ndraw_surface_part_ext(surf, 8, 8, 32, 32, x, y, 2, 0.5, c_black, 1);\n```\nThis will draw a 32x32 pixel area from 8x8 pixels into the surface indexed in the variable \"surf\". It will be stretched to double its usual width but half its usual height. It will be opaque and it will be blended with black (turning it into\n    a silhouette).\n",
      "description": "This function will draw a part of the chosen surface at the given position following the same rules as per `draw_surface_part()`, only now you can scale the part, blend a colour with it, or change its alpha\n    when drawing it to the screen (the same as when drawing a surface with `draw_surface_ext()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_part_ext.htm"
    },
    "draw_surface_stretched": {
      "name": "draw_surface_stretched",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        },
        {
          "parameter": "w",
          "description": "The width at which to draw the surface."
        },
        {
          "parameter": "h",
          "description": "The height at which to draw the surface."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_surface_stretched(surf, 10, 10, 100, 100);\n```\nThis will draw the surface indexed in the variable \"surf\" with its left corner at (10,10). Its width and height are both set to 100, which is how much space it will occupy regardless of the surface's actual width and height.\n",
      "description": "This function simply takes a surface and stretches it over the given width and height so that it occupies the area. As with `draw_surface()` you can specify a surface and then the x / y position in the room for\n    the surface to be drawn at and finally a width and a height (which must be pixel values).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_stretched.htm"
    },
    "draw_surface_stretched_ext": {
      "name": "draw_surface_stretched_ext",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        },
        {
          "parameter": "w",
          "description": "The width at which to draw the surface."
        },
        {
          "parameter": "h",
          "description": "The height at which to draw the surface."
        },
        {
          "parameter": "colour",
          "description": "The colour with which to colour the surface."
        },
        {
          "parameter": "alpha",
          "description": "The alpha with which to blend the surface."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_surface_stretched_ext(surf, x, y, 200, 200, c_white, 0.5);\n```\nThis will draw the given surface with its left corner at the instances x/y position and it will be stretched to occupy an area of 200x200 pixels with no blending, but partial transparency.\n",
      "description": "This function does exactly the same as the `draw_surface_stretched()` function with the added ability to set the colour blending and alpha value for the surface when it is drawn (similar to the function\n    `draw_surface_ext()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_stretched_ext.htm"
    },
    "draw_surface_tiled": {
      "name": "draw_surface_tiled",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "x",
          "description": "The x position of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y position of where to draw the surface."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ndraw_surface_tiled(surf, x, y);\n```\nThis will draw the surface indexed in \"surf\" at the instances own x and y position, and tiled in every direction in the room.\n",
      "description": "This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_tiled.htm"
    },
    "draw_surface_tiled_ext": {
      "name": "draw_surface_tiled_ext",
      "parameters": [
        {
          "parameter": "id",
          "description": "The unique ID value of the surface to draw."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to draw the surface."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to draw the surface."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the surface."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the surface."
        },
        {
          "parameter": "col",
          "description": "The colour with which to blend the surface."
        },
        {
          "parameter": "alpha",
          "description": "The alpha of the surface."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_surface_tiled_ext(surf, x, y, 2, 2, c_red, 0.5);\n```\nThis will draw the surface indexed in \"surf\" at the instances own x and y position, double its stored size and tiled in every direction in the room, as well as blended with the colour red and partially transparent.\n",
      "description": "This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same\n    as those used in `draw_surface_ext()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/draw_surface_tiled_ext.htm"
    },
    "draw_text": {
      "name": "draw_text",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ndraw_text(x, y, \"Hello, \" + global.Name + \"!\\nI hope you are well!\");\n```\nThe above code will draw a string at the instance x/y position, which will use the string stored in the global variable \"Name\" and split it over two lines.\n",
      "description": "With this function you can draw any string at any position within the room (for drawing real numbers you should use the `string()` function to convert them into text). To combine strings you can use **+** (see example below) and you can also use **\\n** within a string to add a line break so it is drawn over multiple lines (for information on how to properly format a string and what escape characters you can use, please see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/Strings.htm)). The colour of the text and the alpha are governed by the current base alpha and colour values as set by `draw_set_alpha()` and `draw_set_colour()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text.htm"
    },
    "draw_text_colour": {
      "name": "draw_text_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        },
        {
          "parameter": "c1",
          "description": "The colour for the top left of the drawn text."
        },
        {
          "parameter": "c2",
          "description": "The colour for the top right of the drawn text."
        },
        {
          "parameter": "c3",
          "description": "The colour for the bottom right of the drawn text."
        },
        {
          "parameter": "c4",
          "description": "The colour for the bottom left of the drawn text."
        },
        {
          "parameter": "alpha",
          "description": "The alpha for the text."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_white); draw_text(100, 100, \"Health\"); draw_text_colour(100, 200, string(health), c_lime, c_lime, c_green, c_green, 1);\n```\nThe above code will draw two sections of text on the same line, with the first text being drawn white (as that is the base drawing colour) and the second text being drawn with a lime green to normal green gradient.\n",
      "description": "This function will draw text in a similar way to `draw_text()` only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead\n    of the base drawing colour and alpha.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_colour.htm"
    },
    "draw_text_ext": {
      "name": "draw_text_ext",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        },
        {
          "parameter": "sep",
          "description": "The distance in pixels between lines of text."
        },
        {
          "parameter": "w",
          "description": "The maximum width in pixels of the string before a line break."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ndraw_text_ext(100, 50, keyboard_string, 3, 300);\n```\nThe above code will draw whatever text the user types into the keyboard, splitting it onto new lines every time the string length for that line exceeds 300 pixels. the code will also maintain a separation of 3 pixels between lines should this occur.\n",
      "description": "This function will draw text in a similar way to `draw_text()` only now you can set the space between each line of text - should the text occupy more than one line - and limit the width (in pixels)\n    of the string per line so that should any line exceed this value, GameMaker Studio 2 will automatically split the text to the next line at the nearest available white-space (if the text has no white-spaces then it will overrun this maximum\n    width value). Note that any white space placed at the start of the string will be stripped out before being parsed for drawing because of this. Also note that a value of -1 for the line separation argument will default to a separation based on the\n    height of the \"M\" character in the chosen font.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext.htm"
    },
    "draw_text_ext_colour": {
      "name": "draw_text_ext_colour",
      "parameters": [],
      "requiredParameters": 10,
      "isVariadic": false,
      "example": "```\ndraw_text_ext_colour(200, 200, keyboard_string, 5, 300, c_blue, c_blue, c_navy, c_navy, 1);\n```\nThe above code will draw whatever text the user types into the keyboard, splitting it onto new lines every time the string length for that line exceeds 300 pixels. the code will also maintain a separation of 5 pixels between lines should this occur.\n    Each line of the text will be coloured using a blue gradient, with light blue at the top and dark blue at the bottom.\n",
      "description": "This function is a combination of the base `draw_text()` function with the `draw_text_ext()` and `draw_text_colour()`    functions, permitting you to define gradient colours for text as well as the line spacing and maximum width per line all together.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_colour.htm"
    },
    "draw_text_ext_transformed": {
      "name": "draw_text_ext_transformed",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        },
        {
          "parameter": "sep",
          "description": "The distance in pixels between lines of text."
        },
        {
          "parameter": "w",
          "description": "The maximum width in pixels of the string before a line break."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scale."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scale."
        },
        {
          "parameter": "angle",
          "description": "The angle of the text."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\ndraw_set_halign(fa_center); draw_set_valign(fa_middle);\n     image_angle += 1; draw_text_ext_transformed(room_width / 2, room_height / 2, keyboard_string, 10, 300, 2, 2, image_angle);\n```\nThe above code will draw the given text in the middle of the room, with a maximum string length of 300 pixels, a spacing between each line of 10 pixels, spinning round and scaled to twice its original size.\n",
      "description": "This function is a combination of the base `draw_text()` function with the `draw_text_ext()` and `draw_text_transformed()`    functions, permitting you to scale and rotate text while maintaining a specific line spacing and maximum width per line. Note that the \"width\" argument is based on a scale of 1, so if the scale is different, this value should be changed\n    proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_transformed.htm"
    },
    "draw_text_ext_transformed_colour": {
      "name": "draw_text_ext_transformed_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        },
        {
          "parameter": "sep",
          "description": "The distance in pixels between lines of text."
        },
        {
          "parameter": "w",
          "description": "The maximum width in pixels of the string before a line break."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scale."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scale."
        },
        {
          "parameter": "angle",
          "description": "The angle of the text."
        },
        {
          "parameter": "c1",
          "description": "The colour for the top left of the drawn text."
        },
        {
          "parameter": "c2",
          "description": "The colour for the top right of the drawn text."
        },
        {
          "parameter": "c3",
          "description": "The colour for the bottom right of the drawn text."
        },
        {
          "parameter": "c4",
          "description": "The colour for the bottom left of the drawn text."
        },
        {
          "parameter": "alpha",
          "description": "The alpha for the text."
        }
      ],
      "requiredParameters": 13,
      "isVariadic": false,
      "example": "```\ndraw_set_halign(fa_center); draw_set_valign(fa_middle);\n     draw_text_ext_transformed_colour(200, 200, \"My name is\" + global.name +\".\", 20, 200, 0.5, 0.5, 180, c_blue, c_blue, c_navy, c_navy, 1);\n```\nThis will draw the given text with a blue to dark blue downward gradient, at position (200,200) in the room, rotated to be upside down and at half the normal point size of the font. There will be 20 pixels between each line should there be more than\n    one line drawn and each line will have a maximum width of 200 pixels.\n",
      "description": "This function is a combination of the base `draw_text()` function with the `draw_text_ext()`, `draw_text_transformed()`    and `draw_text_colour()` functions. As such, this is the most general of all functions for drawing text and gives a large amount of flexibility when drawing. Note that the \"width\"\n    argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given\n    width. Instead you should have set the width to 150 to compensate the scaling.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_ext_transformed_colour.htm"
    },
    "draw_text_transformed": {
      "name": "draw_text_transformed",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scale (default 1)."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scale(default 1)."
        },
        {
          "parameter": "angle",
          "description": "The angle of the text."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ndraw_set_halign(fa_center); draw_set_valign(fa_middle);\n     image_angle += 1; draw_text_transformed(room_width / 2, room_height / 2, \"GAME OVER!\", 2, 2, image_angle);\n```\nThe above code will draw the given text in the middle of the room, spinning round and scaled to twice its original size.\n",
      "description": "This function will draw text in a similar way to `draw_text()` only now you can choose to scale the text along the horizontal or vertical axis (effectively stretching or shrinking it) and also have\n    GameMaker Studio 2 draw it at an angle (where 0 is normal and every degree over 0 rotates the text anti-clockwise).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_transformed.htm"
    },
    "draw_text_transformed_colour": {
      "name": "draw_text_transformed_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the drawn string."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the drawn string."
        },
        {
          "parameter": "string",
          "description": "The string to draw."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scale."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scale."
        },
        {
          "parameter": "angle",
          "description": "The angle of the text."
        },
        {
          "parameter": "c1",
          "description": "The colour for the top left of the drawn text."
        },
        {
          "parameter": "c2",
          "description": "The colour for the top right of the drawn text."
        },
        {
          "parameter": "c3",
          "description": "The colour for the bottom right of the drawn text."
        },
        {
          "parameter": "c4",
          "description": "The colour for the bottom left of the drawn text."
        },
        {
          "parameter": "alpha",
          "description": "The alpha for the text."
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": "```\ndraw_set_halign(fa_center); draw_set_valign(fa_middle);\n     image_angle += 1; draw_text_transformed_colour(room_width / 2, room_height / 2, keyboard_string, 2, 2, image_angle, c_red, c_red, c_yellow, c_yellow, 0.5);\n```\nThe above code will draw the given text in the middle of the room, spinning round and scaled to twice its original size, with a colour gradient going from yellow to red as well as an alpha of 0.5.\n",
      "description": "This function is a combination of the base `draw_text()` function with the `draw_text_transformed()` and `draw_text_colour()`    functions, permitting you to scale and rotate text as well as colour it with a gradient fill and change its alpha value, ignoring the base alpha and colour settings for drawing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_text_transformed_colour.htm"
    },
    "draw_texture_flush": {
      "name": "draw_texture_flush",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndraw_texture_flush();\n```\nThe above code flushes the video memory of texture data, and would probably be placed in the create event of the first instance of an object placed in the room.\n",
      "description": "With this function you can remove all textures from video memory, and they will then be reloaded on first use. This is the only effective way to manage video memory when you have multiple texture pages for a game, and you should flush the texture memory\n    between levels on your game and organise the graphics using the texture group feature to ensure that the minimum number of textures are used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/draw_texture_flush.htm"
    },
    "draw_tile": {
      "name": "draw_tile",
      "parameters": [
        {
          "parameter": "tile set",
          "description": "The ID of the tile set to use"
        },
        {
          "parameter": "tiledata",
          "description": "The tile data to use"
        },
        {
          "parameter": "frame",
          "description": "The frame number for the animated tile to use (default 0 for non-animated tiles)"
        },
        {
          "parameter": "x",
          "description": "The x position within the room to draw at"
        },
        {
          "parameter": "y",
          "description": "The y position within the room to draw at"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var data = tilemap_get(map_id, 0, 0); tile_set_flip(data, true); draw_tile(set_Wall, data, 0, x, y);\n```\nThe above code will get the data on a tile from the given tilemap, then set the \"flip\" flag and use this data to draw the tile flipped at the instance position.\n",
      "description": "With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile\n    data is the data \"blob\" that contains all the information about the tile index and the transformations that have been applied. You can use the function `tilemap_get()`    to get the tile data which can then be manipulated using the  [Tile Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm), or you can construct it yourself using the following tile constants along with the index value\n    of the tile to create:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tile.htm"
    },
    "draw_tilemap": {
      "name": "draw_tilemap",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tilemap element to get the cell y position of"
        },
        {
          "parameter": "x",
          "description": "The x position within the room to draw at"
        },
        {
          "parameter": "y",
          "description": "The y position within the room to draw at"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Effects\"); var map_id = layer_tilemap_get_id(lay_id); draw_tilemap(map_id, mouse_x, mouse_y);\n```\nThe above code gets the layer ID then uses that to get a specific tilemap ID which in turn is used to draw the tilemap at the mouse position.\n",
      "description": "This function can be used to draw a given tilemap anywhere in the room. You give the tilemap element ID (which you get when you create a tilemap element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), then give the x/y position for drawing (in the room). Note that this will simply draw the tilemap at\n    the specified point, using the layer depth of the instance that is calling the function. It does *not* move the tilemap - nor change it in any way - and does it matter if the tilemap is flagged as visible or not.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_tilemap.htm"
    },
    "draw_triangle": {
      "name": "draw_triangle",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the triangle's first corner."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the triangle's first corner."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the triangle's second corner."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the triangle's second corner."
        },
        {
          "parameter": "x3",
          "description": "The x coordinate of the triangle's third corner."
        },
        {
          "parameter": "y3",
          "description": "The y coordinate of the triangle's third corner."
        },
        {
          "parameter": "outline",
          "description": "Whether the triangle is drawn filled (false) or as a one pixel wide outline (true)."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_aqua); draw_triangle(50, 50, 200, 50, 50, 200, 0);\n```\nThis will draw a filled aquamarine-coloured isosceles right-angled triangle, with its first corner at (50,50), its second at (200,50) and its third at (50,200).\n",
      "description": "With this function you can draw either an outline of a triangle or a filled triangle.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_triangle.htm"
    },
    "draw_triangle_colour": {
      "name": "draw_triangle_colour",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the triangle's first corner."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the triangle's first corner."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the triangle's second corner."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the triangle's second corner."
        },
        {
          "parameter": "x3",
          "description": "The x coordinate of the triangle's third corner."
        },
        {
          "parameter": "y3",
          "description": "The y coordinate of the triangle's third corner."
        },
        {
          "parameter": "col1",
          "description": "The colour of the first corner."
        },
        {
          "parameter": "col2",
          "description": "The colour of the second corner."
        },
        {
          "parameter": "col3",
          "description": "The colour of the third corner."
        },
        {
          "parameter": "outline",
          "description": "Whether the triangle is an outline (true) or filled in (false)."
        }
      ],
      "requiredParameters": 10,
      "isVariadic": false,
      "example": "```\ndraw_triangle_colour(200, 200, 300, 200, 200, 300, c_red, c_blue, c_blue, false);\n```\nThis would draw a filled isosceles right-angled triangle with red at the right angle, blue on the other two corners.\n",
      "description": "With this function you can draw either an outline of a triangle or a filled triangle. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other\n    (the colour settings will over-ride the base colour set with the function `draw_set_colour()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_triangle_colour.htm"
    },
    "draw_vertex": {
      "name": "draw_vertex",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the vertex."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the vertex."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ndraw_primitive_begin(pr_trianglelist); draw_vertex(100, 100); draw_vertex(100, 200); draw_vertex(150, 150); draw_primitive_end();\n  \n```\nThe above code will draw a simple triangle primitive.\n",
      "description": "This function defines the position of a vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it. See  [draw_primitive_begin()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_primitive_begin.htm) for\n    more information. To end and draw the primitive you must call `draw_primitive_end()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex.htm"
    },
    "draw_vertex_colour": {
      "name": "draw_vertex_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the vertex."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the vertex."
        },
        {
          "parameter": "col",
          "description": "The colour to draw this vertex with."
        },
        {
          "parameter": "alpha",
          "description": "The alpha to draw this vertex with (0-1)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ndraw_primitive_begin(pr_trianglelist); draw_vertex_colour(100, 100, c_blue, 0.1); draw_vertex_colour(100, 200, c_red, 0.1); draw_vertex_colour(150, 150, c_green, 1); draw_primitive_end();\n  \n```\nThe above code will draw a semi-transparent triangle with each vertex coloured a different colour.\n",
      "description": "This function defines the position of a vertex for a primitive, with its own colour and alpha setting. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it (see `draw_primitive_begin()`    for more information) and the vertexes with different colours and alphas will blend smoothly from one to the other. To end and draw the primitive you must call `draw_primitive_end()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_colour.htm"
    },
    "draw_vertex_texture": {
      "name": "draw_vertex_texture",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the vertex."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the vertex."
        },
        {
          "parameter": "xtex",
          "description": "The width of the texture sample to use."
        },
        {
          "parameter": "ytex",
          "description": "The height of the texture sample to use."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "draw_set_colour(c_white);\nvar tex = sprite_get_texture(spr_Background, 0);\ndraw_primitive_begin_texture(pr_trianglestrip, tex);\ndraw_vertex_texture(0, 0, 0, 0);\ndraw_vertex_texture(640, 0, 1, 0);\ndraw_vertex_texture(0, 480, 0, 1);\ndraw_vertex_texture(640, 480, 1, 1);\ndraw_primitive_end();\nThe above code will draw a 4 vertex triangle strip (making a rectangle) textured with the texture held in the \"tex\" variable, and the whole texture will be used to cover the completed primitive.\n",
      "description": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See `draw_primitive_begin()` for more information),\n    the order with which you add the vertexes to it and the position of the start point you set for the texture. To end and draw the primitive you must call `draw_primitive_end()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_texture.htm"
    },
    "draw_vertex_texture_colour": {
      "name": "draw_vertex_texture_colour",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of the vertex."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the vertex."
        },
        {
          "parameter": "xtex",
          "description": "The x coordinate within the texture."
        },
        {
          "parameter": "ytex",
          "description": "The y coordinate within the texture."
        },
        {
          "parameter": "col",
          "description": "The colour to blend with the texture at this vertex (-1 or `c_white` for no blending)."
        },
        {
          "parameter": "alpha",
          "description": "The alpha to draw this vertex with (0-1)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_white); var tex = sprite_get_texture(spr_Background, 0); draw_primitive_begin_texture(pr_trianglestrip, tex); draw_vertex_texture_colour(0, 0, 0, 0, c_fuchsia, 1); draw_vertex_texture_colour(640, 0, 1, 0, c_yellow,\n    1); draw_vertex_texture_colour(0, 480, 0, 1, c_aqua, 1); draw_vertex_texture_colour(640, 480, 1, 1, c_lime, 1); draw_primitive_end();\n  \n```\nThe above code will draw a 4 vertex triangle strip (making a rectangle) textured with the texture held in the \"tex\" variable, and the whole texture will be used to cover the completed primitive, and it will be blended with four different colours.\n",
      "description": "This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See `draw_primitive_begin()` for more information),\n    the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value\n    of -1 (or `c_white`) may be used for the colour argument. To end and draw the primitive you must call `draw_primitive_end()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/draw_vertex_texture_colour.htm"
    },
    "ds_exists": {
      "name": "ds_exists",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The variable index to check for the data structure"
        },
        {
          "parameter": "type",
          "description": "The type of data structure to check for (see the list of constants below)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !ds_exists(ai_grid, ds_type_grid)\n    {\n        ai_grid = ds_grid_create(room_width / 32, room_height / 32);\n    }\n```\nThe above code checks the (previously initialised) variable \"ai_grid\" to see if it indexes a DS grid type data structure, and if it does not then it creates one and stores its index in the variable.\n",
      "description": "With this function you can check to see if a data structure of the given type exists. You supply the \"index\" value (as held in a variable) and the DS \"type\", which can be any of the constants listed below, and the function will return `true` if the data structure exists and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm"
    },
    "ds_grid_add": {
      "name": "ds_grid_add",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x",
          "description": "The x position of the cell in the grid."
        },
        {
          "parameter": "y",
          "description": "The y position of the cell in the grid."
        },
        {
          "parameter": "val",
          "description": "The value to add to the cell."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nds_grid_add(grid, 5, 5, 6)\n```\nThis would add 6 to the given cell within the DS grid referenced by the variable \"grid\".\n",
      "description": "This function can be used to add a given value (real or string) to the value of the given cell within the grid. The value to be added must be the same type as that held within the grid cell, ie: you cannot add a string to a real or vice-versa, and for\n    strings this corresponds to concatenation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add.htm"
    },
    "ds_grid_add_disk": {
      "name": "ds_grid_add_disk",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        },
        {
          "parameter": "val",
          "description": "The value to add to the cells within the disk."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nds_grid_add_disk(grid, 7, 6, 5, 2)\n```\nThis would add 2 to all the values held in the cells within the defined disk area of the DS grid referenced by the variable \"grid\".\n",
      "description": "This function can be used to add a given value (real or string) to all the values of the cells found within the defined disk area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string\n    to a real or vice-versa, and for strings this corresponds to concatenation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add_disk.htm"
    },
    "ds_grid_add_grid_region": {
      "name": "ds_grid_add_grid_region",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the destination grid."
        },
        {
          "parameter": "source",
          "description": "The index of the source grid."
        },
        {
          "parameter": "x1",
          "description": "The left position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "y1",
          "description": "The top position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "x2",
          "description": "The right position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "y2",
          "description": "The bottom position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "xpos",
          "description": "The x position on the destination grid to add the source region to."
        },
        {
          "parameter": "ypos",
          "description": "The y position on the destination grid to add the source region to."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nds_grid_add_grid_region(grid, grid, 0, 0, 1, 5, 2, 0)\n```\nThe above code would copy the region of cells from (0,0) to (1,5) of the DS grid indexed in the variable \"grid\" and add them to the cells from position (2,0) of the same DS grid .\n",
      "description": "This function can be used to add all the values of all the cells found within the source area of a grid to the values within the destination grid, as illustrated below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add_grid_region.htm"
    },
    "ds_grid_add_region": {
      "name": "ds_grid_add_region",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The x position of the left of the region in the grid."
        },
        {
          "parameter": "y1",
          "description": "The y position of the top of the region in the grid."
        },
        {
          "parameter": "x2",
          "description": "The x position of the right of the region in the grid."
        },
        {
          "parameter": "y2",
          "description": "The y position of the bottom of the region in the grid."
        },
        {
          "parameter": "val",
          "description": "The value to add to the region cells."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nds_grid_add_region(grid, 2, 4, 5, 5, \".\")\n```\nThis would add \".\" to all the strings held in the cells within the defined region of the DS grid referenced by the variable \"grid\".\n",
      "description": "This function can be used to add a given value (real or string) to all the values of the cells found within the defined area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to\n    a real or vice-versa, and for strings this corresponds to concatenation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_add_region.htm"
    },
    "ds_grid_clear": {
      "name": "ds_grid_clear",
      "parameters": [
        {
          "parameter": "index",
          "description": "This index of the grid to clear."
        },
        {
          "parameter": "val",
          "description": "The new value for all grid cells."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nds_grid_resize(global.Grid, room_width / 32, room_height / 32); ds_grid_clear(global.Grid, -1)\n```\nThe above code will resize the DS grid indexed in the global variable \"Grid\" and then clear it so that each cell holds the value -1.\n",
      "description": "This function can be used to clear a given DS grid to a specific value. All cells within the grid will then contain this value, which can be a real number or a string. The image below illustrates how this works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_clear.htm"
    },
    "ds_grid_copy": {
      "name": "ds_grid_copy",
      "parameters": [
        {
          "parameter": "destination",
          "description": "This index of the grid to copy to."
        },
        {
          "parameter": "source",
          "description": "This index of the grid to copy from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nn_grid = ds_grid_create(ds_grid_width(a_grid), ds_grid_height(a_grid)); ds_grid_copy(n_grid, a_grid); ds_grid_clear(a_grid, -1)\n```\nThe above code creates a new DS grid, based on the width and height of a previously created grid, then copies the information form the previous grid to the new one. Finally it clears the old grid so that all cells have a value of -1.\n",
      "description": "With this function you can copy the contents of one grid into another one. Both grids must have been created previously using the `ds_grid_create()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_copy.htm"
    },
    "ds_grid_create": {
      "name": "ds_grid_create",
      "parameters": [
        {
          "parameter": "w",
          "description": "The width of the grid to be created."
        },
        {
          "parameter": "h",
          "description": "The height of the grid to be created."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmygrid = ds_grid_create(10, 10)\n```\nThis creates a grid 10 cells high and 10 cells wide.\n",
      "description": "With this function you can create a new DS grid data structure of the specified cell width and height. This function returns an id which must be used in all further functions that deal with this DS grid.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_create.htm"
    },
    "ds_grid_destroy": {
      "name": "ds_grid_destroy",
      "parameters": [
        {
          "parameter": "index",
          "description": "This index of the grid to destroy."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (lives == 0)\n    {\n        ds_grid_destroy(Wall_Grid);\n        Wall_Grid = -1;\n        room_goto(rm_Menu);\n    }\n```\nThe above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS grid indexed in the variable \"Wall_Grid\" and then changes rooms.\n",
      "description": "This function will remove the given grid data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS grid to prevent memory leaks that can slow down and crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_destroy.htm"
    },
    "ds_grid_get": {
      "name": "ds_grid_get",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x",
          "description": "The x position of the cell you want to find the value of."
        },
        {
          "parameter": "y",
          "description": "The y position of the cell you want to find the value of."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar xx = irandom(ds_grid_width(grid) - 1); var yy = irandom(ds_grid_height(grid) - 1); val = ds_grid_get(grid, xx, yy)\n```\nThe above code selects a random cell from the DS grid indexed in the variable \"grid\" and stores its value in the variable \"val\".\n",
      "description": "This function can be used to get the value (either a real number or a string) from any cell within the given DS grid. If you pass invalid grid coordinates to the function, then the value returned will be `undefined` and an error will be shown\n    in the output window.",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get.htm"
    },
    "ds_grid_get_disk_max": {
      "name": "ds_grid_get_disk_max",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk center in the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk center in the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk in the grid."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_disk_max(grid, 5, 5, 2)\n```\nThe above code will set the variable \"val\" to the maximum value contained within the given disk of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to find the maximum value for all the cells found within the defined disk area of a grid, as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_max.htm"
    },
    "ds_grid_get_disk_mean": {
      "name": "ds_grid_get_disk_mean",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_disk_mean(grid, 5, 5, 2)\n```\nThe above code will set the variable \"val\" to the mean value contained within the given disk of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to find the mean value for all the cells found within the defined disk area of a grid (all cell values are added together and then divided by the total number of cells that make up the disk), as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_mean.htm"
    },
    "ds_grid_get_disk_min": {
      "name": "ds_grid_get_disk_min",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_disk_min(grid, 5, 5, 2)\n```\nThe above code will set the variable \"val\" to the minimum value contained within the given disk of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to find the minimum value for all the cells found within the defined disk area of a grid, as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_min.htm"
    },
    "ds_grid_get_disk_sum": {
      "name": "ds_grid_get_disk_sum",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_disk_sum(grid, 5, 5, 2)\n```\nThe above code will set the variable \"val\" to the sum of all values contained within the given disk of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to add all the values all the cells found within the defined disk area of a grid together, as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_disk_sum.htm"
    },
    "ds_grid_get_max": {
      "name": "ds_grid_get_max",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The left cell column of the region."
        },
        {
          "parameter": "y1",
          "description": "The top cell row of the region."
        },
        {
          "parameter": "x2",
          "description": "The right cell column of the region."
        },
        {
          "parameter": "y2",
          "description": "The bottom cell row of the region."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_max(grid, 0, 0, 5, 5)\n```\nThe above code will set the variable \"val\" to the maximum value contained within the given region of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to find the maximum value for all the cells found within the defined region of a grid, as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_max.htm"
    },
    "ds_grid_get_mean": {
      "name": "ds_grid_get_mean",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The left cell column of the region."
        },
        {
          "parameter": "y1",
          "description": "The top cell row of the region."
        },
        {
          "parameter": "x2",
          "description": "The right cell column of the region."
        },
        {
          "parameter": "y2",
          "description": "The bottom cell row of the region."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_mean(grid, 0, 0, 5, 5)\n```\nThe above code will set the variable \"val\" to the mean value contained within the given region of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to find the mean value for all the cells found within the defined region of a grid (all cell values are added together and then divided by the total number of cells that make the region), as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_mean.htm"
    },
    "ds_grid_get_min": {
      "name": "ds_grid_get_min",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The left cell column of the region."
        },
        {
          "parameter": "y1",
          "description": "The top cell row of the region."
        },
        {
          "parameter": "x2",
          "description": "The right cell column of the region."
        },
        {
          "parameter": "y2",
          "description": "The bottom cell row of the region."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_min(grid, 0, 0, 5, 5)\n```\nThe above code will set the variable \"val\" to the minimum value contained within the given region of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to find the minimum value for all the cells found within the defined region of a grid, as shown in the image below:",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_min.htm"
    },
    "ds_grid_get_sum": {
      "name": "ds_grid_get_sum",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The left cell column of the region."
        },
        {
          "parameter": "y1",
          "description": "The top cell row of the region."
        },
        {
          "parameter": "x2",
          "description": "The right cell column of the region."
        },
        {
          "parameter": "y2",
          "description": "The bottom cell row of the region."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nval = ds_grid_get_sum(grid, 0, 0, 5, 5)\n```\nThe above code will set the variable \"val\" to the sum of all values contained within the given region of the DS grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to add all the values all the cells found within the defined region of a grid together, as shown in the image below:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_get_sum.htm"
    },
    "ds_grid_height": {
      "name": "ds_grid_height",
      "parameters": [
        {
          "parameter": "index",
          "description": "This index of the grid to find the height of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < ds_grid_width(grid); ++i)\n    {\n        for (var j = 0; j < ds_grid_height(grid); ++j)\n        {\n            if (ds_grid_get(grid, i, j) == 1)\n            {\n                instance_create_Layer(i * 32, j * 32, \"Walls\", obj_Wall);\n            }\n        }\n    }\n```\nThe above code will loop through the DS grid indexed in the variable \"grid\" and if the value found in any specific cell is equal to 1, it will then create an instance of \"obj_Wall\" at the appropriate position within the room.\n",
      "description": "This function will return the height of the given grid. This value is the number of cells the grid has along the y-axis and is always an integer, as shown in the image below:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_height.htm"
    },
    "ds_grid_multiply": {
      "name": "ds_grid_multiply",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x",
          "description": "The x position of the cell in the grid."
        },
        {
          "parameter": "y",
          "description": "The y position of the cell in the grid."
        },
        {
          "parameter": "val",
          "description": "The value to multiply with the cell."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nds_grid_multiply(mygrid, 5, 5, 2)\n```\nThe above code will multiply the value stored in the given DS grid cell by 2.\n",
      "description": "This function will multiply the value of a the given grid cell by the specified amount.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply.htm"
    },
    "ds_grid_multiply_disk": {
      "name": "ds_grid_multiply_disk",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        },
        {
          "parameter": "val",
          "description": "The value to multiply the cells within the disk with."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nds_grid_multiply_disk(mygrid, 5, 5, 5, 2)\n```\nThe above code will take all the values found within the circular grid area and multiply each one by 2.\n",
      "description": "This function will take all the values in a given disc-shaped region of the DS grid, and multiply each one by the given amount.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply_disk.htm"
    },
    "ds_grid_multiply_grid_region": {
      "name": "ds_grid_multiply_grid_region",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the destination grid."
        },
        {
          "parameter": "source",
          "description": "The index of the source grid."
        },
        {
          "parameter": "x1",
          "description": "The left position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "y1",
          "description": "The top position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "x2",
          "description": "The right position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "y2",
          "description": "The bottom position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "xpos",
          "description": "The x position on the destination grid to multiply the source region with."
        },
        {
          "parameter": "ypos",
          "description": "The y position on the destination grid to multiply the source region with."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nds_grid_multiply_grid_region(mygrid, mygrid, 0, 0, 5, 5, 0, 0)\n```\nThis would take the region of cells from (0,0) to (5,5) of the DS grid \"mygrid\" and multiply them with the cells from position (0,0) of the same DS grid.\n",
      "description": "With this function you can define an area within a given DS grid, then take those values and multiply them with those found in a separate region of either the same DS grid, or another one (which has been previously created). The original region will\n    remain unchanged, while the region that they have been multiplied with will now store the new values for each cell.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply_grid_region.htm"
    },
    "ds_grid_multiply_region": {
      "name": "ds_grid_multiply_region",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The x position of the left of the region in the grid."
        },
        {
          "parameter": "y1",
          "description": "The y position of the top of the region in the grid."
        },
        {
          "parameter": "x2",
          "description": "The x position of the right of the region in the grid."
        },
        {
          "parameter": "y2",
          "description": "The y position of the bottom of the region in the grid."
        },
        {
          "parameter": "val",
          "description": "The value to multiply with the region cells."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nds_grid_multiply_region(mygrid, 5, 5, 10, 10, 2);\n```\nThe above code will take all the values found within the defined rectangular grid area and multiply each one by 2.\n",
      "description": "With this function you can specify a region of the grid in which to multiply each cell value by a given amount.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_multiply_region.htm"
    },
    "ds_grid_read": {
      "name": "ds_grid_read",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid to read."
        },
        {
          "parameter": "string",
          "description": "The string to read into the DS grid."
        },
        {
          "parameter": "legacy (*optional*)",
          "description": "Can be either `true` or `false` or omitted completely."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ngrid = ds_grid_create(room_width div 32, room_height div 32);\n    ini_open(\"Save.ini\");\n    ds_grid_read(grid, ini_read_string(\"Save\", \"0\", \"\"));\n    ini_close();\n```\nThe above code creates a DS grid based on the size of the room (each 32x32 square of pixels represents one grid cell) and then reads a previously saved set of grid data from an ini file into the new DS grid.\n",
      "description": "This function can be used to convert a string which has been created previously by the function `ds_grid_write()` back into a DS grid. The DS grid must have been created previously (see the example below).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_read.htm"
    },
    "ds_grid_resize": {
      "name": "ds_grid_resize",
      "parameters": [
        {
          "parameter": "index",
          "description": "This index of the grid to resize."
        },
        {
          "parameter": "w",
          "description": "The new width of the grid."
        },
        {
          "parameter": "h",
          "description": "The new height of the grid."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nds_grid_resize(global.Grid, room_width / 32, room_height / 32); ds_grid_clear(global.Grid, -1)\n```\nThe above code will resize the DS grid indexed in the global variable \"Grid\" and then clear it so that each cell holds the value -1.\n",
      "description": "With this function you can resize the given DS grid to have a different width and/or height. If the grid size is larger than the current grid, the new cells will have a base value of 0, and if the size is smaller then the values held in the cells that\n    are no longer within the new size will be lost. All other cells will be left untouched.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_resize.htm"
    },
    "ds_grid_set": {
      "name": "ds_grid_set",
      "parameters": [
        {
          "parameter": "index",
          "description": "This index of the grid."
        },
        {
          "parameter": "x",
          "description": "The x position of the cell to set."
        },
        {
          "parameter": "y",
          "description": "The y position of the cell to set."
        },
        {
          "parameter": "value",
          "description": "The value with which to set the cell."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ngrid = ds_grid_create(5, 5);\n    var i = 0;\n    var j = 0;\n    \n    repeat (ds_grid_width(grid))\n    {\n        repeat (ds_grid_height(grid))\n        {\n            ds_grid_set(grid, i, j, irandom(9));\n            j += 1;\n        }\n    \n        j = 0;\n        i += 1;\n    }\n  \n```\nThe above code creates a grid and stores its index in the variable \"grid\". It then populates this grid with random integers from 0 to 9.\n",
      "description": "This function can be used to set a given cell within the given DS grid to any value, which can be a real number or a string. The image below illustrates this:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set.htm"
    },
    "ds_grid_set_disk": {
      "name": "ds_grid_set_disk",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        },
        {
          "parameter": "val",
          "description": "The value to set with the cells within the disk."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nds_grid_set_disk(grid, ds_grid_width(grid) div 2, ds_grid_height(grid) div 2, 5, -4)\n```\nThe above code will set a circular region with a radius of 5 cells in the DS grid indexed in the variable \"grid\" to a value of -4.\n",
      "description": "With this function you can set a circular region of a grid to a certain value. You need to supply a starting grid cell (as an x and y axis coordinate) as well as the radius of the disk to set and the value that you wish to set the disk too, as shown\n    by the illustration below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set_disk.htm"
    },
    "ds_grid_set_grid_region": {
      "name": "ds_grid_set_grid_region",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the destination grid."
        },
        {
          "parameter": "source",
          "description": "The index of the source grid."
        },
        {
          "parameter": "x1",
          "description": "The left position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "y1",
          "description": "The top position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "x2",
          "description": "The right position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "y2",
          "description": "The bottom position of the region of cells to copy from the source grid."
        },
        {
          "parameter": "xpos",
          "description": "The x position on the destination grid to copy the source region to."
        },
        {
          "parameter": "ypos",
          "description": "The y position on the destination grid to copy the source region to."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nds_grid_set_grid_region(grid, t_grid, 0, 0, 5, 5, 10, 10)\n```\nThis would copy the region of cells from (0,0) to (5,5) of the grid indexed in the variable \"t_grid\" and copy them to position (10,10) in the grid indexed in the variable \"grid\".\n",
      "description": "This function can be used to copy the contents of a rectangular area of grid cells from one (previously defined) DS grid to another, *or* it can be used to copy a region from within the same grid. The following images illustrate both ways that\n    this function can be used:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set_grid_region.htm"
    },
    "ds_grid_set_region": {
      "name": "ds_grid_set_region",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The x position of the left of the region in the grid."
        },
        {
          "parameter": "y1",
          "description": "The y position of the top of the region in the grid."
        },
        {
          "parameter": "x2",
          "description": "The x position of the right of the region in the grid."
        },
        {
          "parameter": "y2",
          "description": "The y position of the bottom of the region in the grid."
        },
        {
          "parameter": "val",
          "description": "The value to set the region cells to."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nds_grid_set_region(grid, 5, 5, 10, 10, 99)\n```\nThis would set all cells within the region of the grid indexed in the variable \"grid\" from (5,5) to (10,10) to 99.\n",
      "description": "This function can be used to set a rectangular region of a given grid to a specified value (which can be either a real or a string) as illustrated by the image shown below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_set_region.htm"
    },
    "ds_grid_shuffle": {
      "name": "ds_grid_shuffle",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid to shuffle."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nds_grid_shuffle(grid)\n```\nThis would take all the values in the DS grid indexed in the variable \"grid\" and shuffle them around to get a different order.\n",
      "description": "This function can be used to randomise the positions of all values in all cells within a grid.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_shuffle.htm"
    },
    "ds_grid_sort": {
      "name": "ds_grid_sort",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid to sort."
        },
        {
          "parameter": "column",
          "description": "The column to use for sorting the rows"
        },
        {
          "parameter": "ascending",
          "description": "Whether to sort lowest to highest (`true`), or highest to lowest (`false`)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nds_grid_sort(grid, 3, false)\n```\nThis would take all the values in the DS grid indexed in the variable \"grid\" and sort them according to the values found in the 3rd column of the grid (as shown in the above image).\n",
      "description": "This function can be used to sort a DS grid based on the values from a given column (much as you would sort files by date, size etc... in the OS file explorer). The following image shows an example:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_sort.htm"
    },
    "ds_grid_value_disk_exists": {
      "name": "ds_grid_value_disk_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif ds_grid_value_disk_exists(grid, 5, 5, 5, val)\n    {\n        xpos = ds_grid_value_disk_x(grid, 5, 5, 5, val);\n        ypos = ds_grid_value_disk_y(grid, 5, 5, 5, val);\n    }\n```\nThe above code checks a DS grid for a specific value within a disk region. if it is found, it then stores the x and y position of the value in two variables for later use.\n",
      "description": "With this function you can check to see if a specific value (real or string) is present within a circular area of a given DS grid. If it is present the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_disk_exists.htm"
    },
    "ds_grid_value_disk_x": {
      "name": "ds_grid_value_disk_x",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif ds_grid_value_disk_exists(grid, 5, 5, 5, val)\n    {\n        xpos = ds_grid_value_disk_x(grid, 5, 5, 5, val);\n        ypos = ds_grid_value_disk_y(grid, 5, 5, 5, val);\n    }\n```\nThe above code checks a ds_grid for a specific value within a disk region. if it is found, it then stores the x and y position of the value in two variables for later use.\n",
      "description": "With this function you can get the x coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by `ds_grid_create()`) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_disk_x.htm"
    },
    "ds_grid_value_disk_y": {
      "name": "ds_grid_value_disk_y",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "xm",
          "description": "The x position of the disk on the grid."
        },
        {
          "parameter": "ym",
          "description": "The y position of the disk on the grid."
        },
        {
          "parameter": "r",
          "description": "The radius of the disk on the grid."
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif ds_grid_value_disk_exists(grid, 5, 5, 5, val)\n    {\n        xpos = ds_grid_value_disk_x(grid, 5, 5, 5, val);\n        ypos = ds_grid_value_disk_y(grid, 5, 5, 5, val);\n    }\n```\nThe above code checks a DS grid for a specific value within a disk region. if it is found, it then stores the x and y position of the value in two variables for later use.\n",
      "description": "With this function you can get the y coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by `ds_grid_create()`) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_disk_y.htm"
    },
    "ds_grid_value_exists": {
      "name": "ds_grid_value_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The x position of the left of the region in the grid."
        },
        {
          "parameter": "y1",
          "description": "The y position of the top of the region in the grid."
        },
        {
          "parameter": "x2",
          "description": "The x position of the right of the region in the grid."
        },
        {
          "parameter": "y2",
          "description": "The y position of the bottom of the region in the grid."
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif ds_grid_value_exists(grid, 0, 1, 5, 6, val)\n    {\n        xpos = ds_grid_value_x(grid, 0, 1, 5, 6, val);\n        ypos = ds_grid_value_y(grid, 0, 1, 5, 6, val);\n    }\n```\nThe above code checks a DS grid for a specific value within a rectangular region. if it is found, it then stores the x and y position of the value in two variables for later use.\n",
      "description": "With this function you can check to see if a specific value (real or string) is present within a rectangular area of a given DS grid. If it is present the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_exists.htm"
    },
    "ds_grid_value_x": {
      "name": "ds_grid_value_x",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The x position of the left of the region in the grid, from 0 to (grid width - 1)."
        },
        {
          "parameter": "y1",
          "description": "The y position of the top of the region in the grid, from 0 to (grid height - 1)."
        },
        {
          "parameter": "x2",
          "description": "The x position of the right of the region in the grid, from 0 to (grid width - 1)."
        },
        {
          "parameter": "y2",
          "description": "The y position of the bottom of the region in the grid, from 0 to (grid height - 1)."
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif ds_grid_value_exists(grid, 0, 1, 5, 6, val)\n    {\n        xpos = ds_grid_value_x(grid, 0, 1, 5, 6, val);\n        ypos = ds_grid_value_y(grid, 0, 1, 5, 6, val);\n    }\n```\nThe above code checks a ds_grid for a specific value within a rectangular region. if it is found, it then stores the x and y position of the value in two variables for later use.\n",
      "description": "With this function you can get the x coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by `ds_grid_create()`) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_x.htm"
    },
    "ds_grid_value_y": {
      "name": "ds_grid_value_y",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid."
        },
        {
          "parameter": "x1",
          "description": "The x position of the left of the region in the grid, from 0 to (grid width - 1)."
        },
        {
          "parameter": "y1",
          "description": "The y position of the top of the region in the grid, from 0 to (grid height - 1)."
        },
        {
          "parameter": "x2",
          "description": "The x position of the right of the region in the grid, from 0 to (grid width - 1)."
        },
        {
          "parameter": "y2",
          "description": "The y position of the bottom of the region in the grid, from 0 to (grid height - 1)"
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif ds_grid_value_exists(grid, 0, 1, 5, 6, val)\n    {\n        xpos = ds_grid_value_x(grid, 0, 1, 5, 6, val);\n        ypos = ds_grid_value_y(grid, 0, 1, 5, 6, val);\n    }\n```\nThe above code checks a ds_grid for a specific value within a rectangular region. if it is found, it then stores the x and y position of the value in two variables for later use.\n",
      "description": "With this function you can get the y coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by `ds_grid_create()`) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_value_y.htm"
    },
    "ds_grid_width": {
      "name": "ds_grid_width",
      "parameters": [
        {
          "parameter": "index",
          "description": "This index of the grid to find the width of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < ds_grid_width(grid); ++i)\n    {\n        for (var j = 0; j < ds_grid_height(grid); ++j)\n        {\n            if (ds_grid_get(grid, i, j) == 1)\n            {\n                instance_create_layer(i * 32, j * 32, \"Walls\", obj_Wall);\n            }\n        }\n    }\n```\nThe above code will loop through the DS grid indexed in the variable \"grid\" and if the value found in any specific cell is equal to 1, it will then create an instance of \"obj_Wall\" at the appropriate position within the room.\n",
      "description": "This function will return the width of the given grid. This value is the number of cells the grid has along the x-axis and is always an integer, as shown in the image below:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_width.htm"
    },
    "ds_grid_write": {
      "name": "ds_grid_write",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the grid to write."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"Save.ini\"); ini_write_string(\"Save\", \"0\", ds_grid_write(mygrid)); ini_close()\n  \n```\nThe above code will open an ini file (creating it if it doesn't already exist) and then write the given ds_grid as a string to that file.\n",
      "description": "This function can be used to convert the given ds_grid into a string, which can then be stored in an external file (for example). You can read the returned string from this function back into a ds_grid using the function `ds_grid_read()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/ds_grid_write.htm"
    },
    "ds_list_add": {
      "name": "ds_list_add",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to add to."
        },
        {
          "parameter": "val",
          "description": "The value to add to the list."
        },
        {
          "parameter": "[val2, ... max_val]",
          "description": "Optional values to be added to the list."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\nds_list_add(sc_list, score);\n```\nThe above code will add the value stored in the \"score\" variable into the list indexed in the variable \"sc_list\".\n",
      "description": "This function can be used to add a new value (real or string) to the list, which will be added on at the end. The function can take further optional arguments (as many as you require), permitting you to add multiple values consecutively to the list\n    in a single call.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_add.htm"
    },
    "ds_list_clear": {
      "name": "ds_list_clear",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (count == 15) && (!ds_list_empty(command_list))\n    {\n        ds_list_clear(command_list);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS list indexed in the variable \"command_list\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can clear all data from the given list data-structure. This does *NOT* destroy the data-structure (for that you should use `ds_list_destroy()`) it only wipes all data from it and makes the list empty (zero in size). Note that clearing a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before clearing it to prevent this. The only time this is not required is when you have flagged any items in the list as another  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) or as a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), in which case these items will be destroyed (not cleared!) and their memory cleaned up automatically when the parent is cleared.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_clear.htm"
    },
    "ds_list_copy": {
      "name": "ds_list_copy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list being copied *to*."
        },
        {
          "parameter": "source",
          "description": "The id of the list to be copied *from*."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !ds_list_empty(main_list)\n    {\n        old_list = ds_list_create();\n        ds_list_copy(old_list, main_list);\n        ds_list_clear(main_list);\n    }\n```\nThe above code will check a DS list to see if it is empty. If it is not empty it is copied into another DS list (which has been created previously) and then the original list is cleared.\n",
      "description": "With this function you can copy the contents of one list into another. Both lists must have been created previously and if the list being copied *to* already has information within it, this list will be cleared first. The end result is two independent lists which contain the same information.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_copy.htm"
    },
    "ds_list_create": {
      "name": "ds_list_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nlist = ds_list_create();\n```\nThis will create a new list and assign its index id to the instance variable \"list\".\n",
      "description": "This function will create a new list data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the list. Note that if you try and access a value in the list *before*    it has been populated - i.e. the list is \"empty\" - then the return value may be 0 since internally the first few entries in the list are set when created to minimize performance issues when initially adding items to the list (although the\n    `ds_list_size()` function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call `ds_list_clear()`    after creating the list, which will then mean that any values returned for unpopulated list slots will be `undefined`.",
      "returns": "DS List id",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_create.htm"
    },
    "ds_list_delete": {
      "name": "ds_list_delete",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to change."
        },
        {
          "parameter": "pos",
          "description": "Where in the list to delete the value."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (ds_list_size(sc_list) > 10)\n    {\n        while (ds_list_size(sc_list) > 10)\n        {\n            ds_list_delete(sc_list, 0);\n        }\n    }\n```\nThe above code checks the size of a DS list and if it is larger than ten, it loops through the list removing the top value (position 0) until the list has only 10 entries.\n",
      "description": "With this function you can remove the value stored at a specific position within the list.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_delete.htm"
    },
    "ds_list_destroy": {
      "name": "ds_list_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (lives == 0)\n    {\n        ds_list_destroy(AI_list);\n        AI_list = -1;\n        room_goto(rm_Menu);\n    }\n```\nThe above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS list indexed in the variable \"AI_list\" and then changes rooms.\n",
      "description": "This function will remove the given list data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_list to prevent memory leaks that can slow down and crash your game. Note that destroying a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before destroying it to prevent this. The only time this is not required is when you have flagged any items in the list as another  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) or as a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), in which case these items will be destroyed and their memory cleaned up automatically as well.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_destroy.htm"
    },
    "ds_list_empty": {
      "name": "ds_list_empty",
      "parameters": [
        {
          "parameter": "id",
          "description": "DS List id"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (count == 15( && (!ds_list_empty(command_list))\n    {\n        ds_list_clear(command_list);\n        alarm[0] = room_speed;\n        count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS list indexed in the variable \"command_list\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can check the given DS list to see if it is empty (returns `true`) or not (returns `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_empty.htm"
    },
    "ds_list_find_index": {
      "name": "ds_list_find_index",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to use."
        },
        {
          "parameter": "val",
          "description": "The value to find."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npos = ds_list_find_index(list, \"Player1\");\n```\nThe above code checks the list indexed in the variable \"list\" for the value \"Player1\" and stores the returned position in the variable \"pos\".\n",
      "description": "With this function you can check the given list for a value and the position within the list for that value will be returned. Note that if there are more than one entries in the list with the same value, the position of any one of them may be returned,\n    and that if the value does not exist, then -1 will be returned. Note that the value can be an array, which you can check with the function `is_array()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_find_index.htm"
    },
    "ds_list_find_value": {
      "name": "ds_list_find_value",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to use."
        },
        {
          "parameter": "pos",
          "description": "The position to look at, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nval = ds_list_find_value(list, ds_list_size(list) - 1);\n```\nThe above code checks the list indexed in the variable \"list\" at the last position in the list and stores the returned value in the variable \"val\".\n",
      "description": "With this function you can check the given list position and the value held within the list for that position will be returned. Note that if you give a position that is outside of the given list size (ie: position 11 in a 10 value list) then the function\n    may return `undefined` *or* 0. This is because when you create the list, internally the first few entries in the list are set to 0 to minimize performance issues when initially adding items to the list (although the `ds_list_size()`    function will still return 0 on a newly created list). If you wish to ensure that the list is \"truly\" empty on create, then you should call `ds_list_clear()` after creating the list, which will then\n    mean that any values returned for unpopulated list slots will be `undefined`, which you can then check consistently using the `is_undefined()` function.",
      "returns": "Real, String or Undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_find_value.htm"
    },
    "ds_list_insert": {
      "name": "ds_list_insert",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to add to."
        },
        {
          "parameter": "pos",
          "description": "The position to add the value, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1."
        },
        {
          "parameter": "val",
          "description": "The value to add to the list."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nds_list_insert(list, 9, score);\n```\nThe above code will add the value stored in the variable \"score\" into the 10th position of the list indexed by the variable \"list\" (lists are counted from 0, so a ten value list is numbered from 0 - 9).\n",
      "description": "This function will add the given value into the list at the given position. if the list contains more values after the given position, their position will be shifted up one to make room making the list larger by one.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_insert.htm"
    },
    "ds_list_is_list": {
      "name": "ds_list_is_list",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to check."
        },
        {
          "parameter": "pos",
          "description": "The position within the list to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar size = ds_list_size(ships);\n    for (var i = 0; i < size; i++)\n    {\n        if ds_list_is_list(ships, i)\n        {\n            ds_list_destroy(ships[| i]);\n        }\n    }\n    ds_list_destroy(ships);\n```\nThe above code loops through a DS list and checks to see if any of the entries contain other list IDs. If they do, then these lists are destroyed, and then the main list is destroyed after the loop is finished.\n",
      "description": "With this function you can check to see if another DS list is stored at the given position within a DS list. If the given position contains a DS list ID, then the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_is_list.htm"
    },
    "ds_list_is_map": {
      "name": "ds_list_is_map",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to check."
        },
        {
          "parameter": "pos",
          "description": "The position within the list to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar size = ds_list_size(ships);\n    for (var i = 0; i < size; i++)\n    {\n        if ds_list_is_map(ships, i)\n        {\n            ds_map_destroy(ships[| i]);\n        }\n    }\n    ds_list_destroy(ships);\n```\nThe above code loops through a DS list and checks to see if any of the entries contain map IDs. If they do, then these maps are destroyed, and then the main list is destroyed after the loop is finished.\n",
      "description": "With this function you can check to see if a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) is stored at the given position within a DS list. If the given position contains a DS map ID, then the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_is_map.htm"
    },
    "ds_list_mark_as_list": {
      "name": "ds_list_mark_as_list",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to mark."
        },
        {
          "parameter": "pos",
          "description": "The position within the list to mark."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar j_list = ds_list_create(); var sub_list = ds_list_create(); ds_list_add(sub_list, health); ds_list_add(sub_list, lives); ds_list_add(sub_list, score); ds_list_add(j_list, sub_list); ds_list_mark_as_list(j_list, 0);\n```\nThe above code creates two DS list, then populates one with various values from global variables. This list is then added into the second list, and the position \"marked\" as such so that it can be correctly encoded later.\n",
      "description": "This function will \"mark\" (or \"flag\") a given position within a previously created DS list as holding another DS list. This functionality is required when encoding JSON strings (which you can create using `json_encode()`),\n    but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and\n    destroy the marked data structures individually before destroying the \"parent\" list. However, if you delete the list position individually, the DS list it contained will *not* be garbage collected and you should call the appropriate\n    DS list destroy function before deleting the item from the parent list position. Also note that if you call the function `ds_list_clear()` on a list, any items flagged as lists will be destroyed as well when\n    the list is cleared.",
      "returns": "Real (integer - ID of the DS list if successful or -1 if it fails)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_mark_as_list.htm"
    },
    "ds_list_mark_as_map": {
      "name": "ds_list_mark_as_map",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to mark."
        },
        {
          "parameter": "pos",
          "description": "The position within the list to mark."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar sub_map = ds_map_create(); ds_map_add(sub_map, \"player\", player_array); ds_map_add(sub_map, \"enemy\", enemy_array); ds_list_add(j_list, sub_map); ds_list_mark_as_map(j_list, 0);\n```\nThe above code creates a DS map and then populates it with two keys, each containing an array of values. This map is then added into the given DS list , and the position \"marked\" as such so that it can be correctly encoded later.\n",
      "description": "This function will \"mark\" (or \"flag\") a given position within a previously created DS list as holding a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm). This functionality is required when encoding JSON strings (which you can create\n    using `json_encode()`), but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent\n    DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the \"parent\" list. However, if you delete the list position individually,\n    the data structure it contained will *not* be garbage collected and you should call the appropriate DS map destroy function before deleting the parent list position. Also note that if you call the function `ds_list_clear()`    on a list, any items flagged as maps will be destroyed as well when the list is cleared.",
      "returns": "Real (integer - ID of the DS map if successful or -1 if it fails)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_mark_as_map.htm"
    },
    "ds_list_read": {
      "name": "ds_list_read",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read into."
        },
        {
          "parameter": "str",
          "description": "The string to read from."
        },
        {
          "parameter": "legacy (*optional*)",
          "description": "Can be either `true` or `false` or omitted completely."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nlist = ds_list_create();\n    ini_open(\"save.ini\");\n    var str = ini_read_string(\"Lists\", \"0\", \"\");\n    if str != \"\"\n    {\n        ds_list_read(list, str);\n    }\n    ini_close();\n```\nThe above code creates a list and stores the index in the variable \"list\". It then opens an `ini` file and reads a string from that, checking to make sure that the string is not returned as empty first. This string is then read into the newly created ds_list.\n",
      "description": "With this function you can recreate a saved DS list (one that has previously been written as a string using `ds_list_write()`). You must first create a new DS list to read the string into, and if the DS list already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_read.htm"
    },
    "ds_list_replace": {
      "name": "ds_list_replace",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to change."
        },
        {
          "parameter": "pos",
          "description": "The position to replace the value, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1."
        },
        {
          "parameter": "val",
          "description": "The new value to replace the given value with."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nds_list_replace(n_list, 3, name);\n```\nThe above code will replace the value stored at position 3 in the list for that stored in the variable \"name\".\n",
      "description": "This function will replace the value at the given position for another one.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_replace.htm"
    },
    "ds_list_set": {
      "name": "ds_list_set",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to add to."
        },
        {
          "parameter": "pos",
          "description": "The position within the list to set."
        },
        {
          "parameter": "[val2, ... max_val]",
          "description": "The value to set in the list."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\nfor (var i = 0; i < ds_list_size(list); i++;)\n    {\n        ds_list_set(list, i, -1);\n    }\n```\nThe above code will add the value stored in the \"score\" variable into the list indexed in the variable \"sc_list\".\n",
      "description": "This function can be used to set a previously added list entry. You give the list ID (as returned when you created the list) and the position within the list to set as well as the value to set it to. Note that if the entry being set is outside the bounds of the list (ie, you set list entry 20 but the current list only contains 10 entries) then the list will be filled to the given position and each entry will be set to 0. This function is the same as using the  [DS list accessor](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Accessors.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_set.htm"
    },
    "ds_list_shuffle": {
      "name": "ds_list_shuffle",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to shuffle."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif restart\n    {\n        ds_list_shuffle(card_list);\n    }\n```\nThe above code will shuffle the list indexed in the variable \"card_list\" if the variable \"restart\" is flagged as `true`.\n",
      "description": "With this function you can shuffle a list, which will re-order all the component values into random positions from those in which they were originally added to the list.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_shuffle.htm"
    },
    "ds_list_size": {
      "name": "ds_list_size",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !ds_list_empty(control_list)\n    {\n        num = ds_list_size(control_list);\n    }\n```\nThe above code checks a DS list to see if it is empty or not, and if it is not, it gets the number of items that it contains and stores the value in a variable.\n",
      "description": "This function will return the \"size\" of the list, ie: the number of items that have been added into it.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_size.htm"
    },
    "ds_list_sort": {
      "name": "ds_list_sort",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the list to sort."
        },
        {
          "parameter": "ascend",
          "description": "Whether the values should be ascending (`true`) or descending (`false`) order."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif newgame\n    {\n        ds_list_sort(name_list, true);\n    }\n```\nThe above code will sort the list indexed in the variable \"name_list\" if the variable \"newgame\" is flagged as `true`.\n",
      "description": "With this function you can sort all the values within a list, either in ascending or descending order. If the list contains strings, these will be sorted alphabetically, based on the English 26 letter alphabet.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_sort.htm"
    },
    "ds_list_write": {
      "name": "ds_list_write",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to write."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"save.ini\"); var str = ds_list_write(list); ini_write_string(\"Lists\", \"0\", str); ds_list_clear(list);\n     ini_close();\n  \n```\nThe above code opens an ini file and then writes a string containing the information stored in the DS list indexed in the variable \"list\". The list is then cleared and the ini file closed.\n",
      "description": "This function returns a string which can then be stored or transferred to another data structure using the `ds_list_read()` function.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_write.htm"
    },
    "ds_map_add": {
      "name": "ds_map_add",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to add to."
        },
        {
          "parameter": "key",
          "description": "The key of the value to add."
        },
        {
          "parameter": "val",
          "description": "The value to add to the map."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ninventory = ds_map_create(); ds_map_add(inventory, \"hp potion\", 1); ds_map_add(inventory, \"gold\", 100);\n```\nThis will create a new map, assigning its id to the variable \"inventory\". It then adds two new keys to the map, \"hp potion\" and \"gold\", and sets their initial values as 1 and 100.\n",
      "description": "This function should be used to add sets of key/value pairs into the specified DS map. You can check this function to see if it was successful or not (it will return `true` on success or `false` otherwise),\n    as it may fail if there already exists the same key in the DS map or you specify a non-existent DS map as the ID of the map to add to. The keys and and values you supply can be made up of any combination of data types, so all of the following - and\n    more - are acceptable (although, in practice, you would most commonly use a string for the key):",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_add.htm"
    },
    "ds_map_add_list": {
      "name": "ds_map_add_list",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key for the added list."
        },
        {
          "parameter": "value",
          "description": "The id of the list to add."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar j_list = ds_list_create(); ds_list_add(j_list, health); ds_list_add(j_list, lives); ds_list_add(j_list, score); var j_map = ds_map_create(); ds_map_add_list(j_map, \"list\", j_list); var j = json_encode(j_map);    ds_map_destroy(j_map);\n  \n```\nThe above code will create a list and populate it with the various values of global variables. This list is then \"nested\" within a DS map, and the map is then encoded into a JSON string, before the map is\n    destroyed, removing it, and any lists it contains, from memory.\n",
      "description": "With this function you can assign a (previously created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) to a key within the given DS map. This function is designed for creating JSON compatible maps which you would then encode using `json_encode()`    and should only be used in conjunction with that functionality. If a DS map has a list added in this way, destroying the parent map will also destroy the contained lists and free their memory, and calling `ds_map_clear()` on\n    the parent map will also destroy and clean up any flagged lists.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_add_list.htm"
    },
    "ds_map_add_map": {
      "name": "ds_map_add_map",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key for the added map."
        },
        {
          "parameter": "value",
          "description": "The id of the map to add."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar j_map = ds_map_create(); var j_list = ds_list_create(); var sub_map = ds_map_create(); ds_map_add_list(sub_map, \"list\", j_list); ds_map_add(sub_map, \"array\", j_array); ds_map_add_map(j_map, \"map\",\n    sub_map); var j = json_encode(j_map); ds_map_destroy(j_map);\n  \n```\nThe above code will create two DS maps, and then populate one with a list and an array before adding it into the second, which is then encoded into a JSON string. The map is then destroyed to remove it, and any other maps or lists that it contains,\n    from memory.\n",
      "description": "With this function you can assign a (previously created) DS map to a key within the given DS map . This function is designed for creating JSON compatible maps which you would then encode using `json_encode()`    and should only be used in conjunction with that functionality. If a DS map has another map added in this way, then destroying the parent map will also destroy the contained maps and free their memory, and calling `ds_map_clear()` on\n    the parent map will also destroy and clean up any flagged maps.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_add_map.htm"
    },
    "ds_map_clear": {
      "name": "ds_map_clear",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif global.new_game\n    {\n        ds_map_clear(inventory);\n    }\n```\nThe above function will check a global variable to see if it is true and, if it is, then the DS map indexed in the instance variable \"inventory\" will be cleared of all key/value pairs (but it is *not* destroyed).\n",
      "description": "This function will clear the (previously created) DS map of all key/value pairs, but it will not delete the DS map itself from memory. For that you should use the function `ds_map_destroy()`. Note that clearing a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through it and destroy all data structure items manually before clearing the map to prevent this. The only time this is not required is when you have flagged any items in the map as a  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) or as another  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), in which case these items will be destroyed (not cleared!) and their memory cleaned up automatically when the parent map is cleared.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_clear.htm"
    },
    "ds_map_copy": {
      "name": "ds_map_copy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map you are copying **to**"
        },
        {
          "parameter": "source",
          "description": "The id of the map you are copying **from**"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ninventory_2 = ds_map_create(); ds_map_copy(inventory_2, inventory_1);\n```\nThe above code will create a new map and assign it to the variable \"inventory_2\". It will then copy the contents of the DS map indexed in the variable \"inventory_1\" to this new map.\n",
      "description": "You can use this function to copy the contents of one map into another one that you have previously created using  [ds_map_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm). If the DS map that is being copied *to* is not empty,\n    then this function will clear it first before copying. The original DS map remains unchanged by this process.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_copy.htm"
    },
    "ds_map_create": {
      "name": "ds_map_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ninventory = ds_map_create();\n```\nThe above code will create a new, empty DS map and store its id index in the variable \"inventory\".\n",
      "description": "This function is used to create a new, empty, DS map and will return its id which is then used to access the data structure in all other DS map functions.",
      "returns": "Integer (DS map ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm"
    },
    "ds_map_delete": {
      "name": "ds_map_delete",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to change."
        },
        {
          "parameter": "key",
          "description": "The key (along with its associated value) to delete."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nds_map_delete(inventory, \"shield\");\n```\nThe above code will delete the key \"shield\" (and the value it is paired with) from the DS map (inventory).\n",
      "description": "With this function you can remove any given key (and its corresponding value) from the given, previously created, DS map .",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_delete.htm"
    },
    "ds_map_destroy": {
      "name": "ds_map_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to destroy."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nds_map_destroy(inventory); inventory = -1;\n```\nThe above code will destroy the DS map with the id indexed in the variable \"inventory\".\n",
      "description": "DS maps take up space in memory, which is allocated to them when they are created. This means that you also need to free this memory when the DS map is not needed to prevent errors, memory leaks and loss of performance when running your game. This function\n    does just that. Note that destroying a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through the map and destroy all data structure items manually before destroying it to prevent this. The\n    only time this is not required is when you have flagged any items in the map as a  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) or as another  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), in which case these items will be destroyed and their memory cleaned up\n    automatically as well.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_destroy.htm"
    },
    "ds_map_empty": {
      "name": "ds_map_empty",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif ds_map_empty(inventory)\n    {\n        weight = 0;\n    }\n```\nThe above code checks to see if the DS map indexed in the variable \"inventory\" has any key/value pairs and if it does not it sets the variable \"weight\" to 0.\n",
      "description": "This function will simply return `false` if the specified (previously created) DS map contains any key/value pairs, or `true` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_empty.htm"
    },
    "ds_map_exists": {
      "name": "ds_map_exists",
      "parameters": [
        {
          "parameter": "id",
          "description": "the id of the data structure to check"
        },
        {
          "parameter": "key",
          "description": "the key to check for"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !ds_map_exists(inventory, \"potions\")\n    {\n        ds_map_add(inventory, \"potions\", 1);\n    }\n```\nThe above code will check the DS map indexed in the variable \"inventory\" for the key \"potions\" and if it doesn't exist it will add it to the map.\n",
      "description": "This function will return `true` if the specified key exists in the (previously created) DS map , and `false` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_exists.htm"
    },
    "ds_map_find_first": {
      "name": "ds_map_find_first",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar size = ds_map_size(inventory) ; var key = ds_map_find_first(inventory); for (var i = 0; i < size; i++;) {\n         if key != \"gold\"     {\n             key = ds_map_find_next(inventory, key);     }\n         else break; }\n  \n```\nThe above code creates some temporary variables and then gets the DS map size and finds the first key as stored by the computer in the map. It then uses a `for` loop to iterate through the DS map looking for the key value \"gold\". If\n    it finds it, it breaks out the loop.\n",
      "description": "This function returns the first key stored in the DS map. **This is not the first key in the order you added them!** DS maps are not stored in a linear form, for that use  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm), so all this does is find the\n    first key as stored by the computer. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow.",
      "returns": "Real, string or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_first.htm"
    },
    "ds_map_find_last": {
      "name": "ds_map_find_last",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar size = ds_map_size(inventory); var key = ds_map_find_last(inventory); for (var i = size; i > 0; i--;) {\n         if (key != \"gold\")     {         key = ds_map_find_previous(inventory, key);     }     else break; }\n  \n```\nThe above code creates some temporary variables and then gets the DS map size and finds the last key as stored by the computer in the map. It then uses a `for` loop to iterate back through the DS map looking for the key value \"gold\".\n    If it finds it, it breaks out the loop.\n",
      "description": "This function returns the last key stored in the DS map. **This is not the last key in the order that you have added them!** DS maps are not stored in a linear form, for that use\n     [DS lists](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm), so all this does is find the last key as stored by the computer. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow.",
      "returns": "Real, string or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_last.htm"
    },
    "ds_map_find_next": {
      "name": "ds_map_find_next",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to find the next one to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar size = ds_map_size(inventory); var key = ds_map_find_first(inventory); for (var i = 0; i < size; i++;) {\n         if (key != \"gold\")     {         key = ds_map_find_next(inventory, key);     }     else break; }\n  \n```\nThe above code creates some temporary variables and then gets the DS map size and finds the first key as stored by the computer in the map. It then uses a `for` loop to iterate through the DS map looking for the key value \"gold\". If\n    it finds it, it breaks out the loop.\n",
      "description": "This function returns the next key stored in the DS map *after* the one specified in the function. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow. If no such\n    key exists then the function will return `undefined`. You should always check this using the `is_undefined()` function.",
      "returns": "Real, string or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_next.htm"
    },
    "ds_map_find_previous": {
      "name": "ds_map_find_previous",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to find the previous one to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar size = ds_map_size(inventory) - 1; var key = ds_map_find_last(inventory); for (var i = size; i > 0; i--;) {\n         if (key != \"gold\")     {         key = ds_map_find_previous(inventory, key);     }     else break; }\n  \n```\nThe above code creates some temporary variables and then gets the ds_map size and finds the last key as stored by the computer in the map. It then uses a `for` loop to iterate back through the ds_map looking for the key value \"gold\".\n    If it finds it, it breaks out the loop.\n",
      "description": "This function returns the previous key stored in the DS map *before* the one specified in the function. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow. If\n    no such key exists then the function will return `undefined`. You should always check this using the `is_undefined()` function.",
      "returns": "Real, string or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_previous.htm"
    },
    "ds_map_find_value": {
      "name": "ds_map_find_value",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to find."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\namount = ds_map_find_value(inventory, \"food\");\n```\nOr, using the map  [accessor](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Accessors.htm) \"?\":\n```\namount = inventory[? \"food\"];\n```\nThe above code will get the value of the key \"food\" and store it in the variable \"amount\".\n",
      "description": "With this function you can get the value from a specified key. The input values of the function are the (previously created) DS map to use and the key to check for.",
      "returns": "Real, string or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"
    },
    "ds_map_is_list": {
      "name": "ds_map_is_list",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar size = ds_map_size(inventory);\n    var key = ds_map_find_first(inventory);\n    for (var i = 0; i < size; i++)\n    {\n        if ds_map_is_list(inventory, key)\n        {\n            ds_list_destroy(inventory[? key]);\n        }\n        key = ds_map_find_next(inventory);\n    }\n    ds_map_destroy(inventory);\n```\nThe above code loops through a DS map and checks to see if any of the keys within it are for a DS list. If they are, then the DS list is destroyed, and the at the end of the loop the DS map is destroyed too.\n",
      "description": "With this function you can check to see if a  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) is stored in the given map key. If the given key contains a DS list ID, then the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_is_list.htm"
    },
    "ds_map_is_map": {
      "name": "ds_map_is_map",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to replace."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar size = ds_map_size(inventory);\n    var key = ds_map_find_first(inventory);\n    for (var i = 0; i < size; i++)\n    {\n        if ds_map_is_map(inventory, key)\n        {\n            ds_map_destroy(inventory[? key]);\n        }\n        key = ds_map_find_next(inventory);\n    }\n    ds_map_destroy(inventory);\n```\nThe above code loops through a DS map and checks to see if any of the keys within it are for other DS maps. If they are, then the stored DS map is destroyed, and the at the end of the loop the main DS map is destroyed too.\n",
      "description": "With this function you can check to see if a DS map is stored in the given map key. If the given key contains a DS map ID, then the function will return `true` otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_is_map.htm"
    },
    "ds_map_keys_to_array": {
      "name": "ds_map_keys_to_array",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "[array]",
          "description": "OPTIONAL! The array to append the DS map keys to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmap_keys = ds_map_keys_to_array(inventory);\n```\nThe above code retrieves the keys for a DS map and then stores them as an array for future use.\n",
      "description": "With this function you can retrieve all of the keys that a DS map contains. You supply the DS map ID to get the keys from (as returned by ds_map_create()) and the function will return an\n     [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) where each entry in the array is a key from the DS map. The function has an optional second argument where you can supply an array that you have created, in which case the map key data will be appended onto any existing data in the array.\n      Note that the function will modify the array supplied directly, but will also return a reference to it (or a reference to a new array if none is supplied).",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_keys_to_array.htm"
    },
    "ds_map_read": {
      "name": "ds_map_read",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read the string into"
        },
        {
          "parameter": "str",
          "description": "The string to read"
        },
        {
          "parameter": "legacy (*optional*)",
          "description": "Can be either `true` or `false` or omitted completely."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ninventory = ds_map_create();\n    ini_open(\"map.ini\");\n    var t_string = ini_read_string(\"Saved\", \"0\", \"\");\n    if (t_string != \"\")\n    {\n        ds_map_read(inventory, t_string);\n    }\n    ini_close();\n```\nThe above code creates a new DS map and stores its id index in the variable \"inventory\". It then opens an ini file and reads a string from that file into the temporary variable \"t_string\". Finally, it checks to make sure that the string is valid (not the default ini value of \"\") and if it is it then reads the string into the newly created DS map before closing the ini again.\n",
      "description": "This function will take a string that has previously been created by the function `ds_map_write()` and then read it into a previously created DS map. If the map that the string is being read into contains any key/value pairs, these will be cleared first before the saved map is re-constructed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_read.htm"
    },
    "ds_map_replace": {
      "name": "ds_map_replace",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to change."
        },
        {
          "parameter": "key",
          "description": "The key with the value that should be replaced by the new one"
        },
        {
          "parameter": "val",
          "description": "The new value to replace the given value with"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nds_map_replace(inventory, \"torso\", 55);\n```\nThe above code looks up the DS map for the key \"torso\" and when it finds it (or it is created if it doesn't exist) the current value is replaced with the one specified.\n",
      "description": "With this function you can change the value for the given key within the a DS map . You supply the index to the map (as returned by the function ds_map_create())\n    and then the key to replace - either a string or an integer - and the value to replace the key value with. If the given key does *not *exist then it will be created for you, and if it does then the current value will be replaced with the new\n    value. The function will return true if the key exists and the value is replaced, and false if the key does not exist and a new key was created with the value.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace.htm"
    },
    "ds_map_replace_list": {
      "name": "ds_map_replace_list",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to replace."
        },
        {
          "parameter": "value",
          "description": "The id of the ds_list to use to replace the one previously stored in the given key."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar j_list = ds_list_create(); ds_list_add(j_list, health); ds_list_add(j_list, lives); ds_list_add(j_list, score); ds_map_replace_list(j_map, \"list\", j_list); var j = json_encode(j_map); ds_list_destroy(j_list);\n  \n```\nThe above code will create a `DS List` and populate it with the values of various global variables before replacing a previously stored list in the `DS Map` \"j_map\".\n",
      "description": "With this function you can replace a  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) that has been stored in the given \"key\" with another list that has been created previously. This function is designed for creating JSON compatible maps which\n    you would then encode using `json_encode()` and should only be used in conjunction with that functionality.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace_list.htm"
    },
    "ds_map_replace_map": {
      "name": "ds_map_replace_map",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the ds_map to use."
        },
        {
          "parameter": "key",
          "description": "The key to replace."
        },
        {
          "parameter": "value",
          "description": "The id of the ds_map to use to replace the one previously stored in the given key."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar temp_map = ds_map_create(); ds_map_add_list(temp_map, \"list\", j_list); ds_map_add(temp_map, \"array\", j_array); ds_map_replace_map(j_map, \"maps\", temp_map); var j = json_encode(j_map); ds_map_destroy(temp_map);\n  \n```\nThe above code will create a `DS Map` and populate it with an array and a `DS List` before replacing a previously stored map in the `DS Map` \"j_map\".\n",
      "description": "With this function you can replace a `DS Map` that has been stored in the given \"key\" with another map that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using\n    `json_encode()` and should only be used in conjunction with that functionality.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace_map.htm"
    },
    "ds_map_secure_load": {
      "name": "ds_map_secure_load",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to load the map data from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\np_map = ds_map_secure_load(\"p_data.dat\");\n```\nThe above code will load a securely saved DS map and store its index value in a variable for future use.\n",
      "description": "This function will load a previously saved DS map from the given file. This file must have been previously created using the `ds_map_secure_save()` function, and, when loaded, the function will return the\n    *index* of the DS map that has been created from the loaded data. This DS map index should be stored in a variable and used for all further function calls to this map. Note that if the DS map being loaded was saved with an array as one of the\n    key values, this array will have been converted into a DS list on load.",
      "returns": "Integer (DS map index)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_load.htm"
    },
    "ds_map_secure_load_buffer": {
      "name": "ds_map_secure_load_buffer",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The buffer ID of the buffer to load the map data from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar buff = buffer_load(\"save.dat\");\n    map = ds_map_secure_load_buffer(buff);\n    buffer_delete(buff);\n```\nThe above code will load a securely saved DS map from a buffer and store its index value in a variable for future use.\n",
      "description": "This function will load a secure saved DS map from a buffer. You must previously have loaded the buffer into memory (using `buffer_load()`) and then passing that into this function will return a DS map populated with the contents of the buffer. Note that the buffer must have been created using the function  [ds_map_secure_save_buffer()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_save_buffer.htm) for this to work correctly, and also note that if the DS map being loaded contained an array, this will be converted into a DS list instead on load.",
      "returns": "Integer (DS map index)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_load_buffer.htm"
    },
    "ds_map_secure_save": {
      "name": "ds_map_secure_save",
      "parameters": [
        {
          "parameter": "map",
          "description": "The id of the data structure to use"
        },
        {
          "parameter": "filename",
          "description": "The name of the file to save the map to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nds_map_secure_save(purchase_map, \"p_data.dat\");\n```\nThe above code will save the DS map indexed in the variable \"p_data\" to the given file for later retrieval.\n",
      "description": "This function will save the contents of the given DS map to a file that is linked to the device it was created on (meaning it can't be read if transferred to any other device). The file itself can have almost any extension (for example, `*.dat`,\n    `*.json`, `*.bin`, etc...) and will be obfuscated and stored to local storage on the target platform. You can then re-load the ds_map using the function `ds_map_secure_load()`. Note that if\n    the DS map being saved contains an array, this array will be converted into a DS list instead when saved.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_save.htm"
    },
    "ds_map_secure_save_buffer": {
      "name": "ds_map_secure_save_buffer",
      "parameters": [
        {
          "parameter": "id",
          "description": "The DS map ID value."
        },
        {
          "parameter": "buffer",
          "description": "The buffer ID value."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbuff = buffer_create(128,buffer_grow,4);\n    var map = ds_map_create();\n    ds_map_add(map,\"bob\",\"ajob\");\n    ds_map_add(map,\"money\",10);\n    ds_map_secure_save_buffer(map, buff);\n    ds_map_destroy(map);\n```\nThe above code will create a buffer and a DS map, then populate the map with some values and write it to the buffer before deleting the map.\n",
      "description": "This function will save a previously created DS map to a buffer. You supply the DS map ID value (as returned by the function `ds_map_create()`) and the ID of the buffer to write to (as returned by the function `buffer_create()`). Note that if the DS map being saved contains an array, this will be converted into a DS list instead when saved.",
      "returns": "Integer (DS map index)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_secure_save_buffer.htm"
    },
    "ds_map_set": {
      "name": "ds_map_set",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "key",
          "description": "The key to set."
        },
        {
          "parameter": "value",
          "description": "The value to set the key to."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif is_undefined(ds_map_find_value(map, \"score\"))\n    {\n        ds_map_set(map, \"score\", 0);\n    }\n```\nThe above code will check to see if the given key exists and if it doesn't then it is created and set.\n",
      "description": "With this function you can set the value of a key within a given DS map. You supply the DS map ID value (as returned by the function `ds_map_create()`), then give the key you want to set and the value to set it to. Keys can be integers or strings, and if the given key does not exist then it will be created for you and set to the value. This function is the same as using the  [DS map accessor](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Accessors.htm) to set/create a map key/value pair. The function does not return anything, so if you need to check if the key value has been replaced or a new key has been created, then you should use the function  [ds_map_replace()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_replace.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_set.htm"
    },
    "ds_map_size": {
      "name": "ds_map_size",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (ds_map_size(inventory) > 49)\n    {\n        full = true;\n    }\n```\nThe above code will check the size of the DS map (ie: number of key/value pairs) and if it is greater than 49 it sets the variable \"full\" to `true`.\n",
      "description": "With this function you can find how many key/values pairs the (previously created) DS map contains.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_size.htm"
    },
    "ds_map_values_to_array": {
      "name": "ds_map_values_to_array",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the map to use."
        },
        {
          "parameter": "[array]",
          "description": "OPTIONAL! The array to append the DS map values to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _values = ds_map_values_to_array(lvl_score);\n    var _total = 0;\n    for (var i = 0; i < array_lengh(values); ++i;)\n        {\n        _total += _values[i];\n        }\n    draw_text(32, 32, \"Total score for all levels = \" + string(_total\"));\n```\nThe above retrieves all the values from a DS map for each key in the map and stores them in a local variable as an array. It then loops through the array and adds each of the values to a local variable which is then used to display the total of all the values.\n",
      "description": "With this function you can retrieve all of the values that a DS map contains for each key in the map. You supply the DS map ID to get the keys from (as returned by ds_map_create()) and the function will return an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) where each entry in the array is a value from the DS map (for example, if the map has 10 keys, then an array of 10 entries will be returned with each entry corresponding to a value for a key). The function has an optional second argument where you can supply an array that you have created, in which case the map key value data will be appended onto any existing data in the array. Note that the function will modify the array supplied directly, but will also return a reference to it (or a reference to a new array if none is supplied).",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_values_to_array.htm"
    },
    "ds_map_write": {
      "name": "ds_map_write",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"map.ini\"); var t_string; t_string = ds_map_write(inventory); ini_write_string(\"Saved\", \"0\", t_string); ini_close();\n  \n```\nThe above code opens an ini file ready to be written to. It then uses `ds_map_write()` to generate a string which is stored in the temporary variable \"t_string\". Finally, it writes that string to the ini file before closing it.\n",
      "description": "This function will turn the DS map data of the specified map into string format which can then be written to an *.ini or a *.txt file for easy storage. This string can then be later read back into a new ds_map using `ds_map_read()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_write.htm"
    },
    "ds_priority_add": {
      "name": "ds_priority_add",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to add to."
        },
        {
          "parameter": "val",
          "description": "The value to add to the priority queue."
        },
        {
          "parameter": "priority",
          "description": "The priority of the value to add."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nds_priority_add(ai_priority, AI_Search, 5);\n```\nThe above code adds a script function to the priority queue indexed in the variable \"ai_priority\" and assigns it a priority of 5.\n",
      "description": "With this function you can add a value (either a real number or a string) to a priority queue, at the same time assigning it a priority value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_add.htm"
    },
    "ds_priority_change_priority": {
      "name": "ds_priority_change_priority",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to change."
        },
        {
          "parameter": "val",
          "description": "The value to change the priority of."
        },
        {
          "parameter": "priority",
          "description": "The new priority of the value."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif (global.Game_Time < 1000)\n    {\n        ds_priority_change(ai_priority, AI_Search, 1);\n    }\n```\nThe above code checks a global variable and if it is below a certain value it will then change the priority of the script function index held in the priority queue.\n",
      "description": "This function will take a given value and change its priority within the referenced priority queue.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_change_priority.htm"
    },
    "ds_priority_clear": {
      "name": "ds_priority_clear",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (count = 15) && (!ds_priority_empty(command_queue))\n    {\n        ds_priority_clear(command_queue);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS priority queue indexed in the variable \"command_queue\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can clear all data from the given priority queue data-structure. This does *NOT* destroy the data-structure (for that you should use `ds_priority_destroy()`) it only wipes all data from it and returns an empty priority queue.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_clear.htm"
    },
    "ds_priority_copy": {
      "name": "ds_priority_copy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to copy *to*."
        },
        {
          "parameter": "source",
          "description": "The id of the priority queue to copy *from*."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwith (instance_create_layer(x, y, \"Enemies\", obj_Enemy))\n    {\n        p_queue = ds_priority_create();\n        ds_priority_copy(p_queue, other.p_queue);\n    }\n```\nThe above function creates a new instance and then in that instance it creates a new DS priority queue and copies the contents of the priority queue in the instance running the code block, into the newly created instance priority queue.\n",
      "description": "This function can be used to copy the contents of one priority queue into another. Note that this does *NOT* remove the contents from the original priority queue, nor does it destroy the original priority queue. When using this function the priority queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_copy.htm"
    },
    "ds_priority_create": {
      "name": "ds_priority_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\np_queue = ds_priority_create();\n```\nThis will create a new priority queue and assign its index id to the instance variable \"p_queue\".\n",
      "description": "This function will create a new priority queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the priority queue.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_create.htm"
    },
    "ds_priority_delete_max": {
      "name": "ds_priority_delete_max",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif ai_move\n    {\n        script_execute(ds_priority_delete_max(ai_priority));\n    }\n```\nThe above code checks an instance variable and if it returns `true` it will execute a script indexed in the priority queue with the highest priority value and then remove that script from the queue.\n",
      "description": "This function will return the value that has the highest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, then any one of them could be returned in any order, but all other values with the same priority will still be in the queue.",
      "returns": "Data type stored in the priority",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_delete_max.htm"
    },
    "ds_priority_delete_min": {
      "name": "ds_priority_delete_min",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif ai_move\n    {\n        script_execute(ds_priority_delete_min(ai_priority));\n    }\n```\nThe above code checks an instance variable and if it returns `true` it will execute a script function indexed in the priority queue with the lowest priority value and then remove that script from the queue.\n",
      "description": "This function will return the value that has the lowest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, then any one of them could be returned in any order, but all other values with the same priority will still be in the queue.",
      "returns": "Data type stored in the priority",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_delete_min.htm"
    },
    "ds_priority_delete_value": {
      "name": "ds_priority_delete_value",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to use."
        },
        {
          "parameter": "val",
          "description": "The value to delete from the priority queue."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (ai_move == false)\n    {\n        ds_priority_delete_value(ai_priority, AI_Move);\n    }\n```\nThe above code checks an instance variable and if it returns `false` it will remove the indexed script function from the priority queue.\n",
      "description": "This function will simply delete the given value, along with its priority, from the indexed priority queue.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_delete_value.htm"
    },
    "ds_priority_destroy": {
      "name": "ds_priority_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (lives == 0)\n    {\n        ds_priority_destroy(AI_queue);\n        AI_queue = -1;\n        room_goto(rm_Menu);\n    }\n```\nThe above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS priority queue indexed in the variable \"AI_queue\" and then changes rooms.\n",
      "description": "This function will remove the given priority queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS priority queue to prevent memory leaks that can slow down and crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_destroy.htm"
    },
    "ds_priority_empty": {
      "name": "ds_priority_empty",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (count == 15) && (!ds_priority_empty(command_queue))\n    {\n        ds_priority_clear(command_queue);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS priority queue indexed in the variable \"command_queue\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can check the given DS priority queue to see if it is empty (returns `true`) or not (returns `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_empty.htm"
    },
    "ds_priority_find_max": {
      "name": "ds_priority_find_max",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif ai_move\n    {\n        script_execute(ds_priority_find_max(ai_priority));\n    }\n```\nThe above code checks an instance variable and if it returns `true` it will execute a script function indexed in the priority queue with the highest priority value.\n",
      "description": "With this function you can find the value stored in the priority queue with the highest priority, and if more than one value has the same priority then any one of them could be returned in any order. However, unlike `ds_priority_delete_max()`, this function will not remove the value from the queue.",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_find_max.htm"
    },
    "ds_priority_find_min": {
      "name": "ds_priority_find_min",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif ai_move\n    {\n        script_execute(ds_priority_find_min(ai_priority));\n    }\n```\nThe above code checks an instance variable and if it returns `true` it will execute a script function indexed in the priority queue with the lowest priority value.\n",
      "description": "With this function you can find the value stored in the priority queue with the lowest priority, and if more than one value has the same priority then any one of them could be returned in any order. However, unlike `ds_priority_delete_min()`, this function will not remove the value from the queue.",
      "returns": "Real or String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_find_min.htm"
    },
    "ds_priority_find_priority": {
      "name": "ds_priority_find_priority",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the priority queue to use."
        },
        {
          "parameter": "val",
          "description": "The value to find the priority of."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\np = ds_priority_find_priority(ai_priority, \"intelligence\");\n```\nThe above code will store the returned priority for the given value in the instance variable \"p\".\n",
      "description": "With this function you can retrieve the priority of any given value. If the value does not exist in the priority queue then `undefined` will be returned.",
      "returns": "Real or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_find_priority.htm"
    },
    "ds_priority_read": {
      "name": "ds_priority_read",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to write."
        },
        {
          "parameter": "str",
          "description": "The string to write from."
        },
        {
          "parameter": "legacy (*optional*)",
          "description": "Can be either `true` or `false` or omitted completely."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\np_queue = ds_priority_create();\n    ini_open(\"save.ini\");\n    var str = ini_read_string(\"P_Queues\", \"0\", \"\");\n    if (str != \"\")\n    {\n        ds_priority_read(p_queue, str);\n    }\n    ini_close();\n```\nThe above code creates a priority queue and stores the index in the variable \"p_queue\". It then opens an `ini` file and reads a string from that, checking to make sure that the string is not returned as empty first. This string is then read into the newly created DS priority.\n",
      "description": "With this function you can recreate a saved DS priority (one that has previously been written as a string using `ds_priority_write()`). You must first create a new DS priority to read the string into, and if the DS priority already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_read.htm"
    },
    "ds_priority_size": {
      "name": "ds_priority_size",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !ds_priority_empty(control_priority)\n    {\n        num = ds_priority_size(control_priority);\n    }\n```\nThe above code checks a DS priority queue to see if it is empty or not, and if it is not, it gets the number of items that it contains and stores the value in a variable.\n",
      "description": "This function will return the \"size\" of the priority queue, ie: the number of items that have been prioritized in it.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_size.htm"
    },
    "ds_priority_write": {
      "name": "ds_priority_write",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str;\n    ini_open(\"save.ini\");\n    str = ds_priority_write(p_queue);\n    ini_write_string(\"P_Queues\", \"0\", str);\n    ds_priority_clear(p_queue);\n    ini_close();\n```\nThe above code opens an ini file and then writes a string containing the information stored in the DS priority queue indexed in the variable \"p_queue\". The priority queue is then cleared and the ini file closed.\n",
      "description": "This function returns a string which can then be stored or transferred to another data structure using the `ds_priority_read()` function.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/ds_priority_write.htm"
    },
    "ds_queue_clear": {
      "name": "ds_queue_clear",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (count = 15) && (!ds_queue_empty(command_queue))\n    {\n        ds_queue_clear(command_queue);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS queue indexed in the variable \"command_queue\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can clear all data from the given queue data-structure. This does *NOT* destroy the data-structure (for that you should use `ds_queue_destroy()`) it only wipes all data from it and returns an empty queue.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_clear.htm"
    },
    "ds_queue_copy": {
      "name": "ds_queue_copy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the NEW queue."
        },
        {
          "parameter": "source",
          "description": "The ORIGINAL queue to copy to id."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwith (instance_create_layer(x, y, \"Enemies\", obj_Enemy))\n    {\n        queue = ds_queue_create();\n        ds_queue_copy(queue, other.queue);\n    }\n```\nThe above function creates a new instance and then in that instance it creates a new DS queue and copies the contents of the queue in the instance running the code block, into the newly created instance queue.\n",
      "description": "This function can be used to copy the contents of one queue into another. Note that this does *NOT* remove the contents from the original queue, nor does it destroy the original queue. When using this function the queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_copy.htm"
    },
    "ds_queue_create": {
      "name": "ds_queue_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nqueue = ds_queue_create();\n```\nThis will create a new queue and assign its index id to the instance variable \"queue\".\n",
      "description": "This function will create a new queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the queue.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_create.htm"
    },
    "ds_queue_dequeue": {
      "name": "ds_queue_dequeue",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the queue to dequeue from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !ds_queue_empty(move_queue)\n    {\n        var xx = ds_queue_dequeue(move_queue);\n        var yy = ds_queue_dequeue(move_queue);\n        move_towards_point(xx, yy, 4);\n    }\n```\nThe above code checks the DS queue indexed in the variable \"move_queue\" to see if it is empty, and if it is not, it then dequeues the two values from the head of the queue and use them to set a direction for movement.\n",
      "description": "This function will *dequeue* the head value off of the DS queue, removing it from the queue and returning the value to be stored in a variable. If the queue is empty then the function will return the constant `undefined`, otherwise it will return the real or string value contained in the queue.",
      "returns": "Data type value stored in the queue or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_dequeue.htm"
    },
    "ds_queue_destroy": {
      "name": "ds_queue_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (lives == 0)\n    {\n        ds_queue_destroy(AI_queue);\n        AI_queue = -1;\n        room_goto(rm_Menu);\n    }\n```\nThe above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS queue indexed in the variable \"AI_queue\" and then changes rooms.\n",
      "description": "This function will remove the given queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS queue to prevent memory leaks that can slow down and crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_destroy.htm"
    },
    "ds_queue_empty": {
      "name": "ds_queue_empty",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (count == 15) && (!ds_queue_empty(command_queue))\n    {\n        ds_queue_clear(command_queue);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS queue indexed in the variable \"command_queue\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can check the given DS queue to see if it is empty (returns `true`) or not (returns `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_empty.htm"
    },
    "ds_queue_enqueue": {
      "name": "ds_queue_enqueue",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the queue to add to."
        },
        {
          "parameter": "val",
          "description": "The value to add to the queue."
        },
        {
          "parameter": "[val2, ... val15]",
          "description": "Optional values to be added to the queue."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\nmove_queue = ds_queue_create(); ds_queue_enqueue(move_queue, x + 200); ds_queue_enqueue(move_queue, y); ds_queue_enqueue(move_queue, x + 200); ds_queue_enqueue(move_queue, y + 200); ds_queue_enqueue(move_queue, x); ds_queue_enqueue(move_queue,\n    y + 200); ds_queue_enqueue(move_queue, x); ds_queue_enqueue(move_queue, y);\n```\nThe above code creates a new DS queue and stores its index in the variable \"move_queue\". It then pushes a number of values onto the queue for future use.\n",
      "description": "This function will add a value (real or string) onto the tail of the DS queue. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to add multiple values\n    consecutively to the tail of the queue in a single call.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_enqueue.htm"
    },
    "ds_queue_head": {
      "name": "ds_queue_head",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnum = ds_queue_head(control_queue);\n```\nThe above code will read the value from the queue indexed in the variable \"control_queue\" and store the return value in the variable \"num\".\n",
      "description": "This function will only *read* the first value of the queue (that which is \"at the head\"). It will not *dequeue* the value, meaning that it can still be read in the future by this function or the `ds_queue_dequeue()`.\n    If the queue is empty then the function will return the constant `undefined`, otherwise it will return the real or string value contained in the queue.",
      "returns": "Data type value stored in the queue",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_head.htm"
    },
    "ds_queue_read": {
      "name": "ds_queue_read",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read into."
        },
        {
          "parameter": "str",
          "description": "The string to read from."
        },
        {
          "parameter": "legacy (*optional*)",
          "description": "Can be either `true` or `false` or omitted completely."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nqueue = ds_queue_create();\n    ini_open(\"save.ini\");\n    var str = ini_read_string(\"Queues\", \"0\", \"\");\n    if (str != \"\")\n    {\n        ds_queue_read(queue, str);\n    }\n    ini_close();\n```\nThe above code creates a queue and stores the index in the variable \"queue\". It then opens an `ini` file and reads a string from that, checking to make sure that the string is not returned as empty first. This string is then read into the newly created DS queue.\n",
      "description": "With this function you can recreate a saved DS queue (one that has previously been written as a string using `ds_queue_write()`). You must first create a new DS queue to read the string into, and if the DS queue already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_read.htm"
    },
    "ds_queue_size": {
      "name": "ds_queue_size",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !ds_queue_empty(control_queue)\n    {\n        num = ds_queue_size(control_queue);\n    }\n```\nThe above code checks a DS queue to see if it is empty or not, and if it is not, it gets the number of items that it contains and stores the value in a variable.\n",
      "description": "This function will return the \"size\" of the queue, ie: the number of items that have been queued onto it.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_size.htm"
    },
    "ds_queue_tail": {
      "name": "ds_queue_tail",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnum = ds_queue_tail(control_queue);\n```\nThe above code will read the value from the queue indexed in the variable \"control_queue\" and store the return value in the variable \"num\".\n",
      "description": "This function will only *read* the last value of the queue (that which is \"at the tail\"). It will not *dequeue* the value, meaning that it can still be read in the future by this function or the `ds_queue_dequeue()`.",
      "returns": "Data type value stored in the queue",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_tail.htm"
    },
    "ds_queue_write": {
      "name": "ds_queue_write",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to write."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"save.ini\"); var str =ds_queue_write(queue); ini_write_string(\"Queues\", \"0\", str); ds_queue_clear(queue);\n     ini_close();\n  \n```\nThe above code opens an ini file and then writes a string containing the information stored in the DS queue indexed in the variable \"queue\". The queue is then cleared and the ini file closed.\n",
      "description": "This function returns a string which can then be stored or transferred to another data structure using the `ds_queue_read()` function.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/ds_queue_write.htm"
    },
    "ds_set_precision": {
      "name": "ds_set_precision",
      "parameters": [
        {
          "parameter": "prec",
          "description": "The precision value (default 0.0000001)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nds_set_precision(0.0001);\n```\nThe above code will change the default precision setting for all data structure functions.\n",
      "description": "When comparing values, for example when searching in a map or sorting a list, GameMaker Studio 2 must decide when two values are equal. For strings and integer values this is clear but for real numbers, due to floating point round-off errors, seemingly equal numbers can easily become unequal. For example, it's possible that **(5 / 3) * 3** will *not* be equal to 5! To help avoid this, a precision value is used on all real number functions, and when the *difference between two numbers is smaller* than this precision they are considered equal. The default a precision of 0.0000001 is used for all data structure functions unless changed by this function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_set_precision.htm"
    },
    "ds_stack_clear": {
      "name": "ds_stack_clear",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (ai_count = 15 && !ds_stack_empty(AI_stack))\n    {\n        ds_stack_clear(AI_stack);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS stack indexed in the variable \"AI_stack\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can clear all data from the given stack data-structure. This does *NOT* destroy the data-structure (for that you should use `ds_stack_destroy()`) it only wipes all data from it and returns an empty stack.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_clear.htm"
    },
    "ds_stack_copy": {
      "name": "ds_stack_copy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the NEW stack."
        },
        {
          "parameter": "source",
          "description": "The ORIGINAL stack to copy to id."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwith (instance_create_layer(x, y, \"Enemies\", obj_Enemy))\n    {\n        stack = ds_stack_create();\n        ds_stack_copy(stack, other.stack);\n    }\n```\nThe above function creates a new instance and then in that instance it creates a new DS stack and copies the contents of the stack in the instance running the code block, into the newly created instance stack.\n",
      "description": "This function can be used to copy the contents of one stack into another. Note that this does *NOT* remove the contents from the original stack, nor does it destroy the original stack. When using this function the stack being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_copy.htm"
    },
    "ds_stack_create": {
      "name": "ds_stack_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nstack = ds_stack_create();\n```\nThis will create a new stack and assign its index id to the instance variable \"stack\".\n",
      "description": "This function will create a new stack data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the stack.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_create.htm"
    },
    "ds_stack_destroy": {
      "name": "ds_stack_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (lives == 0)\n    {\n        ds_stack_destroy(AI_stack);\n        AI_stack = -1;\n        room_goto(rm_Menu);\n    }\n```\nThe above code will check the value of the built in global variable \"lives\" and if it is 0, it destroys the DS stack indexed in the variable \"AI_stack\" and then changes rooms.\n",
      "description": "This function will remove the given stack data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS stack to prevent memory leaks that can slow down and crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_destroy.htm"
    },
    "ds_stack_empty": {
      "name": "ds_stack_empty",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (ai_count == 15 && !ds_stack_empty(AI_stack))\n    {\n        ds_stack_clear(AI_stack);\n        alarm[0] = room_speed;\n        ai_count = 0;\n    }\n```\nThe above code checks a variable to see if it has reached a specific value and if it has it clears the DS stack indexed in the variable \"AI_stack\", sets an alarm, and resets the variable to 0.\n",
      "description": "With this function you can check the given DS stack to see if it is empty (returns `true`) or not (returns `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_empty.htm"
    },
    "ds_stack_pop": {
      "name": "ds_stack_pop",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to pop from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !ds_stack_empty(move_stack)\n    {\n        var xx = ds_stack_pop(move_stack);\n        var yy = ds_stack_pop(move_stack);\n        move_towards_point(xx, yy, 4);\n    }\n```\nThe above code checks the DS stack indexed in the variable \"move_stack\" to see if it is empty, and if it is not, it then pops the top two values from the stack and use them to set a direction for movement.\n",
      "description": "This function will *pop* the top value off of the DS stack , removing it from the stack and returning the value to be stored in a variable. If the stack is empty then the function will return the constant `undefined`, otherwise it will return the real or string value contained in the stack.",
      "returns": "Data type value that is stored in the stack or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_pop.htm"
    },
    "ds_stack_push": {
      "name": "ds_stack_push",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to push onto."
        },
        {
          "parameter": "val",
          "description": "The value to push onto the stack."
        },
        {
          "parameter": "[val2, ... val13]",
          "description": "Optional values to be added to the stack."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\nmove_stack = ds_stack_create(); ds_stack_push(move_stack, x, y, x, y + 200, x + 200, y + 200, x +200, y);\n```\nThe above code creates a new DS stack and stores its index in the variable \"move_stack\". It then pushes a number of values onto the stack for future use.\n",
      "description": "This function will *push* (add) a value, which can be of any data type, onto the top of the stack. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to push multiple values consecutively\n    to the stack in a single call.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_push.htm"
    },
    "ds_stack_read": {
      "name": "ds_stack_read",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read into."
        },
        {
          "parameter": "str",
          "description": "The string to read from."
        },
        {
          "parameter": "legacy (*optional*)",
          "description": "Can be either `true` or `false` or omitted completely."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nstack = ds_stack_create();\n    ini_open(\"save.ini\");\n    var str = ini_read_string(\"Stacks\", \"0\", \"\");\n    if (str != \"\")\n    {\n        ds_stack_read(stack, str);\n    }\n    ini_close();\n```\nThe above code creates a stack and stores the index in the variable \"stack\". It then opens an `ini` file and reads a string from that, checking to make sure that the string is not returned as empty first. This string is then read into the newly created DS stack .\n",
      "description": "With this function you can recreate a saved DS stack (one that has previously been written as a string using `ds_stack_write()`). You must first create a new DS stack to read the string into, and if the DS stack already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_read.htm"
    },
    "ds_stack_size": {
      "name": "ds_stack_size",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !ds_stack_empty(control_stack)\n    {\n        num = ds_stack_size(control_stack);\n    }\n```\nThe above code checks a DS stack to see if it is empty or not, and if it is not, it gets the number of items that it contains and stores the value in a variable.\n",
      "description": "This function will return the \"size\" of the stack, ie: the number of items that have been pushed onto it.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_size.htm"
    },
    "ds_stack_top": {
      "name": "ds_stack_top",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnum = ds_stack_top(control_stack);\n```\nThe above code will read the value from the stack indexed in the variable \"control_stack\" and store the return value in the variable \"num\".\n",
      "description": "This function will *only* read the first value of the stack (that which is \"on top\"). It will not *pop* the value, meaning that it can still be read in the future by this function or the `ds_stack_pop()`.\n    If the stack is empty then the function will return the constant `undefined`, otherwise it will return the real or string value contained in the stack.",
      "returns": "Data type value stored in the stack or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_top.htm"
    },
    "ds_stack_write": {
      "name": "ds_stack_write",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the data structure to write."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"save.ini\"); var str = ds_stack_write(stack); ini_write_string(\"Stacks\", \"0\", str); ds_stack_clear(stack);\n     ini_close();\n  \n```\nThe above code opens an ini file and then writes a string containing the information stored in the DS stack indexed in the variable \"stack\". The stack is then cleared and the ini file closed.\n",
      "description": "This function returns a string which can then be stored or transferred to another data structure using the `ds_stack_read()` function.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/ds_stack_write.htm"
    },
    "dsin": {
      "name": "dsin",
      "parameters": [
        {
          "parameter": "val",
          "description": "The angle (in degrees) to return the sine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = dsin(90);\n```\nThis will set \"val\" to 1.\n",
      "description": "In a right angled triangle dsin(val) = Opposite / Hypotenuse where \"val\" is one of the three angles.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"
    },
    "dtan": {
      "name": "dtan",
      "parameters": [
        {
          "parameter": "val",
          "description": "The angle (in degrees) to return the tangent of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = dtan(45);\n```\nThis will set \"val\" to 1.\n",
      "description": "In a right angled triangle *dtan(val) = Opposite / Adjacent* where \"val\" is one of the three angles.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dtan.htm"
    },
    "effect_clear": {
      "name": "effect_clear",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\neffect_clear();\n```\nCalling this will clear the room of any particles made with the `effect_create_*` functions.\n",
      "description": "This will clear all particles that are currently visible in the room which have been made using either `effect_create_above()` or `effect_create_below()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_clear.htm"
    },
    "effect_create_above": {
      "name": "effect_create_above",
      "parameters": [
        {
          "parameter": "kind",
          "description": "The kind of effect (use one of the constants listed above)."
        },
        {
          "parameter": "x",
          "description": "The x positioning of the effect if relevant."
        },
        {
          "parameter": "y",
          "description": "The y positioning of the effect if relevant."
        },
        {
          "parameter": "size",
          "description": "The size of the effect."
        },
        {
          "parameter": "colour",
          "description": "The colour of the effect."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif health <= 0\n    {\n        effect_create_above(ef_explosion, x, y, 1, c_yellow);\n        instance_destroy();\n    }\n```\nThe above code will create a medium, yellow, explosion above the instance and destroy it should the \"health\" variable be less than or equal to 0.\n",
      "description": "With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -100000). If the effect is anything other `ef_rain` or `ef_snow` then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_above.htm"
    },
    "effect_create_below": {
      "name": "effect_create_below",
      "parameters": [
        {
          "parameter": "kind",
          "description": "The kind of effect (use one of the constants listed above)."
        },
        {
          "parameter": "x",
          "description": "The x positioning of the effect if relevant."
        },
        {
          "parameter": "y",
          "description": "The y positioning of the effect if relevant."
        },
        {
          "parameter": "size",
          "description": "The size of the effect."
        },
        {
          "parameter": "colour",
          "description": "The colour of the effect."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif speed > 0\n    {\n        effect_create_below(ef_smoke, x, y, 0, c_gray);\n    }\n```\nThe above code will create a small puff of gray smoke every step that the instance speed is greater than 0 at the instance x,y coordinates.\n",
      "description": "With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 100000). If the effect is anything other `ef_rain` or `ef_snow` then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm"
    },
    "environment_get_variable": {
      "name": "environment_get_variable",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name (a string) of the environment variable to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ne_str = environment_get_variable(\"APPDATA\");\n```\nThe above code will return the full path for the environment variable \"`%appdata%`\", which is normally \"`C:\\Users\\{username}\\AppData\\Roaming`\".\n",
      "description": "This function returns the value (a string) of the environment variable with the given name (also a string). You can get the available environment variables on macOS and Ubuntu (Linux) by typing \"`env`\" into the terminal app, and for\n    information on Windows environment variables, if you are using the command prompt then type \"`echo %PATH%`\", and using PowerShell it's \"`ls env`\". Note that on both macOS and Ubuntu (Linux) the \"HOME\"\n    environment variable will return the \"`~/`\" path which maps to \"`/Users/<username>`\" on macOS and \"`/home/<username>`\" on Ubuntu (Linux).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/environment_get_variable.htm"
    },
    "event_inherited": {
      "name": "event_inherited",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nevent_inherited();\n    switch (sprite_index)\n    {\n        case spr_Enemy_1: dmg += 2; break;\n        case spr_Enemy_4: dmg -= 1; break;\n        case spr_Enemy_10: dmg +=10; break;\n    }\n```\nThe above code calls the inherited parent event (in which we initialise the variable \"dmg\") and then goes on to modify the \"dmg\" variable. If there is no parent specified for the instance running this code, we would get an \"unknown variable\" error as dmg has not been defined.\n",
      "description": "This function will call the current event of the parent object of the instance. Normally, when an instance has a parent object, it automatically inherits all the same events as the parent, but if (for example) your parent object has a create event and you add one to your child object, all instances of the child object will run the new create event that you have added and *not* that which is in the parent object. Should you need to use both the parent object event and the child object event of the same type, you should use this function as it will run the parent object event before continuing with the rest of the code or actions that the child event contains.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"
    },
    "event_perform": {
      "name": "event_perform",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of event to perform (see the table above)."
        },
        {
          "parameter": "numb",
          "description": "The specific event constant or value, if one is necessary (otherwise, just use 0)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "To help understand how this function can be used, please look at the following few examples:\n```\nevent_perform(ev_keypress, ord(\"W\"));\n```\nThis would perform the event associated with Keyboard Check Pressed \"W\" key (without actually generating a keyboard press).\n```\nevent_perform(ev_step, ev_step_begin);\n```\nThis would perform the *Begin Step* event (if called from any of the step events it would cause the begin step event code to be run twice).\n```\nevent_perform(ev_create, 0);\n```\nThis would perform the *Create event of the instance.*\n",
      "description": "This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm"
    },
    "event_perform_async": {
      "name": "event_perform_async",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of event to perform (see the table above)."
        },
        {
          "parameter": "ds_map",
          "description": "The DS map to use as async_load in the called event."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _map = ds_map_create();\n    \n    _map[? \"id\"] = \"custom_async_event\";\n    _map[? \"result\"] = true;\n    _map[? \"data\"] = { a: 13, b: 16 };\n    \n    event_perform_async(ev_async_social, _map);\n  \n```\nThe above code creates a DS map and populates it with custom entries to be read in the Async event. It then performs the Async Social event with the newly created map passed in as async_load for the called event.\n",
      "description": "This function is used to perform any one of the  [Asynchronous Events](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm) provided in GameMaker Studio 2. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm"
    },
    "event_perform_object": {
      "name": "event_perform_object",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object that should have its event triggered."
        },
        {
          "parameter": "type",
          "description": "The type of event to perform."
        },
        {
          "parameter": "numb",
          "description": "The specific event, if one is necessary (otherwise, just use 0)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nevent_perform_object(obj_Player, ev_keypress, ord(\"W\"));\n```\nThis would perform the event associated with Keyboard Check Pressed > W key from the object \"obj_Player\" in the current instance.\n",
      "description": "This functions works the same as `event_perform()` except that this time you can specify events from another object. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but the relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down. You can find a complete list of the available constants this function requires from the the page for the function `event_perform()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_object.htm"
    },
    "event_user": {
      "name": "event_user",
      "parameters": [
        {
          "parameter": "numb",
          "description": "The number of event to call, between 0 and 15."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nevent_user(4);\n```\nThis would call User Defined Event 4.\n",
      "description": "With this function you tell the instance to run the actions or code that has been placed within one of the 16 user defined events. These events can *only* be called in this way, or using the `event_perform`    function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_user.htm"
    },
    "exception_unhandled_handler": {
      "name": "exception_unhandled_handler",
      "parameters": [
        {
          "parameter": "user_handler",
          "description": "The method (user-defined function) to use as the exception handler, or undefined to reset it to default."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nexception_unhandled_handler(function(ex)\n    {\n        // Print some messages to the output log\n        show_debug_message( \"--------------------------------------------------------------\");\n        show_debug_message( \"Unhandled exception \" + string(ex) );\n        show_debug_message( \"--------------------------------------------------------------\");\n    \n        // Write the exception struct to a file\n        if file_exists(\"crash.txt\") file_delete(\"crash.txt\");\n        var _f = file_text_open_write(\"crash.txt\");\n        file_text_write_string(_f, string(ex));\n        file_text_close(_f);\n    \n        // Show the error message (for debug purposes only)\n        show_message(ex.longMessage);\n    \n        return 0;\n    });\n  \n```\nThe above code will create an exception handler method and use it to save a file with the exception data; it will also show the long error message in a new pop-up window for debug purposes.\n",
      "description": "This runtime function can be used to \"take over\" the default GameMaker Studio 2 error message when a runtime exception occurs. You supply a method or function which is called when the exception occurs, and its first argument will be a struct containing information about the exception. This struct has the following format:",
      "returns": "Method (or undefined)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/exception_unhandled_handler.htm"
    },
    "exp": {
      "name": "exp",
      "parameters": [
        {
          "parameter": "n",
          "description": "The power of e."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = exp(2);\n```\nThis will set val to e^2, around 7.4.\n",
      "description": "This is the function power(e,n), where e is approximately 2.718281828 (also known as *Euler's Number*), and n is the number of times it should be multiplied by itself. This basically says \"how much growth do I get after n units of time\n    (and 100% continuous growth)?\". So `exp(3)` would return 20.08, which means that after 3 time units we have 20.08 times the amount we started with.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/exp.htm"
    },
    "external_call": {
      "name": "external_call",
      "parameters": [
        {
          "parameter": "id",
          "description": "The name of the function that you want to call"
        },
        {
          "parameter": "args[0...10]",
          "description": "The different arguments that you want to pass through to the external function"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\nmy_function = external_define(\"MyDLL.dll\", \"MyMin\", dll_cdecl, ty_real, 2, ty_real, ty_real); var _a = external_call(my_function, x, y);\n```\nThe above example code calls a previously defined external function and stores the returned value in a local variable.\n",
      "description": "If you have created an external function call to a `dll` or `dylib` using `external_define()`, you can use this function to then call it. You supply the name of the previously defined function as\n    well as each of the arguments it requires (each argument must be of the correct type, either real or string) and the function returns the result of the external call.",
      "returns": "Value (the type of value returned will depend on the defined function)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_call.htm"
    },
    "external_define": {
      "name": "external_define",
      "parameters": [
        {
          "parameter": "dll",
          "description": "The name of the dll file (string)"
        },
        {
          "parameter": "name",
          "description": "The name of the function (string)"
        },
        {
          "parameter": "calltype",
          "description": "The calling convention used"
        },
        {
          "parameter": "restype",
          "description": "The type of the result to expect"
        },
        {
          "parameter": "argnumb",
          "description": "The number of arguments (0 - 10)"
        },
        {
          "parameter": "argtype[0 ... 10]",
          "description": "The different types of arguments being used"
        }
      ],
      "requiredParameters": 8,
      "isVariadic": true,
      "example": "```\nmy_funcion = external_define(\"MyDLL.dll\", \"MyMin\", dll_cdecl, ty_real, 2, ty_real, ty_real);\n```\nThe above example code will define an external function called \"MyMin\" with two arguments.\n",
      "description": "This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension. You supply the name (and path) of the file, then the name of the function that you wish to define. Next you need to define the calling convention to be used (see the constants list below) as well as the type of result to be expected (also a constant, as listed below). Finally you must give the number arguments that the function can take (from 0 to 15) and for each of the arguments you must specify its type too. Please note that for functions with 4 or more arguments, all of them *must* be of type `ty_real`.",
      "returns": "Real (Unique function ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm"
    },
    "external_free": {
      "name": "external_free",
      "parameters": [
        {
          "parameter": "id",
          "description": "The name of the `dll` or `dylib` that you want to free"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nexternal_free(\"MyDLL.dll\");\n```\nThe above example code will free the memory associated with the given dll.\n",
      "description": "This function frees the memory associated with the `dll` or `dylib` with the given name. This should be done whenever the file in question is no longer needed in the game, normally (for example) in a Game End event.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_free.htm"
    },
    "file_attributes": {
      "name": "file_attributes",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to check."
        },
        {
          "parameter": "attr",
          "description": "The attributes to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !file_attributes(file, fa_hidden)\n    {\n        file_delete(file);\n    }\n```\nThis would check a file to see if it is hidden or not, and if not it is deleted.\n",
      "description": "You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm"
    },
    "file_bin_close": {
      "name": "file_bin_close",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to close."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_bin_open(\"myfile.bin\", 2); file_bin_rewrite(file);\n     file_bin_close(file);\n  \n```\nThis would open a file from the same directory as the game, and assign its index to the variable \"file\". It would then re-write the file (clearing it of data), and close it again.\n",
      "description": "Closes a previously opened binary file. You supply the file ID value, as returned by the function `file_bin_open()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_close.htm"
    },
    "file_bin_open": {
      "name": "file_bin_open",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to read from."
        },
        {
          "parameter": "mode",
          "description": "the indicator of what can be done with the file."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfile = file_bin_open(\"myfile.bin\", 2);\n```\nThis would open a file from the same directory as the game, and assign its index to the variable \"file\".\n",
      "description": "This function will open the binary file with the indicated name. The mode indicates what can be done with the file:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_open.htm"
    },
    "file_bin_position": {
      "name": "file_bin_position",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to get the position in."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npos = file_bin_position(file);\n```\nThis would store the current position in the variable \"pos\".\n",
      "description": "This function will returns the current position in bytes, where 0 is the first position, of the file with the given file id. You supply the file ID value, as returned by the function `file_bin_open()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_position.htm"
    },
    "file_bin_read_byte": {
      "name": "file_bin_read_byte",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to get the data from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_bin_open(\"myfile.bin\", 2); data = file_bin_read_byte(file); file_bin_close(file);\n  \n```\nThis would open a file from the same directory as the game, and get a byte of data from it before closing it again.\n",
      "description": "This function will return a byte of data from current position within the file with the given file ID. You supply the file ID value, as returned by the function `file_bin_open()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_read_byte.htm"
    },
    "file_bin_rewrite": {
      "name": "file_bin_rewrite",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to rewrite."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_bin_open(\"myfile.bin\", 2); file_bin_rewrite(file);\n  \n```\nThis would open a file from the same directory as the game, and assign its index to the variable \"file\". It would then re-write the file (clearing it of data).\n",
      "description": "This function takes the filename handle as returned by the function `file_bin_open()` and then rewrites the file, clearing it of all previous data to start writing from the beginning of the file.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_rewrite.htm"
    },
    "file_bin_seek": {
      "name": "file_bin_seek",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to read from."
        },
        {
          "parameter": "pos",
          "description": "The position in the file to move to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfile = file_bin_open(\"myfile.bin\", 2); size = file_bin_size(file); file_bin_seek(file, size);\n```\nThis would open a file from the same directory as the game, and assign its index to the variable \"file\", then get the size of the file and set the next writing position to that size.\n",
      "description": "This function moves the current read position within the file to the indicated position. You supply the file ID value, as returned by the function `file_bin_open()`, and to append a file, move the position to the\n    size of the file before writing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_seek.htm"
    },
    "file_bin_size": {
      "name": "file_bin_size",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to get the size of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_bin_open(\"myfile.bin\", 2); size = file_bin_size(file); file_bin_close(file);\n  \n```\nThis would open a file from the local directory of the game, and assign its index to the variable \"file\". It would then get the size of that file and close it again.\n",
      "description": "This function will return the size (in bytes) of a file that has been opened for reading and/or writing. The File ID is the value returned by the function `file_bin_open()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_size.htm"
    },
    "file_bin_write_byte": {
      "name": "file_bin_write_byte",
      "parameters": [
        {
          "parameter": "binfile",
          "description": "The ID of the file to write to."
        },
        {
          "parameter": "byte",
          "description": "The data to write."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfile_bin_write_byte(file, data);\n```\nThis would write a byte to the selected file.\n",
      "description": "This function will write a byte of data to the file identified by the file ID at the current write position. You supply the file ID value, as returned by the function `file_bin_open()` and the byte of data to write.",
      "returns": "real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Binary_Files/file_bin_write_byte.htm"
    },
    "file_copy": {
      "name": "file_copy",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to copy."
        },
        {
          "parameter": "newname",
          "description": "The name of the new, copied, file."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif file_exists(\"level1.txt\")\n    {\n        file_copy(\"level1.txt\", \"level2.txt\");\n    }\n```\nThis would check for a file and if it exists it is copied.\n",
      "description": "This function will copy the specified file, giving it the new name that you choose. If you are copying a file on *Android* from within your **Included Files** area (which will be inside your APK) it will copy into memory first, so, be aware that copying very large files from the APK may cause devices to run out of memory. On the HTML5 target, we use the HTML5 **Local Storage API** for client side saving, and the functions does not support binary file operations, so assumes you are copying a text file.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_copy.htm"
    },
    "file_delete": {
      "name": "file_delete",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif file_exists(\"level.txt\")\n    {\n        file_delete(\"level.txt\");\n    }\n```\nThis would check for a file and if it exists it is deleted.\n",
      "description": "This function will delete the specified file from the system. It should be noted that this function will only delete those files that GameMaker Studio 2 is able to create and parse: ini files, text files and binary files, or those files made to store game created resources like sprites or surfaces. However, it will *not* delete any other file. The function will also return `true` if the file has successfully been removed, or `false` in any other circumstances.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_delete.htm"
    },
    "file_exists": {
      "name": "file_exists",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif file_exists(\"level.txt\")\n    {\n        file = file_text_open_read(\"level.txt\");\n    }\n```\nThis would check for a file and if it exists it is opened for reading.\n",
      "description": "This function will return `true` if the specified file exists and `false` if it does not. Note that the function can only be used to check *local* files, but not any files stored on a remote server.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_exists.htm"
    },
    "file_find_close": {
      "name": "file_find_close",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif directory_exists(\"\\User Content\")\n    {\n        fileA = file_find_first(\"/User Content/*.doc\", fa_readonly);\n        fileB = file_find_next();\n        fileC = file_find_next();\n        file_find_close();\n    }\n```\nThis code checks if the specified directory exists and if it does, goes there and returns the first \"read only\" `.doc` file found. It then looks for two more files and closes the file finder.\nYou can look for any number of files using a  [while](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Language_Features/while.htm) loop:\n```\nvar files = [];\n    var file_name = file_find_first(\"/User Content/*.doc\", fa_readonly);\n    \n    while (file_name != \"\")\n    {\n        array_push(files, file_name);\n    \n        file_name = file_find_next();\n    }\n    \n    file_find_close();\n  \n```\nThe above code creates an empty array to store all the file names that were found, and starts looking for read only `.doc` files. If that file name is not an empty string, it pushes it into the files array, and then attempts to find the next file. The loop will keep repeating until an empty string is found (meaning there are no more matching files), which is when it ends the loop and closes the file finder at the end.\n",
      "description": "This function must be called after handling files opened using `file_find_first()` and `file_find_next()` functions to free memory. The file find functions open handles into the file directory and these take up a minimal amount of memory, which (over time) adds up. Therefore you should always call this function after you have found the files you require to \"close\" these handles.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_close.htm"
    },
    "file_find_first": {
      "name": "file_find_first",
      "parameters": [
        {
          "parameter": "mask",
          "description": "The mask to use for searching."
        },
        {
          "parameter": "attr",
          "description": "The specific file attribute to look for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif directory_exists(\"\\User Content\")\n    {\n        fileA = file_find_first(\"/User Content/*.doc\", fa_readonly);\n        fileB = file_find_next();\n        fileC = file_find_next();\n        file_find_close();\n    }\n```\nThis code checks if the specified directory exists and if it does, goes there and returns the first \"read only\" `.doc` file found. It then looks for two more files and closes the file finder.\nYou can look for any number of files using a  [while](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Language_Features/while.htm) loop:\n```\nvar files = [];\n    var file_name = file_find_first(\"/User Content/*.doc\", fa_readonly);\n    \n    while (file_name != \"\")\n    {\n        array_push(files, file_name);\n    \n        file_name = file_find_next();\n    }\n    \n    file_find_close();\n  \n```\nThe above code creates an empty array to store all the file names that were found, and starts looking for read only `.doc` files. If that file name is not an empty string, it pushes it into the files array, and then attempts to find the next file. The loop will keep repeating until an empty string is found (meaning there are no more matching files), which is when it ends the loop and closes the file finder at the end.\n",
      "description": "This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned. The mask can contain a path and can contain wildcards, for example C:\\temp\\*.doc. The attributes give the additional files you want to see, so the normal files are always returned when they satisfy the mask. You can add up the following constants to see the type of files you want (if you do not wish to add any attributes, use 0):",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_first.htm"
    },
    "file_find_next": {
      "name": "file_find_next",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif directory_exists(\"\\User Content\")\n    {\n        fileA = file_find_first(\"/User Content/*.doc\", fa_readonly);\n        fileB = file_find_next();\n        fileC = file_find_next();\n        file_find_close();\n    }\n```\nThis code checks if the specified directory exists and if it does, goes there and returns the first \"read only\" `.doc` file found. It then looks for two more files and closes the file finder.\nYou can look for any number of files using a  [while](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Language_Features/while.htm) loop:\n```\nvar files = [];\n    var file_name = file_find_first(\"/User Content/*.doc\", fa_readonly);\n    \n    while (file_name != \"\")\n    {\n        array_push(files, file_name);\n    \n        file_name = file_find_next();\n    }\n    \n    file_find_close();\n  \n```\nThe above code creates an empty array to store all the file names that were found, and starts looking for read only `.doc` files. If that file name is not an empty string, it pushes it into the files array, and then attempts to find the next file. The loop will keep repeating until an empty string is found (meaning there are no more matching files), which is when it ends the loop and closes the file finder at the end.\n",
      "description": "This function returns the name of the next file that satisfies the previously given mask and the attributes (defined by `file_find_first()`). If no such file exists, the empty string is returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_find_next.htm"
    },
    "file_rename": {
      "name": "file_rename",
      "parameters": [
        {
          "parameter": "oldname",
          "description": "The name of the file to change."
        },
        {
          "parameter": "newname",
          "description": "The new name to give the file."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif file_exists(\"level1.txt\")\n    {\n        file_rename(\"level1.txt\", \"level.txt\");\n    }\n```\nThis would check for a file and if it exists it is renamed.\n",
      "description": "This function will rename the specified file with the specified name. The function will return `true` if the file has successfully been renamed, or `false` in any other circumstances.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_rename.htm"
    },
    "file_text_close": {
      "name": "file_text_close",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to close."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_write(working_directory + \"Game_Data.txt\");\n    while (!file_text_eof(file))\n    {\n        file_text_readln(file);\n    }\n    file_text_write_string(file, level_data);\n    file_text_close(file);\n```\nThe above code opens a file for writing then loops through the lines of text already written to the file until it reaches the end. At this point it writes a string and then closes the file again.\n",
      "description": "Once you have finished working with a given file (whether reading from it or writing to it), you must close the file again, or else you risk losing the information contained within. This also prevents memory leaks and makes sure that you never go over the file limit by having more than 32 files open.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_close.htm"
    },
    "file_text_eof": {
      "name": "file_text_eof",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar num = 0;\n    var file = file_text_open_read(working_directory + \"Game_Data.txt\");\n    while (!file_text_eof(file))\n    {\n        str[num++] = file_text_readln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for writing then loops through the lines of text already written to the file until it reaches the end, storing each line in the array \"str\".\n",
      "description": "This function returns `true` when the end of a given opened text file has been reached or `false` if not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_eof.htm"
    },
    "file_text_eoln": {
      "name": "file_text_eoln",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_read(working_directory + \"Game_Data.txt\");\n    var num = 0; while (!file_text_eoln(file))\n    {\n        score_array[num] = file_text_read_real(file);\n        num++;\n    }\n    file_text_close(file);\n```\nThe above code opens a file for reading then reads the values from a single line into an array.\n",
      "description": "With this function you can get GameMaker Studio 2 to check the currently opened file to see if the line being read has finished. The function returns `true` if the end of the line has been reached and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_eoln.htm"
    },
    "file_text_open_append": {
      "name": "file_text_open_append",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to append to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_text_open_append(working_directory + \"save.txt\");\n```\nThis would open \"save.txt\" from the same directory as the game and store the file id in the variable \"file\".\n",
      "description": "This function opens the text file with the indicated filename for *writing* (if the file does not exist, it is created), returning the unique *id* of the file that which should be stored in a variable as it will be used for all further actions\n    to do with that file. The position within the file for writing to is set to the last line of text that the file contains. Note that if the file *can't* be created (because of an illegal filename, for example) the function will return -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_append.htm"
    },
    "file_text_open_from_string": {
      "name": "file_text_open_from_string",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to create the file from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_text_open_from_string(reset_str);\n```\nThe above code takes the string stored in the variable \"reset_str\" and uses it to create a read-only text file. The \"handle\" for this file is then stored in the variable \"file\" for all further file functions to use.\n",
      "description": "This function will create a text file from a string and open it for reading, returning the file \"handle\" that should be used in all further file function calls to read from this file. Note that this file is temporary and *read only*,\n    and as such it will be removed from memory the moment it is closed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_from_string.htm"
    },
    "file_text_open_read": {
      "name": "file_text_open_read",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile = file_text_open_read(working_directory + \"level.txt\");\n```\nThis would open \"level.txt\" from the same directory as the game and store the file id in the variable \"file\".\n",
      "description": "This function opens the text file with the indicated filename for *reading only*, returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. If the file does not\n    exists then the function will return the value -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_read.htm"
    },
    "file_text_open_write": {
      "name": "file_text_open_write",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name of the file to write to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file; file = file_text_open_write(working_directory + \"level.txt\"); file_text_write_string(file, level_data); file_text_close(file);\n  \n```\nThe above code will open the file \"level.txt\" for writing and then write the string stored in the variable \"level_data\" before finally closing the file again.\n",
      "description": "This function opens the text file with the indicated filename for *writing only* (if the file does not exist, it is created), returning the unique *id* of the file that which should be stored in a variable as it will be used for all further\n    actions to do with that file. Note that if the file *can't* be created (because of an illegal filename, for example) the function will return -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_open_write.htm"
    },
    "file_text_read_real": {
      "name": "file_text_read_real",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_read(working_directory + \"hiscore.txt\");\n    for (var i = 0; i < 10; ++i;)\n    {\n        scr[i] = file_text_read_real(file);\n        file_text_readln(file);\n        scr_name[i] = file_text_read_string(file);\n        file_text_readln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for reading and then loops through the lines of the file reading alternately a real number value and a string into two different arrays for future use. The file is then closed when the loop has finished.\n",
      "description": "With this function you can read a real number value from a text file and the function returns that value to be used or stored in a variable.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_read_real.htm"
    },
    "file_text_read_string": {
      "name": "file_text_read_string",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_read(working_directory + \"hiscore.txt\");\n    for (var i = 0; i < 10; ++i;)\n    {\n        scr[i] = file_text_read_real(file);\n        file_text_readln(file);\n        scr_name[i] = file_text_read_string(file);\n        file_text_readln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for reading and then loops through the lines of the file reading alternately a real number value and a string into two different arrays for future use. The file is then closed when the loop has finished.\n",
      "description": "With this function you can read a string from a text file and the function returns that value to be used or stored in a variable.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_read_string.htm"
    },
    "file_text_readln": {
      "name": "file_text_readln",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_read(working_directory + \"hiscore.txt\");\n    for (var i = 0; i < 10; ++i;)\n    {\n        scr[i] = file_text_read_real(file);\n        file_text_readln(file);\n        scr_name[i] = file_text_read_string(file);\n        file_text_readln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for reading and then loops through the lines of the file reading alternately a real number value and a string into two different arrays for future use. The file is then closed when the loop has finished.\n",
      "description": "With this function you can skip the remainder of the current line from a given opened text file and move to the start of the next one. The function will also return the full line as a string, making it an easy way to read complete \"chunks\" of data for parsing later.",
      "returns": "string",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_readln.htm"
    },
    "file_text_write_real": {
      "name": "file_text_write_real",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to edit."
        },
        {
          "parameter": "val",
          "description": "The real value to write to the file."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_write(working_directory + \"hiscore.txt\");\n    for (var i = 0; i < 10; ++i;)\n    {\n        file_text_write_real(file, scr[i]);\n        file_text_writeln(file);\n        file_text_write_string(file, scr_name[i]);\n        file_text_writeln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for writing and then loops through two arrays, writing each array value to a new line of the file. The file is then closed when the loop has finished.\n",
      "description": "With this function you can write a number to the previously opened text file. Note that as the value to be written can be a real number, all decimals will be written with a \".\" point as separator. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the `file_text_open_append()`. You can also avoid this by using the `file_text_readln()` function along with the `file_text_eof()` function to loop through the contents of the file until you get to the end and then start writing.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_write_real.htm"
    },
    "file_text_write_string": {
      "name": "file_text_write_string",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to edit."
        },
        {
          "parameter": "str",
          "description": "The string to write to the file."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_write(working_directory + \"hiscore.txt\");\n    for (var i = 0; i < 10; ++i;)\n    {\n        file_text_write_real(file, scr[i]);\n        file_text_writeln(file);\n        file_text_write_string(file, scr_name[i]);\n        file_text_writeln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for writing and then loops through two arrays, writing each array value to a new line of the file. The file is then closed when the loop has finished.\n",
      "description": "With this function you can write a string to a previously opened text file. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the `file_text_open_append()`. You can also avoid this by using the `file_text_readln()` function along with the `file_text_eof()` function to loop through the contents of the file until you get to the end and then start writing.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_write_string.htm"
    },
    "file_text_writeln": {
      "name": "file_text_writeln",
      "parameters": [
        {
          "parameter": "fileid",
          "description": "The id of the file to edit."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar file = file_text_open_write(working_directory + \"hiscore.txt\");\n    for (var i = 0; i < 10; ++i;)\n    {\n        file_text_write_real(file, scr[i]);\n        file_text_writeln(file);\n        file_text_write_string(file, scr_name[i]);\n        file_text_writeln(file);\n    }\n    file_text_close(file);\n```\nThe above code opens a file for writing and then loops through two arrays, writing each array value to a new line of the file. The file is then closed when the loop has finished.\n",
      "description": "With this function you can write a new line to an opened text file. In this way you can skip lines or write information on a line by line basis (see example code below).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Text_Files/file_text_writeln.htm"
    },
    "filename_change_ext": {
      "name": "filename_change_ext",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The file to use."
        },
        {
          "parameter": "newext",
          "description": "The new extension to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\next = filename_change_ext(file_find_first(working_directory + \"*.*\", 0), \"\");\n```\nThe above code gets the name of the file (as a string) with the extension part removed.\n",
      "description": "This function returns the indicated file name with the extension (including the dot) changed to the new extension. By using an empty string as the new extension you can remove the extension part all together.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/filename_change_ext.htm"
    },
    "filename_dir": {
      "name": "filename_dir",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The file to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndir = filename_dir(\"Test.ini\");\n```\nThe above code gets the directory (as a string) of the specified file.\n",
      "description": "This function returns the directory part of the indicated file name, which normally is the same as the path except for the final backslash.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/filename_dir.htm"
    },
    "filename_drive": {
      "name": "filename_drive",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The file to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndrive = filename_drive(file_find_first(working_directory + \"*.doc\", 0));\n```\nThe above code gets the drive information (as a string) of the specified file.\n",
      "description": "This function returns the drive information of the filename.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/filename_drive.htm"
    },
    "filename_ext": {
      "name": "filename_ext",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The file to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\next = filename_ext(file_find_first(\"*.*\", 0));\n```\nThe above code gets the extension (as a string) of the specified file.\n",
      "description": "This function returns the extension part of the indicated file name, including the leading dot.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/filename_ext.htm"
    },
    "filename_name": {
      "name": "filename_name",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The file to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nname = filename_name(file_find_first(\"C:/Games/*.doc\", 0));\n```\nThe above code gets the name (as a string) of the first \"doc\" type file found in the specified directory.\n",
      "description": "Using this function returns the name part of the indicated file, *with* the extension but *without* the path",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/filename_name.htm"
    },
    "filename_path": {
      "name": "filename_path",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The file name and path to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npath = filename_path(working_directory + \"Test.ini\");\n```\nThe above code gets the path (as a string) of the specified file.\n",
      "description": "Using this function returns the path part of the indicated file path, including the final backslash.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/filename_path.htm"
    },
    "floor": {
      "name": "floor",
      "parameters": [
        {
          "parameter": "n",
          "description": "The number to floor."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = floor( 3.9 );\n```\nThis will set val to 3.\n",
      "description": "Returns the floor of n, that is, n rounded down to an integer. This is similar to the `round()` function, but it only rounds *down*, no matter what the decimal value, so `floor(5.99999)` will return 5, as will\n    `floor(5.2)`, `floor(5.6457)` etc...",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/floor.htm"
    },
    "font_add": {
      "name": "font_add",
      "parameters": [
        {
          "parameter": "name",
          "description": "The path of the font file in the Included Files (*.`ttf` or `*.otf`)."
        },
        {
          "parameter": "size",
          "description": "The size of the font - points for Web Fonts, pixels for file fonts."
        },
        {
          "parameter": "bold",
          "description": "Whether the font is bold (`true`) or not (`false`)."
        },
        {
          "parameter": "italic",
          "description": "Whether the font is italic (`true`) or not (`false`)."
        },
        {
          "parameter": "first",
          "description": "The first character to include (if you're unsure, go for 32)."
        },
        {
          "parameter": "last",
          "description": "The last character to include (if you're unsure, go for 128)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nnew_font = font_add(\"gamefont.ttf\", 24, true, true, 32, 128);\n```\nThis will load the `\"gamefont.ttf\"` file present in the game's Included Files with a 24pt size. The font will be bold and italic, and the font range will include capital and lower case letters, numbers and all common punctuation. After the font is loaded, its ID will be stored in the `new_font` variable.\n",
      "description": "This function can be used to add a font to your game from a font file present in the  [Included Files](https://manual.yoyogames.com/Settings/Included_Files.htm#h). You can define the size of the font (in points), as well as whether the font should be **bold** or *italic*, and you can also define the range of characters to include. The function returns an *index* value that should be stored in a variable as this will be needed in all further code that refer to this font, or it will return `-1` if the function fails for any reason.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add.htm"
    },
    "font_add_enable_aa": {
      "name": "font_add_enable_aa",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Whether to enable (`true`) or disable (`false`) AA for added fonts."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !font_add_get_enable_aa()\n    {\n        font_add_enable_aa(true);\n    }\n```\nThe above code checks the status of anti-aliasing for added fonts and if it not enabled, then we enable it.\n",
      "description": "This function can be used to enable or disable anti-aliasing (AA) for fonts added using `font_add()`. This function needs to be called *before* you add any fonts and setting it to `true` will enable AA, and setting it to `false` will disable it. By default AA is enabled. Note that this will have no effect on fonts that have been added before the function was called, and the function only needs to be called once when the font is added, and not every draw/step that the font is being used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_enable_aa.htm"
    },
    "font_add_get_enable_aa": {
      "name": "font_add_get_enable_aa",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !font_add_get_enable_aa()\n    {\n        font_add_enable_aa(true);\n    }\n```\nThe above code checks the status of anti-aliasing for added fonts and if it not enabled, then we enable it.\n",
      "description": "This function can be used to check whether anti-aliasing (AA) is enabled for fonts added using `font_add()`. The function will return `true` if AA is enabled, and `false` if it is not. Note that AA is enabled by default, but you can change the AA state for added fonts using the function `font_add_enable_aa()`, as long as it is called *before* adding the font.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_get_enable_aa.htm"
    },
    "font_add_sprite": {
      "name": "font_add_sprite",
      "parameters": [
        {
          "parameter": "spr",
          "description": "The sprite to add a font based on."
        },
        {
          "parameter": "first",
          "description": "The index of the first available character."
        },
        {
          "parameter": "prop",
          "description": "Set as proportional font or not."
        },
        {
          "parameter": "sep",
          "description": "The space to leave between each letter."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nglobal.Font = font_add_sprite(spr_HUD_Font, ord(\"!\"), true, 2);\n```\nThe above code will create a new font asset from a sprite asset and store the index of the new font in the variable \"global.Font\" for later use.\n",
      "description": "With this function you can use a \"sprite strip\" to create a new font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as\n    you would for a normal font, starting with \"!\" but remember that you should only include what you need and that you should be using the `ord()` function to get the correct UTF8 value for the starting\n    letter. The created sprite font will then have the sub-images set to an individual glyph from the font, where the \"first\" glyph will have the image_index of 0. You can define \"space\" as being any character you want, for example\n    a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will *never* be rendered), or if you don't supply a sprite for space then the width of the widest character\n    in the sprite font will be used instead.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_sprite.htm"
    },
    "font_add_sprite_ext": {
      "name": "font_add_sprite_ext",
      "parameters": [
        {
          "parameter": "spr",
          "description": "The sprite to add a font based on."
        },
        {
          "parameter": "string_map",
          "description": "String from which sprite sub-image order is taken."
        },
        {
          "parameter": "prop",
          "description": "Set as proportional font or not."
        },
        {
          "parameter": "sep",
          "description": "The space to leave between each letter."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nglobal.Font = font_add_sprite_ext(spr_CalcFont, \"0123456789+-*/=\", true, 2);\n```\nThe above code will create a new font asset from the sprite indexed in the variable \"spr_CalcFont\" and store the index of the new font in the variable \"global.Font\". The sub-images of the sprite font will be mapped to the string\n    specified.\n",
      "description": "With this function you can use a \"sprite strip\" (the sprite itself **must** be a sprite asset from the Asset Browser, or a sprite you have added to the game resources using `sprite_add`) to create a new font asset, where each sub-image\n    would be an individual symbol or letter. Unlike the normal `font_add_sprite()` which has a specific order for the sub-images of the sprite, this function will map the sprite sub-images based on the argument\n    \"string_map\" of the function. This argument is a string that you can use to tell GameMaker Studio 2 what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map\n    of \"AaBbCcDdEeFfGgHh\", your sprite font *must* have the sub-images ordered in this way. You can define \"space\" as being any character you want, for example a single line the size that you want the space to be, and all spaces\n    in text will be rendered at that width (but the image chosen will *never* be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add_sprite_ext.htm"
    },
    "font_delete": {
      "name": "font_delete",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the font to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfont_delete(global.Font);\n```\nThe above code will delete the font indexed in the global variable \"Font\".\n",
      "description": "With this function you can delete a font asset from the game. This is a **permanent** removal, and changing rooms, or restarting the game will not bring the removed font back. For that the player would need to exit the game\n    and restart that way, so take care when using this function. In general it is only needed for freeing up memory that has been used by a font added to the game through the functions `font_add()` or     `font_add_sprite()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_delete.htm"
    },
    "font_exists": {
      "name": "font_exists",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif font_exists(fnt_Main)\n    {\n        draw_set_font(fnt_Main);\n    }\n```\nThis will set the active drawing font to fnt_Main if it exists.\n",
      "description": "This function returns whether a font with the specified index exists or not. You can check font indices as defined from the Asset Browser, or fonts that have been added using functions like font_add().",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_exists.htm"
    },
    "font_get_bold": {
      "name": "font_get_bold",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif font_get_bold(fnt_Main)\n    {\n        draw_set_font(fnt_Main);\n    }\n```\nThis will set the active drawing font to fnt_Main if it is set as bold in its font properties.\n",
      "description": "With this function you can check any font asset to see if it has the **bold** flag or not. If it does the function will return `true`, otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_bold.htm"
    },
    "font_get_first (deprecated)": {
      "name": "font_get_first (deprecated)",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnum = font_get_first(fnt_Main);\n```\nThe above code will store the ASCII value of the first letter of the font range for the font indexed in \"fnt_Main\".\n",
      "description": "When defining a font in GameMaker Studio 2, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an *image* of\n    the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that\n    your game will need so as to keep texture memory as optimised as possible. This function can be used to find the starting character (as an ASCII value) that was used when your font asset was added to your game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_first.htm"
    },
    "font_get_fontname": {
      "name": "font_get_fontname",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfnt_Name = font_get_fontname(font0);\n```\nThe above code will get the system name of a font resource and store it as a string in the variable \"fnt_Name\".\n",
      "description": "With this function you can get the actual system name of the selected font asset. This function returns a *string* and not an *index*, and the name returned will depend on the font being used. For example,\n    you may have a font asset called \"fnt_Main\" in the GameMaker Studio 2 Asset Browser, and the font itself may be the Windows system font **Arial**. In this case the function will return \"Arial\"\n    as that is the system name of the font. Should you need the name as it appears in the Asset Browser, you should use `font_get_name()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_fontname.htm"
    },
    "font_get_info": {
      "name": "font_get_info",
      "parameters": [
        {
          "parameter": "font",
          "description": "The font for which information should be retrieved."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _info = font_get_info(my_font);\n     if (_info != undefined && _info.bold) {\n         image_xscale *= 2;     image_yscale *= 2; }\n  \n```\nThis code retrieves information for the font stored in the `my_font` variable. If the returned value is **not **`undefined` and the given font is bold, the instance's scale is doubled.\n",
      "description": "This function is used to retrieve information for the given font. You supply a font index (which can be an asset added through the  [Asset Browser](https://manual.yoyogames.com/Introduction/The_Asset_Browser.htm) or a font  [added](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_add.htm)    at runtime) and the function returns a  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) with the following variables:",
      "returns": "Struct (or undefined)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_info.htm"
    },
    "font_get_italic": {
      "name": "font_get_italic",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif font_get_italic(fnt_Main)\n    {\n        draw_set_font(fnt_Main);\n    }\n```\nThis will set the active drawing font to fnt_Main if it is set as italic in its font properties.\n",
      "description": "With this function you can check any font asset to see if it has the *italic* flag or not. If it does the function will return `true`, otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_italic.htm"
    },
    "font_get_last": {
      "name": "font_get_last",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnum = font_get_last(fnt_Main);\n```\nThe above code will store the ASCII value of the last letter of the font range for the font indexed in \"fnt_Main\".\n",
      "description": "When defining a font in GameMaker Studio 2, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an *image* of\n    the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that\n    your game will need so as to keep texture memory as optimised as possible. This function can be used to find the last character (as an UTF8 value) that was used when your font asset was added to your game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_last.htm"
    },
    "font_get_name": {
      "name": "font_get_name",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfnt_Name = font_get_name(font0);\n```\nThe above code will get the name of a font resource as it appears in the Asset Browser and store it as a string in the variable \"fnt_Name\".\n",
      "description": "This function can be used to get the name (as a string) that was given to the font when it was added as an asset to the GameMaker Studio 2 Asset Browser. Please note that this is *only* a\n    string and cannot be used to reference the font directly - for that you would need the *font index*. You can, however, use this string to get the *font index* using the returned string along with the\n    function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_name.htm"
    },
    "font_get_size": {
      "name": "font_get_size",
      "parameters": [
        {
          "parameter": "ind",
          "description": "Index of the font to get the size of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsz = font_get_size(font0);\n```\nThis will get the size of the font indexed by the \"font0\" variable and store it in the variable \"sz\".\n",
      "description": "With this function you can get the size of any font resource, which is the point value shown by the font resource dialogue.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_size.htm"
    },
    "font_get_texture": {
      "name": "font_get_texture",
      "parameters": [
        {
          "parameter": "font",
          "description": "The index of the font to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntex = font_get_texture(fnt_Main);\n```\nThe above code will get the texture pointer for the font indexed as \"fnt_Main\".\n",
      "description": "This function returns a special *pointer* for the font texture page. This value can then be used in other draw functions, particularly in general drawing when using  [primitives](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm) as\n    well as the  [Shader](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm) functions. You can get more information about the returned texture page using the different `texture_` functions found  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm).",
      "returns": "Pointer (texture page ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_texture.htm"
    },
    "font_get_uvs": {
      "name": "font_get_uvs",
      "parameters": [
        {
          "parameter": "font",
          "description": "The index of the font to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex = font_get_uvs(fnt_Main); tex_left = tex[0]; tex_top = tex[1]; tex_right = tex[2]; tex_left = tex[3];\n```\nThe above code will store the UV coordinates for the given background in a local array and then assign the values to instance variables.\n",
      "description": "This function returns an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) with the UV coordinates for the font texture on the texture page, filling in the array with the following values:",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_get_uvs.htm"
    },
    "font_replace_sprite": {
      "name": "font_replace_sprite",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the font that shall be replaced (ie all references to this resource past this function will refer to the new font, not the original)."
        },
        {
          "parameter": "spr",
          "description": "The sprite to add a font based on."
        },
        {
          "parameter": "first",
          "description": "The index of the first available character."
        },
        {
          "parameter": "prop",
          "description": "Whether white space around each letter should be removed (if false, the created font will be monospaced, otherwise it'll be like most regular fonts)."
        },
        {
          "parameter": "sep",
          "description": "The space between each letter, 0 meaning the right of one letter just touches the left of the next one."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nfont_replace_sprite(global.Font, working_directory + \"Sprites\\spr_Font.png\", ord(\"!\"), true, 2);\n```\nThe above code will replace the font asset indexed in the global variable \"Font\" with a new font asset from an external image file.\n",
      "description": "With this function you can use a \"sprite strip\" to replace a previously created sprite font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges\n    to use are the same as you would for a normal font, starting with \"!\" but remember that you should only include what you need and that you should be using the `ord()` function to get the correct\n    UTF8 value for the starting letter.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_replace_sprite.htm"
    },
    "font_replace_sprite_ext": {
      "name": "font_replace_sprite_ext",
      "parameters": [
        {
          "parameter": "font",
          "description": "The font to replace."
        },
        {
          "parameter": "spr",
          "description": "The sprite to add a font based on."
        },
        {
          "parameter": "string_map",
          "description": "String from which sprite sub-image order is taken."
        },
        {
          "parameter": "prop",
          "description": "Set as proportional font or not."
        },
        {
          "parameter": "sep",
          "description": "The space to leave between each letter."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nfont_replace_sprite_ext(global.Font, spr_CalcFont, \"0123456789+-*/=\", true, 2);\n```\nThe above code will replace a sprite font asset that is indexed in the variable \"global.Font\" with sprite images indexed in the variable \"spr_CalcFont\".\n",
      "description": "This function will replace a sprite font that you created previously using the function `font_add_sprite_ext()`. It uses a \"sprite strip\", where each sub-image is be an individual symbol or letter, and the images are mapped to letters based on the argument \"string_map\" of the function. This argument is a string that you can use to tell GameMaker Studio 2 what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of \"AaBbCcDdEeFfGgHh\", your sprite font *must* have the sub-images ordered in this way.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_replace_sprite_ext.htm"
    },
    "font_set_cache_size": {
      "name": "font_set_cache_size",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the font to change the cache size of."
        },
        {
          "parameter": "max",
          "description": "The maximum number of cached copies of the font that can be stored."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfont_set_cache_size(fnt_MainMenu, 2);\n```\nThis will set the font cache of the font indexed in the variable \"fnt_MainMenu\" to 2 copies.\n",
      "description": "When performing image blending and colouring, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker Studio 2 has to temporarily save a blended copy of the images and load\n    them in when needed. This function sets how many blended copies of the given font can be cached before old ones are overwritten. The default value is 4.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_set_cache_size.htm"
    },
    "frac": {
      "name": "frac",
      "parameters": [
        {
          "parameter": "n",
          "description": "The number to change."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = frac(3.4);\n```\nThis will set val to 0.4.\n",
      "description": "This function returns the fractional part of n, that is, the part behind the decimal dot. It will return *only* the decimals behind the dot of a value, so `frac(3.125)` will return 0.125, `frac(6.921)` will return 0.921, etc...",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/frac.htm"
    },
    "fx_create": {
      "name": "fx_create",
      "parameters": [
        {
          "parameter": "filter_or_effect_name",
          "description": "The name of the filter/effect to create (as a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _fx_tint = fx_create(\"_filter_tintfilter\");\n    fx_set_parameter(_fx_tint, \"g_TintCol\", [1, 0, 0, 1]);\n    layer_set_fx(\"EffectLayer\", _fx_tint);\n```\nThe above code creates a new FX struct from the \"_filter_tintfilter\" effect, which is the \"Colour Tint\" filter found in the Room Editor. It assigns a value to its \"g_TintCol\" parameter which is the colour of the tint, and as it's a vec4 internally, it takes an array containing four values (corresponding to its red, green, blue and alpha values). The FX struct for the tint is then applied to an FX layer.\n",
      "description": "Overview",
      "returns": "Struct or Real (-1 on failure)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm"
    },
    "fx_get_name": {
      "name": "fx_get_name",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to get the name of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar layers = layer_get_all();\n    for(var i = 0; i < array_length(layers); i ++)\n    {    \n        var layer_fx = layer_get_fx(layers[i]);\n        \n        if (layer_fx != -1)\n        {\n            if (fx_get_name(layer_fx) == \"_filter_tintfilter\")\n            {            \n                fx_set_parameter(_fx_tint, \"g_TintCol\", [0, 0, 1, 1]);\n            }\n        }\n    }\n```\nThe above code runs a  [for](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Language_Features/for.htm) loop through all the layers present in the room, and checks each layer for an FX struct. If a layer has an FX struct, it checks the name of that filter/effect by calling fx_get_name() on it; if it's equal to \"_filter_tintfilter\" meaning that it's a \"Colour Tint\" filter, it changes its tint colour to blue.\n     \n",
      "description": "This function is used to retrieve the name of a filter/effect from its struct. You specify the FX struct to read (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)) and the function returns its name as a string. This name can then be passed into  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) to create a new FX struct using the same filter/effect type.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_name.htm"
    },
    "fx_get_parameter": {
      "name": "fx_get_parameter",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to get the parameter from"
        },
        {
          "parameter": "parameter_name",
          "description": "The name of the parameter to get the value of (as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _fx_struct = layer_get_fx(\"TintEffect\");\n    var _tint_colour = fx_get_parameter(_fx_struct, \"g_TintCol\");\n    show_debug_message(\"The currently active tint colour is: \" + string(_tint_colour));\n```\nThe above code retrieves the FX struct from a layer that is assumed to have the \"Colour Tint\" filter applied to it, and gets the value of its \"g_TintCol\" parameter, which returns an array containing the 4 values for its tint colour (red, green, blue and alpha). It then prints that value to the output log.\n",
      "description": "This function is used to retrieve the value of a parameter from an FX Struct. You specify the FX struct to read (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)) and the name of the parameter as a string, and the function returns its current value. This may be a real value, or an array if the parameter is a vector (which is a group of values, such as a vec4 which stores an RGBA colour).",
      "returns": "Real or Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameter.htm"
    },
    "fx_get_parameter_names": {
      "name": "fx_get_parameter_names",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to get the parameter names of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _fx_struct = layer_get_fx(\"EffectLayer\");\n    var _param_names = fx_get_parameter_names(_fx_struct);\n    \n    for (var i = 0; i < array_length(_param_names); i ++) {\n        show_debug_message(\"Parameter \" + string(i) + \": \" + _param_names[i]);\n    }\n  \n```\nThe above code retrieves the FX struct for a layer and gets its parameter names in an array. It then runs a  [for](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Language_Features/for.htm) loop on that array and prints each parameter to the output log.\n",
      "description": "This function is used to retrieve the names of all parameters present in a filter/effect. You specify the FX struct to read (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)) and the function returns an array containing the names of the filter's parameters as strings.",
      "returns": "Array of Strings",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameter_names.htm"
    },
    "fx_get_parameters": {
      "name": "fx_get_parameters",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct for which the parameters will be returned"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _fx_struct = layer_get_fx(\"TintEffect\");\n    \n    if (_fx_struct != -1)\n    {\n        var _params = fx_get_parameters(_fx_struct);\n        var _osc = sin(current_time / 1000);\n        _params.g_TintCol = [_osc, 0.3 + _osc, 0.6 + _osc, 1];\n    \n        fx_set_parameters(_fx_struct, _params);\n    }\n  \n```\nThe above code gets the FX struct for a layer that is assumed to have the \"Colour Tint\" filter applied to it, and retrieves its parameter struct by calling fx_get_parameters(). After that it creates an oscillating value by using  [sin()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/sin.htm) and  [current_time](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_time.htm), which is then used for the RGBA values for the tint effect so it keeps animating. The RGBA array is assigned to the g_TintCol variable in the parameter struct, and the struct is then applied back to the FX struct by calling fx_set_parameters().\n",
      "description": "This function is used to retrieve a struct containing all the parameters for the given FX struct. You specify an FX struct (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)) and this function returns a struct containing variables for all parameters applicable to that filter/effect. Parameters that use vectors (i.e. groups of values) will be present as arrays.",
      "returns": "Struct (or -1 on failure)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameters.htm"
    },
    "fx_get_single_layer": {
      "name": "fx_get_single_layer",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to read"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _fx = layer_get_fx(\"Distort\");\n    \n    if (!fx_get_single_layer(_fx))\n    {\n        fx_set_single_layer(_fx, true);\n    }\n  \n```\nThe above code gets the FX struct from a layer called \"Distort\" and checks if Single Layer mode is enabled on it. If it isn't, it enables Single Layer mode for that FX.\n",
      "description": "This function returns whether the supplied filter/effect is using Single Layer mode (true) or not (false). See fx_set_single_layer() for information on Single Layer mode.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_single_layer.htm"
    },
    "fx_set_parameter": {
      "name": "fx_set_parameter",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to modify"
        },
        {
          "parameter": "parameter_name",
          "description": "The name of the parameter to change the value of (as a string)"
        },
        {
          "parameter": "val...",
          "description": "The new value(s) for that parameter as a real or array"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": true,
      "example": "```\nvar _fx_tint = fx_create(\"_filter_tintfilter\");\n    fx_set_parameter(_fx_tint, \"g_TintCol\", [1, 0, 0, 1]);\n    layer_set_fx(\"EffectLayer\", _fx_tint);\n```\nThe above code creates a new FX struct from the \"_filter_tintfilter\" effect, which is the \"Colour Tint\" filter found in the Room Editor. It assigns a value to its \"g_TintCol\" parameter which is the colour of the tint, and as it's a vec4 internally, it takes an array containing four values (corresponding to its red, green, blue and alpha values). The FX struct for the tint is then applied to an FX layer.\nNote that you are also able to pass values to the vector as separate arguments instead of an array:\n```\nfx_set_parameter(_fx_tint, \"g_TintCol\", 1, 0, 0, 1);\n```\n",
      "description": "This function is used to change the value of a parameter in the given FX struct. You specify an FX struct (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)), a parameter name as a string, and its new value. This will make your changes visible in the layer that the FX struct is assigned to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_parameter.htm"
    },
    "fx_set_parameters": {
      "name": "fx_set_parameters",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to modify"
        },
        {
          "parameter": "parameter_struct",
          "description": "A struct containing the parameters for the filter/effect"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _fx_struct = layer_get_fx(\"TintEffect\");\n    \n    if (_fx_struct != -1)\n    {\n        var _params = fx_get_parameters(_fx_struct);\n        var _osc = sin(current_time / 1000);\n        _params.g_TintCol = [_osc, 0.3 + _osc, 0.6 + _osc, 1];\n    \n        fx_set_parameters(_fx_struct, _params);\n    }\n  \n```\nThe above code gets the FX struct for a layer that is assumed to have the \"Colour Tint\" filter applied to it, and retrieves its parameter struct by calling fx_get_parameters(). After that it creates an oscillating value by using  [sin()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/sin.htm) and  [current_time](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_time.htm), which is then used for the RGBA values for the tint effect so it keeps animating. The RGBA array is assigned to the g_TintCol variable in the parameter struct, and the struct is then applied back to the FX struct by calling fx_set_parameters().\n",
      "description": "This function is used to change the parameters of a filter/effect. You specify an FX struct (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)) and a struct containing its parameters (as returned from  [fx_get_parameters()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_get_parameters.htm)). This will make your changes visible in the layer that the FX struct is assigned to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_parameters.htm"
    },
    "fx_set_single_layer": {
      "name": "fx_set_single_layer",
      "parameters": [
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to modify"
        },
        {
          "parameter": "enable",
          "description": "A boolean (tooltip) value to enable (true) or disable (false) Single Layer Mode"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nshake_fx = fx_create(\"_filter_screenshake\");\n    fx_set_single_layer(shake_fx, true);\n    layer_set_fx(\"ShakeyThings\", shake_fx);\n```\nThe above code creates a new screenshake FX, enables Single Layer mode on it and then applies it to a room layer. This means that the screenshake filter will only be applied to the \"ShakeyThings\" layer.\n",
      "description": "This function is used to enable or disable \"Single Layer\" mode for a filter/effect. By default, a filter/effect is applied to the layer that it is  [assigned to](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_set_fx.htm) and all layers below that layer, however you can enable Single Layer mode on an FX struct to make sure that it's only applied to the layer that it is assigned to.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_single_layer.htm"
    },
    "game_end": {
      "name": "game_end",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_escape) game_end();\n```\nThis would end the game if the player presses the \"escape\" key.\n",
      "description": "With this function you can end the game (and the  [Game End Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Other_Events.htm) will be triggered). This will not happen instantaneously, but rather at the end of the current step, so any code\n    you have in the same step after this function has been called will still run. Please note that this function has the following restrictions:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_end.htm"
    },
    "game_get_speed": {
      "name": "game_get_speed",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of method used to get the game speed (see the constants above)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif game_get_speed(gamespeed_fps) != 60\n    {\n        game_set_speed(60, gamespeed_fps);\n    }\n```\nThe above code checks to see if the game is running with a game speed of 60 FPS and if not it is set to 60 FPS.\n",
      "description": "This function can be used to get the game speed as either the number of game frames to run per second or as the number of micro seconds per game frame. Note that this is **not** the actual running speed FPS value (for that use the `fps_real` variable) but rather the number of game frames (FPS) that the game will attempt to maintain each second, or the length of each game frame in microseconds that the game will try to maintain (MPF). When you use this function you need to give one of the following constants which will determine the type of the return value:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_get_speed.htm"
    },
    "game_load": {
      "name": "game_load",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to load."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"L\"))\n    {\n        if (global.Save) game_load(\"Save.dat\");\n    }\n```\nThe above code will load a previously saved game if a global variable is `true` when the player presses the \"L\" key.\n",
      "description": "With this function you can load a game that has been previously saved using `game_save()`. Note that it will restore the version of the game that was used to create the save, so any updates made after it will not be visible. For more info, read the page on `game_save()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_load.htm"
    },
    "game_load_buffer": {
      "name": "game_load_buffer",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer id to load from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"L\"))\n    {\n        if global.Checkpoint game_load_buffer(save_buff);\n    }\n```\nThe above code will load a previously saved game state from the buffer indexed in the variable \"save_buff\", only if the global variable is `true`, when the player presses the \"L\" key.\n",
      "description": "With this function you can load a game state that has been saved previously. The game is loaded from a previously created \"grow\" buffer (see  [Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)) and the buffer must have had a game state saved to it using `game_save_buffer()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_load_buffer.htm"
    },
    "game_restart": {
      "name": "game_restart",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"R\")) game_restart();\n```\nThis would restart the game when the player presses the \"R\" key.\n",
      "description": "With this function you can restart the game. This is essentially the same as running the game for the first time and so the  [Game Start Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Other_Events.htm) will be triggered, *as well as* the  [Game End Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Other_Events.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm"
    },
    "game_save": {
      "name": "game_save",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to save the game to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"S\"))\n    {\n        global.Saved = true;\n        game_save(\"Save.dat\");\n    }\n```\nThe above code will set a global variable to `true` and then save the game to the file \"Save.dat\" when the key \"S\" is pressed.\n",
      "description": "This is a legacy function that can be used to save the current state of the game, and is not recommended for use anymore. Use the  [File functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Handling.htm) instead to create a custom save system where you only save and load specific game data.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_save.htm"
    },
    "game_save_buffer": {
      "name": "game_save_buffer",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer id to save to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"S\"))\n    {\n        global.Checkpoint = true;\n        game_save_buffer(save_buff);\n    }\n```\nThe above code will set a global variable to `true` and then save the current game state to the buffer indexed in the variable \"save_buff\" when the key \"S\" is pressed.\n",
      "description": "This is a variant of the  [game_save()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_save.htm) function, so please read  [its page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_save.htm) first as it contains important information related to its use and to this function's as well.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"
    },
    "game_set_speed": {
      "name": "game_set_speed",
      "parameters": [
        {
          "parameter": "speed",
          "description": "The new game speed (as either FPS or MPF)."
        },
        {
          "parameter": "type",
          "description": "The type of method used to set the game speed (see the constants above)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif os_browser == browser_not_a_browser\n    {\n        game_set_speed(60, gamespeed_fps);\n    }\n    else\n    {\n        game_set_speed(30, gamespeed_fps);\n    }\n```\nThe above code checks to see if the game is running in a browser and sets the game speed accordingly as an FPS value.\n",
      "description": "This function can be used to set the game speed. You can set this in one of two ways - as either game frames per second (FPS) or as microseconds per game frame (MPF) - using one of the following two constants:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_set_speed.htm"
    },
    "gamepad_axis_count": {
      "name": "gamepad_axis_count",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\naxis = gamepad_axis_count(0))\n```\nThe above code stores the number of axes available for the gamepad connected to device \"slot\" 0 in the variable \"axis\".\n",
      "description": "This function will return the number of \"axis\" controls on the device being checked. These controls are the analogue direction \"thumbsticks\" on most controllers.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_count.htm"
    },
    "gamepad_axis_value": {
      "name": "gamepad_axis_value",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "axisIndex",
          "description": "The axis index to check (see the  [constants list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm))."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar haxis = gamepad_axis_value(0, gp_axislh); var vaxis = gamepad_axis_value(0, gp_axislv); direction = point_direction(0, 0, haxis, vaxis); speed = point_distance(0 ,0, haxis, vaxis) * 5;\n```\nThe above code sets the speed and direction of the instance based on the returned values of the left analog controller of the gamepad plugged into device \"slot\" 0.\n",
      "description": "You can use this function to get the value of the different axes from a given gamepad slot. You supply the gamepad slot index to check, along with either an axis index constant (as listed  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm)), or an integer value between\n    `0` and  [gamepad_axis_count()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_count.htm)`-1`. The returned value will be between `-1` and `1` for each of the available horizontal and vertical axes.",
      "returns": "real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_value.htm"
    },
    "gamepad_button_check": {
      "name": "gamepad_button_check",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "button",
          "description": "Which gamepad button  [constant](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm) to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check(0, gp_face1)\n    {\n        if canshoot = true\n        {\n            audio_play_sound(snd_Shoot, 0, false);\n            instance_create_layer(x, y, \"Bullets\", obj_Bullet)\n            canshoot = false;\n            alarm[0] = room_speed / 2;\n        }\n    }\n```\nThe above code will detect whether the bottom button of the top face (the \"X\" on a ps3 controller) is being held down and if so, it will shoot a \"bullet\" instance and set an alarm.\n",
      "description": "This function will return `true` or `false` depending on whether the given gamepad button is detected as being held down or not. If you are checking an analogue button, then the check will take into consideration the  [threshold setting](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_button_threshold.htm) and only return true while the raw input value is over the given threshold (you can get this raw value using the function  [gamepad_button_value()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_value.htm)).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm"
    },
    "gamepad_button_check_pressed": {
      "name": "gamepad_button_check_pressed",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "button",
          "description": "Which gamepad button  [constant](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm) to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check_pressed(0, gp_start)\n    {\n        audio_play_sound(snd_Start, 0, false);\n        room_goto(rm_Level_1);\n    }\n```\nThe above code will detect whether the \"start\" button of the gamepad connected to device \"slot\" 0 has been pressed or not and change room if it has.\n",
      "description": "This function will return `true` or `false` depending on whether the given gamepad button is detected as having been pressed or not. Note that this function will only trigger *once* for the button the first time it is pressed. For it to trigger again the button must first be released and then re-pressed. If you need to check a continuous press of the button you should be using the function `gamepad_button_check()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check_pressed.htm"
    },
    "gamepad_button_check_released": {
      "name": "gamepad_button_check_released",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "button",
          "description": "Which gamepad button  [constant](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm) to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check_released(0, gp_select)\n    {\n        audio_play_sound(snd_Button, 0, false);\n        global.Pause = !global.Pause;\n    }\n```\nThe above code will detect whether the \"select\" button of the gamepad connected to device \"slot\" 0 has been pressed or not and toggle the global \"Pause\" variable.\n",
      "description": "This function will return `true` or `false` depending on whether the given gamepad button is detected as having been released or not. Note that this function will only trigger *once* for the button the moment it has been released. For it to trigger again the button must first be pressed and then released once more. If you are checking an analogue button, then the check will take into consideration the  [threshold setting](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_button_threshold.htm) and only return true when the raw input value goes under the given threshold (you can get this raw value using the function  [gamepad_button_value()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_value.htm)).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check_released.htm"
    },
    "gamepad_button_count": {
      "name": "gamepad_button_count",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nb_num = gamepad_button_count(0);\n```\nThe above code will return the number of buttons available on the gamepad plugged into device \"slot\" 0 and store the value in the variable \"b_num\".\n",
      "description": "This function will return the *total* number of buttons available for the gamepad connected to the given device \"slot\".",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_count.htm"
    },
    "gamepad_button_value": {
      "name": "gamepad_button_value",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "button",
          "description": "Which gamepad button  [constant](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm) to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nspeed = gamepad_button_value(0, gp_shoulderrb) * 4;\n```\nThe above code uses the analogue trigger value from the gamepad plugged into device \"slot\" 0 to set the speed of the instance.\n",
      "description": "With this function you can get the current value of an analogue button, from 0 to 1, where 0 is no pressure and 1 is full pressure. You supply the gamepad slot index to check, along with either a button constant (as listed  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm)),\n    or an integer value between 0 and `gamepad_button_count()` -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_value.htm"
    },
    "gamepad_get_axis_deadzone": {
      "name": "gamepad_get_axis_deadzone",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gamepad_get_axis_deadzone(global.PadId) != 0.5\n    {\n        gamepad_set_axis_deadzone(global.PadId, 0.5);\n    }\n```\nThe above code checks the analogue axis threshold of the gamepad connected to the device \"slot\" stored in the global variable and if it is not the default value of 0.5, it is set to that value.\n",
      "description": "This function can be used to get the \"dead zone\" value of the joystick axis. You specify the device slot to get, and the function will return a value between 0 to 1, where value reflects the threshold under which the joystick axis is considered to be at 0.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_axis_deadzone.htm"
    },
    "gamepad_get_button_threshold": {
      "name": "gamepad_get_button_threshold",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gamepad_get_button_threshold(0) != 0.5\n    {\n        gamepad_set_button_threshold(0, 0.5);\n    }\n```\nThe above code checks the analogue button threshold of the gamepad connected to device \"slot\" 0 and if it is not the default value of 0.5, it is set to that value.\n",
      "description": "This function can be used to detect the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being \"pressed\" for games that require them to act as a digital button.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_button_threshold.htm"
    },
    "gamepad_get_description": {
      "name": "gamepad_get_description",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad \"slot\" to get the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar gp_num = gamepad_get_device_count();\n    for (var i = 0; i < gp_num; i++;)\n    {\n        if gamepad_is_connected(i)\n        {\n            draw_text(32, 32 + (i * 32), gamepad_get_description(i));\n        }\n        else\n        {\n            draw_text(32, 32 + (i * 32), \"No Gamepad Connected\");\n        }\n    }\n```\nThe above code will loop through all the gamepad slots to check for connected devices and then draw some text to the screen based on whether a gamepad is connected to the slot or not.\n",
      "description": "This function will return a string with the description of the given gamepad, for example, a PS3 controller may return a string similar to \"PLAYSTATION(R)3 Controller\", or an XBox360 controller could return \"Xbox 360 Controller (XInput STANDARD GAMEPAD)\". This string is hardware dependant and the returned value will depend on the gamepad plugged into the device \"slot\" that is being checked.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_description.htm"
    },
    "gamepad_get_device_count": {
      "name": "gamepad_get_device_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar gp_num = gamepad_get_device_count();\n    for (var i = 0; i < gp_num; i++;)\n    {\n        if gamepad_is_connected(i)\n        {\n            global.gp[i] = true;\n        }\n        else\n        {\n            global.gp[i] = false;\n        }\n    }\n```\nThe above code loops through the available game pads (or gamepad slots) and then checks each one for a connected gamepad. the returned value is then used to set a global array to `true` or `false` for use in future checks.\n",
      "description": "This function will tell you one of two things. Either the number of game pads connected, *or* the number of available \"slots\" for game pads to be connected to. The actual return value will depend on the platform and the internal configuration of that platform and as such this function should be used in conjunction with the function `gamepad_is_connected()` to make sure of the exact number of pads connected at any time.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_device_count.htm"
    },
    "gamepad_get_guid": {
      "name": "gamepad_get_guid",
      "parameters": [
        {
          "parameter": "index",
          "description": "Which gamepad \"slot\" index to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _guid = gamepad_get_guid(global.PadIndex);\n    var _desc = gamepad_get_description(global.PadIndex);\n    global.GamepadID = _guid + \",\" + _desc;\n```\nThe above code gets the GUID and name description strings, then concatenates them and stores the final string in a global variable for future reference.\n",
      "description": "With this function you can retrieve the GUID for the gamepad connected to the given slot index. You supply the gamepad slot to check (from 0 - 11), and the function will return one of the following strings:",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_guid.htm"
    },
    "gamepad_get_mapping": {
      "name": "gamepad_get_mapping",
      "parameters": [
        {
          "parameter": "index",
          "description": "Which gamepad index \"slot\" to get the mapping from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _gpMap = gamepad_get_mapping(global.PadIndex); show_debug_message(\"Gamepad Mapping = \" + _gpMap);\n```\nThe above code get the map string for the given gamepad slot, and then output it to the console for debugging.\n",
      "description": "This function can be used to retrieve the mapping string for the gamepad. This string will be either:",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_mapping.htm"
    },
    "gamepad_get_option": {
      "name": "gamepad_get_option",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "option_name",
          "description": "The name of the option to get the value from (a string, see the table above)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < 12; ++i;)\n    {\n        if gamepad_is_connected(i) && gamepad_get_description(i) == \"tvOS Siri Remote\"\n        {\n            if gamepad_get_option(i, \"allow_rotation\") == false\n            {\n                gamepad_set_option(i, \"allow_rotation\", true);\n            }\n        }\n    }\n```\nThe above code loops through all the gamepad slots and checks for the \"Siri Remote\" on the tvOS platform. If one is detected, it then sets the remote to allow input rotation.\n",
      "description": "This function can be used to retrieve the given option value. You supply the gamepad \"slot\" to check, as well as the option string and the function will return the associated value. The available option string will depend on the platform that the project is being run on, as listed below:",
      "returns": "Int, Bool, Real, String, N/A (depends on platform)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_get_option.htm"
    },
    "gamepad_hat_count": {
      "name": "gamepad_hat_count",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nh_num = gamepad_hat_count(4);\n```\nThe above code will return the number of hats available on the gamepad plugged into device \"slot\" 4 and store the value in the variable \"h_num\".\n",
      "description": "This function will return the *total* number of hats available for the gamepad connected to the given device \"slot\". Hats generally refer to up/down/left/right buttons, and note that on the Windows target, hats are only available on DirectInput\n    controllers (so, from slot 4 upwards).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_hat_count.htm"
    },
    "gamepad_hat_value": {
      "name": "gamepad_hat_value",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "hatindex",
          "description": "Which gamepad hat (or hats) to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _dir = gamepad_hat_value(global.PadIndex, 0);\n    switch (_dir)\n    {\n        case 1: y -= 3; break;\n        case 2: x += 3; break;\n        case 3: y -= 3; x += 3; break;\n        case 4: x -= 3; break;\n        case 6: y += 3; x += 3; break;\n        case 8: y += 3; break;\n        case 9: y -= 3; x -= 3; break;\n        case 12: y += 3; x -= 3; break;\n    }\n```\nThe above code stores the state of the hat \"0\" in a local variable, then checks to see what the return value is and acts accordingly.\n",
      "description": "With this function you can get the current value of a gamepad \"hat\". Each hat value is a bit-mask for the different directions where:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_hat_value.htm"
    },
    "gamepad_is_connected": {
      "name": "gamepad_is_connected",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad \"slot\" to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar gp_num = gamepad_get_device_count();\n    for (var i = 0; i < gp_num; i++;)\n    {\n        if gamepad_is_connected(i) global.gp[i] = true else global.gp[i] = false;\n    }\n```\nThe above code loops through the available game pads (or gamepad slots) and then checks each one for a connected gamepad. the returned value is then used to set a global array to `true` or `false` for use in future checks.\n",
      "description": "This function will return whether a gamepad is connected to the given \"slot\" (returns `true`) or not (returns `false`). You would normally use this function in conjunction with the `gamepad_get_device_count()` function to get the correct number of available game pads and/or gamepad \"slots\". Note that there may be a slight delay between the user connecting the gamepad and GameMaker Studio 2 detecting it as being connected (this is especially the case when dealing with bluetooth connected controllers).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_is_connected.htm"
    },
    "gamepad_is_supported": {
      "name": "gamepad_is_supported",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.GP = gamepad_is_supported();\n```\nThe above code checks to see if a gamepad is supported and stores the return value in a global variable for future checks.\n",
      "description": "With this function you can find out whether the target platform supports game pads (returns `true`) or not (returns `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_is_supported.htm"
    },
    "gamepad_remove_mapping": {
      "name": "gamepad_remove_mapping",
      "parameters": [
        {
          "parameter": "index",
          "description": "Which gamepad index \"slot\" to remove the mapping from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif remap == true\n    {\n        gamepad_remove_mapping(global.PadIndex);\n    }\n```\nThe above code will remove the mapping from the given gamepad index slot based on the value of a variable.\n",
      "description": "This function can be used to remove the current device mapping from the given gamepad slot index. Once called, the slot index will need to be remapped using the `gamepad_test_mapping()` function if you want to be able to be able to use the gamepad constants to detect input correctly (direct input can always be retrieved using the  [gamepad_axis](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_count.htm)`/` [button](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_count.htm)`/` [hat_count()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_hat_count.htm) and  [gamepad_axis](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_axis_value.htm)`/` [button](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_value.htm)`/` [hat_value()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_hat_value.htm) functions together).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_remove_mapping.htm"
    },
    "gamepad_set_axis_deadzone": {
      "name": "gamepad_set_axis_deadzone",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "deadzone",
          "description": "The dead zone value from 0 to 1."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif gamepad_is_connected(0) gamepad_set_axis_deadzone(0, 0.05); if gamepad_is_connected(1) gamepad_set_axis_deadzone(1, 0.05); if gamepad_is_connected(2) gamepad_set_axis_deadzone(2, 0.05); if gamepad_is_connected(3) gamepad_set_axis_deadzone(3,\n    0.05);\n```\nThe above code will set the dead zone of the joystick axis on any of 4 connected devices to 0.05.\n",
      "description": "This function can be used to set the \"dead zone\" of the joystick axis. You specify the device slot to set, and then set a value from 0 to 1 and if the input amount is lower than the given value, the joystick axis is considered to be at 0.\n    Note that this is a global setting that will affect *all* axis of all joysticks connected to the device slot specified. ",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_axis_deadzone.htm"
    },
    "gamepad_set_button_threshold": {
      "name": "gamepad_set_button_threshold",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "threshold",
          "description": "The new threshold value (from 0 - 1, default 0.5)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif gamepad_get_button_threshold(0) != 0.5\n    {\n        gamepad_set_button_threshold(0, 0.5);\n    }\n```\nThe above code checks the analogue button threshold of the gamepad connected to device \"slot\" 0 and if it is not the default value of 0.5, it is set to that value.\n",
      "description": "This function can be used to set the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being \"pressed\" for games that require them to act as a digital button. Note that this function will affect the  [check](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm),  [pressed](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check_pressed.htm) and  [released](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check_released.htm) states for analogue buttons, but will *not* affect the value returned by the function gamepad_button_check(), which will always return the raw value for the button.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_button_threshold.htm"
    },
    "gamepad_set_colour": {
      "name": "gamepad_set_colour",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to set."
        },
        {
          "parameter": "colour",
          "description": "The colour to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif health < 10\n    {\n        gamepad_set_colour(0, c_red);\n    }\n```\nThe above code will set the PlayStation controller LEDs to red if the `health` variable falls below 10.\n",
      "description": "This function can be used to set the colour of the LEDs within a PlayStation controller. You specify the device slot to set, and then give a colour, which can be any of the  [colour constants](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm) or a colour value created using the specific colour functions or a HEX value(like $FFFFFFF).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_colour.htm"
    },
    "gamepad_set_option": {
      "name": "gamepad_set_option",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to set."
        },
        {
          "parameter": "option_name",
          "description": "The name of the option to set (a string, see the table above)"
        },
        {
          "parameter": "value",
          "description": "The value to set the option to (can be boolean, real, integer or string - see the table above)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < 12; ++i;)\n    {\n        if gamepad_is_connected(i) && gamepad_get_description(i) == \"tvOS Siri Remote\"\n        {\n            if gamepad_get_option(i, \"allow_rotation\") == false\n            {\n                gamepad_set_option(i, \"allow_rotation\", true);\n            }\n        }\n    }\n```\nThe above code loops through all the gamepad slots and checks for the \"Siri Remote\" on the tvOS platform. If one is detected, it then sets the remote to allow input rotation.\n",
      "description": "This function can be used to set any of the available gamepad options. You supply the gamepad \"slot\" to set the option on, as well as the option string to set and the value to use. The available option string will depend on the platform that the project is being run on, as listed below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_option.htm"
    },
    "gamepad_set_vibration": {
      "name": "gamepad_set_vibration",
      "parameters": [
        {
          "parameter": "device",
          "description": "Which gamepad device \"slot\" to check."
        },
        {
          "parameter": "left_motor",
          "description": "The amount of vibration from the left motor from 0 to 1."
        },
        {
          "parameter": "right_motor",
          "description": "The amount of vibration from the right motor from 0 to 1."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif lives = 0\n    {\n        gamepad_set_vibration(0, 1, 1);\n        alarm[0] = room_speed / 2;\n    }\n```\nThe above code would be used (for example) in a collision event to make the gamepad plugged into \"slot\" 0 vibrate for half a second, with the alarm that is set being used to switch it off again once that time has passed.\n",
      "description": "With this function you can set the vibration of the gamepad motors, with either motor using a value from 0 (no vibration) to 1 (full vibration). Note that there is no time limit on this function, so you will need to use a variable or an alarm to switch off the vibration (set motors to 0) after a given time has passed otherwise the gamepad will continue to vibrate indefinitely.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_set_vibration.htm"
    },
    "gamepad_test_mapping": {
      "name": "gamepad_test_mapping",
      "parameters": [
        {
          "parameter": "index",
          "description": "Which gamepad index \"slot\" to set."
        },
        {
          "parameter": "colour",
          "description": "The map string to use (see the description for more information)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar mapping = gamepad_get_guid(global.padIndex) + \",\" + gamepad_get_description(global.padIndex);\n    var len = array_length(global.PadInstances);\n    for (i = 0; i < len; i += 2)\n    {\n        var left = global.PadInstances[i];\n        var right = global.PadInstances[i+1];\n        mapping += \",\" + left.sdlLabel + \":\" + right.binding;\n    }\n    gamepad_test_mapping(global.padIndex, mapping);\n```\nThe above code will loop through a number of instances and use the values of different variables that they contain to create a mapping string, which is then set for use on the gamepad in the given slot index.\n",
      "description": "This function can be used to set the gamepad mapping on those targets that permit it. You supply the \"slot\" index for the gamepad to set, and then the map string, which should have been created using the SDL format with the following fields:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_test_mapping.htm"
    },
    "gc_collect": {
      "name": "gc_collect",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (global.debug == true && keyboard_check_pressed(vk_f1))\n    {\n        gc_collect();\n    }\n```\nThe above code checks a global variable and a key being pressed and if those are `true` then garbage collection is triggered for the end of the frame (step).\n",
      "description": "With this function you can trigger the garbage collector, forcing it to run at the end of the current frame (step). It is worth noting that the garbage collector does *not *need to be active for this to work. Calling this function after disabling the garbage collector (using the function  [gc_enable()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_enable.htm)) will enable the garbage collector for one frame in which all objects that have been flagged for collection will be removed from memory before the garbage collector is disabled again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_collect.htm"
    },
    "gc_enable": {
      "name": "gc_enable",
      "parameters": [
        {
          "parameter": "enable",
          "description": "enable (`true`) or disable (`false`) the garbage collector."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (global.debug == true)\n    {\n        gc_enable(false);\n    }\n```\nThe above code disables garbage collection if the given global variable is `true`.\n",
      "description": "With this function you can enable or disable the garbage collector. Calling the function with `true` as the argument enables it and using `false` disables it (not recommended). It is enabled by default.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_enable.htm"
    },
    "gc_get_stats": {
      "name": "gc_get_stats",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (global.debug == true)\n    {\n        var _s = gc_get_stats();\n        var _t = _s.traversal_time;\n        var _c = _s.collection_time;\n        show_debug_message(\"Traversal time = \" + string(_t))\n        show_debug_message(\"Collection time = \" + string(_c))\n    }\n```\nThe above code checks a global variable and if it is `true` it gets information from the garabge collector and outputs it to the console as debug messages.\n",
      "description": "With this function you can retrieve information about the current state of the garbage collector. The function will return a  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) which will have the following member variables (note that \"objects\" here refers to anything that can be garbage collected and *not* general object instances as defined in the Asset Browser):",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_get_stats.htm"
    },
    "gc_get_target_frame_time": {
      "name": "gc_get_target_frame_time",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (gc_get_target_frame_time() != 50)\n    {\n        gc_target_frame_time(50);\n    }\n```\nThe above code checks the current frame time target for the garbage collector and if it is not 50 microseconds then it is set to this value.\n",
      "description": "With this function you can retrieve the current target frame value for the garbage collector. The value returned is in microseconds (where 1,000,000 microseconds equals one second) and the default target frame time is 100 microseconds. If you wish to change this value then you should use the function  [gc_target_frame_time()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_target_frame_time.htm). ",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_get_target_frame_time.htm"
    },
    "gc_is_enabled": {
      "name": "gc_is_enabled",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (!gc_is_enabled())\n    {\n        gc_enable(true);\n    }\n```\nThe above code checks to see if the garbage collector is enabled and if it isn't it enables it.\n",
      "description": "With this function you can check to see if the garbage collector is enabled or not. The function will return `true` if it is enabled or `false` otherwise.",
      "returns": "Bool",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_is_enabled.htm"
    },
    "gc_target_frame_time": {
      "name": "gc_target_frame_time",
      "parameters": [
        {
          "parameter": "time",
          "description": "The target time - in microseconds -  that the garbage collector should work each frame"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (gc_get_target_frame_time() != 50)\n    {\n        gc_target_frame_time(50);\n    }\n```\nThe above code checks the current frame time target for the garbage collector and if it is not 50 microseconds then it is set to this value.\n",
      "description": "With this function you can indicate to the garbage collector that it shoulde aim to spend no more than the time specified running each frame. The function takes a time value specified in microseconds (where 1,000,000 microseconds equals one second) and the default target frame time is 100 microseconds.",
      "returns": "N/A (undefined)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/gc_target_frame_time.htm"
    },
    "gesture_double_tap_distance": {
      "name": "gesture_double_tap_distance",
      "parameters": [
        {
          "parameter": "distance",
          "description": "The distance (in inches) to set for double tap gesture event detection."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gesture_get_double_tap_distance() != 0.1\n    {\n        gesture_get_double_tap_distance(0.1);\n    }\n```\nThe above code checks to see if double tap distance for gestures is set to 0.1 inches and if it is not it sets it to that value.\n",
      "description": "This function is used to set the distance within which you have to touch/click the screen again after a single tap in order to trigger a  [Double Tap Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm). The distance is measured in inches and has a default value of 0.1.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_double_tap_distance.htm"
    },
    "gesture_double_tap_time": {
      "name": "gesture_double_tap_time",
      "parameters": [
        {
          "parameter": "time",
          "description": "The time (in seconds) to set for double tap gesture event detection."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gesture_get_double_tap_time() != 0.16\n    {\n        gesture_get_double_tap_time(0.16);\n    }\n```\nThe above code checks to see if double tap time for gestures is set to 0.16 seconds and if it is not it sets it to that value.\n",
      "description": "This function is used to set the time it takes between two touches/clicks to trigger a  [Double Tap Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event. The time is measured in seconds and has a default value of 0.16.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_double_tap_time.htm"
    },
    "gesture_drag_distance": {
      "name": "gesture_drag_distance",
      "parameters": [
        {
          "parameter": "distance",
          "description": "The distance (in inches) to set for drag gesture event detection."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gesture_get_drag_distance() != 0.1\n    {\n        gesture_drag_distance(0.1);\n    }\n```\nThe above code checks to see if the drag distance for gestures is set to 0.1 inches and if it is not it sets it to that value.\n",
      "description": "This function is used to set the distance it takes for a  [Dragging Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event to be triggered by the movement of a touch or click. The distance is measured in inches and has a default value of 0.1.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_drag_distance.htm"
    },
    "gesture_drag_time": {
      "name": "gesture_drag_time",
      "parameters": [
        {
          "parameter": "time",
          "description": "The time (in seconds) to set for drag gesture event detection."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gesture_get_drag_time() != 0.16\n    {\n        gesture_drag_time(0.16);\n    }\n```\nThe above code checks to see if drag time for gestures is set to 0.16 seconds and if it is not it sets it to that value.\n",
      "description": "This function is used to set the time it takes for a  [Drag Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event to be triggered by a touch or click. This time will also affect how the **Tap Event** is triggered as a touch/click and release before this time is up will be considered a Tap. The time is measured in seconds and has a default value of 0.16.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_drag_time.htm"
    },
    "gesture_flick_speed": {
      "name": "gesture_flick_speed",
      "parameters": [
        {
          "parameter": "speed",
          "description": "The speed (in inches per second) to set for flick gesture event detection."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gesture_get_flick_speed() != 2\n    {\n        gesture_flick_speed(2);\n    }\n```\nThe above code checks to see if the flick speed for gestures is set to 2 inches per second and if it is not it sets it to that value.\n",
      "description": "This function is used to set the speed required for a  [Flick Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event to be triggered when a touch or click is released. The speed is measured in inches per second and has a default value of 2.0.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_flick_speed.htm"
    },
    "gesture_get_double_tap_distance": {
      "name": "gesture_get_double_tap_distance",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_double_tap_distance() != 0.1\n    {\n        gesture_double_tap_distance(0.1);\n    }\n```\nThe above code checks to see if double tap distance for gestures is set to 0.1 inches and if it is not it sets it to that value.\n",
      "description": "This function is used to get the distance within which you have to touch/click the screen again after a single tap in order to trigger a  [Double Tap Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm). The distance is measured in inches and has a default value of 0.1.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_double_tap_distance.htm"
    },
    "gesture_get_double_tap_time": {
      "name": "gesture_get_double_tap_time",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_double_tap_time() != 0.16\n    {\n        gesture_get_double_tap_time(0.16);\n    }\n```\nThe above code checks to see if double tap time for gestures is set to 0.16 seconds and if it is not it sets it to that value.\n",
      "description": "This function is used to get the time it takes between two touches/clicks to trigger a  [Double Tap Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event. The time is measured in seconds and has a default value of 0.16.",
      "returns": "Real (seconds)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_double_tap_time.htm"
    },
    "gesture_get_drag_distance": {
      "name": "gesture_get_drag_distance",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_drag_distance() != 0.1\n    {\n        gesture_drag_distance(0.1);\n    }\n```\nThe above code checks to see if the drag distance for gestures is set to 0.1 inches and if it is not it sets it to that value.\n",
      "description": "This function is used to get the distance it takes for a  [Dragging Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event to be triggered by the movement of a touch or click. The distance is measured in inches and has a default value of 0.1.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_drag_distance.htm"
    },
    "gesture_get_drag_time": {
      "name": "gesture_get_drag_time",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_drag_time() != 0.16\n    {\n        gesture_drag_time(0.16);\n    }\n```\nThe above code checks to see if the drag time for gestures is set to 0.16 seconds and if it is not it sets it to that value.\n",
      "description": "This function is used to get the time it takes for a  [Drag Start Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event to be triggered by a touch or click. This time will also affect how the **Tap Event** is triggered as a touch/click and release before this time is up will be considered a Tap. The time is measured in seconds and has a default value of 0.16.",
      "returns": "Real (time in seconds)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_drag_time.htm"
    },
    "gesture_get_flick_speed": {
      "name": "gesture_get_flick_speed",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_flick_speed() != 2\n    {\n        gesture_flick_speed(2);\n    }\n```\nThe above code checks to see if the flick speed for gestures is set to 2 inches per second and if it is not it sets it to that value.\n",
      "description": "This function is used to get the speed required for a  [Flick Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) event to be triggered when a touch or click is released. The speed is measured in inches per second and has a default value of 2.0.",
      "returns": "Real (inches per second)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_flick_speed.htm"
    },
    "gesture_get_pinch_angle_away": {
      "name": "gesture_get_pinch_angle_away",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_pinch_angle_away() != 45\n    {\n        gesture_pinch_angle_away(45);\n    }\n```\nThe above code checks to see if the pinch out angle for gestures is set to 45° and if it is not it sets it to that value\n",
      "description": "This function is used to get the angle within which a touch must be moving away from another touch before a  [Pinch Out Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) may potentially be started. The angle is measured in degrees and has a default value of 45°.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_pinch_angle_away.htm"
    },
    "gesture_get_pinch_angle_towards": {
      "name": "gesture_get_pinch_angle_towards",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_pinch_angle_towards() != 45\n    {\n        gesture_pinch_angle_towards(45);\n    }\n```\nThe above code checks to see if the pinch in angle for gestures is set to 45° and if it is not it sets it to that value.\n",
      "description": "This function is used to get the angle within which a touch must be moving towards another touch before a  [Pinch In Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) may potentially be started. The angle is measured in degrees and has a default value of 45°.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_pinch_angle_towards.htm"
    },
    "gesture_get_pinch_distance": {
      "name": "gesture_get_pinch_distance",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_pinch_distance() != 0.1\n    {\n        gesture_pinch_distance(0.1);\n    }\n```\nThe above code checks to see if the pinch distance for gestures is set to 0.1 inches and if it is not it sets it to that value.\n",
      "description": "This function is used to get the distance within which you have to touch/click the screen and move with two fingers before you trigger a  [Pinch Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm). The distance is measured in inches and has a default value of 0.1.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_pinch_distance.htm"
    },
    "gesture_get_rotate_time": {
      "name": "gesture_get_rotate_time",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_rotate_time() != 0.1\n    {\n        gesture_rotate_time(0.1);\n    }\n```\nThe above code checks to see if the rotate time for gestures is set to 0.1 seconds and if it is not it sets it to that value.\n",
      "description": "This function is used to get the time within which a pair of touches must be rotating in a consistent direction for a  [Rotate Start Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) to be triggered. The time is measured in seconds and has a default value of 0.16s.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_rotate_time.htm"
    },
    "gesture_get_tap_count": {
      "name": "gesture_get_tap_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !gesture_get_tap_count()\n    {\n        getsure_tap_count(true);\n    }\n```\nThe above code checks to see if tap counting is enabled and if it is not then it is switched on.\n",
      "description": "This function is used to check whether tap counting is enabled or disabled. The function will return `true` if it is enabled, and `false` otherwise and you can enable or disable tap counting using the function `gesture_tap_count()`. When enabled, each tap event will have an additional \"tapcount\" DS map entry which will have registered the number of taps, and when enabled it means that *all* tap events will be triggered, ie: two taps will trigger both the single tap event and the double tap event, with the single tap event tap count being 1 and the double tap event tap count being 2. The tap count value will be reset to 0 after the time set for a double-tap detection has passed (see the function `gesture_double_tap_time()`). If tap counting is disabled, then the initial tap won't be registered until the double-tap time has passed and no second tap has been detected. Note that this is **enabled** by default.",
      "returns": "Bool",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_get_tap_count.htm"
    },
    "gesture_pinch_angle_away": {
      "name": "gesture_pinch_angle_away",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_pinch_angle_away() != 45\n    {\n        gesture_pinch_angle_away(45);\n    }\n```\nThe above code checks to see if the pinch out angle for gestures is set to 45° and if it is not it sets it to that value\n",
      "description": "This function is used to set the angle within which a touch must be moving away from another touch before a  [Pinch Out Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) may potentially be started. The angle is measured in degrees and has a default value of 45°.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_angle_away.htm"
    },
    "gesture_pinch_angle_towards": {
      "name": "gesture_pinch_angle_towards",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_pinch_angle_towards() != 45\n    {\n        gesture_pinch_angle_towards(45);\n    }\n```\nThe above code checks to see if the pinch in angle for gestures is set to 45° and if it is not it sets it to that value.\n",
      "description": "This function is used to set the angle within which a touch must be moving towards another touch before a  [Pinch In Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) may potentially be started. The angle is measured in degrees and has a default value of 45°.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_angle_towards.htm"
    },
    "gesture_pinch_distance": {
      "name": "gesture_pinch_distance",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_pinch_distance() != 0.1\n    {\n        gesture_pinch_distance(0.1);\n    }\n```\nThe above code checks to see if the pinch distance for gestures is set to 0.1 inches and if it is not it sets it to that value.\n",
      "description": "This function is used to set the distance within which you have to touch/click the screen and move with two fingers before you trigger a  [Pinch Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm). The distance is measured in inches and has a default value of 0.1.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_pinch_distance.htm"
    },
    "gesture_rotate_angle": {
      "name": "gesture_rotate_angle",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_rotate_angle() != 5\n    {\n        gesture_rotate_angle(5);\n    }\n```\nThe above code checks to see if rotation angle for gestures is set to 5° and if it is not it sets it to that value.\n",
      "description": "This function is used to set the angle which a pair of touches must exceed in order to trigger a  [Rotate Start Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm). The angle is measured in degrees and has a default value of 5°.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_rotate_angle.htm"
    },
    "gesture_rotate_time": {
      "name": "gesture_rotate_time",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gesture_get_rotate_time() != 0.1\n    {\n        gesture_rotate_time(0.1);\n    }\n```\nThe above code checks to see if the rotate time for gestures is set to 0.1 seconds and if it is not it sets it to that value.\n",
      "description": "This function is used to set the time within which a pair of touches must be rotating in a consistent direction for a  [Rotate Start Gesture](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) to be triggered. The time is measured in seconds and has a default value of 0.16s.",
      "returns": "Real (inches)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_rotate_time.htm"
    },
    "gesture_tap_count": {
      "name": "gesture_tap_count",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable (set to `true`) or disable (set to `false`) tap counting."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !gesture_get_tap_count()\n    {\n        getsure_tap_count(true);\n    }\n```\nThe above code checks to see if tap counting is enabled and if it is not then it is switched on.\n",
      "description": "This function is used to set whether tap counting is enabled or disabled. When set to `true` tap counting is enabled, and when set to `false` it is disabled, although you can check which state it is in using the function `gesture_get_tap_count()`. When enabled, each tap event will have an additional \"tapcount\" DS map entry which will have registered the number of taps, and when enabled it means that *all* tap events will be triggered, ie: two taps will trigger both the single tap event and the double tap event, with the single tap event tap count being 1 and the double tap event tap count being 2. The tap count value will be reset to 0 after the time set for a double-tap detection has passed (see the function `gesture_double_tap_time()`). If tap counting is disabled, then the initial tap won't be registered until the double-tap time has passed and no second tap has been detected. Note that this is **enabled** by default.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/gesture_tap_count.htm"
    },
    "get_integer": {
      "name": "get_integer",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to show in the pop-up message."
        },
        {
          "parameter": "def",
          "description": "The default value in the text box."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.level = get_integer(\"Level to test?\", 1);\n```\nThe above code will display a message prompting the user to select a level for testing. The return value will be stored in the global variable \"global.level\".\n",
      "description": "This creates a pop-up window showing a custom message, with a button labelled \"Ok\", and prompts the user to input an integer value. The function will return the typed in integer, or the default value if nothing has been entered.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/get_integer.htm"
    },
    "get_integer_async": {
      "name": "get_integer_async",
      "parameters": [
        {
          "parameter": "String",
          "description": "The message to show in the dialog."
        },
        {
          "parameter": "default",
          "description": "The default value."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "The **left mouse press event** (for example) of the object that is showing the message would have the following code:\n```\nmsg = get_integer_async(\"How old are you?\", 0);\n```\nThe above will show a message requesting that the user input a string and press \"Okay\". The function id is stored in the variable \"msg\" and will be used in the asynchronous Dialogs event as shown below:\n```\nvar i_d = ds_map_find_value(async_load, \"id\");\n    if i_d == msg\n    {\n        if ds_map_find_value(async_load, \"status\")\n        {\n            global.Age = ds_map_find_value(async_load, \"value\");\n        }\n    }\n```\nThe above code checks the \"`id`\" key of the returned `DS Map` against the value stored in the variable \"msg\". If they are the same, it then checks to see if \"Okay\" was pressed (rather than the window being closed/cancelled) and if it returns `true` it then sets a global variable from the integer returned.\n",
      "description": "This function opens a window and displays message as well as a space for the user to input a value (which will contain the supplied default value to start with). This is an asynchronous function, and as such GameMaker Studio 2 does *not* block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the \"Okay\" button, an asynchronous **Dialog** event is triggered which, for the duration of that event *only*, will have a DS map stored in the variable `async_load`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/get_integer_async.htm"
    },
    "get_login_async": {
      "name": "get_login_async",
      "parameters": [
        {
          "parameter": "username",
          "description": "The default user name"
        },
        {
          "parameter": "password",
          "description": "The default password"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "The **create event** (for example) of the object that is controlling the login of our user would have the following code:\n```\nini_open(\"Profile.ini\");\n    u = ini_read_string(\"User\",\"0\",\"\");\n    p = ini_read_string(\"User\",\"1\",\"\");\n    ini_close();\n    login = get_login_async(u,p);\n```\nThe above code opens an ini file (or creates one if it doesn't exist) and gets the name and password stored in that file. If they do not exist, then the default of an empty string (\"\") is returned. These values are then used in `get_login_async()` to ask the user for their username and password details, with the request index being stored in the variable \"login\". Note that while waiting for the user to give the necessary information the game and its events will continue to run as normal.\nNow that the asynchronous code has been fired off, we need to check for the return value in the  [asynchronous event for Dialogs](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm) in the following way:\n```\nif ds_map_find_value(async_load, \"id\") == login\n    {\n        u = ds_map_find_value(async_load, \"username\");\n        p = ds_map_find_value(async_load, \"password\");\n    }\n```\nThe above code checks the \"id\" key of the async_load DS map and if it holds the same value as that stored in the \"login\" variable, the map details are then read into the corresponding variables which you can then store or use to check against database values etc...\n",
      "description": "This function opens a window that asks the user to input a username and password. These arguments can be set as an empty string or you can store previously entered values to use if you wish. This is an asynchronous function, and as such GameMaker Studio 2 does *not* block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has input the details and pressed the \"Okay\" button, an asynchronous **User Interaction** event is triggered which, for the duration of that event *only*, will have a DS map stored in the variable `async_load`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/get_login_async.htm"
    },
    "get_open_filename": {
      "name": "get_open_filename",
      "parameters": [
        {
          "parameter": "filter",
          "description": "The file type filter and/or name."
        },
        {
          "parameter": "fname",
          "description": "The suggested filename to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar file;\n    file = get_open_filename(\"text file|*.txt\", \"\");\n    if file != \"\"\n    {\n        file_text_open_read(file);\n    }\n```\nThe above code will ask the user to select a text file for opening and then check the returned file name and path, and if it exists will open the file for reading.\n",
      "description": "This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form \"*name1|mask1|name2|mask2|...*\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"*bitmaps|*.bmp;*.wmf*\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (`bmp` and `png`). this function does **not** open the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/get_open_filename.htm"
    },
    "get_open_filename_ext": {
      "name": "get_open_filename_ext",
      "parameters": [
        {
          "parameter": "filter",
          "description": "The file type filter and/or name."
        },
        {
          "parameter": "fname",
          "description": "The suggested filename to use."
        },
        {
          "parameter": "directory",
          "description": "The directory to start the search from."
        },
        {
          "parameter": "caption",
          "description": "The caption for the window."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar file;\n    file = get_open_filename_ext(\"text file|*.txt\", \"\", working_directory, \"Open a saved level\");\n    if file != \"\"\n    {\n        file_text_open_read(file);\n    }\n```\nThe above code will ask the user to select a text file for opening from the `working_directory` and then check the returned file name and path, and if it exists will open the file for reading.\n",
      "description": "This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form \"*name1|mask1|name2|mask2|...*\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"*bitmaps|*.bmp;*.wmf*\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (`bmp` and `png`). this function does **not** open the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/get_open_filename_ext.htm"
    },
    "get_save_filename": {
      "name": "get_save_filename",
      "parameters": [
        {
          "parameter": "filter",
          "description": "The file type filter and/or name."
        },
        {
          "parameter": "fname",
          "description": "The suggested filename to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar file;\n    file = get_save_filename(\"screenshot|*.png\", \"\");\n    if file != \"\"\n    {\n        screen_save(file);\n    }\n```\nThe above code will ask the user to select an image file name file for saving then check the returned file name and path, and if it is not an empty string it takes a screen shot and saves it using the given name.\n",
      "description": "This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form \"*name1|mask1|name2|mask2|...*\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"*bitmaps|*.bmp;*.wmf*\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (`bmp` and `png`). this function does **not** save the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/get_save_filename.htm"
    },
    "get_save_filename_ext": {
      "name": "get_save_filename_ext",
      "parameters": [
        {
          "parameter": "filter",
          "description": "The file type filter and/or name."
        },
        {
          "parameter": "fname",
          "description": "The suggested filename to use."
        },
        {
          "parameter": "directory",
          "description": "The directory to start the search from."
        },
        {
          "parameter": "caption",
          "description": "The caption for the window."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar file;\n    file = get_save_filename_ext(\"screenshot|*.png\", \"\", working_directory, \"Save a level here\");\n    if file != \"\"\n    {\n        screen_save(file);\n    }\n```\nThe above code will ask the user to select an image file name file for saving in the working directory and then check the returned file name and path If it is not an empty string it takes a screen shot and saves it using the given name.\n",
      "description": "This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form \"*name1|mask1|name2|mask2|...*\", where the mask may contain the different options with a semicolon between them and you can also use a \"*\" to mean any string. For example: \"*bitmaps|*.bmp;*.wmf*\", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (`bmp` and `png`). this function does **not** save the file itself! It only returns a string with the full name and path of the file. If the user presses \"**Cancel**\" an empty string \"\" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/get_save_filename_ext.htm"
    },
    "get_string": {
      "name": "get_string",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to show in the pop-up message."
        },
        {
          "parameter": "def",
          "description": "The default string in the text box."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.test_name = get_string(\"Test highscore name:\", \"Anonymous\");\n```\nThe above code will prompt the user to give a name which will then be stored in the global variable \"test_name\". If nothing is entered and the user just presses \"Ok\" then the default value, \"Anonymous\", will be returned.\n",
      "description": "This creates a pop-up window showing a standard message, with a button labelled \"Ok\", that prompts the user to input a string. The function will return the input string, *or* the default value if nothing has been entered.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/get_string.htm"
    },
    "get_string_async": {
      "name": "get_string_async",
      "parameters": [
        {
          "parameter": "String",
          "description": "The message to show in the dialog."
        },
        {
          "parameter": "default",
          "description": "The default string."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": " \nThe **left mouse press event** (for example) of the object that is showing the message would have the following code:\n```\nmsg = get_string_async(\"What's your name?\",\"Anon\");\n```\nThe above will show a message requesting that the user input a string and press \"Okay\". The function id is stored in the variable \"msg\" and will be used in the asynchronous Dialogs event as shown below:\n```\nvar i_d = ds_map_find_value(async_load, \"id\");\n    if i_d == msg\n    {\n        if ds_map_find_value(async_load, \"status\")\n        {\n            if ds_map_find_value(async_load, \"result\") != \"\"\n            {\n                global.Name = ds_map_find_value(async_load, \"result\");\n            }\n        }\n    }\n```\nThe above code checks the \"id\" key of the returned `DS Map` against the value stored in the variable \"msg\". If they are the same, it then checks to see if \"Okay\" was pressed (rather than the window being closed/cancelled) and if it returns `true` it then checks the \"result\" of a string to make sure that no empty strings were returned before setting a global variable.\n",
      "description": "This function opens a window and displays message as well as a space for the user to input a string (which will contain the supplied default string to start with). This is an asynchronous function, and as such GameMaker Studio 2 does *not* block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the \"Okay\" button, an  [asynchronous Dialog event ](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm)is triggered which, for the duration of that event *only*, will have a DS map stored in the variable `async_load`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/get_string_async.htm"
    },
    "get_timer": {
      "name": "get_timer",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ntime = get_timer();\n```\nThis would store the timer value in the variable \"time\".\n",
      "description": "This function returns the time that your game has been running on the chosen platform in microseconds (there are 1 million microseconds per second).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/get_timer.htm"
    },
    "gif_add_surface": {
      "name": "gif_add_surface",
      "parameters": [
        {
          "parameter": "gif_index",
          "description": "The ID of gif to add the surface data to"
        },
        {
          "parameter": "surface",
          "description": "The ID of the surface to use as the added frame"
        },
        {
          "parameter": "delay_time",
          "description": "The delay time for the frame (in 100ths of a second)"
        },
        {
          "parameter": "[xoffset]",
          "description": "[**Optional**] The offset along the X axis of the surface to add from"
        },
        {
          "parameter": "[yoffset]",
          "description": "[**Optional**] The offset along the Y axis of the surface to add from"
        },
        {
          "parameter": "[quantization]",
          "description": "[**Optional**] The quantization amount from 0 to 3 (0 lowest quality, 3 highest quality, default is 2)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif save_gif == true\n    {\n        if count == 0\n        {\n            gif_image = gif_open(room_width, room_height);\n        }\n        else if count < 30\n        {\n            gif_add_surface(gif_image, application_surface, 6/100);\n        }\n        else\n        {\n            gif_save(gif_image, \"GameCapture.gif\");\n            count = 0;\n            save_gif = false;\n        }\n        count++;\n    }\n```\nThe above code will create a GIF image file with 30 frames taken from the application surface and then save it.\n",
      "description": "With this function you can save a frame to a GIF file from a surface. You supply the GIF file ID (as returned by the function `gif_open()`) and a surface ID (as returned by the function `surface_create()`), as well as a delay time between frames. The delay time is calculated in 1/100ths of a second, but note that once the GIF has been created, if you use it for promotional purposes for example, different browsers may interpret the frame delay slightly differently - see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/https://www.deviantart.com/humpy77/journal/Frame-Delay-Times-for-Animated-GIFs-214150546) for more details. You may (optionally) supply X and Y offset values for the surface being used to add to the GIF, in which case the part drawn to the GIF will begin from the offset and not the default (0,0) position, permitting you to select only a section of the surface to add. You can also supply a quantization value, which is an integer between 0 and 3, where 0 is full quantization and 3 is zero quantization (lower values will have a subsequent degradation in quality, but create a smaller GIF). Note that there isn't much difference between the default quality of 2, and the highest of 3, and using 3 will significantly slow down the creation of the GIF so care should be taken when using the maximum value.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/gif_add_surface.htm"
    },
    "gif_open": {
      "name": "gif_open",
      "parameters": [
        {
          "parameter": "width",
          "description": "The width of the gif to create"
        },
        {
          "parameter": "height",
          "description": "The height of the gif to create"
        },
        {
          "parameter": "[clear_colour]",
          "description": "[**Optional**] The colour (RGB) to clear the gif to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif save_gif == true\n    {\n        if count == 0\n        {\n            gif_image = gif_open(room_width, room_height);\n        }\n        else if count < 30\n        {\n            gif_add_surface(gif_image, application_surface, 6/100);\n        }\n        else\n        {\n            gif_save(gif_image, \"GameCapture.gif\");\n            count = 0;\n            save_gif = false;\n        }\n        count++;\n    }\n```\nThe above code will create a GIF image file with 30 frames taken from the application surface and then save it.\n",
      "description": "With this function you can create an empty GIF format image, ready to have data added to it. When you call the function, you need to specify the width and height of the GIF (in pixels, and there is no upper limit on size except for available memory), and the function will return the unique ID value used to identify the gift in subsequent functions, or it will return -1 if the gif could not be initialized (for example, if the width/height are too big for the memory available). You may also specify an optional argument to set the \"clear colour\" for the GIF. This is an RGB value (no alpha component), and will clear the gif to this colour before anything is added to it. If you do not supply a clear colour argument, the default colour of black will be used.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/gif_open.htm"
    },
    "gif_save": {
      "name": "gif_save",
      "parameters": [
        {
          "parameter": "gif_index",
          "description": "The ID of gif to save"
        },
        {
          "parameter": "fname",
          "description": "The filename to use for the gif"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif save_gif == true\n    {\n        if count == 0\n        {\n            gif_image = gif_open(room_width, room_height);\n        }\n        else if count < 30\n        {\n            gif_add_surface(gif_image, application_surface, 6/100);\n        }\n        else\n        {\n            gif_save(gif_image, \"GameCapture.gif\");\n            count = 0;\n            save_gif = false;\n        }\n        count++;\n    }\n```\nThe above code will create a GIF image file with 30 frames taken from the application surface and then save it.\n",
      "description": "With this function you can save out a GIF animation. You supply the GIF index (as returned by the function `gif_open()`) as well as a filename to save it with. Note that GameMaker Studio 2 does not automatically append the `.gif` file extension, so you should include this as part of the filename string if you wish the saved file to be identified as a GIF. The created GIF will be palletized using the Universal 884 Palette (see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/https://en.wikipedia.org/wiki/List_of_software_palettes#8-8-4_levels_RGB) for more information).",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/gif_save.htm"
    },
    "gif_save_buffer": {
      "name": "gif_save_buffer",
      "parameters": [
        {
          "parameter": "gif_index",
          "description": "The ID of gif to save"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif save_gif == true\n    {\n        if count == 0\n        {\n            gif_image = gif_open(room_width, room_height);\n        }\n        else if count < 30\n        {\n            gif_add_surface(gif_image, application_surface, 6/100);\n        }\n        else\n        {\n            global.capture_buff = gif_save_buffer(gif_image);\n            count = 0;\n            save_gif = false;\n        }\n        count++;\n    }\n```\nThe above code will create a GIF image file with 30 frames taken from the application surface and then save it to a buffer.\n",
      "description": "With this function you can save out a GIF animation. You supply the GIF index (as returned by the function `gif_open()`) and the function will return a 1 byte-aligned grow buffer with the GIF data. Note that the final GIF data will have been palletized using the Universal 884 Palette (see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/https://en.wikipedia.org/wiki/List_of_software_palettes#8-8-4_levels_RGB) for more information).",
      "returns": "Integer (Buffer ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/gif_save_buffer.htm"
    },
    "gml_pragma": {
      "name": "gml_pragma",
      "parameters": [
        {
          "parameter": "command",
          "description": "A string with one of the commands listed below."
        },
        {
          "parameter": "[optional]",
          "description": "Some of the available commands require an optional argument or arguments. These are explained below for each command."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": true,
      "example": "```\ngml_pragma(\"forceinline\");\n```\nThe above example code will force the script function where it is used to be in-lined on compile.\n",
      "description": "The `gml_pragma` function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively *pre-processed* before the\n    game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/gml_pragma.htm"
    },
    "gml_release_mode": {
      "name": "gml_release_mode",
      "parameters": [
        {
          "parameter": "flag",
          "description": "Either `true` to set release mode or false for general development."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngml_release_mode(true);\n```\nThe above example code will set the game to use release mode when compiled.\n",
      "description": "When your game is compiled, it also includes certain internal functions to error check while running. These internal checks cover many aspects of a games code, including ranges, parameters and some general aspects of the internal GML compiler and are\n    what spawn the final error messages in many cases. However this function can be used to switch these internal checks off (ie: remove them completely from the compiled game), giving a speed boost to your final project.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/gml_release_mode.htm"
    },
    "gpu_get_alphatestenable": {
      "name": "gpu_get_alphatestenable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !gpu_get_alphatestenable()\n    {\n        gpu_set_alphatestenable(true);\n        gpu_set_alphatestref(128);\n    }\n```\nThe above code will check to see if alpha testing is enabled and if not it will switch on alpha testing and set the test threshold to 128 (only pixels with an alpha over 0.5 will be drawn).\n",
      "description": "With this function you can check to see whether alpha testing is enabled (returns `true`) or not (returns `false`). For more information on alpha testing, see the function `gpu_set_alphatestref()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_alphatestenable.htm"
    },
    "gpu_get_alphatestref": {
      "name": "gpu_get_alphatestref",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_alphatestenable()\n    {\n        if gpu_get_alphatestref() < 254\n        {\n            gpu_set_alphatestref(254);\n        }\n    }\n```\nThe above code checks to see if alpha testing is enabled, and if it is, it then checks the current alpha test reference value and sets it if it is less than 254.\n",
      "description": "You can use this function to find the current value for the alpha test reference (default is 0, but you can use `gpu_set_alphatestref()` to set this value to something other than this).",
      "returns": "Real (from 0 - 255)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_alphatestref.htm"
    },
    "gpu_get_blendenable": {
      "name": "gpu_get_blendenable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_blendenable() == false\n    {\n        gpu_set_blendenable(true);\n    }\n```\nThe above code checks the state of the alpha blending and if it is disabled it is then enabled again.\n",
      "description": "This function can be used to retrieve the alpha-blending state. If it returns `true` then alpha-blending is enabled, and if it returns `false` it is disabled. By default this is on and so the function will return `true`",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendenable.htm"
    },
    "gpu_get_blendmode": {
      "name": "gpu_get_blendmode",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_blendmode() != bm_normal\n    {\n        gpu_set_blendmode(bm_normal);\n    }\n```\nThe above code gets the current blend mode and if it is not `bm_normal` it is set to that constant.\n",
      "description": "This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is `bm_normal`):",
      "returns": "Constant (see above for constants)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm"
    },
    "gpu_get_blendmode_dest": {
      "name": "gpu_get_blendmode_dest",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar bm; bm[0] = gpu_get_blendmode_src(); bm[1] = gpu_get_blendmode_dest(); gpu_set_blendmode_ext_sepalpha(bm[0], bm[1], bm_inv_src_alpha, bm_inv_dest_colour);\n```\nThe above code creates a local array and gets the current source and destination blending factors. This array is then used to manipulate the alpha component of the blending factors.\n",
      "description": "This function can be used to retrieve the current *destination* extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\"\n    denotes a value from the destination):",
      "returns": "Constant (see above table)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm"
    },
    "gpu_get_blendmode_destalpha": {
      "name": "gpu_get_blendmode_destalpha",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar bm; bm[0] = gpu_get_blendmode_srcalpha(); bm[1] = gpu_get_blendmode_destalpha(); gpu_set_blendmode_ext_sepalpha(bm_inv_src_alpha, bm_inv_dest_colour, bm[0], bm[1]);\n```\nThe above code creates a local array and gets the current source and destination blending factors for the alpha component. This array is then used to manipulate the RGB component of the blending factors.\n",
      "description": "This function can be used to retrieve the current *destination* extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value\n    from the destination) with only the \"A\" component being used when drawing:",
      "returns": "Constant (see above table)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_destalpha.htm"
    },
    "gpu_get_blendmode_ext": {
      "name": "gpu_get_blendmode_ext",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar bm = gpu_get_blendmode_ext();\n    bm[0] = bm_src_alpha;\n    gpu_set_blendmode_ext(bm);\n```\nThe above code gets the current extended blend mode, modifies the source, and then sets the extended blend mode again.\n",
      "description": "This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:",
      "returns": "2 element 1D Array (see above for constants)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm"
    },
    "gpu_get_blendmode_ext_sepalpha": {
      "name": "gpu_get_blendmode_ext_sepalpha",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar bm = gpu_get_blendmode_ext_sepalpha();\n    bm[0] = bm_src_alpha;\n    bm[1] = bm_inv_src_alpha;\n    gpu_set_blendmode_ext_sepalpha(bm);\n```\nThe above code creates a local array and gets the current extended blend mode with separate alpha values. This array is then manipulated and returned to set the blend mode.\n",
      "description": "This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:",
      "returns": "4 element 1D Array (see above for constants)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext_sepalpha.htm"
    },
    "gpu_get_blendmode_src": {
      "name": "gpu_get_blendmode_src",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar bm; bm[0] = gpu_get_blendmode_src(); bm[1] = gpu_get_blendmode_dest(); gpu_set_blendmode_ext_sepalpha(bm[0], bm[1], bm_inv_src_alpha, bm_inv_dest_colour);\n```\nThe above code creates a local array and gets the current source and destination blending factors. This array is then used to manipulate the alpha component of the blending factors.\n",
      "description": "This function can be used to retrieve the current *source* extended blend mode factor being used for drawing. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes\n    a value from the destination):",
      "returns": "Constant (see above table)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_src.htm"
    },
    "gpu_get_blendmode_srcalpha": {
      "name": "gpu_get_blendmode_srcalpha",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar bm; bm[0] = gpu_get_blendmode_srcalpha(); bm[1] = gpu_get_blendmode_destalpha(); gpu_set_blendmode_ext_sepalpha(bm_inv_src_alpha, bm_inv_dest_colour, bm[0], bm[1]);\n```\nThe above code creates a local array and gets the current source and destination blending factors for the alpha component. This array is then used to manipulate the RGB component of the blending factors.\n",
      "description": "This function can be used to retrieve the current *source* extended blend mode alpha factor. The value returned will be one of the following constants (\"s\" denotes a value taken from the source while a \"d\" denotes a value from\n    the destination) with only the \"A\" component being used when drawing:",
      "returns": "Constant (see above table)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_srcalpha.htm"
    },
    "gpu_get_colourwriteenable": {
      "name": "gpu_get_colourwriteenable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar cw = gpu_get_colorwriteenable(); cw[3] = false; gpu_set_colorwriteenable(cw);\n  \n```\nThe above code gets the current colour write values and then sets the alpha component to `false`.\n",
      "description": "This function can be used to retrieve the current colour write-enable values. The function returns a 4 element 1D array with the following elements in it which will be either `true` (enabled) or `false` (disabled). By default all colour\n    writing is set to `true`:",
      "returns": "4 element 1D array (See above for details)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_colourwriteenable.htm"
    },
    "gpu_get_cullmode": {
      "name": "gpu_get_cullmode",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_cullmode() != cull_clockwise\n    {\n        gpu_set_cullmode(cull_clockwise);\n    }\n```\nThe above code gets the current cull mode and if it is not `cull_clockwise` it is set to that constant.\n",
      "description": "This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is `cull_noculling`):",
      "returns": "Constant (see above for constants)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm"
    },
    "gpu_get_fog": {
      "name": "gpu_get_fog",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar fog_a = gpu_get_fog(); fog_a[1] = c_red; gpu_set_fog(fog_a);\n  \n```\nThe above code gets the current fog settings and then sets the colour element of the array to `c_red` before setting the fog again using the changed array.\n",
      "description": "This function can be used to retrieve the fog settings. The function returns a 4 element 1D array with the following information:",
      "returns": "4 element 1D Array (see above for array elements)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_fog.htm"
    },
    "gpu_get_state": {
      "name": "gpu_get_state",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ngpu_map = gpu_get_state();\n```\nThe above code stores the current GPU state in a variable.\n",
      "description": "This function will get the current GPU state, returning it as a  [DS Map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm). This can then be manipulated or even saved, and you can return this map to the GPU using the function `gpu_set_state()`.",
      "returns": "Integer (DS map ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_state.htm"
    },
    "gpu_get_tex_max_aniso": {
      "name": "gpu_get_tex_max_aniso",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_max_aniso() != 8\n    {\n        gpu_set_tex_max_aniso(8);\n    }\n```\nThe above code will check the current maximum anisotropic filtering level and if it is not 8 it is set to 8.\n",
      "description": "With this function you can get the current maximum level of anisotropy when using the `tf_anisotropic` filter mode (see `gpu_get_tex_mip_filter()` for more information). The returned value will range between 1 and 16.",
      "returns": "Real (default: 16)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_aniso.htm"
    },
    "gpu_get_tex_max_aniso_ext": {
      "name": "gpu_get_tex_max_aniso_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_max_aniso_ext(_sampleIndex) != 8\n    {\n        gpu_set_tex_max_aniso_ext(_sampleIndex, 8);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the maximum level of anisotropy to 8 for the given shader texture sampler if it has not already been set to 8.\n",
      "description": "With this function you can get the current maximum level of anisotropy when using the `tf_anisotropic` filter mode (see `gpu_get_tex_mip_filter()` for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return a value within the range of 1 and 16.",
      "returns": "Real (default: 16)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_aniso_ext.htm"
    },
    "gpu_get_tex_max_mip": {
      "name": "gpu_get_tex_max_mip",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_max_mip() != 4\n    {\n        gpu_set_tex_max_mip(4);\n    }\n```\nThe above code will check the current maximum mipmap level and if it is not 4 it is set to 4.\n",
      "description": "With this function you can get the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
      "returns": "Real (default: 16)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_mip.htm"
    },
    "gpu_get_tex_max_mip_ext": {
      "name": "gpu_get_tex_max_mip_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_max_mip_ext(_sampleIndex) != 4\n    {\n        gpu_set_tex_max_mip_ext(_sampleIndex, 4);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the maximum mipmap level to 4 for the given shader texture sampler if it has not already been set to 4.\n",
      "description": "With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
      "returns": "Real (default: 16)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_max_mip_ext.htm"
    },
    "gpu_get_tex_min_mip": {
      "name": "gpu_get_tex_min_mip",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_min_mip() != 0\n    {\n        gpu_set_tex_min_mip(0);\n    }\n```\nThe above code will check the current minimum mipmap level and if it is not 0 it is set to 0.\n",
      "description": "With this function you can get the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...",
      "returns": "Real (default: 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_min_mip.htm"
    },
    "gpu_get_tex_min_mip_ext": {
      "name": "gpu_get_tex_min_mip_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_min_mip_ext(_sampleIndex) != 0\n    {\n        gpu_set_tex_min_mip_ext(_sampleIndex, 0);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the minimum mipmap level to 0 for the given shader texture sampler if it has not already been set to 0.\n",
      "description": "With this function you can get the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return a value of 0 for full resolution, 1 for the first mipmap, 2 for the second etc...",
      "returns": "Real (default: 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_min_mip_ext.htm"
    },
    "gpu_get_tex_mip_bias": {
      "name": "gpu_get_tex_mip_bias",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_mip_bias() != 0\n    {\n        gpu_set_tex_mip_bias(0);\n    }\n```\nThe above code will check the current mipmap bias and if it is not 0 it is set to 0.\n",
      "description": "With this function you can retrieve the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this can return negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.",
      "returns": "Real (default: 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_bias.htm"
    },
    "gpu_get_tex_mip_bias_ext": {
      "name": "gpu_get_tex_mip_bias_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_mip_bias_ext(_sampleIndex) != 0\n    {\n        gpu_set_tex_mip_bias_ext(_sampleIndex, 0);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the mip filter bias to 0 for the given shader texture sampler if it has not already been set to 0.\n",
      "description": "With this function you can retrieve the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return a value of 0.0 for no bias, or a greater value where 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this can return negative values too, in which case shader textures will be sharper over a greater distance the lower the value.",
      "returns": "Real (default: 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_bias_ext.htm"
    },
    "gpu_get_tex_mip_enable": {
      "name": "gpu_get_tex_mip_enable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_mip_enable != mip_on\n    {\n        gpu_set_tex_mip_enable(mip_on);\n    }\n```\nThe above code will check to see if mipmapping is enabled and if it is not, it will enable it.\n",
      "description": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the  [Texture Group Manager](https://manual.yoyogames.com/Settings/Texture_Groups.htm). The function will return one of the constants listed below, with the default setting being `mip_markedonly`.",
      "returns": "Constant:",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable.htm"
    },
    "gpu_get_tex_mip_enable_ext": {
      "name": "gpu_get_tex_mip_enable_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_mip_enable_ext(_sampleIndex) != mip_on\n    {\n        gpu_set_tex_mip_enable_ext(_sampleIndex, mip_on);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code enables mipmapping for the given shader texture sampler if it has not already been enabled.\n",
      "description": "With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the  [Texture Group Manager](https://manual.yoyogames.com/Settings/Texture_Groups.htm) on a shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return one of the constants listed below.",
      "returns": "Constant:",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_enable_ext.htm"
    },
    "gpu_get_tex_mip_filter": {
      "name": "gpu_get_tex_mip_filter",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_enter)\n    {\n        switch(gpu_get_tex_mip_filter())\n        {\n            case tf_point: gpu_set_tex_mip_filter(tf_linear); break;\n            case tf_linear: gpu_set_tex_mip_filter(tf_anisotropic); break;\n            case tf_anisotropic: gpu_set_tex_mip_filter(tf_point); break;\n        }\n    }\n```\nThe above code checks the keyboard and if the specified key is pressed it will then get the current mip filter and toggle the value to the next one, cycling through the different modes.\n",
      "description": "With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.",
      "returns": "Constant (listed below):",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm"
    },
    "gpu_get_tex_mip_filter_ext": {
      "name": "gpu_get_tex_mip_filter_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_mip_filter_ext(_sampleIndex) != tf_point\n    {\n        gpu_set_tex_mip_filter_ext(_sampleIndex, tf_point);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the mip filter mode to `tf_point` (disabling mipmapping) for the given shader texture sampler if it has not already been set.\n",
      "description": "With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return one of the mode value constants listed below.",
      "returns": "Constant (listed below):",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter_ext.htm"
    },
    "gpu_get_texfilter": {
      "name": "gpu_get_texfilter",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_texfilter()\n    {\n        gpu_set_texfilter(false);\n    }\n    else\n    {\n        gpu_set_texfilter(true);\n    }\n```\nThe above code checks to see if texture filtering is on or off and switches it accordingly.\n",
      "description": "With this function you can check to see whether texture filtering (linear interpolation) is enabled (returns `true`) or not (returns `false`). For more information on texture filtering, see the function `gpu_set_texfilter()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texfilter.htm"
    },
    "gpu_get_texfilter_ext": {
      "name": "gpu_get_texfilter_ext",
      "parameters": [
        {
          "parameter": "sampler_id",
          "description": "The sampler id from the shader."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");\n    if gpu_get_texfilter_ext(s_tex)\n    {\n        gpu_set_texfilter_ext(s_tex, false);\n    }\n    else\n    {\n        gpu_set_texfilter_ext(s_tex, true);\n    }\n```\nThe above code checks to see if texture filtering is on or off for a specific sampler ID (stored in a local variable) and switches it accordingly.\n",
      "description": "With this function you can check to see whether texture interpolation (linear interpolation) is enabled (returns `true`) or not (returns `false`) for a given shader sampler texture.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texfilter_ext.htm"
    },
    "gpu_get_texrepeat": {
      "name": "gpu_get_texrepeat",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_texrepeat()\n    {\n        gpu_set_texrepeat(false);\n    }\n    else\n    {\n        gpu_set_texrepeat(true);\n    }\n```\nThe above code checks to see if texture repeating is on or off and switches it accordingly.\n",
      "description": "With this function you can check to see whether texture repeating is enabled (returns `true`) or not (returns `false`). For more information on texture repeating, see the function `gpu_set_texrepeat()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texrepeat.htm"
    },
    "gpu_get_texrepeat_ext": {
      "name": "gpu_get_texrepeat_ext",
      "parameters": [
        {
          "parameter": "sampler_id",
          "description": "The sampler id from the shader."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");\n    if !gpu_get_texrepeat_ext(s_tex)\n    {\n        gpu_set_texrepeat_ext(s_tex, true);\n    }\n```\nThe above code checks to see if texture filtering off for a specific sampler ID (stored in a local variable) and switches it on if it's not.\n",
      "description": "With this function you can check to see whether texture repeating is enabled (returns `true`) or not (returns `false`) for a given shader sampler texture.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_texrepeat_ext.htm"
    },
    "gpu_get_zfunc": {
      "name": "gpu_get_zfunc",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_zfunc() != cmpfunc_greater\n    {\n        gpu_set_zfunc(cmpfunc_greater);\n    }\n```\nThe above code checks to see if the z-testing method is set to `cmpfunc_greater` and if not then it is set to that constant.\n",
      "description": "This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is `cmpfunc_lessequal`):",
      "returns": "Constant (see table above)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zfunc.htm"
    },
    "gpu_get_ztestenable": {
      "name": "gpu_get_ztestenable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_ztestenable() == false\n    {\n        gpu_set_ztestenable(true);\n    }\n```\nThe above code checks to see if z-testing is enabled or not and if it is disabled it is then enabled again.\n",
      "description": "This function can be used to retrieve whether z-testing is enabled (the function returns `true`) or not (the function returns `false`). The default value is that z-testing is *disabled*, so the function will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_ztestenable.htm"
    },
    "gpu_get_zwriteenable": {
      "name": "gpu_get_zwriteenable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gpu_get_zwriteenable() == false\n    {\n        gpu_set_zwriteenable(true);\n    }\n```\nThe above code checks to see if z-writing is enabled or not and if it is disabled it is then enabled again.\n",
      "description": "This function can be used to retrieve whether z-writing is enabled (the function returns `true`) or not (the function returns `false`). The default value is that z-writing is *enabled*, so the function will return `true`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_zwriteenable.htm"
    },
    "gpu_pop_state": {
      "name": "gpu_pop_state",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ngpu_push_state();\n    gpu_set_blendmode(bm_add);\n    gpu_set_blendenable(false);\n    gpu_set_cullmode(true);\n    with (obj_Effect_Parent)\n    {\n        draw_self();\n    }\n    gpu_pop_state();\n```\nThe above code will \"save\" the current GPU state on the stack, then change certain GPU settings and draw a group of instances before resetting the GPU state to what it was previously.\n",
      "description": "This function pops the previous GPU state from the stack and applies it. See `gpu_push_state()` for more information.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_pop_state.htm"
    },
    "gpu_push_state": {
      "name": "gpu_push_state",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ngpu_push_state();\n    gpu_set_blendmode(bm_add);\n    gpu_set_blendenable(false);\n    gpu_set_cullmode(true);\n    with (obj_Effect_Parent)\n    {\n        draw_self();\n    }\n    gpu_pop_state();\n```\nThe above code will \"save\" the current GPU state on the stack, then change certain GPU settings and draw a group of instances before resetting the GPU state to what it was previously.\n",
      "description": "With this function you can push the current GPU state onto a stack to be used later. You would generally use this if you want to \"save\" the current GPU state (things like blend mode, alpha writing, culling, etc... will all be pushed to the stack), then draw something with different settings, and then reset the GPU stack to what it was before (by calling `gpu_pop_state()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_push_state.htm"
    },
    "gpu_set_alphatestenable": {
      "name": "gpu_set_alphatestenable",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable alpha testing (`true` / `false`)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !gpu_get_alphatestenable()\n    {\n        gpu_set_alphatestenable(true);\n        gpu_set_alphatestref(128);\n    }\n```\nThe above code will check to see if alpha testing is enabled and if not it will switch on alpha testing and set the test threshold to 128 (only pixels with an alpha over 0.5 will be drawn).\n",
      "description": "This function will enable or disable alpha testing for your game (by default this is disabled). By switching alpha testing on you can then use the companion function `gpu_set_alphatestref()` to set the \"cut-off\" value at which all alpha values will be set to 0. The image below shows the difference that can be seen when alpha testing is switched on or off:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"
    },
    "gpu_set_alphatestref": {
      "name": "gpu_set_alphatestref",
      "parameters": [
        {
          "parameter": "val",
          "description": "Sets the reference value for alpha testing from 0 to 255 (default value is 0)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !gpu_get_alphatestenable()\n    {\n        gpu_set_alphatestenable(true);\n        gpu_set_alphatestref(128);\n    }\n```\nThe above code will check to see if alpha testing is enabled and if not it will switch on alpha testing and set the test threshold to 128 (only pixels with an alpha over 0.5 will be drawn).\n",
      "description": "This function will set the reference value for the alpha testing (when it has been enabled using the `gpu_set_alphatestenable()`). This is the \"cut-off\" threshold at which pixels with alpha will not be drawn.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"
    },
    "gpu_set_blendenable": {
      "name": "gpu_set_blendenable",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable alpha blending value (`true` or `false`)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngpu_set_blendenable(false); draw_sprite(spr_Background, 0, 0, 0); gpu_set_blendenable(true);\n  \n```\nThe above code switches off alpha blending to draw a background sprite and then switches it back on again to continue drawing.\n",
      "description": "This function can be used to toggle alpha-blending on and off. Basically, if you have this set to `false`, all images being drawn will be drawn 100% opaque, meaning that any transparent, or semi transparent, areas of a sprite or background will\n    be visible as a solid colour. It is a good idea to have alpha blending *off* whenever possible (especially when developing for mobile devices) as this greatly increases the draw speed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"
    },
    "gpu_set_blendmode": {
      "name": "gpu_set_blendmode",
      "parameters": [
        {
          "parameter": "mode",
          "description": "The blend mode to use (see the table above)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngpu_set_blendmode(bm_add);\n    draw_circle_colour(100, 100, 50, c_white, c_black, 0);\n    gpu_set_blendmode(bm_normal);\n```\nThis will turn the black into transparency, creating a 'glow' effect from the white being strong on the outside and gradually weakening further from the circle centre. The blend mode is reset after the circle is drawn to ensure additive blending is not also applied to everything else after it.\n",
      "description": "When GameMaker Studio 2 goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"
    },
    "gpu_set_blendmode_ext": {
      "name": "gpu_set_blendmode_ext",
      "parameters": [
        {
          "parameter": "src",
          "description": "Source blend mode factor(see constants above)."
        },
        {
          "parameter": "dest",
          "description": "Destination blend mode factor (see constants above)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ngpu_set_blendmode_ext(bm_src_alpha, bm_one); draw_circle_colour(100, 100, 50, c_white, c_black, 0); gpu_set_blendmode(bm_normal);\n  \n```\nThis will turn the black into transparency, creating a 'glow' effect from the white being strong on the outside and gradually weakening further from the circle centre. The blend mode is reset after the circle is drawn to ensure additive blending\n    is not also applied to everything else after it.\n",
      "description": "When GameMaker Studio 2 goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of\n    the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the\n    source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"
    },
    "gpu_set_blendmode_ext_sepalpha": {
      "name": "gpu_set_blendmode_ext_sepalpha",
      "parameters": [
        {
          "parameter": "src",
          "description": "Source blend mode factor for RGB (see constants above)."
        },
        {
          "parameter": "dest",
          "description": "Destination blend mode factor for RGB(see constants above)"
        },
        {
          "parameter": "alphasrc",
          "description": "Source blend mode factor Alpha (see constants above)."
        },
        {
          "parameter": "alphadest",
          "description": "Destination blend mode factor Alpha (see constants above)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar bm = gpu_get_blendmode_ext_sepalpha(); bm[0] = bm_src_alpha; bm[1] = bm_inv_src_alpha; gpu_set_blendmode_ext_sepalpha(bm);\n  \n```\nThe above code creates a local array and gets the current extended blend mode with separate alpha values. This array is then manipulated and returned to set the blend mode.\n",
      "description": "When GameMaker Studio 2 goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of\n    the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiply each component of the\n    source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm"
    },
    "gpu_set_colourwriteenable": {
      "name": "gpu_set_colourwriteenable",
      "parameters": [
        {
          "parameter": "red",
          "description": "Enable/disable the red channel"
        },
        {
          "parameter": "green",
          "description": "Enable/disable the green channel"
        },
        {
          "parameter": "blue",
          "description": "Enable/disable the blue channel"
        },
        {
          "parameter": "alpha",
          "description": "Enable/disable the alpha channel"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar cw = gpu_get_colorwriteenable(); cw[3] = false; gpu_set_colorwriteenable(cw);\n  \n```\nThe above code gets the current colour write values and then sets the alpha component to `false`.\n",
      "description": "With this function you can switch on or off the colour channels and the alpha channel for all further drawing. For example, you can use this function to create alpha-channel only surfaces (switch off the RGB writing before using the surface), or to\n    create special effects while drawing to the screen. The default value for each of the components is `true`, and can be supplied as either four unique arguments or as a 4 element 1D array with the following elements in it which will be either\n    `true` (enabled) or `false` (disabled):",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_colourwriteenable.htm"
    },
    "gpu_set_cullmode": {
      "name": "gpu_set_cullmode",
      "parameters": [
        {
          "parameter": "cullmode",
          "description": "The cull mode to use (see list above)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_cullmode() != cull_clockwise\n    {\n        gpu_set_cullmode(cull_clockwise);\n    }\n```\nThe above code gets the current cull mode and if it is not `cull_clockwise` it is set to that constant.\n",
      "description": "This function can be used to set the backface culling mode. A polygon (primitive) has a *front* and a *back* side. The front side is said to be the side where the vertices are defined in **counter-clockwise** order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_cullmode.htm"
    },
    "gpu_set_fog": {
      "name": "gpu_set_fog",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable fog"
        },
        {
          "parameter": "colour",
          "description": "The fog colour"
        },
        {
          "parameter": "start",
          "description": "The distance to start applying fog from"
        },
        {
          "parameter": "end",
          "description": "The distance to end the fog"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar fog_a = gpu_get_fog(); fog_a[1] = c_red; gpu_set_fog(fog_a);\n  \n```\nThe above code gets the current fog settings and then sets the colour element of the array to `c_red` before setting the fog again using the changed array.\n",
      "description": "This function can be used to enable or disable fog drawing. Fog can be used in 3D games to make instances in the distance look blurred or even disappear, which helps in creating atmosphere as well as masking the fact that you are not drawing instances\n    that are far away. You set whether it is enabled (`true`) or disabled (`false`), the colour that the fog should use for blending, as well as the start and end draw distances. Note that the fog start indicates the radius relative to the\n    view camera where the fog starts, and the fog end indicates at which radius (also relative) instances will be completely invisible.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_fog.htm"
    },
    "gpu_set_state": {
      "name": "gpu_set_state",
      "parameters": [
        {
          "parameter": "ds_map",
          "description": "The GPU state to set as a `DS Map`."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngpu_set_state(gpu_map);\n```\nThe above code sets the GPU state using the map supplied in the variable \"gpu_map\".\n",
      "description": "This function will set the current GPU state using the passed-in  [DS Map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm). The supplied map can be created using the function  [gpu_get_state()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_state.htm)`.`",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_state.htm"
    },
    "gpu_set_tex_max_aniso": {
      "name": "gpu_set_tex_max_aniso",
      "parameters": [
        {
          "parameter": "maxaniso",
          "description": "The maximum level for anisotropic filtering (default: 16)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_max_aniso() != 8\n    {\n        gpu_set_tex_max_aniso(8);\n    }\n```\nThe above code will check the current maximum anisotropic filtering level and if it is not 8 it is set to 8.\n",
      "description": "With this function you can set the current maximum level of anisotropy when using the `tf_anisotropic` filter mode (see `gpu_get_tex_mip_filter()` for more information). The input value must range between 1 and 16.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_aniso.htm"
    },
    "gpu_set_tex_max_aniso_ext": {
      "name": "gpu_set_tex_max_aniso_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        },
        {
          "parameter": "maxaniso",
          "description": "The maximum anisotropic level to use (default: 16)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_max_aniso_ext(_sampleIndex) != 8\n    {\n        gpu_set_tex_max_aniso_ext(_sampleIndex, 8);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the maximum level of anisotropy to 8 for the given shader texture sampler if it has not already been set to 8.\n",
      "description": "With this function you can set the maximum level of anisotropy when using the `tf_anisotropic` filter mode (see `gpu_get_tex_mip_filter()` for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and then a value within the range of 1 and 16 to set the level.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_aniso_ext.htm"
    },
    "gpu_set_tex_max_mip": {
      "name": "gpu_set_tex_max_mip",
      "parameters": [
        {
          "parameter": "maxmip",
          "description": "The maximum mipmap level (default: 16)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_max_mip() != 4\n    {\n        gpu_set_tex_max_mip(4);\n    }\n```\nThe above code will check the current maximum mipmap level and if it is not 4 it is set to 4.\n",
      "description": "With this function you can set the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_mip.htm"
    },
    "gpu_set_tex_max_mip_ext": {
      "name": "gpu_set_tex_max_mip_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        },
        {
          "parameter": "maxmip",
          "description": "The maximum mipmap level value to use (default: 16)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_max_mip_ext(_sampleIndex) != 4\n    {\n        gpu_set_tex_max_mip_ext(_sampleIndex, 4);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the maximum mipmap level to 4 for the given shader texture sampler if it has not already been set to 4.\n",
      "description": "With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_max_mip_ext.htm"
    },
    "gpu_set_tex_min_mip": {
      "name": "gpu_set_tex_min_mip",
      "parameters": [
        {
          "parameter": "minmip",
          "description": "The minimum mipmap level to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_min_mip() != 0\n    {\n        gpu_set_tex_min_mip(0);\n    }\n```\nThe above code will check the current minimum mipmap level and if it is not 0 it is set to 0.\n",
      "description": "With this function you can set the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_min_mip.htm"
    },
    "gpu_set_tex_min_mip_ext": {
      "name": "gpu_set_tex_min_mip_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        },
        {
          "parameter": "minmip",
          "description": "The minimum mipmap level to use"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_min_mip_ext(_sampleIndex) != 0\n    {\n        gpu_set_tex_min_mip_ext(_sampleIndex, 0);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the minimum mipmap level to 0 for the given shader texture sampler if it has not already been set to 0.\n",
      "description": "With this function you can set the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and then give a value, where 0 is for full resolution, 1 is for the first mipmap, 2 for the second etc...",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_min_mip_ext.htm"
    },
    "gpu_set_tex_mip_bias": {
      "name": "gpu_set_tex_mip_bias",
      "parameters": [
        {
          "parameter": "bias",
          "description": "The mipmap bias value to use (default: 0)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_mip_bias() != 0\n    {\n        gpu_set_tex_mip_bias(0);\n    }\n```\nThe above code will check the current mipmap bias and if it is not 0 it is set to 0.\n",
      "description": "With this function you can set the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this function can take negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_bias.htm"
    },
    "gpu_set_tex_mip_bias_ext": {
      "name": "gpu_set_tex_mip_bias_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        },
        {
          "parameter": "bias",
          "description": "The mipmap bias value to use (default: 0)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_mip_bias_ext(_sampleIndex) != 0\n    {\n        gpu_set_tex_mip_bias_ext(_sampleIndex, 0);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code sets the mip filter bias to 0 for the given shader texture sampler if it has not already been set to 0.\n",
      "description": "With this function you can set the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and then the bias value, where 0 is for no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the \"distance\" being viewed. Note that this function can also take negative values too, in which case shader textures will be sharper over a greater distance the lower the value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_bias_ext.htm"
    },
    "gpu_set_tex_mip_enable": {
      "name": "gpu_set_tex_mip_enable",
      "parameters": [
        {
          "parameter": "setting",
          "description": "The mipmap setting (a constant, default: `mip_markedonly`)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_tex_mip_enable != mip_on\n    {\n        gpu_set_tex_mip_enable(mip_on);\n    }\n```\nThe above code will check to see if mipmapping is enabled and if it is not, it will enable it.\n",
      "description": "With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the  [Texture Group Manager](https://manual.yoyogames.com/Settings/Texture_Groups.htm). The function requires one of the constants listed below.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable.htm"
    },
    "gpu_set_tex_mip_enable_ext": {
      "name": "gpu_set_tex_mip_enable_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get"
        },
        {
          "parameter": "setting",
          "description": "The mipmap setting (a constant, default: `mip_markedonly`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_mip_enable_ext(_sampleIndex) != mip_on\n    {\n        gpu_set_tex_mip_enable_ext(_sampleIndex, mip_on);\n    }\n    texture_set_stage(_sampleIndex , _spriteTex);\n    shader_reset();\n```\nThe above code enables mipmapping for the given shader texture sampler if it has not already been enabled.\n",
      "description": "With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the  [Texture Group Manager](https://manual.yoyogames.com/Settings/Texture_Groups.htm) on a shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and then one of the constants listed below.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm"
    },
    "gpu_set_tex_mip_filter": {
      "name": "gpu_set_tex_mip_filter",
      "parameters": [
        {
          "parameter": "filter",
          "description": "The mip filter mode to use (a constant, default: `tf_point`)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_enter)\n    {\n        switch(gpu_get_tex_mip_filter())\n        {\n            case tf_point: gpu_set_tex_mip_filter(tf_linear); break;\n            case tf_linear: gpu_set_tex_mip_filter(tf_anisotropic); break;\n            case tf_anisotropic: gpu_set_tex_mip_filter(tf_point); break;\n        }\n    }\n```\nThe above code checks the keyboard and if the specified key is pressed it will then get the current mip filter and toggle the value to the next one, cycling through the different modes.\n",
      "description": "With this function you can set the current mip filter mode to one of the three types supported. You give the constant that refers to the mip filtering mode that you require, where you can choose between **point** filtering (default setting, meaning no filtering), **linear** filtering (this is also known as *trilinear filtering*) or **aniostropic** filtering (see the constants table below).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter.htm"
    },
    "gpu_set_tex_mip_filter_ext": {
      "name": "gpu_set_tex_mip_filter_ext",
      "parameters": [
        {
          "parameter": "sampler_index",
          "description": "The index of the shader sampler to get."
        },
        {
          "parameter": "filter",
          "description": "The mip filter mode to use (a constant, default: `tf_point`)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _sampleIndex = shader_get_sampler_index(shd_Glass, \"s_Background\");\n    var _spriteTex = sprite_get_texture(sprite_index, 0);\n    shader_set(shd_Glass);\n    if gpu_get_tex_mip_filter_ext(_sampleIndex) != tf_point\n    {\n        gpu_set_tex_mip_filter_ext(_sampleIndex, tf_point);\n    }\n    texture_set_stage(_sampleIndex, _spriteTex);\n    shader_reset();\n```\nThe above code sets the mip filter mode to `tf_point` (disabling mipmapping) for the given shader texture sampler if it has not already been set.\n",
      "description": "With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function `shader_get_sampler_index()`, and then one of the mode value constants listed below.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_filter_ext.htm"
    },
    "gpu_set_texfilter": {
      "name": "gpu_set_texfilter",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable texture filtering (`true` / `false`)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_texfilter()\n    {\n        gpu_set_texfilter(false);\n    }\n    else\n    {\n        gpu_set_texfilter(true);\n    }\n```\nThe above code checks to see if texture filtering is on or off and switches it accordingly.\n",
      "description": "This function can be used to set the texture filtering (linear interpolation) of all images drawn on the game screen. When this is enabled (`true`) all textures will be smoothed when drawn (this includes sprites as they too are considered textures), meaning that when scaled or moved if there is not a 1:1 pixel ratio then there will be a \"smudging\" across various pixels which may make images appear blurry depending on the art style used. If this is disabled (`false`) then images will be drawn based on the nearest pixel when scaled or moving which may lead to \"blocky\" images. The default value is `false`, and this can also be changed in the **Global Game Options** for individual target platforms.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texfilter.htm"
    },
    "gpu_set_texfilter_ext": {
      "name": "gpu_set_texfilter_ext",
      "parameters": [
        {
          "parameter": "sampler_id",
          "description": "The sampler id from the shader."
        },
        {
          "parameter": "enable",
          "description": "Enable or disable texture filtering (`true` / `false`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");\n    if gpu_get_texfilter_ext(s_tex)\n    {\n        gpu_set_texfilter_ext(s_tex, false);\n    }\n    else\n    {\n        gpu_set_texfilter_ext(s_tex, true);\n    }\n```\nThe above code checks to see if texture filtering is on or off for a specific sampler ID (stored in a local variable) and switches it accordingly.\n",
      "description": "This function can be used to set the linear interpolation for a single sampler \"slot\" when using  [Shaders](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm) in GameMaker Studio 2. When this is enabled (`true`) the sampler texture will be smoothed and if this is disabled (`false`) then images will be drawn based on the nearest pixel. The default value is that set by the **Global Game Options** for your game, or that set using the function `gpu_set_texfilter()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texfilter_ext.htm"
    },
    "gpu_set_texrepeat": {
      "name": "gpu_set_texrepeat",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable texture filtering (`true` / `false`)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gpu_get_texrepeat()\n    {\n        gpu_set_texrepeat(false);\n    }\n    else\n    {\n        gpu_set_texrepeat(true);\n    }\n```\nThe above code checks to see if texture repeating is on or off and switches it accordingly.\n",
      "description": "This function can be used to indicate to GameMaker Studio 2 whether textures should repeat (`true`) or not (`false`) when used for models and primitives. Normally texture widths and heights lie in the range 0 - 1, but if you specify a value larger than 1 by default the rest is not drawn (the entire texture will be drawn with an \"empty\" section corresponding to the percentage over 1 that is used. So a value of 2 for a texture width or height would draw the texture in half the space and leave the other half empty). However, by using this function to set repeat to true the texture is repeated automatically over all models and primitives. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a \"Separate Texture Page\" in the Sprite Editor.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texrepeat.htm"
    },
    "gpu_set_texrepeat_ext": {
      "name": "gpu_set_texrepeat_ext",
      "parameters": [
        {
          "parameter": "sampler_id",
          "description": "The sampler id from the shader."
        },
        {
          "parameter": "enable",
          "description": "Enable or disable texture filtering (`true` / `false`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar s_tex = shader_get_sampler_index(shader_glass, \"s_NoiseSampler\");\n    if gpu_get_texfilter_ext(s_tex)\n    {\n        gpu_set_texfilter_ext(s_tex, false);\n    }\n    else\n    {\n        gpu_set_texfilter_ext(s_tex, true);\n    }\n```\nThe above code checks to see if texture filtering is on or off for a specific sampler ID (stored in a local variable) and switches it accordingly.\n",
      "description": "This function can be used to set whether a single sampler \"slot\" repeats the given texture when using  [Shaders](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm) in GameMaker Studio 2 . Setting it to `true` will repeat the texture if the uv coordinates are out with the 0-1 range, while a setting of `false` will mean no repeating. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a \"Separate Texture Page\" in the Sprite Editor.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_texrepeat_ext.htm"
    },
    "gpu_set_zfunc": {
      "name": "gpu_set_zfunc",
      "parameters": [
        {
          "parameter": "cmp_func",
          "description": "The comparison mode to use (see list above)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngpu_set_ztestenable(true); gpu_set_zfunc(cmpfunc_always);\n     draw_sprite(spr_Background, 0, 0, 0); gpu_set_ztestenable(false);\n  \n```\nThe above code switches on z-buffer testing and sets its comparison mode before drawing a background sprite and then switches it back off again to continue drawing.\n",
      "description": "This function can be used to set the z-buffer testing comparison mode (see `gpu_set_ztestenable()` for more information). The values available for use are any of the following constants (the default value\n    is `cmpfunc_lessequal`):",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zfunc.htm"
    },
    "gpu_set_ztestenable": {
      "name": "gpu_set_ztestenable",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable z-buffer testing (`true` or `false`)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngpu_set_ztestenable(true); draw_sprite(spr_Background, 0, 0, 0); gpu_set_ztestenable(false);\n  \n```\nThe above code switches on z-buffer testing to draw a background sprite and then switches it back off again to continue drawing.\n",
      "description": "This function can be used to toggle z-buffer testing on or off, affecting how things will be drawn (in general only of use when working with 3D projects). Essentially, by default when z-testing is off and you have two objects drawing to the same space,\n    *both* objects will be rendered regardless of whether one will over-draw the other, resulting in unnecessary draw calls. If you switch this on then the z-buffer is tested to see whether an object will be \"visible\" and not drawn if it's\n    not. Note that this is the *default* behaviour, but you can change this by changing the type of comparison used for z-buffer testing (see the function `gpu_set_zfunc()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_ztestenable.htm"
    },
    "gpu_set_zwriteenable": {
      "name": "gpu_set_zwriteenable",
      "parameters": [
        {
          "parameter": "enable",
          "description": "The comparison mode to use (see list above)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngpu_set_zwriteenable(false);\n    with (obj_Menu_Containers)\n    {\n        draw_self();\n    }\n    gpu_set_zwriteenable(true);\n```\nThe above code switches off z-buffer writing, draws a number of objects, and then switches it back on again to continue drawing.\n",
      "description": "This function can be used to toggle on (`true`) and off (`false`) depth ordering using the z-buffer. When an instance is rendered in GameMaker Studio 2 , the depth of a generated pixel (its z coordinate) is stored in the z-buffer, then, if another instance of the scene must be rendered at the same pixel, the two depths are compared (z-testing - see `gpu_set_ztestenable()`) and the one \"closer\" to the observer is then saved to the z-buffer, replacing the old one. However, this is not always what you wish to happen and there are moments when you may want something to be drawn over everything else, no matter what its z value is. In those cases you can use this function to switch off writing to the z-buffer and so force whatever is being drawn to be drawn over everything else. Note that the description given here is for the *default* z-testing comparison mode, but that can be changed",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_zwriteenable.htm"
    },
    "gxc_pause_movie_recording": {
      "name": "gxc_pause_movie_recording",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (keyboard_check_pressed(vk_escape))\n    {\n        gxc_pause_movie_recording();\n    }\n```\nThis will pause the GXC movie recording if the escape key is pressed.\n",
      "description": "This function is used to pause a GXC recording that was previously started with  [gxc_start_movie_recording()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_start_movie_recording.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_pause_movie_recording.htm"
    },
    "gxc_resume_movie_recording": {
      "name": "gxc_resume_movie_recording",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (keyboard_check_pressed(vk_enter))\n    {\n        gxc_resume_movie_recording();\n    }\n```\nThis will resume the currently paused GXC movie recording if the enter key is pressed.\n",
      "description": "This function is used to resume a GXC recording that was previously paused with  [gxc_pause_movie_recording()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_pause_movie_recording.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_resume_movie_recording.htm"
    },
    "gxc_start_movie_recording": {
      "name": "gxc_start_movie_recording",
      "parameters": [
        {
          "parameter": "width",
          "description": "The width of the recording"
        },
        {
          "parameter": "height",
          "description": "The height of the recording"
        },
        {
          "parameter": "fps",
          "description": "The frame rate (frames-per-second) of the recording"
        },
        {
          "parameter": "record_audio",
          "description": "Whether audio should be recorded (true) or not (false)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\ngxc_start_movie_recording(320, 240, 4, false);\n```\nThis will start a video recording at a resolution of 320x240 at 4 frames-per-second, without any audio being recorded.\n",
      "description": "This function is used to start recording your challenge on GXC. You specify the width, height and frame rate of the recording, and a boolean for whether the audio should be recorded or not.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_start_movie_recording.htm"
    },
    "gxc_stop_movie_recording": {
      "name": "gxc_stop_movie_recording",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The file name or URL where the recording is to be saved or uploaded"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngxc_submit_challenge_score(_score, function(_status, _result) {\n        var _uploadUrl = _result.data.gameplayVideoUploadUrl;\n        gxc_stop_movie_recording(_uploadUrl);\n    });\n```\nThe above code uses the GXC API Library to upload a score to the currently active challenge, and when a response is received in its callback method, it retrieves the upload URL for the video and uploads the recording to it.\n",
      "description": "This function is used to stop a GXC recording that was previously started with  [gxc_start_movie_recording()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_start_movie_recording.htm). It also submits the recording to the URL specified in the arguments, however the behaviour is different depending on the kind of string specified:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/GXC/Challenges/gxc_stop_movie_recording.htm"
    },
    "highscore_add": {
      "name": "highscore_add",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string (name) to attribute the score to"
        },
        {
          "parameter": "numb",
          "description": "The number (score) to add."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (lives == 0)\n    {\n        highscore_add(global.Name, score);\n        score = 0;\n        room_goto(rm_MainMenu);\n    }\n```\nThe above code will check the lives and if they are set to 0, it will add the current score and the string held in the global variable \"Name\" into the high score list, before finally setting the score to 0 and sending the player to the room indexed in \"rm_MainMenu\".\n",
      "description": "With this function you can add a name and a score to the internal global high score list. There is no need to check the value to see if it is high enough to enter into the score list as GameMaker Studio 2 will only store those values that are greater than the tenth position stored.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/highscore_add.htm"
    },
    "highscore_name": {
      "name": "highscore_name",
      "parameters": [
        {
          "parameter": "place",
          "description": "The place on the table (1-10)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar i = 9;\n    repeat(10)\n    {\n        name[i] = highscore_name(i + 1);\n        i -= 1;\n    }\n```\nThe above code will loop through the high score list and store all the names in an array.\n",
      "description": "With this function you can retrieve the name string that has been stored in the high score list at the given position. If no name has been entered, the string \"Unknown\" will be returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/highscore_name.htm"
    },
    "highscore_value": {
      "name": "highscore_value",
      "parameters": [
        {
          "parameter": "place",
          "description": "The place on the table (1-10)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar i = 9;\n    repeat(10)\n    {\n        scr[i] = highscore_value(i + 1);\n        i -= 1;\n    }\n```\nThe above code will loop through the high score list and store all the scores in an array.\n",
      "description": "With this function you can retrieve the score value that has been stored in the high score list at the given position. If no score has been entered, the function will return 0.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/highscore_value.htm"
    },
    "http_get": {
      "name": "http_get",
      "parameters": [
        {
          "parameter": "url",
          "description": "The web address of the server that you wish to get information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "The `http_get()` function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:\n```\nget = http_get(\"http://www.MacSweeneyGames.com/logon?username=\" + name);\n```\nThe above code will pass the string held in the variable \"name\" to the given server as well as retrieve the data from that URL, triggering an Async Event which will contain the async_load DS map (the async_load map index will be stored in the variable \"get\" so you can check for the correct callback). The Async Event triggered would be the **HTTP** sub-event, and in that event you would have the following:\n```\nif ds_map_find_value(async_load, \"id\") == get\n    {\n        if ds_map_find_value(async_load, \"status\") == 0\n        {\n            r_str = ds_map_find_value(async_load, \"result\");\n        }\n        else\n        {\n            r_str = \"null\";\n        }\n    }\n```\nThe above code will first check the id of the DS map that has been created, then check the \"status\" of the callback. If the value is equal to 0 (signalling success) the result from the callback will then be stored in a variable for future use, otherwise the variable will be set to a default value (in this case \"null\").\n",
      "description": "With this function, you connect to the specified URL in order to retrieve information. As this is an asynchronous function, GameMaker Studio 2 will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an **Async Event** in any instance that has one defined in their object properties. You should also note that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function, for example:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get.htm"
    },
    "http_get_file": {
      "name": "http_get_file",
      "parameters": [
        {
          "parameter": "url",
          "description": "The web address of the server that you wish to get file from"
        },
        {
          "parameter": "local_target",
          "description": "The local storage path to save the file to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "The `http_get_file()` function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:\n```\nfile = http_get_file(\"http://www.macsweeneygames.com/downloads/upgrade.zip\", \"\\Downloads\\Upgrade.zip\");\n```\nThe above code will request a file from the given URL and set it to be downloaded to the local storage area (as specified in the HTML5 Game Options), in a directory \"Downloads\" with the given file name (this does not have to be the same as the source file name, but should use the same file extension). The `async_load` map index will be stored in the variable \"file\" so you can check for the correct callback in the Asynchronous Event, and if the save directory does not exist, it will be created. The Asynchronous Event triggered would be the **HTTP** sub-event, and in that event you would have something like the following:\n```\nif ds_map_find_value(async_load, \"id\") == file\n    {\n        var status = ds_map_find_value(async_load, \"status\");\n        if status == 0\n        {\n            var path = ds_map_find_value(async_load, \"result\");\n            var files = zip_unzip(path, \"/NewContent/\");\n            if files > 0\n            {\n                global.ExtraContent = true;\n            }\n        }\n    }\n```\nThe above code will first check the \"id\" of the ds_map that has been created, then check the status of the callback. If the value is equal to 0 (signalling success) the result from the callback will then be used along with the `zip_unzip()` function to unzip the downloaded file to the given directory. If the unzip succeeds a global variable is set to true.\n",
      "description": "With this function, you can connect to the specified URL in order to retrieve information in the form of a file. As this is an asynchronous function, GameMaker Studio 2 will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an **Async Event** in any instance that has one defined in their object properties.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get_file.htm"
    },
    "http_get_request_crossorigin": {
      "name": "http_get_request_crossorigin",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif string_lower(http_get_request_crossorigin()) != \"use-credentials\"\n    {\n        http_set_request_crossorigin(\"use-credentials\");\n    }\n    sprite_add(\"sprites/player_outfit_1.png\", 0, false, false, 0, 0);\n```\nThe above code will first check the currently set cross origin type and if it is not \"use-credentials\" then it is set to \"use-credentials\" and then a sprite is added from a file.\n",
      "description": "This function can be used to get the cross-origin type set for HTML5 games and will return a string (on all other platforms an empty string \"\" will be returned).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get_request_crossorigin.htm"
    },
    "http_post_string": {
      "name": "http_post_string",
      "parameters": [
        {
          "parameter": "url",
          "description": "The web address of the server that you wish to get information from"
        },
        {
          "parameter": "string",
          "description": "The string you wish to send to the specified URL"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "The `http_post_string()` function can be called from any event, and since it is asynchronous the callback can be almost instantaneous or could take several seconds. Calling the function is simple and would look something like this:\n```\nvar str = \"name=\" + global.player_name + \"&score=\" + string(global.player_score);\n    post = http_post_string(\"http://www.angusgames.com/game?game_id=\" + string(global.game_id), str);\n```\nThe above code sends a retrieval request to the specified URL with the given parameters as well as sending the additional data (player name and score in URL-encoded form) stored in the variable str. This will trigger all defined asynchronous **Http Events** if a callback is received, and you can check the \"id\" returned against that stored in the variable `post` to make sure that you run the correct code should you have used various `http_post_string()` functions. The following example code shows how this would be done:\n```\nvar r_str = \"null\";\n    if ds_map_find_value(async_load, \"id\") == post\n    {\n        if ds_map_find_value(async_load, \"status\") == 0\n        {\n            r_str = ds_map_find_value(async_load, \"result\");\n        }\n    }\n```\nThe above code will first check the id of the DS map that has been created, then check the status of the callback. If the value is equal to 0 (signalling success) the result from the callback will then be stored in a variable for future use, otherwise the variable will simply hold a default value (in this case \"null\").\n",
      "description": "In computing, a **post** request is used when the client needs to send data to the server as part of the retrieval request, such as when uploading a file or submitting a completed form, and the same is true of this function in GameMaker Studio 2. In contrast to the  [http_get()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get.htm) request method where only a URL is sent to the server, `http_post_string()` also includes a string that is sent to the server and may result in the creation of a new resource or the update of an existing resource or both. It should be noted that HTTP request parameters (the bits sometimes \"tacked on\" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function too.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_post_string.htm"
    },
    "http_request": {
      "name": "http_request",
      "parameters": [
        {
          "parameter": "url",
          "description": "The web address of the server that you wish to get information from"
        },
        {
          "parameter": "method",
          "description": "The request method (normally \"POST\" or \"GET\", but all methods are supported)"
        },
        {
          "parameter": "header_map",
          "description": "A ds_map with the required header fields"
        },
        {
          "parameter": "body",
          "description": "The data to be transmitted following the headers (can be a binary buffer handle)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create(); ds_map_add(map, \"Host\", \"225.0.0.97:3000\"); ds_map_add(map, \"Connection\", \"keep-alive\"); ds_map_add(map, \"Content-Length\", \"169\"); ds_map_add(map,\n    \"Cache-Control\", \"max-age=0\"); ds_map_add(map, \"Authorization\", \"Basic eW95b19hZG1pbjpjNG5lZmllbGQ=\"); ds_map_add(map, \"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\");    ds_map_add(map, \"User-Agent\", \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36\"); ds_map_add(map, \"Content-Type\", \"application/x-www-form-urlencoded\");    ds_map_add(map, \"Accept-Encoding\", \"gzip,deflate,sdch\"); ds_map_add(map, \"Accept-Language\", \"en-GB,en-US;q=0.8,en;q=0.6\"); ds_map_add(map, \"Cookie\", \"request_method=GET; _InAppPurchases_session=69bb6ef6eec2b\");    var data=\"utf8=%E2%9C%93&authenticity_token=kPmS14DcYcuKgMFZUsN3XFfj3mhs%3D&product%5Bname%5D=CatchTheHaggis&product%5Bproduct_id%5D=http_test&commit=Create+Product\"; request = http_request(\"http:225.0.0.97:3000/products\",\n    \"POST\", map, data);\n```\nThe above code creates a DS map with the relevant HTTP headers for the function, then creates a data string for use as this is a POST request. Finally the function is called, with it's ID value being stored in the variable \"request\" for\n    checking in the HTTP asynchronous event.\n",
      "description": "With this function, you can create an HTTP header request to define the operating parameters of an HTTP transaction, which can be used for many things like (for example) authentication via HTTP headers if you use RESTful APIs. The function requires\n    the full IP address of the server to request from as well as the type of request to make (as a string, see the note below): \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"TRACE\", \"OPTIONS\",\n    or \"CONNECT\". You will also need to supply a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) of key/value pairs (as strings, where the key is the header field and the value is the required data for the header), and\n    the final argument is an optional data string that you can add to the request, and if it's not needed then it can be either 0 or an empty string \"\". Note that you can also send a buffer (see the section on  [Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)    for more details), in which case the last argument would be the \"handle\" of the buffer to send.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_request.htm"
    },
    "http_set_request_crossorigin": {
      "name": "http_set_request_crossorigin",
      "parameters": [
        {
          "parameter": "origin_type",
          "description": "The cross origin type to use (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif string_lower(http_get_request_crossorigin()) != \"use-credentials\"\n    {\n        http_set_request_crossorigin(\"use-credentials\");\n    }\n    sprite_add(\"sprites/player_outfit_1.png\", 0, false, false, 0, 0);\n```\nThe above code will first check the currently set cross origin type and if it is not \"use-credentials\" then it is set to \"use-credentials\" and then a sprite is added from a file.\n",
      "description": "With this function you can set the cross origin type to use when loading images from a file. The function is exclusively for the HTML5 platform and is only useful when loading sprites from a file using the  [sprite_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm) function. Note that when set to \"use-credentials\" you no longer need to give an absolute path to the sprite being loaded, but instead would give a *relative* path (as shown in the example below). By default the cross origin type is set to \"anonymous\".",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_set_request_crossorigin.htm"
    },
    "ini_close": {
      "name": "ini_close",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\"); score = ini_read_real(\"save1\", \"score\", 0); ini_close();\n  \n```\nThis will open 'savedata.ini' and set score to the value under the section \"save1\" with the key \"score\" in it, then close the .ini again. Should there be no value under \"save1\", \"score\" or there is no\n    \"savedata.ini\" file present, score will be set to 0 and a new ini_file created.\n",
      "description": "This function should be called the moment you are finished reading or writing to any open ini file. If you do not use the function after you have used any of the ini write functions, then nothing will be written to disk, as the file information is held\n    in memory until this function is called, which forces the write. If you try to open an ini without having previously closed another one (or the same one) you will get an error too.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_close.htm"
    },
    "ini_key_delete": {
      "name": "ini_key_delete",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section to delete a key from."
        },
        {
          "parameter": "key",
          "description": "The key to delete."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\"); ini_write_real(\"save1\",\"Score\",score);\n     ini_key_delete(\"save1\",\"Score\");\n     ini_close();\n  \n```\nThis example will open \"savedata.ini\" and write a value to \"save1\" > \"Score\". It will then delete the \"Score\" key and close the .ini file.\n",
      "description": "With this function you can remove the selected key (and its corresponding value) from an ini file.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_key_delete.htm"
    },
    "ini_key_exists": {
      "name": "ini_key_exists",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section in the open .ini file to check a key in."
        },
        {
          "parameter": "key",
          "description": "The key to check for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\");\n    if !ini_key_exists(\"save1\", \"name\")\n    {\n        global.name = \"Player1\";\n    }\n    ini_close();\n```\nThis will set variable global.name to \"Player1\" if no such key as \"name\" exists.\n",
      "description": "This function checks to see if a key exists in the currently open ini and will return `true` if it does or `false` otherwise. This is not a necessary check to prevent errors as, when a key does not exist, reading from a non-existent key will just return a default value. It can be useful to see if an ini file has saved specific data and a few other things, however.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_key_exists.htm"
    },
    "ini_open": {
      "name": "ini_open",
      "parameters": [
        {
          "parameter": "name",
          "description": "The filename for the .ini file."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"Settings/savedata.ini\"); score = ini_read_real(\"save1\", \"score\", 0); ini_close();\n  \n```\nThis will open 'savedata.ini' and read the score value under the section \"save1\" with the key \"score\" in it, then close the .ini again. Should there be no value under \"save1\", \"score\" or there is no \"savedata.ini\"\n    file present, score will be set to 0 (the default value). Note that the ini file has been placed in the sub-directory \"Settings\", which is the folder that holds the ini file in the Asset Browser included files.\n",
      "description": "This opens an ini_file for reading and/writing. If the ini_file does not exist at the location you are checking, GameMaker Studio 2 may create one, but only if you write data to it. If you have only read information from the ini file, then the\n    default values for the read function will be returned, but the ini file will *not* actually be created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_open.htm"
    },
    "ini_open_from_string": {
      "name": "ini_open_from_string",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string containing all the ini information."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open_from_string(str) global.sound = ini_read_string(\"Options\", \"Sound\", true); ini_close();\n  \n```\nThe above code sets a temporary ini to hold the information from the string \"str\", then reads from the ini before closing it again.\n",
      "description": "This function will create an ini file from a string and open it for reading/writing. The string should be correctly formatted as an ini file (ie: with sections, line breaks keys and values) otherwise the ini file will not be created correctly. Note\n    that this ini file is temporary and will be removed from memory the moment it is closed, losing any information that was stored in it, however the `ini_close()` function returns a string of the full ini file which\n    can then be saved to a server or to disk.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_open_from_string.htm"
    },
    "ini_read_real": {
      "name": "ini_read_real",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section of the .ini to read from."
        },
        {
          "parameter": "key",
          "description": "The key within the relevant section of the .ini to read from."
        },
        {
          "parameter": "default",
          "description": "The value to return if a value is not found in the defined place (or the .ini file does not exist). Must be a real number."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\"); score = ini_read_real(\"save1\", \"score\", 0 ); ini_close();\n  \n```\nThis will open \"savedata.ini\" and set score to the value under \"save1\" > \"score\" in it, then close the .ini again. Should there be no value under \"save1\" > \"score\", or there no \"savedata.ini\"\n    file present, score will be set to 0.\n",
      "description": "You can use this function to read a number from an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** - **value** pairs. So a typical ini file would look something like this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_read_real.htm"
    },
    "ini_read_string": {
      "name": "ini_read_string",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section of the .ini to read from."
        },
        {
          "parameter": "key",
          "description": "The key within the relevant section of the .ini to read from."
        },
        {
          "parameter": "default",
          "description": "The string to return if a string is not found in the defined place (or the .ini file does not exist). Must be a string."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\"); global.name = ini_read_string(\"player\", \"name', \"Player1\"); ini_close();\n  \n```\nThis will open \"savedata.ini\" and set global.name to the string under \"save1\" > \"Name\" in it, then close the .ini again. Should there be no string under \"save1\" > \"Name\", or there no \"savedata.ini\"\n    file present, global.name will be set to \"Player1\".\n",
      "description": "You can use this function to read a string (text) from an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** - **value** pairs. So a typical ini file would look something like this:",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_read_string.htm"
    },
    "ini_section_delete": {
      "name": "ini_section_delete",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\"); ini_write_real(\"save1\", \"Score\", score ); ini_section_delete(\"save1\");\n     ini_close();\n  \n```\nThis example will open \"savedata.ini\" and write a value to \"save1\" > \"Score\". It will then delete the \"save1\" section and close the .ini file.\n",
      "description": "With this function you can delete a whole section of an ini file, which will also remove all key-value pairs that are associated with it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_section_delete.htm"
    },
    "ini_section_exists": {
      "name": "ini_section_exists",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section in the open .ini file to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\");\n    if !ini_section_exists(\"save1\")\n    {\n        global.savegame = \"1\";\n    }\n    ini_close();\n```\nThis will set variable global.savegame to \"1\" if \"save1\" is NOT found. With a for loop, this could be used as a basic way of working out how many save games there are for a game (ie: creating a system for multiple simultaneous save games for one game).\n",
      "description": "This function checks to see if a section exists in the currently open ini and will return `true` if it does or `false` otherwise. This is not a necessary check to prevent errors as, when a section does not exist, reading from a non-existent section will just return a default value, however it can be useful to see if an ini file has saved specific data.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_section_exists.htm"
    },
    "ini_write_real": {
      "name": "ini_write_real",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section of the .ini to write to."
        },
        {
          "parameter": "key",
          "description": "The key within the relevant section of the .ini to write to."
        },
        {
          "parameter": "value",
          "description": "The real value to write to the relevant destination."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nscore = 1000; ini_open(\"savedata.ini\");\n     ini_write_real(\"save1\", \"Score\", score ); score2 = ini_read_real(\"save1\", \"Score\", 0 ); ini_close();\n  \n```\nThis will set score to 1000, then open \"savedata.ini\" and write this value to \"save1\" > \"Score\". Then, it will set score2 to the real value under \"save1\" > \"score\" in it, 1000, and close the .ini\n    again. Had it not found this value, score2 would have ended up set as 0.\n",
      "description": "You can use this function to write a value (numeric) to an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** - **value** pairs. So a typical ini file would look something like this:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_write_real.htm"
    },
    "ini_write_string": {
      "name": "ini_write_string",
      "parameters": [
        {
          "parameter": "section",
          "description": "The section of the .ini to write to."
        },
        {
          "parameter": "key",
          "description": "The key within the relevant section of the .ini to write to."
        },
        {
          "parameter": "value",
          "description": "The string to write to the relevant destination."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nini_open(\"savedata.ini\"); ini_write_string(\"Save\", \"Player\", global.Name); ini_close();\n  \n```\nThe above code opens an ini file for reading and writing, then writes the string stored in the global variable \"Name\" to the section \"Save\" with the key \"Player\" before closing the file again.\n",
      "description": "You can use this function to write a string (text) to an ini data file. Ini Files are split into **sections** and then each section is subsequently split into **key** - **value** pairs. So a typical ini file would look something like this:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_write_string.htm"
    },
    "instance_activate_all": {
      "name": "instance_activate_all",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ninstance_activate_all(); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]); instance_deactivate_region(_vx\n    - 64, _vy - 64, _vw + 128, _vh + 128, false, false);\n```\nThe above code activates all instances within the room and then deactivates those that are 64px outside of the limits of the current camera view.\n",
      "description": "With this function you can tell GameMaker Studio 2 to activate all instances that have been previously deactivated in a room. Note that activation is not instantaneous, and an instance that has been activated in this way will not be considered\n    to be active until the end of the event in which the function was called.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_all.htm"
    },
    "instance_activate_layer": {
      "name": "instance_activate_layer",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The layer ID string (or value) to be used"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninstance_activate_all(); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); instance_deactivate_region(view_xview[0] - 64, view_yview - 64, _vx + 128, _vy + 128, false, false); instance_activate_layer(\"Player_Layer\");\n  \n```\nThe above code activates all instances within the room and then deactivates those that are outside of the limits of the current camera view, except for the instances on the layer \"Player_Layer\" which are re-activated again at the end.\n",
      "description": "With this function you can activate a layer that has been deactivated previously. You need to supply the **layer ID**, which can either be the name of the layer as written in the code editor (as a string) or the actual layer ID value as returned\n    by the `layer_create()` and all deactivated instances on that layer will activated once again. Note that if you have deactivated a layer that has persistent instances, you will\n    need to reactivate the layer again with this function before changing room, otherwise any persistent instances will *not* be carried over and will be discarded. Note too that activation is not instantaneous, and an instance that has been activated\n    in this way will not be considered to be active until the end of the event in which the function was called.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_layer.htm"
    },
    "instance_activate_object": {
      "name": "instance_activate_object",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object or instance to activate (the keyword **all** can also be used)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninstance_activate_all(); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]); instance_deactivate_region(_vx\n    - 64, _vy - 64, _vw + 128, _vh + 128, false, false); instance_activate_object(obj_Lights);\n  \n```\nThe above code activates all instances within the room and then deactivates those that are outside of the limits of the current camera view, except for the object \"obj_Lights\" which are re-activated again at the end.\n",
      "description": "With this function you can activate a single instance or all instances of a specific object from all those that have been deactivated previously. Note that if you have deactivated an instance or object that has been flagged as **Persistent**, then\n    you will need to reactivate it again with this function before changing room, otherwise it will *not* be carried over and will be discarded instead. Note too that activation is not instantaneous, and an instance that has been activated in this\n    way will not be considered to be active until the end of the event in which the function was called.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_object.htm"
    },
    "instance_activate_region": {
      "name": "instance_activate_region",
      "parameters": [
        {
          "parameter": "left",
          "description": "The x coordinate of the left of the rectangular region to activate."
        },
        {
          "parameter": "top",
          "description": "The y coordinate of the top of the rectangular region to activate."
        },
        {
          "parameter": "width",
          "description": "The width of the region to activate."
        },
        {
          "parameter": "height",
          "description": "The height of the region to activate."
        },
        {
          "parameter": "inside",
          "description": "Whether to activate instances on the inside of the region (true) or the outside (false)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\ninstance_deactivate_all(true); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]); instance_activate_region(_vx\n    - 64, _vy - 64, _vw + 128, _vh + 128, false);\n```\nThe above code deactivates all instances except the one that is running the code and then activates a region within the room.\n",
      "description": "With this function you can define a region within the room to activate instances that have previously been deactivated. This region can either be flagged as \"inside\" or \"outside\" as demonstrated in the following image:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_activate_region.htm"
    },
    "instance_change": {
      "name": "instance_change",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The new object the calling object will change into."
        },
        {
          "parameter": "perf",
          "description": "Whether to perform that new object's create and destroy events (true) or not (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_enter)\n    {\n        instance_change(obj_Player_Swimming, false);\n        exit;\n    }\n```\nThe above code will change the calling instance into an instance of \"obj_Player_Swimming\" without performing the original instances destroy event nor the new instances create event when the user presses the \"Enter\" key, exiting the code block when done.\n",
      "description": "You can use this function to change one instance of an object into another instance of a different object, and while doing so decide whether to perform the initial instances Destroy and Clean Up Events and the new instances Create Event. In this way, you can have (for example) a bomb change into an explosion - in which case the \"perf\" argument would probably be true as you would want the bomb to perform its Destroy Event and Clean Up Event, as well as the explosion to perform its Create Event - or you could have your player character change into a different one - in which case the \"perf\" argument would probably be false as you do not want the instances to perform their Create and Destroy/Clean Up events.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_change.htm"
    },
    "instance_copy": {
      "name": "instance_copy",
      "parameters": [
        {
          "parameter": "perf",
          "description": "Whether to perform the new instance's Create event (true) or not (false)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar inst = instance_number(object_index);\n    if inst < 10\n    {\n        instance_copy(true);\n    }\n```\nThe above code creates a local variable and uses it to store the number of instances of the object running the code in the room. If the number is less than 10, the instance then makes a copy of itself.\n",
      "description": "With this function you can \"clone\" an instance as this will create a new version of the instance running the code at its same position. The \"perf\" argument is used to instruct this new instance to perform the create event or not. This function returns the `id` of the new instance which can then be stored in a variable or used to access that instance.",
      "returns": "Real (instance ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_copy.htm"
    },
    "instance_create_depth": {
      "name": "instance_create_depth",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position the object will be created at"
        },
        {
          "parameter": "y",
          "description": "The y position the object will be created at"
        },
        {
          "parameter": "depth",
          "description": "The depth to assign the created instance to"
        },
        {
          "parameter": "obj",
          "description": "The object index of the object to create an instance of"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar inst = instance_create_depth(x, y, -10000, obj_Bullet);\n    with (inst)\n    {\n        speed = other.shoot_speed;\n        direction = other.image_angle;\n    }\n```\nThe above code creates a new instance of the object \"obj_Bullet\" and stores the instance id in a variable. This variable is then used to assign `speed` and `direction` to the new instance.\n",
      "description": "With this function you can create a new instance of the specified object at any given point within the room and at the depth specified. The depth can be any value, where the lower the depth the \"nearer\" to the camera things will be drawn and the higher the depth the further away, so an instance at depth -200 will be drawn over an instance at depth +300 (for example).",
      "returns": "Real (instance ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_create_depth.htm"
    },
    "instance_create_layer": {
      "name": "instance_create_layer",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position the object will be created at"
        },
        {
          "parameter": "y",
          "description": "The y position the object will be created at"
        },
        {
          "parameter": "layer_id",
          "description": "The layer ID (or name) to assign the created instance to"
        },
        {
          "parameter": "obj",
          "description": "The object index of the object to create an instance of"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar inst = instance_create_layer(x, y, \"instance_layer\", obj_Bullet);\n    with (inst)\n    {\n        speed = other.shoot_speed;\n        direction = other.image_angle;\n    }\n```\nThe above code creates a new instance of the object \"obj_Bullet\" and stores the instance id in a variable. This variable is then used to assign `speed` and `direction` to the new instance.\n",
      "description": "With this function you can create a new instance of the specified object at any given point within the room and on the layer specified. The layer can be identified using the layer ID value (as returned by the function `layer_create()`) or by the name of the layer (as a string, for example \"instance_layer\") as defined in the  [room editor](https://manual.yoyogames.com/The_Asset_Editors/Rooms.htm).",
      "returns": "Real (instance ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_create_layer.htm"
    },
    "instance_deactivate_all": {
      "name": "instance_deactivate_all",
      "parameters": [
        {
          "parameter": "notme",
          "description": "Whether to keep the calling instance activated (true) or not (false)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninstance_deactivate_all(true); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]); instance_activate_region(_vx\n    - 64, _vy - 64, _vw + 128, _vh + 128, false);\n```\nThe above code deactivates all instances except the one that is running the code and then activates a region within the room.\n",
      "description": "This function will deactivate **all** instances that are in the room at the moment that the code is run. This may include the instance running the code if the \"notme\" flag is set to `false`, but normally you would want that instance\n    to be active, in which case the \"notme\" flag should be set to `true`. Note that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event\n    in which the function was called.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_all.htm"
    },
    "instance_deactivate_layer": {
      "name": "instance_deactivate_layer",
      "parameters": [
        {
          "parameter": "layer",
          "description": "The layer ID string (or value) to be used"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninstance_deactivate_layer(\"Enemy Layer\"); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]);    instance_activate_region(_vx - 64, _vy - 64, _vw + 128, _vh + 128, false);\n```\nThe above code deactivates all instances assigned to the layer \"Enemy_Layer\" and then activates a region within the room.\n",
      "description": "With this function you can deactivate all instances assigned to a specific layer. You need to supply the **layer ID**, which can either be the name of the layer as written in the code editor (as a string) or the actual layer ID value as returned\n    by the `layer_create()`, and note that you can only deactivate *instance* layers with this function. Note that if you have deactivated a layer that has instances of objects\n    flagged as **Persistent**, then you will need to reactivate the layer again with the function `instance_activate_layer()` before changing room, otherwise any persistent instances on the layer will\n    *not* be carried over and will be discarded. Note too that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_layer.htm"
    },
    "instance_deactivate_object": {
      "name": "instance_deactivate_object",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object or instance to deactivate (the keyword **all** can also be used)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninstance_deactivate_object(obj_Enemy); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]);    instance_activate_region(_vx - 64, _vy - 64, _vw + 128, _vh + 128, false);\n```\nThe above code deactivates all instances of the object \"obj_Enemy\" and then activates a region within the room.\n",
      "description": "With this function you can deactivate a single instance or all instances of a specific object from all those that have been activated previously. Note that if you have deactivated an instance or object that has been flagged as **Persistent**, then\n    you will need to reactivate it again with the function `instance_activate_object()` before changing room, otherwise it will *not* be carried over and will be discarded instead. Note too that deactivation\n    is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_object.htm"
    },
    "instance_deactivate_region": {
      "name": "instance_deactivate_region",
      "parameters": [
        {
          "parameter": "left",
          "description": "The x coordinate of the left of the rectangular region to deactivate."
        },
        {
          "parameter": "top",
          "description": "The y coordinate of the top of the rectangular region to deactivate."
        },
        {
          "parameter": "width",
          "description": "The width of the region to deactivate."
        },
        {
          "parameter": "height",
          "description": "The height of the region to deactivate."
        },
        {
          "parameter": "inside",
          "description": "Whether to deactivate instances on the inside of the region (true) or the outside (false)."
        },
        {
          "parameter": "notme",
          "description": "Whether to exclude the calling instance from deactivation (true) or not (false)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\ninstance_activate_all(); var _vx = camera_get_view_x(view_camera[0]); var _vy = camera_get_view_y(view_camera[0]); var _vw = camera_get_view_width(view_camera[0]); var _vh = camera_get_view_height(view_camera[0]); instance_deactivate_region(_vx\n    - 64, _vy - 64, _vw + 128, _vh + 128, false, false);\n```\nThe above code activates all instances and then deactivates a region within the room.\n",
      "description": "With this function you can define a region within the room to deactivate instances that have previously been activated. This region can either be flagged as \"inside\" or \"outside\" as demonstrated in the following image:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/instance_deactivate_region.htm"
    },
    "instance_destroy": {
      "name": "instance_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "The instance ID or object_index to destroy (optional, default is the calling instance)"
        },
        {
          "parameter": "execute_event_flag",
          "description": "Set to `true` or `false` to perform the destroy event or not (optional, default is `true`)"
        }
      ],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (bbox_right < 0 || bbox_left > room_width || bbox_bottom < 0 || bbox_top > room_height)\n    {\n        instance_destroy(id, false);\n    }\n```\nThe above code will destroy the instance running the code without calling the Destroy Event if the instance is outside the room bounds.\n",
      "description": "You call this function whenever you wish to \"destroy\" an instance, normally triggering a  [Destroy Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Object_Events.htm) and also a  [Clean Up Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Object_Events.htm). This will remove it from the room until the room is restarted (unless the room is persistent). Calling the function with no arguments will simply destroy the instance that is currently in scope and running the code, but you can provide an optional \"id\" argument and target a specific instance by using the instance  [id](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm) value, or you can target all instances of a particular object by using an `object_index`. For example:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"
    },
    "instance_exists": {
      "name": "instance_exists",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object or instance to check for the existence of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !instance_exists(obj_Enemy)\n    {\n        score += 200;\n        room_goto(rm_hiscores);\n    }\n```\nThe above code checks to see if any instances of the object \"obj_Enemy\" exist and if not it adds to the variable \"score\" and changes room.\n",
      "description": "This function can be used in two ways depending on what you wish to check. You can give it an object_index to check for, in which case this function will return `true` if any active instances of the specified object exist in the current room, or you can also supply it with an instance id, in which case this function will return `true` if that specific instance exists and is active in the current room.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_exists.htm"
    },
    "instance_find": {
      "name": "instance_find",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object to find the nth instance of"
        },
        {
          "parameter": "n",
          "description": "The number of the instance to find."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < instance_number(obj_Enemy); ++i;)\n    {\n        enemy[i] = instance_find(obj_Enemy,i);\n    }\n```\nThe above code will use a `for` loop to iterate through all the instances of \"obj_Enemy\" and store their **id** in the array \"enemy[]\".\n",
      "description": "All instances have a unique identifier (`id`) which can be used to modify and manipulate them while a game is running, but you may not always know what the id for a specific instance is and so this function can help as you can use it to iterate through all of them to find what you need. You specify the object that you want to find the instance of and a number, and if there is an instance at that position in the instance list then the function returns the id of that instance, and if not it returns the special  [keyword](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Instance_Keywords.htm) **noone**. You can also use the keyword **all** to iterate through all the instances in a room, as well as a parent object to iterate through all the instances that are part of that parent / child hierarchy, and you can even specify an instance (if you have its id) as a check to see if it actually exists in the current room. Please note that as instances are sorted in an *arbitrary* manner, there is no specific order to how the instances are checked by this function, and any instance can be in any position.",
      "returns": "Real (either an instance ID value or the keyword \n````noone````\n)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_find.htm"
    },
    "instance_furthest": {
      "name": "instance_furthest",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check for instances far from."
        },
        {
          "parameter": "y",
          "description": "The y position to check for instances far from."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instances of."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar inst;\n    inst = instance_furthest(x, y, object_index);\n    if inst != id\n    {\n        draw_line(x, y, inst.x, inst.y);\n    }\n```\nThe above code will find the furthest instance that shares the same object index as the instance running the code and store the id in a variable. This variable is then checked to see if it is the same as the id of the calling instance and, if it is not, a line is drawn between the two instances.\n",
      "description": "This function will check all the instances of the given object to see which is furthest from the given x/y point. All checks will be from the given x/y position to the *origin* (the x/y position) of instances of the object specified. If no instances of the object exist, the function will return the keyword  [noone](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Instance_Keywords.htm), but if there are instances then it will return the `id` of the instance found. Please note that if the instance running the code has the same object index as the object being checked, then it will be included in the check (this includes checks for parent objects if the calling instance is also a child of the parent).",
      "returns": "Real (either an instance ID value or the keyword \n````noone````\n)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_furthest.htm"
    },
    "instance_id_get": {
      "name": "instance_id_get",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index within the instance list from 0 - (instance count - 1)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < instance_count; ++i;)\n    {\n        var temp_id = instance_id_get(i);\n        with (temp_id)\n        {\n            speed += 0.1;\n        }\n    }\n```\nThe above code will loop through all instances within the room and add 0.1 to their speed.\n",
      "description": "With this function you can get the unique ID value of any instance from the currently active instance list. You give the index in the instance list to get the ID from and the function will return the value for storing in a variable.",
      "returns": "Instance ID value (real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_id_get.htm"
    },
    "instance_nearest": {
      "name": "instance_nearest",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check from."
        },
        {
          "parameter": "y",
          "description": "The y position to check from."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instances of."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar inst, xx;\n    xx = x;\n    x -= 10000;\n    inst = instance_nearest(xx, y, object_index);\n    if inst != id\n    {\n        draw_line(x, y, inst.x, inst.y);\n    }\n    x += 10000;\n```\nThe above code move the current instance 10000 pixels then check its previous position to find the nearest instance of the same object type. If that instance is itself, it will do nothing more than move back to its original position, but should the instance found be different, it will draw a line between the two.\n",
      "description": "This function will check all the instances of the given object to see which is nearest to the given x/y point. All checks will be from the given x/y position to the *origin* (the x/y position) of instances of the object specified. If no instances of the object exist, the function will return the keyword noone, but if there are instances then it will return the `id` of the instance found. Please note that if the instance running the code has the same object index as the object being checked, then it will be included in the check (this includes checks for parent objects if the calling instance is also a child of the parent).",
      "returns": "Real (either an instance ID value or the keyword \n````noone````\n)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_nearest.htm"
    },
    "instance_number": {
      "name": "instance_number",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object to total the number of instances of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif instance_number(object_index) < 50\n    {\n        instance_create_layer(random(room_width), random(room_height), \"Instances\", object_index);\n    }\n```\nThe above code will check the number of instances that are created form the same object as the current instance and then if there are less than 50, create another one at a random position within the room.\n",
      "description": "With this function you can find out how many active instances of the specified object exists in the room. When checking using this function, if the object is a **parent**, then *all child objects will also be included in the return value*, and also note that those instances which have been deactivated with the  [instance deactivate](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/Deactivating_Instances.htm) functions will *not* be included in this check.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"
    },
    "instance_place": {
      "name": "instance_place",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check for instances."
        },
        {
          "parameter": "y",
          "description": "The y position to check for instances."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instances of."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar _inst = instance_place(x, y, obj_Enemy);\n    if _inst != noone\n    {\n        hp -= _inst.dmg;\n        instance_destroy(_inst);\n    }\n```\nThe above code will check for a collision with instances of \"obj_Enemy\" and if there is one, it will reduce the \"hp\" variable by the amount stored in the colliding instance's \"dmg\" variable and then destroy the colliding instance.\n",
      "description": "With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker Studio 2 to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. this function will return the unique instance `id` of the object being collided, but if that is not needed it is slightly faster to use the function `place_meeting()`. This function also accepts the special keywords **all** and **other** and will return the  [keyword](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Instance_Keywords.htm) **noone** if no collision occurs, or the unique instance ID value of the instance found if a collision does occur.",
      "returns": "Real (either an instance ID value or the keyword \n````noone````\n)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_place.htm"
    },
    "instance_place_list": {
      "name": "instance_place_list",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check for instances."
        },
        {
          "parameter": "y",
          "description": "The y position to check for instances."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instances of."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = instance_place_list(x, y, obj_Enemy, _list, false);\n    \n    if _num > 0\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    \n    ds_list_destroy(_list);\n  \n```\nThe above code will check for a collision with all instances found at the calling instances position. These will be added to a DS list, which is then looped through to destroy each of the instances in collision.\n",
      "description": "With this function you can check a position for a collision with all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker Studio 2 to move the instance to the new position, check for a collision, then move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the instances of the object being checked for have precise collision masks selected, otherwise only bounding box collisions are applied. The function will populate a (previously created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) with the unique `id` values of all instances of the object that are considered to be in collision with the calling instance, and you have the option to order the list based on the distance from the origin of the instance doing the checking to the origin of the instances found to be in collision. Note that the function also accepts the special keyword `all`, in which case all instances found to be in collision will be listed. The function returns the number of instances found, or 0 if none are found.",
      "returns": "Int (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_place_list.htm"
    },
    "instance_position": {
      "name": "instance_position",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check for instances."
        },
        {
          "parameter": "y",
          "description": "The y position to check for instances."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instances of."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar inst;\n    inst = instance_position(mouse_x, mouse_y, obj_Pause_Button);\n    if (inst != noone)\n    {\n        with (inst) image_index=1;\n        instance_create_layer(room_width / 2, 0, \"Controllers\", obj_Menu);\n    }\n```\nThe above code will check for a collision with an instance of \"obj_Pause_Button\" at the mouse position, and if there is one it will then use the returned id to set its image_index to a new value before creating a new instance of the object \"obj_Menu\".\n",
      "description": "With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked and will return the unique instance `id`. If you do not need the id of the colliding instance you should consider using `position_meeting()` instead. This function also accepts the special  [keywords](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Instance_Keywords.htm) **all** and **other** and will return the keyword **noone** if no collision occurs or the unique ID value of the instance found if a collision does occur.",
      "returns": "Real (either an instance ID value or the keyword \n````noone````\n)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"
    },
    "instance_position_list": {
      "name": "instance_position_list",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check for instances."
        },
        {
          "parameter": "y",
          "description": "The y position to check for instances."
        },
        {
          "parameter": "obj",
          "description": "The object to check for instances of."
        },
        {
          "parameter": "list",
          "description": "The DS list to use to store the IDs of colliding instances."
        },
        {
          "parameter": "ordered",
          "description": "Whether the list should be ordered by distance (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar _list = ds_list_create();\n    var _num = instance_position_list(mouse_x, mouse_y, all, _list, false);\n    if _num > 0\n    {\n        for (var i = 0; i < _num; ++i;)\n        {\n            instance_destroy(_list[| i]);\n        }\n    }\n    ds_list_destroy(_list);\n```\nThe above code will check for a collision with all instances found at the mouse position. These will be added to a DS list, which is then looped through to destroy each of the instances in collision.\n",
      "description": "With this function you can check a position for a collision with all instances of another object. When you use this you are checking a single point in the room for all instances of an object, and the check will be done against the bounding box of the instances or against the mask of the instances if that object has precise collisions checked.",
      "returns": "Int (The number of instances found to be in collision)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position_list.htm"
    },
    "instanceof": {
      "name": "instanceof",
      "parameters": [
        {
          "parameter": "struct",
          "description": "The struct reference to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "In this example we must first define the function that will be used as the constructor for the struct:\n```\nfunction init_struct(_a, _b, _c) constructor\n    {\n        a = _a;\n        b = _b;\n        c = _c;\n    }\n```\nThis function can then be used along with the `new` operator to create a struct and populate it with the variables set to the values of the arguments used in the function:\n```\nmystruct = new init_struct(10, 100, \"Hello World\");\n```\nWe can then get the name of the function that was used like this:\n```\nvar _name = instanceof(mystruct);\n    if is_string(_name)\n    {\n        show_debug_message(_name);\n    }\n```\n",
      "description": "This function can be used to get the name of the function that was used to create a struct when the struct was created using a  [constructor function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) and the  `new` operator. You supply the variable with the struct reference to check and the function will return either a string with the function name or `undefined`. Note that if you pass the function a struct literal (ie: a struct that was created without using a constructor function) then it will simply return the string \"struct\". This function can also be used to check if a struct reference is a weak reference (tooltip) or not, in which case the function will return the string \"weakref\" instead of the name of the function that created the struct for more information, see the function weak_ref_create()).",
      "returns": "```\nString or \n````undefined`",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/instanceof.htm"
    },
    "int64": {
      "name": "int64",
      "parameters": [
        {
          "parameter": "val",
          "description": "The value to convert."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsteam_handle = int64(global.fileReadString);\n```\nThe above code converts the value held in the global variable to a 64bit integer.\n",
      "description": "This function will attempt to convert a given value into a 64bit integer, where the value *must* be either a real, a string, an int64, an int32, or a ptr. Anything\n    else will cause the game to crash with an error message. You can check to see if a variable holds an int64 using the function `is_int64()`.",
      "returns": "64bit integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/int64.htm"
    },
    "io_clear": {
      "name": "io_clear",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nio_clear();\n```\nThis will clear all keyboard and mouse states.\n",
      "description": "This function will clear the current keyboard and mouse states. Note that what happens in the next step after calling this function will depend on what is being checked and the platform it is being checked on. With mouse input, the mouse button will\n    have to be released and pressed again for any further input to be detected, but with the keyboard it's not quite that simple. In general, the keyboard will be cleared *only for that step* but the next step will again detect the key, however\n    this may not be the same across all platforms and keyboards, and in some cases the function may act like it does for the mouse and require the key to be lifted and pressed again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/io_clear.htm"
    },
    "irandom": {
      "name": "irandom",
      "parameters": [
        {
          "parameter": "n",
          "description": "The upper range from which the random number will be selected."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (irandom(9) == 1)\n    {\n        score += 100;\n    }\n```\nThis will produce a one in ten (since 0 is included) chance of adding 100 to the score.\n",
      "description": "This very useful function only returns integers (whole numbers). So, for example, to get a random number from 0 to 9 you can use `irandom(9)` and it will return a number from 0 to 9 *inclusive*. Note that floats can also be used but the upper value after the point will be excluded, so `irandom(9.7)` will return a value from 0 to 9 only. The function has an upper bound of $7fffffffffffffffLL, so care should be taken if using very large numbers.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/irandom.htm"
    },
    "irandom_range": {
      "name": "irandom_range",
      "parameters": [
        {
          "parameter": "n1",
          "description": "The low end of the range from which the random number will be selected."
        },
        {
          "parameter": "n2",
          "description": "The high end of the range from which the random number will be selected."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nscore += irandom_range(500, 600);\n```\nThis will add an integer value anywhere between 500 and 600 (inclusive) to the total score.\n",
      "description": "This function is similar to `random_range()` only with integer values as the input. You supply the low value for the range as well as the high value, and the function will return a random integer value within (and\n    including) the given range. For example, `irandom_range(10, 35)` will return an integer between 10 and 35 *inclusive*.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/irandom_range.htm"
    },
    "is_array": {
      "name": "is_array",
      "parameters": [
        {
          "parameter": "n",
          "description": "The variable to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_array(a)\n    {\n        a = -1;\n    }\n```\nThe above code checks a variable to see if it is an array, and if the function returns `true`, the array is deleted by setting the variable to -1.\n",
      "description": "This function can be used to check and see if a variable holds an array (it will return `true`) or not (in which case it will return `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_array.htm"
    },
    "is_bool": {
      "name": "is_bool",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_bool(val)\n    {\n        global.Sound = val;\n    }\n    else\n    {\n        global.Sound = true;\n    }\n```\nThe above code checks the variable \"val\" to see if it is a real number and if it is it then uses it to set a global variable.\n",
      "description": "This function returns whether a given variable is a boolean (`true` ior `false`) or not. In some cases you want to check and see if a variable in GameMaker Studio 2 holds a boolean value, and that's when you would use this function.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_bool.htm"
    },
    "is_infinity": {
      "name": "is_infinity",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_infinity(global.value)\n    {\n        show_debug_message(\"Value is infinite!\");\n    }\n```\nThe above code checks the global variable \"value\" to see if it is infinite or not and shows a debug message if it is.\n",
      "description": "This function returns whether a given variable is `infinity` (an infinite number) or not, returning `true` if it is, and `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_infinity.htm"
    },
    "is_int32": {
      "name": "is_int32",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_int32(val)\n    {\n        show_debug_message(\"Not a 32 bit integer!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it contains an int32 and if it is not then it shows a message in the debug console.\n",
      "description": "This function returns whether a given variable is a 32bit integer or not. In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is an int 32 or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_int32.htm"
    },
    "is_int64": {
      "name": "is_int64",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_int64(val)\n    {\n        show_debug_message(\"Not a 64bit integer!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it contains an int64 and if it is not then it shows a message in the debug console.\n",
      "description": "This function returns whether a given variable is a 64bit integer or not. In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is an int64 or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_int64.htm"
    },
    "is_matrix": {
      "name": "is_matrix",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_matrix(val)\n    {\n        show_debug_message(\"Not a valid matrix!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it contains a matrix and if it is not then it shows a message in the debug console.\n",
      "description": "This function returns whether a given variable refers to a matrix or not. In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is a matrix or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_matrix.htm"
    },
    "is_method": {
      "name": "is_method",
      "parameters": [
        {
          "parameter": "n",
          "description": "The variable to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_method(get_vec)\n    {\n        show_debug_message(\"Method variable!\");\n    }\n```\nThe above code checks a variable to see if it is a method, and if the function returns `true`, then a debug message is output to the console.\n",
      "description": "This function can be used to check and see if a variable is a method variable (it will return `true`) or not (in which case it will return `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_method.htm"
    },
    "is_nan": {
      "name": "is_nan",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_nan(global.value)\n    {\n        show_debug_message(\"Value is not a number\");\n    }\n```\nThe above code checks the global variable \"value\" to see if it is a number or not and shows a debug message if it isn't.\n",
      "description": "This function returns whether a given variable is `NaN` (not a number) or not, returning `true` if it is, and `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_nan.htm"
    },
    "is_numeric": {
      "name": "is_numeric",
      "parameters": [
        {
          "parameter": "n",
          "description": "The input to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_numeric(val)\n    {\n        current_val += val;\n    }\n```\nThe above code checks the variable \"val\" to see if it is a numeric value and if it is it then adds it to the given variable.\n",
      "description": "This function returns whether a given variable is a numeric value (real, int32, int64 or boolean) or not. In some cases you want to check and see if a variable in GameMaker Studio 2 holds any numeric value, and that's when you would use this function. The function will return `true` if the given input is numeric, and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_numeric.htm"
    },
    "is_ptr": {
      "name": "is_ptr",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_ptr(val)\n    {\n        show_debug_message(\"Not a valid texture!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it contains a pointer and if it is not then it shows a message in the debug console.\n",
      "description": "This function returns whether a given variable is a pointer or not. In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is a pointer or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_ptr.htm"
    },
    "is_real": {
      "name": "is_real",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_real(val)\n    {\n        score += val;\n    }\n```\nThe above code checks the variable \"val\" to see if it is a real number and if it is it then adds it to the score.\n",
      "description": "This function returns whether a given variable is a real number (single, double or integer) or not. In some cases you want to check and see if a variable holds a real number, and that's when you would use this function. It does *not* return the real number but rather `true` or `false`, so a value of, for example, \"fish\" would return `false`, however a value of 200 would return `true`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_real.htm"
    },
    "is_string": {
      "name": "is_string",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_string(val)\n    {\n        name = \"Player: \" + val;\n    }\n```\nThe above code checks the variable \"val\" to see if it contains a string and if it does it adds it into another string which is then assigned to the variable \"name\".\n",
      "description": "This function returns whether a given variable is a string number or not. In some cases you want to check and see if a variable in GameMaker Studio 2 holds a string and not a real and that's when you would use this function. It does *not* return the string but rather `true` or `false`, so a value of, for example, \"fish\" for n will return `true`, but a value of 200 for n will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_string.htm"
    },
    "is_struct": {
      "name": "is_struct",
      "parameters": [
        {
          "parameter": "val",
          "description": "The value to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif is_struct(a)\n    {\n        delete(a);\n    }\n```\nThe above code checks a variable to see if it is a struct, and if the function returns `true`, the struct is deleted.\n",
      "description": "This function checks if the supplied value is a struct. It returns `true` if it is, otherwise it returns `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_struct.htm"
    },
    "is_undefined": {
      "name": "is_undefined",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar val = ds_map_find_value(map, 13);\n    if is_undefined(val)\n    {\n        show_debug_message(\"Map entry does not exist!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it is undefined or not and shows a debug message if it is.\n",
      "description": "This function returns whether a given variable is defined or not. In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is defined or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_undefined.htm"
    },
    "is_vec3": {
      "name": "is_vec3",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_vec3(val)\n    {\n        show_debug_message(\"Not a 3 value vector!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it contains a vec3 and if it is not then it shows a message in the debug console.\n",
      "description": "In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is a 3 value vector or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_vec3.htm"
    },
    "is_vec4": {
      "name": "is_vec4",
      "parameters": [
        {
          "parameter": "n",
          "description": "The argument to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_vec4(val)\n    {\n        show_debug_message(\"Not a 4 value vector!\");\n    }\n```\nThe above code checks the variable \"val\" to see if it contains a vec4 and if it is not then it shows a message in the debug console.\n",
      "description": "In some cases you want to check and see what data type a variable holds in GameMaker Studio 2 and that's when you would use this function. It returns `true` or `false` depending on whether the value is a 4 value vector or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/is_vec4.htm"
    },
    "json_decode": {
      "name": "json_decode",
      "parameters": [
        {
          "parameter": "string",
          "description": "The JSON format string that you are passing to the function for decoding"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar resultMap = json_decode(requestResult);\n    var list = ds_map_find_value(resultMap, \"default\");\n    var size = ds_list_size(list);\n    for (var n = 0; n < ds_list_size(list); n++;)\n    {\n        var map = ds_list_find_value(list, n);\n        var curr = ds_map_find_first(map);\n        while (is_string(curr))\n        {\n            global.Name[n] = ds_map_find_value(map, \"name\");\n            curr = ds_map_find_next(map, curr);\n        }\n    }\n    ds_map_destroy(resultMap);\n```\nThe above code will decode a JSON string and parse it to generate a global array.\n",
      "description": "**IMPORTANT!** This function - while still valid - has been superseded by the function  [json_parse()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm), and we recommend that you only use this function for legacy support.",
      "returns": "DS map id or -1 if it fails",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm"
    },
    "json_encode": {
      "name": "json_encode",
      "parameters": [
        {
          "parameter": "map",
          "description": "a DS map with the information to encode (or an array)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar hiscore_map, i, str;\n    hiscore_map = ds_map_create();\n    for (i = 0; i < 10; i ++;)\n    {\n        ds_map_add(hiscore_map, name[i], score[i]);\n    }\n    str = json_encode(hiscore_map);\n    get[0] = http_post_string(\"http://www.angusgames.com/game?game_id=\" + string(global.game_id), str)\n    ds_map_destroy(hiscore_map);\n```\nThe above code creates a DS map and then loops through the name and score arrays, adding each key/value pair to the new map. Next, this map is encoded using `json_encode()` and stored as a string in the variable \"str\". This string is then sent to a web server using `http_post_string()` and the DS map is destroyed to prevent a memory leak as it is no-longer needed.\n",
      "description": "**IMPORTANT!** This function - while still valid - has been superseded by the function  [json_stringify()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm), and we recommend that you only use this function for legacy support.",
      "returns": "string",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm"
    },
    "json_parse": {
      "name": "json_parse",
      "parameters": [
        {
          "parameter": "json",
          "description": "The JSON string to parse"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\njson = \"{\\\"myObj\\\": { \\\"apples\\\":10, \\\"oranges\\\":12, \\\"potatoes\\\":100000, \\\"avocados\\\":0 }, \\\"myArray\\\":[0, 1, 2, 2, 4, 0, 1, 5, 1]}\";\n    \n    data = json_parse(json);\n    show_debug_message(data);\n  \n```\nThe above code creates a new string containing a valid JSON object, and then calls json_parse() to convert that string into a GML struct. It then prints the result to the debug log.\nNOTE You will notice that the JSON string contains a backslash (\\) before every double quote (\") inside it:\n    \n    json = \"{ **\\\" **myObj\n    \n    This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to \"escape\" the double quote.\n    \n    If you are loading JSON from an external file however, there is no need to escape characters in that file and doing so may result in errors during parsing.\n  \n",
      "description": "This function can be used to parse a JSON string (either previously created using  [json_stringify](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm) or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different  [Variable Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/Variable_Functions.htm) (like typeof() and variable_struct_get_names() in case of a struct) to check the returned contents. Note that trying to parse an invalid value (i.e.: not a string) will throw an exception error.",
      "returns": "Struct or Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm"
    },
    "json_stringify": {
      "name": "json_stringify",
      "parameters": [
        {
          "parameter": "val",
          "description": "The reference value for a struct or array to convert into a JSON string"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _contents =\n    {\n        version : \"1\",\n        data: {\n            webSocket : 1,\n            ipv4Address : \"95.39.220.218\",\n            ipv6Address : \"0000:0000:0000:0000:0000:ffff:5f27:dcda\",\n            header : \"You are receiving a packet\",\n            body : \"This packet is empty and only for testing\",\n        },    \n    };\n    \n    packet = json_stringify(_contents);\n  \n```\nThe above code will convert the \"_contents\" struct into a JSON string and store the string in a variable. The actual string would be  like this:\n```\n{ \"version\": \"1\", \"myObj\": { \"header\": \"You are receiving a packet\", \"webSocket\": 1, \"body\": \"A packet of cheese and onion crisps\", \"ipv4Address\": \"95.39.220.218\", \"ipv6Address\": \"0000:0000:0000:0000:0000:ffff:5f27:dcda\" } }\n```\n",
      "description": "With this function you can convert single or nested structs and arrays into a valid JSON string. You supply the initial value to use (an array index or a struct reference) and then the function will \"stringify\" it, converting it into a JSON string (converting GameMaker arrays into JSON arrays, and GameMaker structs into JSON objects).",
      "returns": "string",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm"
    },
    "keyboard_check": {
      "name": "keyboard_check",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to check the down state of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_left)\n    {\n        x -= 5;\n    }\n```\nThe above code will check to see if the arrow key is being pressed and move the instance 5 pixels left every step that it returns true.\n",
      "description": "With this function you can check to see if a key is held down or not. Unlike the `keyboard_check_pressed()` or `keyboard_check_released()` functions which are only triggered once when the key is pressed or released, this function is triggered every step that the key is held down for. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check.htm"
    },
    "keyboard_check_direct": {
      "name": "keyboard_check_direct",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to check the down state of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_direct(vk_ralt) || keyboard_check_direct(vk_lalt)\n    {\n        crouch = true;\n    }\n```\nThe above code will check to see if either the left or right alt keys have been pressed, and if they have it sets the variable \"crouch\" to true.\n",
      "description": "This function will return `true` if the key with the particular keycode is pressed, or `false` if it is not, by checking the hardware directly. It allows for a few more checks, in particular you can use keycodes **vk_lshift**, **vk_lcontrol**, **vk_lalt**, **vk_rshift**, **vk_rcontrol** and **vk_ralt** to check whether the left or right shift, control or alt key is pressed. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check_direct.htm"
    },
    "keyboard_check_pressed": {
      "name": "keyboard_check_pressed",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to check the pressed state of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_anykey)\n    {\n        room_goto_next();\n    }\n```\nThe above code will advance to the next room if the player presses any of the keyboard's keys (working like a \"Press Any Key to Continue\" prompt).\n",
      "description": "With this function you can check to see if a key has been pressed or not. Unlike the `keyboard_check()` function, this function will only run once for every time the key is pressed down, so for it to trigger again, the key must be first released and then pressed again. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check_pressed.htm"
    },
    "keyboard_check_released": {
      "name": "keyboard_check_released",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to check the released state of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_released(ord(\"P\"))\n    {\n        instance_create_layer(0, 0, \"Controllers\", obj_Pause);\n    }\n```\nThe above code will check to see if the \"P\" key has been released and if so, create an instance of \"obj_Pause\".\n",
      "description": "With this function you can check to see if a key has been released or not. Unlike the `keyboard_check()` function, this function will only run once for every time the key is lifted, so for it to trigger again, the key must be first pressed and then released again. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_check_released.htm"
    },
    "keyboard_clear": {
      "name": "keyboard_clear",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nkeyboard_clear(vk_space);\n```\nThe above code clears the state of the spacebar.\n",
      "description": "With this function you can clear the current keyboard state, which essentially means that if the key is being held down, it will no longer be recognised until it is released again (which won't trigger the Keyboard Key Released event either on this\n    occasion) and pressed again. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed\n    on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_clear.htm"
    },
    "keyboard_get_map": {
      "name": "keyboard_get_map",
      "parameters": [
        {
          "parameter": "key",
          "description": "This is the key that you wish to get the mapped value from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_get_map(ord(\"A\")) = ord(\"A\")\n    {\n        keyboard_set_map(ord(\"A\"), keyboard_lastkey);\n    }\n```\nThe above example code will first check and see if \"A\" has been mapped to another key, and if it hasn't it will map it to the last key that the user has pressed.\n",
      "description": "Sometimes you may wish to get the ascii code for a mapped key (to see if it is already mapped, for example) which is what this function returns. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_get_map.htm"
    },
    "keyboard_get_numlock": {
      "name": "keyboard_get_numlock",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_get_numlock()\n    {\n        keyboard_set_numlock(false);\n    }\n    else\n    {\n        keyboard_set_numlock(true);\n    }\n```\nThe above example code will get the state of the numberlock key and if it is on (true) it will set it to off (false) and vice-versa.\n",
      "description": "You can use this function to find the status of the keypad number lock with **true** being returned for on, and **false** returned for off.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_get_numlock.htm"
    },
    "keyboard_key_press": {
      "name": "keyboard_key_press",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to simulate a press of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nkeyboard_key_press(vk_space);\n```\nThis will simulate a spacebar press.\n",
      "description": "With this function you can simulate the press of any key on the keyboard. When used, the key will be flagged as being pressed until the corresponding release function is called (see `keyboard_key_release()`).\n    The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9), or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm)    page.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_key_press.htm"
    },
    "keyboard_key_release": {
      "name": "keyboard_key_release",
      "parameters": [
        {
          "parameter": "key",
          "description": "The key to simulate a release of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nkeyboard_key_release(vk_space);\n```\nThis will simulate a spacebar release.\n",
      "description": "With this function you can simulate the release of any key on the keyboard. The function will take a keycode value as returned by the function `ord()` (only *capital* letters from A-Z or numbers from 0-9),\n    or any of the `vk_*` constants listed on the main  [Keyboard Input](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm) page.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_key_release.htm"
    },
    "keyboard_set_map": {
      "name": "keyboard_set_map",
      "parameters": [
        {
          "parameter": "key1",
          "description": "This is the key that key1 is to be mapped to"
        },
        {
          "parameter": "key2",
          "description": "This is the key that is to be mapped"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nkeyboard_set_map(ord(\"A\"), vk_left);\n```\nThe above example code will map the \"A\" key to the left arrow key. This means that the player can use either the \"A\" *or* the left arrow key, and that all code written for the left arrow will also respond to the \"A\"\n    key being used instead.\n",
      "description": "Sometimes when making a game you may wish one key to do the same as another. For example many people use the keys WASD for movement, but then many people *also* use the arrow keys! So, what to do? Well, you *could* code the movement system\n    twice, but that is a bit complicated and thankfully redundant as this function permits you to \"map\" one key to another and so any input from either key will be interpreted as the same. To do this you choose a key that you want to map (key2\n    - this will be the key that you write the code for) and a key that you want it to be mapped *to* (key1). After that, keypresses to either key will be interpreted by GameMaker Studio 2 as coming from key2. You can also use this function to design\n    a system where the user can define their own keys for playing by simply mapping the user input key to the key that you have coded into the game.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_set_map.htm"
    },
    "keyboard_set_numlock": {
      "name": "keyboard_set_numlock",
      "parameters": [
        {
          "parameter": "value",
          "description": "Set this to true for \"on\" and false for \"off\""
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_get_numlock()\n    {\n        keyboard_set_numlock(false);\n    }\n    else\n    {\n        keyboard_set_numlock(true);\n    }\n```\nThe above example code will get the state of the numberlock key and if it is on (true) it will set it to off (false) and vice-versa.\n",
      "description": "You can use this function to switch the keypad number-lock on or off (set to **true** for on, and **false** for off).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_set_numlock.htm"
    },
    "keyboard_unset_map": {
      "name": "keyboard_unset_map",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_escape)\n    {\n        keyboard_unset_map();\n    }\n```\nThe above example code will reset all mapped keys to their default settings if the user presses the \"escape\" key.\n",
      "description": "With this function you can clear all re-mapped keys so that they return to their default state, ie: all keys to map to themselves.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_unset_map.htm"
    },
    "keyboard_virtual_height": {
      "name": "keyboard_virtual_height",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_virtual_status() == true\n    {\n        key_h = keyboard_virtual_height();\n    }\n```\nThe above code will check the status of the OS virtual keyboard, and if it's visible set a variable to the height of the keyboard.\n",
      "description": "This function will return the current height in pixels of the virtual keyboard, based on the size of the *display*. If the keyboard is not visible, 0 will be returned.",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_height.htm"
    },
    "keyboard_virtual_hide": {
      "name": "keyboard_virtual_hide",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif input == true\n    {\n        input = false;\n        keyboard_virtual_hide();\n    }\n```\nThe above code will hide the OS virtual keyboard if the given variable is not set to `false`.\n",
      "description": "This function can be used to hide the virtual keyboard on the device running the game. Calling this function will generate a  [System Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/System.htm), in which the `async_load` DS map will be populated with the following key/value pairs:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_hide.htm"
    },
    "keyboard_virtual_show": {
      "name": "keyboard_virtual_show",
      "parameters": [
        {
          "parameter": "keyboard_type",
          "description": "Determines the keyset available on the virtual keyboard."
        },
        {
          "parameter": "return_key_type",
          "description": "Determines what is shown on the return/action key of the virtual keyboard."
        },
        {
          "parameter": "autocapitalization_type",
          "description": "Determines how/if the words typed via the virtual keyboard will be autocapitalized."
        },
        {
          "parameter": "predictive_text_enabled",
          "description": "Set to `true`/`false` to enable/disable predictive text input."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif input == false\n    {\n        input = true;\n        keyboard_virtual_show(kbv_type_numbers, kbv_returnkey_default, kbv_autocapitalize_none, false);\n    }\n```\nThe above code will bring up the OS virtual keyboard if the given variable is not set to `true`.\n",
      "description": "This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_show.htm"
    },
    "keyboard_virtual_status": {
      "name": "keyboard_virtual_status",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _status = keyboard_virtual_status();\n    if _status == false\n    {\n        keyboard_virtual_show(kbv_type_numbers, kbv_returnkey_default, kbv_autocapitalize_none, false);\n    }\n```\nThe above code will show the OS virtual keyboard if the current status is `false`.\n",
      "description": "This function can be used to get the status of the virtual keyboard on the device running the game. The function will return `true` if the OS virtual keyboard is visible/being shown or `false` if it is hidden/hiding.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/keyboard_virtual_status.htm"
    },
    "layer_add_instance": {
      "name": "layer_add_instance",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the instance layer to target (or the layer name as a string)"
        },
        {
          "parameter": "instance_id",
          "description": "The unique instance ID value of the instance to move over to the target layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar near = instance_nearest(x, y, obj_Tree); var layer_id = layer_get_id(\"Instances Front\"); layer_add_instance(layer_id, near);\n```\nThe above code will first get the index of the nearest instance to the given x/y position and store it in a local variable. It then gets the unique instance layer ID for the layer named \"Instances Front\", and moves the found instance onto\n    that layer.\n",
      "description": "This function can be used to move a given instance from the layer it is currently on to another layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as\n    a string - this will have a performance impact) and the instance ID of the instance to move between layers. For example, say your player is on a layer that is at a lower depth than another layer and you want it to appear behind the layers between\n    the two. You can use this function to switch the player from the foreground layer to the background layer and make it appear behind the other layers being drawn.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_add_instance.htm"
    },
    "layer_background_alpha": {
      "name": "layer_background_alpha",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "alpha",
          "description": "The alpha for background sprite, from 0 to 1 (default is 1)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\"); var back_id = layer_background_get_id(lay_id); layer_background_alpha(back_id, random(1));\n```\nThe above code gets the ID value of the background assigned to the layer \"Background_sky\" and then sets its alpha to a random value between 0 and 1.\n",
      "description": "This function controls the alpha (transparency) of the background sprite. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when\n    you use the function `layer_background_get_id()`), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the background\n    element being 1. Note that if the layer the background element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible\n    again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_alpha.htm"
    },
    "layer_background_blend": {
      "name": "layer_background_blend",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "blend",
          "description": "The colour to blend with the background sprite (default is `c_white`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\"); var back_id = layer_background_get_id(lay_id); layer_background_blend(back_id, c_aqua);\n```\nThe above code gets the ID value of the background assigned to the layer \"Background_sky\" and then tints it to a colour.\n",
      "description": "This function controls the blending (or \"tinting\") of the background sprite and the default value is -1 (which represents the constant `c_white`, which can also be used). Any other value (including internal colour constants like `c_red`,\n    or `c_aqua`) will blend the specified colour with the original sprite. You give the background element ID (which you get when you create a background element using `layer_background_create()`    or when you use the function `layer_background_get_id()`), and then set the blending colour to use. Below you can see an example of a sprite that has been blended with different colours:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_blend.htm"
    },
    "layer_background_create": {
      "name": "layer_background_create",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "sprite",
          "description": "The sprite index to be used"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.back_layer = layer_create(10000); global.back_trees = layer_background_create(global.back_layer, spr_Trees);\n```\nThe above code creates a new layer and then adds a new background element to it, setting a sprite to be the background image used.\n",
      "description": "With this function you can assign a sprite resource to a layer to be used as a background in your project. You supply the layer ID (which you get when you create the layer using `layer_create()`)\n    or the layer name (as a string - this will have a performance impact) and a sprite index (which would be the name of the sprite as shown in the Asset Browser), and it will be added to the layer. The function returns the unique ID value for the element,\n    which can then be used in further layer functions for backgrounds.",
      "returns": "Background element ID (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_create.htm"
    },
    "layer_background_destroy": {
      "name": "layer_background_destroy",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background to be destroyed"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_trees\");\n    var bck_id = layer_background_get_id(\"Forrest\");\n    if layer_background_exists(lay_id, bck_id)\n    {\n        layer_background_destroy(bck_id);\n    }\n```\nThe above code checks the layer \"Background_trees\" to see if the given background element exists and if it does, then it is destroyed (but not the layer).\n",
      "description": "This function will destroy the given background element. You supply the background ID (which you get when you create the background using `layer_background_create()` or when you use the layer ID along with `layer_get_background_id()`) and this will remove it. Note that this does *not* remove the layer, only the background from it, and if the background is one that has been added in the room editor, then the next time you leave the room and then return, the background will be recreated again. However if the room is persistent, the background will be removed unless room persistence is switched off again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_destroy.htm"
    },
    "layer_background_exists": {
      "name": "layer_background_exists",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_trees\");\n    if layer_background_exists(lay_id, global.TreesBackground)\n    {\n        layer_background_destroy(lay_id, global.TreesBackground);\n    }\n```\nThe above code checks the layer \"Background_trees\" to see if the given background element exists and if it does, then it is destroyed (but not the layer).\n",
      "description": "You can use this function to check and see if a background element exists on any given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`) and the function will return either `true` if the element exists, or `false` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_exists.htm"
    },
    "layer_background_get_alpha": {
      "name": "layer_background_get_alpha",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_alpha(back_id) < 0.1\n    {\n        layer_background_destroy(back_id);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the element alpha and if it is less than 0.1, then the layer element is destroyed.\n",
      "description": "This function can be used to get the alpha value of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).",
      "returns": "Real (from 0 to 1)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_alpha.htm"
    },
    "layer_background_get_blend": {
      "name": "layer_background_get_blend",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_blend(back_id) == c_white\n    {\n        layer_background_blend(back_id, make_colour_rgb(random(255), random(255), 255));\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the element blend colour and if it is equivalent to the constant `c_white`, then the layer blend is set to a random colour.\n",
      "description": "This function can be used to get the blend colour of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return real value that represents the colour assigned.",
      "returns": "Colour Value (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_blend.htm"
    },
    "layer_background_get_htiled": {
      "name": "layer_background_get_htiled",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if !layer_background_get_htiled(back_id)\n    {\n        layer_background_htiled(back_id, true);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check if the element is tiling across the horizontal axis, and if it is not then it is set to do so.\n",
      "description": "This function can be used to find out if the background element is tiled horizontally or not. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return either `true` if the element is currently tiled, or `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_htiled.htm"
    },
    "layer_background_get_id": {
      "name": "layer_background_get_id",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_trees\"); var back_id = layer_background_get_id(lay_id); layer_background_sprite(back_id, bck_Trees_Winter);\n```\nThe above code will get the layer ID for the layer named \"Background_trees\" and then use that to get the ID of the background element on that layer. This ID is then used to change the element sprite.\n",
      "description": "This function can be used to retrieve the unique ID value of the background element on a layer. You supply the layer ID (which you get when you use the layer name along with `layer_get_id()`)\n    and the function will return the ID value associated with the background element on the layer. Note that this function is specifically designed for use with backgrounds that have been added in the IDE, as if you add a background to a layer through\n    code using the function `layer_background_create()`, then it will return the unique ID for the background element added.",
      "returns": "Background element ID value (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_id.htm"
    },
    "layer_background_get_index": {
      "name": "layer_background_get_index",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_index(back_id) < 4\n    {\n        layer_background_index(back_id, 4);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check if the image index for the element is less than 4, and if so it is set to 4.\n",
      "description": "This function can be used to get the current image index value of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return real value that represents the image index being shown for the sprite. The function will return -1 if either the background element doesn't exist or the element doesn't have a valid sprite assigned to it.",
      "returns": "Real (the current sprite image index or -1)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_index.htm"
    },
    "layer_background_get_speed": {
      "name": "layer_background_get_speed",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_speed(back_id) > 0\n    {\n        layer_background_speed(back_id, 0);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the animation speed for the element and if it is greater than 0, it is set to 0.\n",
      "description": "This function can be used to get the current speed multiplier value of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return real value that represents the speed multiplier being used to animate the sprite. Default value is 1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_speed.htm"
    },
    "layer_background_get_sprite": {
      "name": "layer_background_get_sprite",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_sprite(back_id) != spr_Clouds\n    {\n        layer_background_sprite(back_id, spr_Clouds);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the sprite assigned to the element, setting it to the sprite \"spr_Clouds\" if it is not already.\n",
      "description": "This function can be used to get the current sprite index value of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return a real value that represents the sprite index being shown. If the element has no sprite assigned, the function will return -1.",
      "returns": "Sprite Index (Real) or -1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_sprite.htm"
    },
    "layer_background_get_stretch": {
      "name": "layer_background_get_stretch",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_stretch(back_id)\n    {\n        layer_background_stretch(back_id, false);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check and see if the element sprite will be stretched to fit the room or not and if it is stretched, then this property is set to `false`.\n",
      "description": "This function can be used to get the stretched state of the background element sprite. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return either `true` if the element sprite is currently stretched to fit the room, or `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_stretch.htm"
    },
    "layer_background_get_visible": {
      "name": "layer_background_get_visible",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_visible(back_id)\n    {\n        layer_background_visible(back_id, false);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the element visibility and if it is visible, then this property is set to `false`.\n",
      "description": "This function can be used to get the visible state of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return either `true` if the element is currently visible, or `false` if it is not. Note that this return value is *not* affected by whether the layer the element is on is visible or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_visible.htm"
    },
    "layer_background_get_vtiled": {
      "name": "layer_background_get_vtiled",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if !layer_background_get_vtiled(back_id)\n    {\n        layer_background_vtiled(back_id, true);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check if the element is tiling across the vertical axis, and if it is not then it is set to do so.\n",
      "description": "This function can be used to find out if the background element is tiled vertically or not. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return either `true` if the element is currently tiled, or `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_vtiled.htm"
    },
    "layer_background_get_xscale": {
      "name": "layer_background_get_xscale",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_xscale(back_id) != -1\n    {\n        layer_background_xscale(back_id, -1);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the x scale for the element and if it is not -1, it is set to -1.\n",
      "description": "This function can be used to get the current scale multiplier value of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return real value that represents the scale multiplier being used to draw the sprite. Default value is 1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_xscale.htm"
    },
    "layer_background_get_yscale": {
      "name": "layer_background_get_yscale",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_yscale(back_id) != -1\n    {\n        layer_background_yscale(back_id, -1);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the y scale for the element and if it is not -1, it is set to -1.\n",
      "description": "This function can be used to get the current scale multiplier value of the background element. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and the function will return real value that represents the scale multiplier being used to draw the sprite. Default value is 1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_get_yscale.htm"
    },
    "layer_background_htiled": {
      "name": "layer_background_htiled",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "visible",
          "description": "The horizontal tiling toggle, which can be `true` or `false`"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar back = layer_background_get_id(layer);\n    if !layer_background_get_htiled(back) || !layer_background_get_vtiled(back)\n    {\n        layer_background_htiled(back, true);\n        layer_background_vtiled(back, true);\n    }\n```\nThe above code will check the background element assigned to the layer the instance running the code is on and if it is not tiled in either direction it will set it to tile vertically and horizontally.\n",
      "description": "Using this function you can change whether the given background element on a layer should be tiled horizontally or not. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and then set the tiling value. If set to `true` then the element will be displayed tiled horizontally across the room, and when set to `false`, the element will not be tiled. This function is for 2D projects only, and will not work correctly when a 3D camera projection is used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_htiled.htm"
    },
    "layer_background_index": {
      "name": "layer_background_index",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "index",
          "description": "The image index to use for the background"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_trees\"); var back_id = layer_background_get_id(lay_id); layer_background_index(back_id, 1);\n```\nThe above code will get the layer ID for the layer named \"Background_trees\" and then use that to get the ID of the background element on that layer. This ID is then used to change the element image index.\n",
      "description": "This function can be used to set the image index of the background sprite which has multiple sub-images. You give the background element ID (which you get when you create a background element using `layer_background_create()`    or when you use the function `layer_background_get_id()`), and then set the image index to use. If you set a value outside of the range of sub-images, then the image index will loop around.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_index.htm"
    },
    "layer_background_speed": {
      "name": "layer_background_speed",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "speed",
          "description": "The speed multiplier/value to use for the element"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_water\"); var back_id = layer_background_get_id(lay_id); layer_background_speed(back_id, 0.5);\n```\nThe above code will get the layer ID for the layer named \"Background_water\" and then use that to get the ID of the background element on that layer. This ID is then used to change the element image speed.\n",
      "description": "This function can be used to set the speed of an animating sprite that has been assigned to a background element. You give the background element ID (which you get when you create a background element using `layer_background_create()`    or when you use the function `layer_background_get_id()`), and then set the animation speed. If the IDE has set the animation speed for the sprite used to be calculated as Frames Per Game Frame, then\n    the speed value given is a *multiplier*, with 1 being the default value, and setting it to 0.5 will half the animation speed, while setting it to 2 will double it. However, if the IDE has set the animation speed for the sprite used to be calculated\n    as Frames Per Second, then the speed value given is a literal frames per second value, so setting this to 5, for example, will set the animation to loop 5 frames every second that the game runs. If the background element has no sprite attached or\n    the sprite used has no sub-images, this function will have no effect.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_speed.htm"
    },
    "layer_background_sprite": {
      "name": "layer_background_sprite",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "sprite_index",
          "description": "The sprite index of the sprite to use for the background element"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_sky\");\n    var back_id = layer_background_get_id(lay_id);\n    if layer_background_get_sprite(back_id) != spr_Clouds\n    {\n        layer_background_sprite(back_id, spr_Clouds);\n    }\n```\nThe above code will get the layer ID for the layer named \"Background_sky\" and then use that to get the ID of the background element on that layer. This ID is then used to check the sprite assigned to the element, setting it to the sprite \"spr_Clouds\" if it is not already.\n",
      "description": "Using this function you can set the sprite index of the background element. You supply the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and then give a sprite index to be used. The background element image will be replaced with the new sprite. If you give a value of -1, the element will have no sprite assigned (but will still exist and can have a sprite assigned again later).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_sprite.htm"
    },
    "layer_background_stretch": {
      "name": "layer_background_stretch",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "stretch",
          "description": "The stretch toggle, which can be `true` or `false`"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        var back = layer_background_get_id(layer);\n        if layer_background_get_stretch(back)\n        {\n            layer_background_stretch(back, false);\n        }\n        else\n        {\n            layer_background_stretch(back, true);\n        }\n    }\n```\nThe above code checks for a mouse button press and if one is detected it will toggle the stretching of the background element sprite assigned to the layer the instance running the code is on.\n",
      "description": "Using this function you can toggle a background element sprite to stretch to fit the room or remain at 1:1 with the resolution. You supply the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and then set the stretch argument to `true` or `false`. When set to `true` the element sprite will be stretched to fit the room (either scaled up or scaled down depending on the sizes of the sprite and the room), and when set to `false`, the element sprite will be displayed at its native resolution.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_stretch.htm"
    },
    "layer_background_visible": {
      "name": "layer_background_visible",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "visible",
          "description": "The visibility toggle, which can be `true` or `false`"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        var back = layer_background_get_id(layer);\n        if layer_background_get_visible(back)\n        {\n            layer_background_visible(back, false);\n        }\n        else\n        {\n            layer_background_visible(back, true);\n        }\n    }\n```\nThe above code checks for a mouse button press and if one is detected it will toggle the background visibility of the background element assigned to the layer the instance running the code is on.\n",
      "description": "Using this function you can toggle a background elements visibility. You supply the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and then set the visible argument to `true` or `false`. When set to `true` the element will be displayed, and when set to `false`, the element will not be displayed. Note that this is dependent on the layer visibility, and even if the background element is flagged as visible, it will not be drawn if the layer it is on is flagged as not visible.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_visible.htm"
    },
    "layer_background_vtiled": {
      "name": "layer_background_vtiled",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "visible",
          "description": "The vertical tiling toggle, which can be `true` or `false`"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar back = layer_background_get_id(layer);\n    if !layer_background_get_htiled(back) || !layer_background_get_vtiled(back)\n    {\n        layer_background_htiled(back, true);\n        layer_background_vtiled(back, true);\n    }\n```\nThe above code will check the background element assigned to the layer the instance running the code is on and if it is not tiled in either direction it will set it to tile vertically and horizontally.\n",
      "description": "Using this function you can change whether the given background element on a layer should be tiled vertically or not. You give the background element ID (which you get when you create a background element using `layer_background_create()` or when you use the function `layer_background_get_id()`), and then set the tiling value. If set to `true` then the element will be displayed tiled vertically down the room, and when set to `false`, the element will not be tiled. This function is for 2D projects only, and will not work correctly when a 3D camera projection is used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_vtiled.htm"
    },
    "layer_background_xscale": {
      "name": "layer_background_xscale",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "xscale",
          "description": "The scale value to use (1 is no scaling)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_water\"); var back_id = layer_background_get_id(lay_id); layer_background_xscale(back_id, -1);\n```\nThe above code will get the layer ID for the layer named \"Background_water\" and then use that to get the ID of the background element on that layer. This ID is then used to change the element xscale.\n",
      "description": "This function can be used to set the scale along the x-axis of a background element. You give the background element ID (which you get when you create a background element using `layer_background_create()`    or when you use the function `layer_background_get_id()`), and then set the scale value. The scale value you give is a multiplier that will be used to change the way the background element is displayed,\n    where a value of 0.5 would display the element at half scale, and a value of 2 would display at double scale. Note that negative values are valid, and will \"flip\" the element around the (0,0) position, so an x scale of -1 would show the\n    image reversed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_xscale.htm"
    },
    "layer_background_yscale": {
      "name": "layer_background_yscale",
      "parameters": [
        {
          "parameter": "background_element_id",
          "description": "The unique ID value of the background element to change"
        },
        {
          "parameter": "speed",
          "description": "The speed multiplier/value to use for the element"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Background_water\"); var back_id = layer_background_get_id(lay_id); layer_background_yscale(back_id, -1);\n```\nThe above code will get the layer ID for the layer named \"Background_water\" and then use that to get the ID of the background element on that layer. This ID is then used to change the element yscale.\n",
      "description": "This function can be used to set the scale along the y-axis of a background element. You give the background element ID (which you get when you create a background element using `layer_background_create()`    or when you use the function `layer_background_get_id()`), and then set the scale value. The scale value you give is a multiplier that will be used to change the way the background element is displayed,\n    where a value of 0.5 would display the element at half scale, and a value of 2 would display at double scale. Note that negative values are valid, and will \"flip\" the element around the (0,0) position, so an x scale of -1 would show the\n    image reversed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Background_Layers/layer_background_yscale.htm"
    },
    "layer_clear_fx": {
      "name": "layer_clear_fx",
      "parameters": [
        {
          "parameter": "layer_name_or_id",
          "description": "The name or ID of the layer to modify"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\n// Disable effect\n    if (keyboard_check_pressed(ord(\"E\")))\n    {\n        if (layer_get_fx(\"EffectLayer\") != -1)\n        {\n            temp_fx = layer_get_fx(\"EffectLayer\");\n            layer_clear_fx(\"EffectLayer\");\n        }\n    }\n    // Re-enable effect\n    else if (keyboard_check_pressed(ord(\"F\")))\n    {\n        if (temp_fx != -1)\n        {\n            layer_set_fx(\"EffectLayer\", temp_fx);\n            temp_fx = -1;\n        }\n    }\n```\nThe above code checks if the \"E\" key is pressed, and then checks if the layer \"EffectLayer\" has a filter/effect applied to it; in that case it stores its FX struct in a temporary instance variable and clears the layer of any filters/effects. When the \"F\" key is pressed, it checks if the temporary variable holds something other than -1, and in that case it applies that FX back to the layer and resets the temporary variable to -1. All of this essentially allows you to enable and disable an effect whenever you need without losing its parameters.\n",
      "description": "This function is used to clear the FX struct that is applied to the specified layer. You specify either the ID or the name of the layer you want to modify and this function will remove the FX struct that is applied to that layer, disabling its effects completely.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_clear_fx.htm"
    },
    "layer_create": {
      "name": "layer_create",
      "parameters": [
        {
          "parameter": "depth",
          "description": "The depth that the layer has to be created at."
        },
        {
          "parameter": "name",
          "description": "The name to give the layer (a string - optional)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.Bullet_Layer = layer_create(-100);\n```\nThe above code will create a new layer with a depth value of -100 and assign its ID value to a global variable.\n",
      "description": "This function is used to create a new layer within the current room. You supply the depth that the new layer is to occupy and the function returns the unique Layer ID value that can then be used to access the layer in further functions. You can also\n    supply an optional \"name\" argument, which will enable you to give the layer a specific name (as a string), and instead of using the layer ID to access the layer, you can use this name string instead, although it should be noted that using\n    name strings will have a greater impact on performance than using just the ID value. If you do not specify the name of the layer, then the created layer will be assigned a name with the format \"`_layer_XXX`\", where \"XXX\"\n    is a hex value used to give the layer a unique name.",
      "returns": "Layer ID (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_create.htm"
    },
    "layer_depth": {
      "name": "layer_depth",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to set the depth of (or the layer name as a string)"
        },
        {
          "parameter": "depth",
          "description": "The new depth for the layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif layer_get_depth(layer) != -100\n    {\n        layer_depth(layer, -100);\n    }\n```\nThe above code gets the depth of the layer that the instance running the code is on, and if it is not -100 then the depth is set to -100.\n",
      "description": "This function can be used to change the **depth** of the given layer, changing the order in which its contents will be rendered to the screen. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and then give the new depth to set it to (an integer value form -16000 to 16000). The layer depth is defined as being higher when \"further away\" from the camera and lower when \"closer\" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the \"top\" layer (i.e., the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_depth.htm"
    },
    "layer_destroy": {
      "name": "layer_destroy",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to destroy (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !instance_exists(obj_Bullet_Parent)\n    {\n        layer_destroy(global.Bullet_Layer);\n    }\n```\nThe above code will check to see if any instances of the object \"obj_Bullet_Parent\" exists, and if they don't it will destroy the layer with the ID stored in the global variable.\n",
      "description": "This function will destroy the given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and this will remove it from the current room. If the layer is one that has been designed in the room editor, then the next time you leave the room and then return, the layer will be recreated again with the original contents, however if the room is persistent, the layer will be removed unless room persistence is switched off again. When you destroy a layer in this way, all it's contents will be removed too, so any reference IDs for backgrounds or tile maps, etc... will no longer be valid and any instances assigned to the layer will be destroyed (performing their **Destroy Event** at the same time, if they have one, as well as the **Clean Up Event**).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_destroy.htm"
    },
    "layer_destroy_instances": {
      "name": "layer_destroy_instances",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to set the depth of (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif global.game_over\n    {\n        layer_destroy_instances(layer);\n    }\n```\nThe above code will check a global variable and if it's `true` then all instances that are on the layer of the calling instance will be destroyed (including the calling instance).\n",
      "description": "This function can be used to destroy all the instances assigned to the given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact), and then all instances that are on the layer will be removed from the game, triggering their **Destroy** and **Clean Up** events.",
      "returns": "Real (Unique ID value for an instance)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_destroy_instances.htm"
    },
    "layer_element_move": {
      "name": "layer_element_move",
      "parameters": [
        {
          "parameter": "element_id",
          "description": "The unique ID value of the element to move"
        },
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to move the element to (or the layer name as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all_elements(layer);\n    asset_layer = layer_create(-100);\n    for (var i = 0; i Alt; array_length(a); i++;)\n    {\n        if layer_get_element_type(a[i]) == layerelementtype_sprite\n        {\n            layer_element_move(a[i], asset_layer)\n        }\n    }\n```\nThe above code gets the elements on the layer that the instance running the code is assigned to, then checks them to see if they are sprite assets, and if they are then they are moved to the layer with the ID stored in the variable \"asset_layer\".\n",
      "description": "You can use this function to move an element from one layer to another. You give the **element ID**, as returned by the function used to create the element or the room editor or the function `layer_get_all_elements()`, and then you give the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_element_move.htm"
    },
    "layer_exists": {
      "name": "layer_exists",
      "parameters": [
        {
          "parameter": "layer_name",
          "description": "The name of the layer (a string or ID value)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !layer_exists(global.tileLayer)\n    {\n        global.tileLayer = layer_create(1000);\n    }\n```\nThe above code will check to see if the layer stored in the global variable actually exists, and if it does not then it is created.\n",
      "description": "This function can be used to check if the given **layer** exists. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function will return a *boolean* value of `true` if it exists or `false` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_exists.htm"
    },
    "layer_force_draw_depth": {
      "name": "layer_force_draw_depth",
      "parameters": [
        {
          "parameter": "force",
          "description": "Whether to enable (set to `true` or disable (set to `false`) Z depth forcing"
        },
        {
          "parameter": "depth",
          "description": "The new Z depth"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !layer_is_draw_depth_forced()\n    {\n        layer_force_draw_depth(true, 0);\n    }\n```\nThe above code checks to see if the layer Z depth is forced or not and if it is not, it sets the Z depth to 0 and enables it.\n",
      "description": "This function forces *all* layers to be drawn at the specified z depth. This **does not change the order the layers are rendered in** and they'll still be drawn in depth order, it simply changes what z value is used. In general you do not need to worry about this, but if you have layers that have a depth outside of the legal range (-16000 to 16000) then they won't be rendered, so you can force the Z depth to a reasonable value - 0 for example - and they will all be rendered fine. Note that this is generally only for use with legacy projects from previous version of *GameMaker* where you could have draw depths higher or lower than the permitted layer range.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_force_draw_depth.htm"
    },
    "layer_get_all": {
      "name": "layer_get_all",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all();\n    for (var i = 0; i < array_length(a); i++;)\n    {\n        layer_destroy(a[i]);\n    }\n```\nThe above code retrieves all the layers in a room and adds their ID values to an array. This array is then parsed to destroy or the room layers.\n",
      "description": "This function will return an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) populated with the unique ID values of each layer in the room.",
      "returns": "Array (1D, populated with Layer IDs)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_all.htm"
    },
    "layer_get_all_elements": {
      "name": "layer_get_all_elements",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the elements from (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all_elements(layer);\n    for (var i = 0; i < array_length(a); i++;)\n    {\n        if layer_get_element_type(a[i]) == layerelementtype_sprite\n        {\n            layer_sprite_destroy(a[i])\n        }\n    }\n```\nThe above code gets the IDs for all the instance elements assigned to the layer of the instance running the code. The code then checks to see if any of the returned elements are sprite assets and if they then they are destroyed.\n",
      "description": "You can use this function to get the *element IDs* of the given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function will return an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) of IDs, where each entry in the array is a unique ID for an element on that layer. For example, if the layer is an Asset Layer, the array will be populated with the ID values for each sprite asset that is assigned to the layer. Note that using code to work with layers means that you can assign different element types to the same layer - so you can have sprite assets along with instances, for example - in which case you can then use the function `layer_get_element_type()` to get the type of element the ID relates to.",
      "returns": "Array (1D, populated with Element IDs)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_all_elements.htm"
    },
    "layer_get_depth": {
      "name": "layer_get_depth",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the depth of (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_get_depth(global.temp_layer) != -100\n    {\n        layer_destroy(global.temp_layer);\n        global.temp_layer = layer_create(-100);\n    }\n```\nThe above code checks the depth of a layer ID stored in a global variable and if it is not -100 it destroys the layer and re-creates it at the depth of -100.\n",
      "description": "You can use this function to get the *depth* value associated with a given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function will return that layers depth as a real number. Note that depth is defined as being higher the \"further away\" from the camera and lower the \"closer\" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the \"top\" layer (ie, the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_depth.htm"
    },
    "layer_get_element_layer": {
      "name": "layer_get_element_layer",
      "parameters": [
        {
          "parameter": "element_id",
          "description": "The unique ID value of the element to get the layer of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nelement = layer_get_element_layer(asset_1);\n```\nThe above code gets layer ID for the element with the ID stored in the variable \"asset_1\" and stores it in a variable.\n",
      "description": "You can use this function to get the *Layer ID* that the given element is on. You supply the unique element ID value (for example, as returned by the function that created the element or from the room editor) and the function will return the unique\n    ID of the layer that the element is found on. If the element ID given is not a valid one, then the function will return -1.",
      "returns": "Layer ID or -1 if the element is invalid (ie: does not exist)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_layer.htm"
    },
    "layer_get_element_type": {
      "name": "layer_get_element_type",
      "parameters": [
        {
          "parameter": "layer",
          "description": "The unique ID value of the element to get the type of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all_elements(layer);\n    for (var i = 0; i < array_length(a); i++;)\n    {\n        if layer_get_element_type(a[i]) == layerelementtype_sprite\n        {\n            layer_sprite_destroy(a[i])\n        }\n    }\n```\nThe above code gets the IDs for all the instance elements assigned to the layer of the instance running the code. The code then checks to see if any of the returned elements are sprite assets and if they then they are destroyed.\n",
      "description": "You can use this function to get the *element type* for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):",
      "returns": "Constant (see table, above) or -1 if element does not exist or is invalid",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm"
    },
    "layer_get_fx": {
      "name": "layer_get_fx",
      "parameters": [
        {
          "parameter": "layer_name_or_id",
          "description": "The name or ID of the layer to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar layers = layer_get_all();\n    for(var i = 0; i < array_length(layers); i ++)\n    {    \n        var layer_fx = layer_get_fx(layers[i]);\n        \n        if (layer_fx != -1)\n        {\n            if (fx_get_name(layer_fx) == \"_filter_tintfilter\")\n            {            \n                fx_set_parameter(_fx_tint, \"g_TintCol\", [0, 0, 1, 1]);\n            }\n        }\n    }\n```\nThe above code runs a  [for](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Language_Features/for.htm) loop through all the layers present in the room, and checks each layer for an FX struct. If a layer has an FX struct, it checks the name of that filter/effect by calling fx_get_name() on it; if it's equal to \"_filter_tintfilter\" meaning that it's a \"Colour Tint\" filter, it changes its tint colour to blue.\n",
      "description": "This function is used to retrieve the FX struct for a layer. You specify either the ID or the name of the layer you want to target and the function will return a struct containing information on its applied effect. This struct will be similar to the struct you get from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm), and the functions fx_get_parameter/s and  [fx_set_parameter](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_parameter.htm)/ [s](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_set_parameters.htm) can be used on it to read and modify its parameters.",
      "returns": "Struct (or -1 if not found)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm"
    },
    "layer_get_hspeed": {
      "name": "layer_get_hspeed",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the horizontal speed from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0\n    {\n        layer_hspeed(lay_id, 0);\n        layer_vspeed(lay_id, 0);\n    }\n```\nThe above code checks the given layer horizontal and vertical speeds and if they are not both set to 0 then it is sets them to 0.\n",
      "description": "You can use this function to retrieve the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the horizontal speed, where a positive value is to the right and a negative value to the left. Default is 0 (unless set in the room editor).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_hspeed.htm"
    },
    "layer_get_id": {
      "name": "layer_get_id",
      "parameters": [
        {
          "parameter": "layer_name",
          "description": "The name of the layer (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar near = instance_nearest(x, y, obj_Tree); var layer_id = layer_get_id(\"Instances Front\"); layer_add_instance(layer_id, near);\n```\nThe above code will first get the index of the nearest instance to the given x/y position and store it in a local variable. It then gets the unique instance layer ID for the layer named \"Instances Front\", and moves the found instance onto\n    that layer.\n",
      "description": "This function can be used to get the unique ID value for a given **layer**. In the IDE, all layers have a name and a type, and to be able to edit or change them through code you must give the **layer ID** value. This function is used to retrieve\n    this ID by using the name (a string) of the layer (as written in the IDE). If you create a new layer through code using the function `layer_create()` then that function will return the unique ID value instead\n    (dynamical created layers do not get names). Note that if you give the name of a layer that does not exist in the current room, then you will get an error and the project will crash.",
      "returns": "Layer ID Value (Real), or -1 if the layer specified doesn't exist",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_id.htm"
    },
    "layer_get_id_at_depth": {
      "name": "layer_get_id_at_depth",
      "parameters": [
        {
          "parameter": "depth",
          "description": "The depth to check and retrieve the layer IDs from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_id_at_depth(0);\n    if a[0] != -1\n    {\n        for (var i = 0; i < array_length(a); i++;)\n        {\n            layer_destroy(a[i]);\n        }\n    }\n```\nThe above code retrieves data about the layers with a depth of 0. A check is done to see if any layers exist at that depth, and if there are then the returned array is parsed and each of the found layers is destroyed.\n",
      "description": "You can use this function to get the IDs of all layers assigned a specific depth. You give the depth to check and the function will return an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) with 1 or more entries depending on whether there are any layers at the given depth or not. If there are no layers at the given depth then the array will have a single entry at the [0] position with a value of -1, but, if there are layers at the depth, then an entry will be made in the array for each layer found - the entry value will be the unique ID value for a layer.",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_id_at_depth.htm"
    },
    "layer_get_name": {
      "name": "layer_get_name",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the name of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all();\n    var layer_list = ds_list_create(); for (var i = 0; i Alt; array_length(a); i++;)\n    {\n        if layer_get_name(a[i]) != \"\"\n        {\n            ds_list_add(layer_list, a[i])\n        }\n    }\n```\nThe above code gets the IDs for all the layers in the room and then loops though them checking to see if any are named layers. If they are they are then their ID is added to a list.\n",
      "description": "You can use this function to get the *name* of the given layer. You supply the unique layer ID value and if the layer is one of the named layers created in the room editor, then the function will return a string with the layer name. If the layer is not one of the room editor ones (ie: it was created using `layer_create()`) then an empty string will be returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_name.htm"
    },
    "layer_get_script_begin": {
      "name": "layer_get_script_begin",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_get_script_begin(layer) == -1\n    {\n        layer_script_begin(layer, scr_SetShaderValues);\n    }\n```\nThe above code will check to see if the layer that the instance running the code has a script function assigned to it and if it doesn't one is assigned.\n",
      "description": "You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and this function will return the  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) index of the function assigned to run at the beginning of rendering for that layer, or it will return -1 if no function is assigned. You can assign script functions to a layer with  [layer_script_begin()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_begin.htm) and  [layer_script_end()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_end.htm).",
      "returns": "Script Function Index (Real) or -1 if no script is assigned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_script_begin.htm"
    },
    "layer_get_script_end": {
      "name": "layer_get_script_end",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_get_script_end(layer) == -1\n    {\n        layer_script_end(layer, scr_ResetShaderValues);\n    }\n```\nThe above code will check to see if the layer that the instance running the code has a script function assigned to it and if it doesn't one is assigned.\n",
      "description": "This function returns the  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) index of the function assigned to run at the end of rendering the given layer, or it will return -1 if no function is assigned. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact). You can assign script functions to a layer with  [layer_script_begin()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_begin.htm) and  [layer_script_end()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_end.htm).",
      "returns": "Script Function Index (Real) or -1 if no script is assigned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_script_end.htm"
    },
    "layer_get_shader": {
      "name": "layer_get_shader",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_get_shader(layer) == -1\n    {\n        layer_shader(layer, shd_Sepia);\n    }\n```\nThe above code will check to see if the layer that the instance running the code has a shader assigned to it and if it doesn't one is assigned.\n",
      "description": "This function can be used to check if the given layer has a shader assigned to it. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact), and the function will return either the shader index of the shader assigned, or -1 if no shader is assigned.",
      "returns": "Shader Index (or -1 if no shader is assigned)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_shader.htm"
    },
    "layer_get_target_room": {
      "name": "layer_get_target_room",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif layer_get_target_room() != room\n    {\n        layer_reset_target_room();\n    }\n```\nThe above code checks the current target room and if it is not the current room then the layer target room is reset.\n",
      "description": "This function will return the current room being targeted by the layer functions. See `layer_set_target_room()` for more information.",
      "returns": "Room ID (real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_target_room.htm"
    },
    "layer_get_visible": {
      "name": "layer_get_visible",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Instances\");\n    if layer_get_visible(lay_id)\n    {\n        layer_set_visible(lay_id, false);\n    }\n    else\n    {\n        layer_set_visible(lay_id, true);\n    }\n```\nThe above code gets the ID value for the layer named \"Instances\" in the room editor, then uses the ID to check if the layer is visible or not, toggling the layer visibility depending on the returned value.\n",
      "description": "With this function you can check whether a layer is visible or not. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function will return `true` if it is visible, and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_visible.htm"
    },
    "layer_get_vspeed": {
      "name": "layer_get_vspeed",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the vertical speed from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0\n    {\n        layer_hspeed(lay_id, 0);\n        layer_vspeed(lay_id, 0);\n    }\n```\nThe above code checks the given layer horizontal and vertical speeds and if they are not both set to 0 then it is sets them to 0.\n",
      "description": "You can use this function to retrieve the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the vertical speed, where a positive value is down and a negative value up. Default is 0 (unless set in the room editor).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_vspeed.htm"
    },
    "layer_get_x": {
      "name": "layer_get_x",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the x position of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_x(lay_id) != 0 || layer_get_y(lay_id) != 0\n    {\n        layer_x(lay_id, 0);\n        layer_y(lay_id, 0);\n    }\n```\nThe above code checks the given layer position and if it is not set to (0, 0) then it is set to that position.\n",
      "description": "You can use this function to retrieve the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_x.htm"
    },
    "layer_get_y": {
      "name": "layer_get_y",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to get the y position of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_x(lay_id) != 0 || layer_get_y(lay_id) != 0\n    {\n        layer_x(lay_id, 0);\n        layer_y(lay_id, 0);\n    }\n```\nThe above code checks the given layer position and if it is not set to (0, 0) then it is set to that position.\n",
      "description": "You can use this function to retrieve the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_y.htm"
    },
    "layer_has_instance": {
      "name": "layer_has_instance",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "instance_id",
          "description": "The unique instance ID or the object index of the instance to check for"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !layer_has_instance(global.Bullet_Layer, obj_Bullet_Parent)\n    {\n        layer_destroy(global.Bullet_Layer);\n    }\n```\nThe above code will check to see if the given layer contains any instances of the object \"obj_Bullet_Parent\" and if not it will destroy the layer.\n",
      "description": "This function can be used to check if a given instance is currently assigned to the given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the instance ID of the instance to check for. You can also give an `object_index` (ie: the name of the object in the Asset Browser) and the function will check if any instances of that object are on the given layer. The function will return `true` if the instance is on the layer and `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_has_instance.htm"
    },
    "layer_hspeed": {
      "name": "layer_hspeed",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to set the horizontal speed of"
        },
        {
          "parameter": "hspd",
          "description": "The horizontal speed (in pixels per game frame) to set"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0\n    {\n        layer_hspeed(lay_id, 0);\n        layer_vspeed(lay_id, 0);\n    }\n```\nThe above code checks the given layer horizontal and vertical speeds and if they are not both set to 0 then it is sets them to 0.\n",
      "description": "You can use this function to set the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is to the right and a negative value to the left.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_hspeed.htm"
    },
    "layer_instance_get_instance": {
      "name": "layer_instance_get_instance",
      "parameters": [
        {
          "parameter": "element_id",
          "description": "The unique ID value of the instance element to get the ID of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nelements = layer_get_all_elements(\"Instances\");\n    for (var i = 0; i < array_length(elements); i++)\n    {\n         if (layer_get_element_type(elements[i]) == layerelementtype_instance)\n         {\n             var layerelement = elements[i];\n             var inst = layer_instance_get_instance(layerelement);\n             inst.x = inst.x + 10;\n         }\n    }\n```\nThe above code will check get all the instance elements on a layer, then get their unique ID value and use that to move them 10px to the right.\n",
      "description": "This function can be used to get the unique instance ID of the given instance element. You give the instance *element* ID (see the code example below for how to get this), and the function will return a real value that represents the unique  [instance id](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm) for the element. If the element is not an instance, the function will return -1.",
      "returns": "Real (Unique ID value for an instance)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_instance_get_instance.htm"
    },
    "layer_is_draw_depth_forced": {
      "name": "layer_is_draw_depth_forced",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !layer_is_draw_depth_forced()\n    {\n        layer_force_draw_depth(true, 0);\n    }\n```\nThe above code checks to see if the layer Z depth is forced or not and if it is not, it sets the Z depth to 0 and enables it.\n",
      "description": "This function can be used to check and see whether forced Z depth is enabled for rendering the layers in the project. See `layer_force_draw_depth()` for more information.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_is_draw_depth_forced.htm"
    },
    "layer_reset_target_room": {
      "name": "layer_reset_target_room",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nlayer_set_target_room(rm_Game);\n    var l = layer_get_id(\"SpriteAssets\");\n    repeat(50)\n    {\n        layer_sprite_create(l, irandom(1000), irandom(1000), spr_Trees);\n    }\n    layer_reset_target_room();\n```\nThe above code sets the target room to the room \"rm_Game\" and then gets the layer ID for the layer called \"SpriteAssets\" in that room. This layer ID is then used to add 50 random sprite assets to the layer, before the layer target is reset to the current room.\n",
      "description": "This function is used to reset the layer target to the current room. See the function `layer_set_target_room()` for further information.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_reset_target_room.htm"
    },
    "layer_script_begin": {
      "name": "layer_script_begin",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "script",
          "description": "The script function index to assign to the layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this extended example, we will first show you how a simple script function is structured to set some shader uniform data so that when the given layer is drawn, this function will be run and the shader will work correctly. In the example, it is worth noting how we check which event is being called so that the rest of the function is only run on the specific event that we require it to work on - in this case, only on the main draw event:\n```\n/// @function layer_shader_start();\n    function layer_shader_start()\n    {\n        if event_type == ev_draw\n        {\n            if event_number == 0\n            {\n                colour_to_find = shader_get_uniform(sShaderDemo5, \"f_Colour1\");\n                colour_to_set = shader_get_uniform(sShaderDemo5, \"f_Colour2\");\n                shader_set(s_ColourChanger);\n                shader_set_uniform_f(colour_to_find, 1,1,1 );\n                shader_set_uniform_f(colour_to_set, 1,0,0 );\n            }\n        }\n    }\n```\nWe would then have a companion function to reset the shader after all the drawing is done:\n```\n/// @function layer_shader_end();\n    function layer_shader_end()\n    {\n        if event_type == ev_draw\n        {\n            if event_number == 0\n            {\n                shader_reset();\n            }\n        }\n    }\n```\nNow that we have defined our script functions for setting the shader, we then have to assign them to a specific layer so that the layer knows to call them. This would be done in the room creation code, or in the create event or room start event of some controller object (they do not need to be set every step, but rather once at the start of the room, or when the layer is initially created):\n```\nvar lay_id = layer_get_id(\"Instances\");\n    layer_script_begin(lay_id, layer_shader_start);\n    layer_script_end(lay_id, layer_shader_end);\n```\nThis final code block assigns the scripts to the layer.\n",
      "description": "With this function you can assign a  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) to a layer and it will be called before the layer is rendered. When adding a function to a layer, in this way it will be run at the start of *each of the different draw events* so you may want to check in the function assigned which event is currently rendering and adapt the code to suit. This can be done by checking the `event_type` and/or the `event_number` (see the extended example below). Note that the function is *not* meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the **Room Creation Code** or in the **Create Event **/ **Room Start Event** of an instance.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_begin.htm"
    },
    "layer_script_end": {
      "name": "layer_script_end",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "script",
          "description": "The script function index to assign to the layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this extended example, we will first show you how a simple script function is structured to set some shader uniform data so that when the given layer is drawn, this function will be run and the shader will work correctly. In the example, it is worth noting how we check which event is being called so that the rest of the function is only run on the specific event that we require it to work on - in this case, only on the main draw event:\n```\n/// @function layer_shader_start();\n    function layer_shader_start()\n    {\n        if event_type == ev_draw\n        {\n            if event_number == 0\n            {\n                colour_to_find = shader_get_uniform(sShaderDemo5, \"f_Colour1\");\n                colour_to_set = shader_get_uniform(sShaderDemo5, \"f_Colour2\");\n                shader_set(s_ColourChanger);\n                shader_set_uniform_f(colour_to_find, 1,1,1 );\n                shader_set_uniform_f(colour_to_set, 1,0,0 );\n            }\n        }\n    }\n```\nWe would then have a companion function to reset the shader after all the drawing is done:\n```\n/// @function layer_shader_end();\n    function layer_shader_end()\n    {\n        if event_type == ev_draw\n        {\n            if event_number == 0\n            {\n                shader_reset();\n            }\n        }\n    }\n```\nNow that we have defined our script functions for setting the shader, we then have to assign them to a specific layer so that the layer knows to call them. This would be done in the room creation code, or in the create event or room start event of some controller object (they do not need to be set every step, but rather once at the start of the room, or when the layer is initially created):\n```\nvar lay_id = layer_get_id(\"Instances\");\n    layer_script_begin(lay_id, layer_shader_start);\n    layer_script_end(lay_id, layer_shader_end);\n```\nThis final code block assigns the scripts to the layer.\n",
      "description": "With this function you can assign a  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) to a layer and it will be called after the layer is rendered. When adding a function to a layer in this way, it will be run at the end of *each of the different draw events* so you may want to check in the function assigned which event is currently finished rendering and adapt the code to suit. This can be done by checking the `event_type` and/or the `event_number` (see the extended example below). Note that the function is *not* meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the **Room Creation Code** or in the **Create Event **/ **Room Start Event** of an instance.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_end.htm"
    },
    "layer_sequence_angle": {
      "name": "layer_sequence_angle",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "angle",
          "description": "The new angle to rotate the sequence element to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif current_angle < 90\n    {\n        current_angle += 1;\n        layer_sequence_angle(my_seq, current_angle);\n    }\n```\nThe above code checks the value held in the current_angle variable, and if it is less than 90 then it adds to it then uses the value to set the angle of the sequence element referenced in the variable my_seq.\n",
      "description": "With this function you can set the angle of rotation for the given sequence element. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) along with the new angle to set and the sequence will be rotated about its origin to the new position. Angles in GameMaker are calculated with 0º to the right, and go anti-clockwise - so 90º is up, 180º is left and 270º is down - and the default angle for a sequence would be 0º.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_angle.htm"
    },
    "layer_sequence_create": {
      "name": "layer_sequence_create",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the instance layer to target"
        },
        {
          "parameter": "x",
          "description": "The x position in the room to create the sequence at"
        },
        {
          "parameter": "y",
          "description": "The y position in the room to create the sequence at"
        },
        {
          "parameter": "sequence_id",
          "description": "The sequence ID to create, as defined in the Asset Browser"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar _s = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground);\n    layer_sequence_pause(_s);\n```\nThe above code creates a new sequence on the layer \"Background\" then pauses it.\n",
      "description": "With this function you can create an instance of a sequence asset on the given layer. You supply the layer ID which can be a string of the layer name - as defined in the room editor - or the unique layer ID - as returned by the function `layer_get_id()`, as well as the X and Y position in the room to create the sequence at, and finally the ID of the sequence to create. The sequence ID is the name constant that you defined in the Asset Browser for the sequence. The function will return the unique ID of the sequence element, which can then be used in all further layer functions for sequences, or it can be used to retrieve the sequence instance struct using the function `layer_sequence_get_instance()`.",
      "returns": "Integer (element ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_create.htm"
    },
    "layer_sequence_destroy": {
      "name": "layer_sequence_destroy",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all_elements(layer);\n    for (var i = 0; i < array_length(a); i++;)\n    {\n        if layer_get_element_type(a[i]) == layerelementtype_sequence\n        {\n            layer_sequence_destroy(a[i])\n        }\n    }\n```\nThe above code gets the IDs for all the elements assigned to the layer of the instance running the code. The code then checks to see if any of the returned elements are sequence assets and if they then they are destroyed.\n",
      "description": "With this function you can destroy (remove from the room) a sequence element. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) and the sequence will be destroyed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_destroy.htm"
    },
    "layer_sequence_exists": {
      "name": "layer_sequence_exists",
      "parameters": [
        {
          "parameter": "layer_ID",
          "description": "The unique ID or name of the layer to check"
        },
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !layer_sequence_exists(\"Background\", my_seq)\n    {\n        my_seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground);\n        layer_sequence_pause(my_seq);\n    }\n```\nThe above code checks to see if the given sequence element exists, and if it does not then it creates a new sequence on the given layer then pauses it.\n",
      "description": "With this function you can check to see if a sequence element exists on the given layer. You supply the layer ID which can be a string of the layer name - as defined in the room editor - or the unique layer ID - as returned by the function `layer_get_id()`, as well the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return `true` if the given element exists or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_exists.htm"
    },
    "layer_sequence_get_angle": {
      "name": "layer_sequence_get_angle",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _ang = layer_sequence_get_angle(title_sequence)\n    if _ang > 0\n    {\n        _ang -= 1;\n        layer_sequence_angle(title_sequence, _ang);\n    }\n```\nThe above code retrieves the current angle of the the sequence element with the ID stored in the variable \"title_sequence\", and if it's not 0, then 1 is subtracted form the current angle.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return the current angle of the sequence element in the game room. Note that angles are returned in degrees, and 0º is to the right, 90º is up, 180º is to the left and 270º is down.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_angle.htm"
    },
    "layer_sequence_get_headdir": {
      "name": "layer_sequence_get_headdir",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_get_headdir(title_sequence) != seq_dir_left\n    {\n        layer_sequence_headdir(title_sequence, seq_dir_left);\n    }\n```\nThe above code checks the the current playhead direction of the sequence element ID stored in the variable \"title_sequence\", and if it's not set to `seq_dir_left`, it is set to this value.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return the current playhead (tooltip) direction, which will be one of the constants listed below.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_headdir.htm"
    },
    "layer_sequence_get_headpos": {
      "name": "layer_sequence_get_headpos",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_get_headpos(title_sequence) != 0\n    {\n        layer_sequence_headpos(title_sequence, 0);\n    }\n```\nThe above code checks the current playhead position of the sequence element ID stored in the variable \"title_sequence\", and if it's not set to 0, it is set to this value.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return the current playhead (tooltip) position (the current frame the playhead is on).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_headpos.htm"
    },
    "layer_sequence_get_instance": {
      "name": "layer_sequence_get_instance",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground); var _struct = layer_sequence_get_instance(_seq); _struct.speedScale = 0.5;\n```\nThe above code creates a new sequence element and then retrieves its sequence instance ID. This is then used to change the playback speed scale property of the sequence instance.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    - and it will return the sequence *instance*  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm). You can find out more about the format of the sequence instance struct on  [this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm).",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_instance.htm"
    },
    "layer_sequence_get_length": {
      "name": "layer_sequence_get_length",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _frames = layer_sequence_get_length(my_seq); alarm[0] = frames;\n```\nThe above code retrieves the number of frames that a sequence will run then uses this value to set an alarm.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    - and it will return the length of the sequence. This is the number of frames that the sequence will run for.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_length.htm"
    },
    "layer_sequence_get_sequence": {
      "name": "layer_sequence_get_sequence",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground); var _struct = layer_sequence_get_sequence(_seq); _struct.playbackSpeedType = spritespeed_framespersecond; _struct.playbackSpeed = 30;\n```\nThe above code creates a new sequence element and then retrieves its sequence data struct. This is then used to change the playback speed and type of the sequence.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    - and it will return the sequence object  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm). This function bypasses the need to first get the sequence instance struct and permits you to access the sequence data directly. You can find out more\n    about the format of the sequence object struct on  [this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Object_Struct.htm).",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_sequence.htm"
    },
    "layer_sequence_get_speedscale": {
      "name": "layer_sequence_get_speedscale",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_get_speedscale(title_sequence) != 1\n    {\n        layer_sequence_speedscale(title_sequence, 1);\n    }\n```\nThe above code checks the the current playhead speed scale of the sequence element ID stored in the variable \"title_sequence\", and if it's not set to 1 it is set to this value.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return the current playback speed scale. This is the *multiplier* value used to slow down or speed up the playback speed. A value of 1 is the default value, and values lower than 1 mean that playback is slowed down and values greater than 1 mean that playback is sped up.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_speedscale.htm"
    },
    "layer_sequence_get_x": {
      "name": "layer_sequence_get_x",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_get_x(title_sequence) != room_width / 2     {\n         layer_sequence_x(title_sequence, room_width / 2);     }\n  \n```\nThe above code checks the X position of the sequence element ID stored in the variable \"title_sequence\", and if it's not set to half the room width, it is set to this value.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    - and it will return the current X position in the game room for the sequence.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_x.htm"
    },
    "layer_sequence_get_xscale": {
      "name": "layer_sequence_get_xscale",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _xs = layer_sequence_get_xscale(title_sequence)\n    if _xs < 1\n    {\n        _xs += 0.01;\n        layer_sequence_xscale(title_sequence, _xs);\n    }\n```\nThe above code retrieves the current scale along the X axis of the the sequence element with the ID stored in the variable \"title_sequence\", and if it's less than 1, then 0.01 is added to the current X scale.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return the current scale along the X axis of the sequence element in the game room.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_xscale.htm"
    },
    "layer_sequence_get_y": {
      "name": "layer_sequence_get_y",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_get_y(title_sequence) != room_height / 2     {\n         layer_sequence_y(title_sequence, room_height / 2);     }\n  \n```\nThe above code checks the Y position of the sequence element ID stored in the variable \"title_sequence\", and if it's not set to half the room height, it is set to this value.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    - and it will return the current Y position in the game room for the sequence.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_y.htm"
    },
    "layer_sequence_get_yscale": {
      "name": "layer_sequence_get_yscale",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _ys = layer_sequence_get_yscale(title_sequence)\n    if _ys < 1\n    {\n        _ys += 0.01;\n        layer_sequence_yscale(title_sequence, _ys);\n    }\n```\nThe above code retrieves the current scale along the Y axis of the the sequence element with the ID stored in the variable \"title_sequence\", and if it's less than 1, then 0.01 is added to the current Y scale.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will return the current scale along the Y axis of the sequence element in the game room.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_get_yscale.htm"
    },
    "layer_sequence_headdir": {
      "name": "layer_sequence_headdir",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "direction",
          "description": "The playhead direction, a constant, listed above"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground); layer_sequence_headdir(_seq, seq_dir_left);\n```\nThe above code creates a new sequence and stores its ID in a local variable. This ID is then used to set the playhead direction to decrement frames (right to left playback).\n",
      "description": "With this function you can set the direction for the given sequence playhead (tooltip). You supply the sequence element ID as returned by `layer_sequence_create()`    or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm), and then give the playhead direction which should be one of the following constants:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headdir.htm"
    },
    "layer_sequence_headpos": {
      "name": "layer_sequence_headpos",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "position",
          "description": "The position within the sequence (in frames) to set the playhead position to (can be a decimal value)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar a = layer_get_all_elements(layer); for (var i = 0; i < array_length(a); i++;)     {\n         if layer_get_element_type(a[i]) == layerelementtype_sequence         {\n             layer_sequence_headpos(a[i], 0)         }\n         }\n  \n```\nThe above code gets the IDs for all the elements assigned to the layer of the instance running the code. The code then checks to see if any of the returned elements are sequence assets and if they then their playhead position is set to 0.\n",
      "description": "With this function you can set the playhead (tooltip) position of a sequence element to a specific frame. You supply the sequence element ID as returned by `layer_sequence_create()`    or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) along with the new position to set. Note that the position is in *frames* and if you set a value greater than the total number of frames\n    (or less than 0) then the actual final playhead position will depend on the type of sequence playback that has been selected, following these rules:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headpos.htm"
    },
    "layer_sequence_is_finished": {
      "name": "layer_sequence_is_finished",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_is_finished(title_sequence) != 0\n    {\n        alarm[0] = room_speed * 3;\n        layer_sequence_play(title_sequence);\n    }\n```\nThe above code checks if the sequence element ID stored in the variable \"title_sequence\" is finished, and if it is it starts it playing again and sets an alarm.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will check if the sequence is finished playing or not, returning `true` if it is, and `false` if it is not. Note that this is only applicable when the sequence is *not* set to loop or ping-pong in the playback mode.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_is_finished.htm"
    },
    "layer_sequence_is_paused": {
      "name": "layer_sequence_is_paused",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif layer_sequence_is_paused(title_sequence) != 0\n    {\n        layer_sequence_play(title_sequence);\n    }\n```\nThe above code checks if the sequence element ID stored in the variable \"title_sequence\" is paused, and if it is it starts it playing.\n",
      "description": "With this function you supply the sequence element ID - as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) - and it will check if the sequence is currently paused or not, returning `true` if it is paused, and `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_is_paused.htm"
    },
    "layer_sequence_pause": {
      "name": "layer_sequence_pause",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground); if global.Pause     {\n         layer_sequence_pause(_seq);\n         }\n  \n```\nThe above code creates a new sequence and stores its ID in a local variable. It then checks to see if the game is paused, and if it is it pauses the playback of the sequence.\n",
      "description": "With this function you can pause the playback of the given sequence. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    and the function will pause the sequence until you begin playback again using the function `layer_sequence_play()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_pause.htm"
    },
    "layer_sequence_play": {
      "name": "layer_sequence_play",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"P\"))     {\n         global.Pause = !global.Pause;     var a = layer_get_all_elements(layer);     for (var i = 0; i < array_length(a); i++;)         {\n             if layer_get_element_type(a[i]) == layerelementtype_sequence             {\n                 if global.Pause                 {\n                     layer_sequence_pause(a[i]);\n                     }\n                 else\n                     {\n                     layer_sequence_play(a[i]);\n                     }\n                 }\n             }\n         }\n  \n```\nThe above code checks to see if the game has been paused or not when a key is pressed. If the game is paused, then it loops through all sequence elements on the current layer (the layer of the calling instance) and pauses their playback, and if the\n    game is not paused, then the loop will start their playback again.\n",
      "description": "With this function you can start the playback of the given sequence. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    and the function will play the sequence, which you can then pause if required using the function `layer_sequence_pause()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_play.htm"
    },
    "layer_sequence_speedscale": {
      "name": "layer_sequence_speedscale",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "speedscale",
          "description": "The speed scale to use (a multiplier), default is 1"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground); layer_sequence_speedscale(_seq, 0.75);\n```\nThe above code creates a new sequence on the layer of the calling instance and then sets its speed scale value to 0.75 (three-quarters default playback speed).\n",
      "description": "With this function you can change the playback speed of the given sequence. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm)    and then a speed scale value. This value is a *multiplier*, where 1 is the default playback speed and values less than 1 will slow the playback and values larger than 1 will speed it up, eg: a value of 0.5 would be half playback speed, while\n    a value of 2 would be double playback speed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_speedscale.htm"
    },
    "layer_sequence_x": {
      "name": "layer_sequence_x",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "pos_x",
          "description": "The X position to move the sequence element to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif layer_sequence_exists(my_seq)\n    {\n        layer_sequence_x(my_seq, x);\n        layer_sequence_y(my_seq, y);\n    }\n```\nThe above code checks to see if the sequence element referenced in the variable \"my_seq\" exists, and if it does it sets the x/y position to the that of the instance running the code.\n",
      "description": "With this function you can set the position along the X (horizontal) axis of the room for the given sequence element. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) along with the X position to set and the sequence will be moved to the new position.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_x.htm"
    },
    "layer_sequence_xscale": {
      "name": "layer_sequence_xscale",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "xscale",
          "description": "The new X axis scale value to apply to the sequence element"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif seq_scale < 2\n    {\n        seq_scale += 0.01;\n        layer_sequence_xscale(my_seq, seq_scale);\n        layer_sequence_yscale(my_seq, seq_scale);\n    }\n```\nThe above code checks the value held in the seq_scale variable, and if it is less than 2 then it adds to it then uses the value to set the X and Y scale of the sequence element referenced in the variable my_seq.\n",
      "description": "With this function you can set the X scale for the given sequence element. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) along with the new scale to set on the X axis and the sequence will be scaled by this amount. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sequence), larger values will scale up and negative values will mirror the sequence about its origin *and* scale it unless the value used is exactly -1 (in which case the sequence is just mirrored about its origin with no scaling).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_xscale.htm"
    },
    "layer_sequence_y": {
      "name": "layer_sequence_y",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "pos_y",
          "description": "The Y position to move the sequence element to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif layer_sequence_exists(my_seq)\n    {\n        layer_sequence_x(my_seq, x);\n        layer_sequence_y(my_seq, y);\n    }\n```\nThe above code checks to see if the sequence element referenced in the variable \"my_seq\" exists, and if it does it sets the x/y position to the that of the instance running the code.\n",
      "description": "With this function you can set the position along the Y (vertical) axis of the room for the given sequence element. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) along with the Y position to set and the sequence will be moved to the new position.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_y.htm"
    },
    "layer_sequence_yscale": {
      "name": "layer_sequence_yscale",
      "parameters": [
        {
          "parameter": "sequence_element_id",
          "description": "The unique ID value of the sequence element to target"
        },
        {
          "parameter": "yscale",
          "description": "The new Y axis scale value to apply to the sequence element"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif seq_scale < 2\n    {\n        seq_scale += 0.01;\n        layer_sequence_xscale(my_seq, seq_scale);\n        layer_sequence_yscale(my_seq, seq_scale);\n    }\n```\nThe above code checks the value held in the seq_scale variable, and if it is less than 2 then it adds to it then uses the value to set the X and Y scale of the sequence element referenced in the variable my_seq.\n",
      "description": "With this function you can set the Y scale for the given sequence element. You supply the sequence element ID as returned by `layer_sequence_create()` or by one of the  [layer element functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/General_Layer_Functions.htm) along with the new scale to set on the Y axis and the sequence will be scaled by this amount. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sequence), larger values will scale up and negative values will flip the sequence about its origin *and* scale it unless the value used is exactly -1 (in which case the sequence is just flipped about its origin with no scaling).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_yscale.htm"
    },
    "layer_set_fx": {
      "name": "layer_set_fx",
      "parameters": [
        {
          "parameter": "layer_name_or_id",
          "description": "The name or ID of the layer to modify"
        },
        {
          "parameter": "filter_or_effect",
          "description": "The FX struct to apply to the layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _fx_tint = fx_create(\"_filter_tintfilter\");\n    fx_set_parameter(_fx_tint, \"g_TintCol\", [1, 0, 0, 1]);\n    layer_set_fx(\"EffectLayer\", _fx_tint);\n```\nThe above code creates a new FX struct from the \"_filter_tintfilter\" effect, which is the \"Colour Tint\" filter found in the Room Editor. It assigns a value to its \"g_TintCol\" parameter which is the colour of the tint, and as it's a vec4 internally, it takes an array containing four values (corresponding to its red, green, blue and alpha values). The FX struct for the tint is then applied to an FX layer.\n",
      "description": "This function is used to assign an FX struct to a Room Layer. You specify either the ID or the name of the layer you want to modify, and then an FX struct (as returned from  [fx_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/fx_create.htm) or  [layer_get_fx()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_get_fx.htm)) which will be applied to the specified layer, making the effect visible in the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Filter_Effect_Layers/layer_set_fx.htm"
    },
    "layer_set_target_room": {
      "name": "layer_set_target_room",
      "parameters": [
        {
          "parameter": "room",
          "description": "The room to target for all further layer functions"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nlayer_set_target_room(rm_Game);\n    var l = layer_get_id(\"SpriteAssets\");\n    repeat(50)\n    {\n        var _x = irandom(1000);\n        var _y = irandom(1000);\n        layer_sprite_create(l, _x, _y, spr_Trees);\n    }\n    layer_reset_target_room();\n```\nThe above code sets the target room to the room \"rm_Game\" and then gets the layer ID for the layer called \"SpriteAssets\" in that room. This layer ID is then used to add 50 random sprite assets to the layer, before the layer target is reset to the current room.\n",
      "description": "When you call this function you are telling GameMaker Studio 2 that *all further layer functions should be applied to the given room*. In this way you can procedurally change or generate layers and layer contents in a room that is not the current room. When you are finished adding layers or layer elements to a room, call the function `layer_reset_target_room()` to reset the room target (or call this function again with a room argument of -1). Note that this function can only be used on *rooms other than the current room*, and is designed so that you can add/remove layers and layer elements to rooms other than the room that is currently running.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_set_target_room.htm"
    },
    "layer_set_visible": {
      "name": "layer_set_visible",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "visible",
          "description": "Whether the layer should be visible (`true`) or not (`false`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Instances\");\n    if layer_get_visible(lay_id)\n    {\n        layer_set_visible(lay_id, false);\n    }\n    else\n    {\n        layer_set_visible(lay_id, true);\n    }\n```\nThe above code gets the ID value for the layer named \"Instances\" in the room editor, then uses the ID to check if the layer is visible or not, toggling the layer visibility depending on the returned value.\n",
      "description": "With this function you can toggle the visibility of a layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) as well as the toggle value for the layer where visible is true and invisible is false.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_set_visible.htm"
    },
    "layer_shader": {
      "name": "layer_shader",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "shader",
          "description": "The shader index to assign to the layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Instances\"); layer_shader(lay_id, shd_Sepia);\n```\nThe above code will assign the shader resource \"shd_Sepia\" to the given layer for all drawing.\n",
      "description": "With this function you can assign a shader resource to any given layer and the layer will then be rendered using that shader. You supply either the unique ID value of the layer or the name of the layer (as a string - this will have a performance impact)\n    , along with the ID of the shader to use. The shader must have been created previously in the Asset Browser and the shader index (the name of the shader resource) is then passed to this function. If the layer assigned has instances added to it, then\n    the shader will be applied to *all* the draw events that the instance uses - for example if the instance has a Draw GUI Begin event, then the shader will be applied automatically to it. The shader will also affect any other graphic elements drawn\n    on that layer, like sprite assets or tile maps.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_shader.htm"
    },
    "layer_sprite_alpha": {
      "name": "layer_sprite_alpha",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "alpha",
          "description": "The alpha for sprite sprite, from 0 to 1 (default is 1)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_sky\"); var spr_id = layer_sprite_get_id(lay_id, \"Clouds\"); layer_sprite_alpha(spr_id, random(1));\n```\nThe above code gets the ID value of the sprite asset named \"Clouds\" assigned to the layer \"Asset_sky\" and then sets its alpha to a random value between 0 and 1.\n",
      "description": "This function controls the alpha (transparency) of the sprite on the asset layer. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use\n    the function `layer_sprite_get_id()`), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the sprite element being 1. Note\n    that if the layer the sprite element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_alpha.htm"
    },
    "layer_sprite_angle": {
      "name": "layer_sprite_angle",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "angle",
          "description": "The angle of the sprite (default is 0)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar asset_sprite = layer_sprite_get_id(layer, \"gfc_Trees\");\n    if layer_sprite_get_angle(asset_sprite) != 0\n    {\n        layer_sprite_angle(asset_sprite, 0);\n    }\n```\nThe above code will check the sprite element assigned to the layer the instance running the code is on and if its angle is not 0 it will set it to 0.\n",
      "description": "Using this function you can change the angle for the given sprite element on a layer. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and then set the angle value, from 0 to 359 anti-clockwise, where 0 is to the right, 90 is to the top, 180 is to the left and 270 is to the bottom. If you set a value greater than 360 this will be looped to bring it within the 0 - 359 range.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_angle.htm"
    },
    "layer_sprite_blend": {
      "name": "layer_sprite_blend",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "blend",
          "description": "The colour to blend with the sprite sprite (default is `c_white`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_sky\"); var spr_id = layer_sprite_get_id(lay_id, \"Clouds\"); layer_sprite_blend(spr_id, c_gray);\n```\nThe above code gets the ID value of the sprite called \"Clouds\" assigned to the layer \"Asset_sky\" and then tints it to a colour.\n",
      "description": "This function controls the blending (or \"tinting\") of the sprite sprite and the default value is -1 (which represents the constant `c_white`, which can also be used). Any other value (including internal colour constants like `c_red`,\n    or `c_aqua`) will blend the specified colour with the original sprite. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use\n    the function `layer_sprite_get_id()`), and then set the blending colour to use. Below you can see an example of a sprite that has been blended with different colours:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_blend.htm"
    },
    "layer_sprite_change": {
      "name": "layer_sprite_change",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "sprite_index",
          "description": "The new sprite index to use"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar s = layer_sprite_get_id(layer, global.Asset_sprite);\n    if layer_sprite_get_sprite(s) != spr_Nighttime\n    {\n        layer_sprite_change(s, spr_nighttime);\n    }\n```\nThe above code checks the sprite index of the element with the ID stored in the global variable `global.Asset_sprite` and if it is not \"spr_Nighttime\" then that sprite is assigned to the element.\n",
      "description": "Using this function you can change the sprite resource assigned to a given sprite element on a layer. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and then supply a sprite index element asset will be changed. Note that if the sprite has sub-images then it will animate too (this can be controlled using the `layer_sprite_index()` and `layer_sprite_speed()` functions). Note that you can assign a value of -1 as the new sprite index and no sprite will be shown, although the element will still exist and can still be changed again later.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_change.htm"
    },
    "layer_sprite_create": {
      "name": "layer_sprite_create",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target"
        },
        {
          "parameter": "x",
          "description": "The x position to use"
        },
        {
          "parameter": "y",
          "description": "The y position to use"
        },
        {
          "parameter": "sprite",
          "description": "The sprite index to be used"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nglobal.asset_layer = layer_create(10000);\n    for (var i = 0; i< 10; i++;)\n    {\n        var _x = random(room_width);\n        var _y = room_height - 100;\n        global.asset_spr_trees[i] = layer_sprite_create(global.asset_layer, _x, _y, spr_Trees);\n    }\n```\nThe above code creates a new layer and then adds 10 new sprite elements to it, storing the ID of each element to an array.\n",
      "description": "With this function you can assign a sprite resource to a layer to be used in your project. You supply the layer ID (which you get when you create the layer using `layer_create()` or when you use the layer name along with `layer_get_id()`), a position within the room, and a sprite index (which would be the name of the sprite as shown in the Asset Browser), and it will be added to the layer. The function returns the unique ID value for the element, which can then be used in further layer functions for sprites.",
      "returns": "Sprite element ID (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_create.htm"
    },
    "layer_sprite_destroy": {
      "name": "layer_sprite_destroy",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite to be destroyed"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_Trees\");\n    if layer_sprite_exists(lay_id, global.Asset_spr_trees)\n    {\n        layer_sprite_destroy(lay_id);\n    }\n```\nThe above code checks the layer \"Asset_Trees\" to see if the given sprite element exists and if it does, then it is destroyed (but not the layer).\n",
      "description": "This function will destroy the given sprite element. You supply the sprite ID (which you get when you create the sprite using `layer_sprite_create()` or when you use the layer ID along with `layer_get_sprite_id()`) and this will remove it. Note that this does *not* remove the layer, only the sprite from it, and if the sprite is one that has been added in the room editor, then the next time you leave the room and then return, the sprite will be recreated again. However if the room is persistent, the sprite will be removed unless room persistence is switched off again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_destroy.htm"
    },
    "layer_sprite_exists": {
      "name": "layer_sprite_exists",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_Trees\");\n    if layer_sprite_exists(lay_id, global.TreesSprites)\n    {\n        layer_sprite_destroy(lay_id, global.TreesSprites);\n    }\n```\nThe above code checks the layer \"Asset_trees\" to see if the given sprite element exists and if it does, then it is destroyed (but not the layer).\n",
      "description": "You can use this function to check and see if a sprite element exists on any given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`) and the function will return either `true` if the element exists, or `false` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_exists.htm"
    },
    "layer_sprite_get_alpha": {
      "name": "layer_sprite_get_alpha",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_alpha(spr_id) < 0.1\n    {\n        layer_sprite_destroy(spr_id);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the element alpha and if it is less than 0.1, then the layer element is destroyed.\n",
      "description": "This function can be used to get the alpha value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).",
      "returns": "Real (from 0 to 1)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_alpha.htm"
    },
    "layer_sprite_get_angle": {
      "name": "layer_sprite_get_angle",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\"); var spr_id = layer_sprite_get_id(lay_id, \"Clouds\"); if layer_sprite_get_angle(spr_id) != 0     {\n         layer_sprite_yscale(spr_id, 0);     }\n  \n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the angle and if it is anything other than 0 it is set to 0.\n",
      "description": "This function can be used to get the current angle for the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the\n    function `layer_sprite_get_id()`), and the function will return real value for the angle. This value will be between 0 and 360, where 0 represents right, 90 up, 180 left and 270 down.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_angle.htm"
    },
    "layer_sprite_get_blend": {
      "name": "layer_sprite_get_blend",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\"); var back_id = layer_sprite_get_id(lay_id, \"Clouds\"); if layer_sprite_get_blend(back_id) == c_white     {\n         layer_sprite_blend(back_id, make_colour_rgb(random(255), random(255), 255));     }\n  \n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the element blend colour and if it is equivalent to the constant `c_white`,\n    then the element blend is set to a random colour.\n",
      "description": "This function can be used to get the blend colour of the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function\n    `layer_sprite_get_id()`), and the function will return real value that represents the colour assigned.",
      "returns": "Colour Value (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_blend.htm"
    },
    "layer_sprite_get_id": {
      "name": "layer_sprite_get_id",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target"
        },
        {
          "parameter": "sprite_element_name",
          "description": "The unique name of the sprite element on the layer as defined in the Room Editor"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Assets_trees\"); var back_id = layer_sprite_get_id(lay_id, \"graphic_254367CB\"); layer_sprite_change(back_id, spr_Trees_Winter);\n```\nThe above code will get the layer ID for the layer named \"Assets_trees\" and then use that to retrieve the ID of the sprite element \"graphic_254367CB\" on that layer. The retrieved sprite element ID is then used to change the element's\n    sprite.\n",
      "description": "This function can be used to retrieve the unique ID value of a sprite element on a layer. You supply the layer ID (which you get when you create the layer using `layer_create()` or when\n    you use the layer name along with `layer_get_id()`) and the name of the sprite element as defined in the Room Editor. The function will return the ID value associated with that sprite\n    element on the layer.",
      "returns": "Sprite element ID value (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_id.htm"
    },
    "layer_sprite_get_index": {
      "name": "layer_sprite_get_index",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_index(spr_id) < 4\n    {\n        layer_sprite_index(spr_id, 4);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check if the image index for the element is less than 4, and if so it is set to 4.\n",
      "description": "This function can be used to get the current image index value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return real value that represents the image index being shown for the sprite. The function will return -1 if either the sprite element doesn't exist or the element doesn't have a valid sprite assigned to it.",
      "returns": "Real (the current sprite image index or -1)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_index.htm"
    },
    "layer_sprite_get_speed": {
      "name": "layer_sprite_get_speed",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_speed(spr_id) > 0\n    {\n        layer_sprite_speed(spr_id, 0);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the animation speed for the element and if it is greater than 0, it is set to 0.\n",
      "description": "This function can be used to get the current speed multiplier value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return real value that represents the speed multiplier being used to animate the sprite. Default value is 1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_speed.htm"
    },
    "layer_sprite_get_sprite": {
      "name": "layer_sprite_get_sprite",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_sprite(spr_id) != spr_Clouds\n    {\n        layer_sprite_change(spr_id, spr_Clouds);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the sprite assigned to the element, setting it to the sprite \"spr_Clouds\" if it is not already.\n",
      "description": "This function can be used to get the current sprite index of the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return a real value that represents the sprite index being shown. If the element has no sprite assigned, the function will return -1.",
      "returns": "Sprite Index (Real) or -1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_sprite.htm"
    },
    "layer_sprite_get_x": {
      "name": "layer_sprite_get_x",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_x(spr_id) < 0\n    {\n        layer_sprite_x(spr_id, room_width);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the element x position and if it is less than 0, then the layer element is moved to a different x position.\n",
      "description": "This function can be used to get the x position of the sprite element in the room. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return the x position value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_x.htm"
    },
    "layer_sprite_get_xscale": {
      "name": "layer_sprite_get_xscale",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_xscale(spr_id) != 1\n    {\n        layer_sprite_xscale(spr_id, 1);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the xscale value and if it is anything other than 1 it is set to 1.\n",
      "description": "This function can be used to get the current scale multiplier along the x axis for the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return real value for the x scale, where 1 is no scaling.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_xscale.htm"
    },
    "layer_sprite_get_y": {
      "name": "layer_sprite_get_y",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_y(spr_id) < 0\n    {\n        layer_sprite_y(spr_id, room_height);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the element y position and if it is less than 0, then the layer element is moved to a different y position.\n",
      "description": "This function can be used to get the y position of the sprite element in the room. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return the y position value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_y.htm"
    },
    "layer_sprite_get_yscale": {
      "name": "layer_sprite_get_yscale",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to get the information from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_sky\");\n    var spr_id = layer_sprite_get_id(lay_id, \"Clouds\");\n    if layer_sprite_get_yscale(spr_id) != 1\n    {\n        layer_sprite_yscale(spr_id, 1);\n    }\n```\nThe above code will get the layer ID for the layer named \"sprite_sky\" and then use that to get the ID of the sprite element on that layer. This ID is then used to check the yscale value and if it is anything other than 1 it is set to 1.\n",
      "description": "This function can be used to get the current scale multiplier along the y axis for the sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and the function will return real value for the y scale, where 1 is no scaling.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_get_yscale.htm"
    },
    "layer_sprite_index": {
      "name": "layer_sprite_index",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to set"
        },
        {
          "parameter": "index",
          "description": "The image index to use for the sprite"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"sprite_trees\"); var spr_id = layer_sprite_get_id(lay_id, \"gfc_trees\"); layer_sprite_index(spr_id, 1);\n```\nThe above code will get the layer ID for the layer named \"sprite_trees\" and then use that to get the ID of the given sprite element on that layer. This ID is then used to change the element image index.\n",
      "description": "This function can be used to set the image index of a sprite asset which has multiple sub-images on a layer. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()`    or when you use the function `layer_sprite_get_id()`), and then set the image index to use. If you set a value outside of the range of sub-images, then the image index will loop around.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_index.htm"
    },
    "layer_sprite_speed": {
      "name": "layer_sprite_speed",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "speed",
          "description": "The speed multiplier/value to use for the element"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Assets_water\"); var spr_id = layer_sprite_get_id(lay_id, \"gfc_water\"); layer_sprite_speed(spr_id, 0.5);\n```\nThe above code will get the layer ID for the layer named \"Assets_water\" and then use that to get the ID of the given sprite element on that layer. This ID is then used to change the element image speed.\n",
      "description": "This function can be used to set the speed of an animating image that has been assigned to a sprite element. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()`    or when you use the function `layer_sprite_get_id()`), and then set the animation speed. If the IDE has set the animation speed for the sprite used to be calculated as Frames Per Game Frame, then the speed\n    value given is a *multiplier*, with 1 being the default value, and setting it to 0.5 will half the animation speed, while setting it to 1.5 will double it. However, if the IDE has set the animation speed for the sprite used to be calculated as\n    Frames Per Second, then the speed value given is a literal frames per second value, so setting this to 5, for example, will set the animation to loop 5 frames every second that the game runs. If the sprite used has no sub-images, this function will\n    have no effect.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_speed.htm"
    },
    "layer_sprite_x": {
      "name": "layer_sprite_x",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "x",
          "description": "The x position for the sprite"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_sky\"); var spr_id = layer_sprite_get_id(lay_id, \"Clouds\"); layer_sprite_x(spr_id, irandom(room_width));\n```\nThe above code gets the ID value of the sprite asset \"Clouds\" assigned to the layer \"Asset_sky\" and then sets its x position to a random value between 0 and the width of the room.\n",
      "description": "This function controls the position along the x-axis of the room of the asset sprite element on the layer. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()`    or when you use the function `layer_sprite_get_id()`), and then set the x value to use (based on the room coordinates).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_x.htm"
    },
    "layer_sprite_xscale": {
      "name": "layer_sprite_xscale",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "xscale",
          "description": "The xscale value (default is 1)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar asset_sprite = layer_sprite_get_id(layer, \"gfc_Trees\");\n    if layer_sprite_get_xscale(asset_sprite) != 1 || layer_sprite_get_yscale(asset_sprite) != 1\n    {\n        layer_sprite_xscale(asset_sprite, 1);\n        layer_sprite_yscale(asset_sprite, 1);\n    }\n```\nThe above code will check the sprite element assigned to the layer the instance running the code is on and if it is scaled in either direction it will set both the x-axis scale and y-axis scale to 1.\n",
      "description": "Using this function you can change whether the given sprite element on a layer should be scaled along the x axis or not. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite used), larger values will scale up, and negative values will flip the sprite and scale it unless the value used is exactly -1 (in which case the sprite used is just flipped right-to-left about its origin position with no scaling).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_xscale.htm"
    },
    "layer_sprite_y": {
      "name": "layer_sprite_y",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "y",
          "description": "The y position for the sprite"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_sky\"); var spr_id = layer_sprite_get_id(lay_id, \"Clouds\"); layer_sprite_y(spr_id, 50 + irandom(room_height - 200));\n```\nThe above code gets the ID value of the sprite asset \"Clouds\" assigned to the layer \"Asset_sky\" and then sets its y position to a random value between 50 and the height of the room minus 200.\n",
      "description": "This function controls the position along the y-axis of the room of the asset sprite element on the layer. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()`    or when you use the function `layer_sprite_get_id()`), and then set the y value to use (based on the room coordinates).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_y.htm"
    },
    "layer_sprite_yscale": {
      "name": "layer_sprite_yscale",
      "parameters": [
        {
          "parameter": "sprite_element_id",
          "description": "The unique ID value of the sprite element to change"
        },
        {
          "parameter": "yscale",
          "description": "The yscale value (default is 1)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar asset_sprite = layer_sprite_get_id(layer, \"gfc_Trees\");\n    if layer_sprite_get_xscale(asset_sprite) != 1 || layer_sprite_get_yscale(asset_sprite) != 1\n    {\n        layer_sprite_xscale(asset_sprite, 1);\n        layer_sprite_yscale(asset_sprite, 1);\n    }\n```\nThe above code will check the sprite element assigned to the layer the instance running the code is on and if it is scaled in either direction it will set both the x-axis scale and y-axis scale to 1.\n",
      "description": "Using this function you can change whether the given sprite element on a layer should be scaled along the y axis or not. You give the sprite element ID (which you get when you create a sprite element using `layer_sprite_create()` or when you use the function `layer_sprite_get_id()`), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the sprite used), larger values will scale up, and negative values will mirror the sprite and scale it unless the value used is exactly -1 (in which case the sprite used is just mirrored top-to-bottom about its (0, 0) position with no scaling).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sprite_Layers/layer_sprite_yscale.htm"
    },
    "layer_tilemap_create": {
      "name": "layer_tilemap_create",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "x",
          "description": "The x position of the tile map in the room"
        },
        {
          "parameter": "y",
          "description": "The y position of the tile map in the room"
        },
        {
          "parameter": "tile set",
          "description": "The tile set index to be used"
        },
        {
          "parameter": "width",
          "description": "The width tile map (in cells)"
        },
        {
          "parameter": "height",
          "description": "The height of the tile map (in cells)"
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nglobal.back_layer = layer_create(10000); global.back_tiles = layer_tilemap_create(global.back_layer, 0, 0, tmap_Trees, 16, 32);\n```\nThe above code creates a new layer and then adds a new tile map element to it, setting the tile map position to (0,0) as well as the tile set to be used and the width and height of the tile map.\n",
      "description": "With this function you can assign a tile-set resource to a layer to be used as a tile map in your project. You supply the layer ID (which you get when you create the layer using `layer_create()`)\n    or the layer name (as a string - this will have a performance impact) and then an initial (x, y) position to add the tile map to the room, the tile set resource to use, and then the width and height of the tile map in *cells* (ie: a width of\n    20 and a height of 10 will create a tile map with 200 cells that is 20 cells wide and 10 cells tall), with the size of the cells themselves being defined by the tile set chosen. It is worth noting that you cannot place tiles at negative positions\n    within the tile map, so all tiles must be placed within the cell spaces 0 to width - 1, 0 to height - 1.",
      "returns": "tile map element ID (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_create.htm"
    },
    "layer_tilemap_destroy": {
      "name": "layer_tilemap_destroy",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map to be destroyed"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_trees\");\n    var tile_id = layer_tilemap_get_id(lay_id);\n    if layer_tilemap_exists(lay_id, tile_id)\n    {\n        layer_tilemap_destroy(tile_id);\n    }\n```\nThe above code checks the layer \"Tiles_trees\" to see if the given tile map element exists and if it does, then it is destroyed (but not the layer).\n",
      "description": "This function will destroy the given tile map element. You supply the tile map ID (which you get when you create the tile map using `layer_tilemap_create()` or when you use the layer ID along with `layer_get_tilemap_id()`) and this will remove it. Note that this does *not* remove the layer, only the tile map from it, and if the tile map is one that has been added in the room editor, then the next time you leave the room and then return, the tile map will be recreated again. However if the room is persistent, the tile map will be removed unless room persistence is switched off again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_destroy.htm"
    },
    "layer_tilemap_exists": {
      "name": "layer_tilemap_exists",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        },
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"tilemap_trees\");\n    if layer_tilemap_exists(lay_id, global.Treestilemap)\n    {\n        layer_tilemap_destroy(lay_id, global.Treestilemap);\n    }\n```\nThe above code checks the layer \"tilemap_trees\" to see if the given tile map element exists and if it does, then it is destroyed (but not the layer).\n",
      "description": "You can use this function to check and see if a tile map element exists on any given layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`) and the function will return either `true` if the element exists, or `false` if it does not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_exists.htm"
    },
    "layer_tilemap_get_id": {
      "name": "layer_tilemap_get_id",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to target (or the layer name as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"tilemap_trees\"); var tile_id = layer_tilemap_get_id(lay_id); layer_tilemap_destroy(tile_id);\n  \n```\nThe above code will get the layer ID for the layer named \"tilemap_trees\" and then use that to get the ID of the tile map element on that layer. This ID is then used to remove the tile map from the layer.\n",
      "description": "This function can be used to retrieve the unique ID value of the tile map element on a layer. You supply the layer ID (which you get when you create the layer using `layer_create()`) or\n    the layer name (as a string - this will have a performance impact) and the function will return the ID value associated with the tile map element on the layer. Note that this function is specifically designed for use with tile maps that have been\n    added in the IDE, as if you add a tile map to a layer through code using the function `layer_tilemap_create()`, then it will return the unique ID for the tile map element added. If the given tilemap ID\n    is incorrect or the tilemap doesn't exist, the function will return -1.",
      "returns": "tile map element ID value (Real) or -1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/layer_tilemap_get_id.htm"
    },
    "layer_vspeed": {
      "name": "layer_vspeed",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to set the vertical speed of"
        },
        {
          "parameter": "vspd",
          "description": "The vertical speed (in pixels per game frame) to set"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_hspeed(lay_id) != 0 || layer_get_vspeed(lay_id) != 0\n    {\n        layer_hspeed(lay_id, 0);\n        layer_vspeed(lay_id, 0);\n    }\n```\nThe above code checks the given layer horizontal and vertical speeds and if they are not both set to 0 then it is sets them to 0.\n",
      "description": "You can use this function to set the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is downwards and a negative value upwards.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_vspeed.htm"
    },
    "layer_x": {
      "name": "layer_x",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to set the x position of"
        },
        {
          "parameter": "x",
          "description": "The x position in the room to set the layer to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_x(lay_id) != 0 || layer_get_y(lay_id) != 0\n    {\n        layer_x(lay_id, 0);\n        layer_y(lay_id, 0);\n    }\n```\nThe above code checks the given layer position and if it is not set to (0, 0) then it is set to that position.\n",
      "description": "You can use this function to set the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the horizontal axis of the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_x.htm"
    },
    "layer_y": {
      "name": "layer_y",
      "parameters": [
        {
          "parameter": "layer_id",
          "description": "The unique ID value of the layer to set the y position of"
        },
        {
          "parameter": "y",
          "description": "The y position in the room to set the layer to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Sprites\");\n    if layer_get_x(lay_id) != 0 || layer_get_y(lay_id) != 0\n    {\n        layer_x(lay_id, 0);\n        layer_y(lay_id, 0);\n    }\n```\nThe above code checks the given layer position and if it is not set to (0, 0) then it is set to that position.\n",
      "description": "You can use this function to set the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using `layer_create()`) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the vertical axis of the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_y.htm"
    },
    "lengthdir_x": {
      "name": "lengthdir_x",
      "parameters": [
        {
          "parameter": "len",
          "description": "The length away of the point to return."
        },
        {
          "parameter": "dir",
          "description": "The direction of the point to return."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _xx = x + lengthdir_x(64, image_angle); var _yy = y + lengthdir_y(64, image_angle); instance_create_layer(_xx, _yy, \"Bullets\", obj_bullet);\n```\nThis will create a bullet instance at (`_xx`, `_yy`), which will be 64 pixels from the parent instance in the direction of the image angle.\n",
      "description": "This function is used to get the **x** component of a position \"len\" pixels from the starting point and in direction \"dir\". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move\n    to that point we need to move the object so many pixels in that direction... so this function (when used with `lengthdir_y()`) gets the position of that point on the circle to be used in code by the instance. See\n    the image below for details:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"
    },
    "lengthdir_y": {
      "name": "lengthdir_y",
      "parameters": [
        {
          "parameter": "len",
          "description": "The length away of the point to return."
        },
        {
          "parameter": "dir",
          "description": "The direction of the point to return."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _xx = x + lengthdir_x(64, image_angle); var _yy = y + lengthdir_y(64, image_angle); instance_create_layer(_xx, _yy, \"Bullets\", obj_bullet);\n```\nThis will create a bullet instance at (`_xx`, `_yy`), which will be 64 pixels from the parent instance in the direction of the image angle.\n",
      "description": "This function is used to get the **y** component of a position \"len\" pixels from the starting point and in direction \"dir\". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move\n    to that point we need to move the object so many pixels in that direction... so this function (when used with `lengthdir_x()`) gets the position of that point on the circle to be used in code by the instance. See\n    the image below for details:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"
    },
    "lerp": {
      "name": "lerp",
      "parameters": [
        {
          "parameter": "a",
          "description": "The first value."
        },
        {
          "parameter": "b",
          "description": "The second value."
        },
        {
          "parameter": "amt",
          "description": "The amount to interpolate."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nxx = lerp(x, x + hspeed, room_speed); yy = lerp(y, y + vspeed, room_speed);\n```\nThe above code uses the linear interpolation function to predict where an instance would have moved to after one second of game time.\n",
      "description": "With this function you can find the value that equates to the position between two other values for a given percentage. So if you do, for example:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/lerp.htm"
    },
    "ln": {
      "name": "ln",
      "parameters": [
        {
          "parameter": "n",
          "description": "The input value."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nalarm[0] = ln(age) * room_speed;\n```\nThe above code uses the natural logarithm of the value stored in the variable \"age\" to set an alarm.\n",
      "description": "The natural logarithm `ln(n)` is the amount of time needed to reach a certain level of continuous growth, where n is the level reached. So if we want to find out how many time units we need to get 20 growth we would use `ln(20)` which\n    returns 2.99 units of time to get that amount of growth.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/ln.htm"
    },
    "load_csv": {
      "name": "load_csv",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to open (as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile_grid = load_csv(\"spreadsheet.csv\");\n    var ww = ds_grid_width(file_grid);\n    var hh = ds_grid_height(file_grid);\n    var xx = 32;\n    var yy = 32;\n    for (var i = 0; i < ww; i++;)\n    {\n        for (var j = 0; j < hh; j++;)\n        {\n            draw_text(xx, yy, string(file_grid[# i, j]));\n            yy += 32;\n        }\n        yy = 32;\n        xx += 32;\n    }\n```\nThe above code will open the given CSV file and store the returned DS grid in the variable \"file_grid\". This grid is then parsed in a couple of `for` lops and the contents drawn to the screen.\n",
      "description": "This function will load a CSV format file and convert it into a DS grid, returning the unique ID value for the grid created.",
      "returns": "DS Grid Index (real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/load_csv.htm"
    },
    "log10": {
      "name": "log10",
      "parameters": [
        {
          "parameter": "n",
          "description": "The input value."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nlogval = log10(num);\n```\nThe above code gets the `log10` of the value stored in \"num\".\n",
      "description": "This function is similar to the `log2(n)` function, only that `log10(n)` gets the number of 10's that we need to multiply together to get n. So `log10(100)` returns 2, as multiplying 10 by itself gives\n    100, `log10(1000)` returns 3 as 10x10x10=1000 etc... The number does *not* have to be divisible by ten, however, but this will still return an appropriate value, for example if we have `log10(101)` we get 2.00432137... which is\n    how many times you could divide 101 by 10.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/log10.htm"
    },
    "log2": {
      "name": "log2",
      "parameters": [
        {
          "parameter": "n",
          "description": "The input value."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ncolourbits = floor(log2(colour)) - 1;\n```\nThe above code stores the number of bits needed to represent the value stored in the variable \"colour\".\n",
      "description": "This function basically asks \"how many 2's do you need to multiply to get n?\". A common example of use in programming would be to calculate the number of bits that are needed to represent a number. To do this we calculate the `log2(x)`    of the number, round it down and add 1 - for example `log2(100)` returns 6.643856, which rounded down is 6, to which we add one and it gives us 7. So we need 7 bits to represent 100. It can also be used for describing exponential growth or\n    decay, and is often called a *binary logarithm*.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/log2.htm"
    },
    "logn": {
      "name": "logn",
      "parameters": [
        {
          "parameter": "n",
          "description": "The log base."
        },
        {
          "parameter": "val",
          "description": "The input value."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nlogval = logn(5, num);\n```\nThe above code gets the `log5` of the value stored in \"num\".\n",
      "description": "This function is similar to the `log2(n)` and  [log10(n)](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/log10.htm) functions, only you stipulate the log base value. For example, `logn(5,25)` will return how many 5's we need to multiply\n    to get 25 (which is 2).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/logn.htm"
    },
    "make_colour_hsv": {
      "name": "make_colour_hsv",
      "parameters": [
        {
          "parameter": "hue",
          "description": "The hue of the colour"
        },
        {
          "parameter": "sat",
          "description": "How saturated the colour is"
        },
        {
          "parameter": "val",
          "description": "How dark the colour is"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncol = make_colour_hsv(100, 145, 255);\n```\nThe above code uses the function to create a colour and store its value in the variable \"col\" for later use.\n",
      "description": "GameMaker Studio 2 provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the *hue*, the *saturation* and the *value* (also know as \"luminosity\")\n    to create the colour desired. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/make_colour_hsv.htm"
    },
    "make_colour_rgb": {
      "name": "make_colour_rgb",
      "parameters": [
        {
          "parameter": "red",
          "description": "The red component of the colour"
        },
        {
          "parameter": "green",
          "description": "The green component of the colour"
        },
        {
          "parameter": "blue",
          "description": "The blue component of the colour"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncol = make_colour_rgb(100, 145, 255);\n```\nThe above code uses the function to create a colour and store its value in the variable \"col\" for later use.\n",
      "description": "GameMaker Studio 2 provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the *red*, the *green* and the *blue* components of the colour that\n    you wish to make. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/make_colour_rgb.htm"
    },
    "math_get_epsilon": {
      "name": "math_get_epsilon",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar e = math_get_epsilon();\n    if e != 0.000001\n    {\n        math_set_epsilon(0.000001);\n    }\n```\nThis will retrieve the current epsilon value and store it in a local variable, which is then checked and a new epsilon set if required.\n",
      "description": "This function will return the current epsilon value for the target platform. For more information on epsilon, please see the function `math_set_epsilon()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/math_get_epsilon.htm"
    },
    "math_set_epsilon": {
      "name": "math_set_epsilon",
      "parameters": [
        {
          "parameter": "epsilon",
          "description": "The new epsilon value (from 0 to 0.999999999)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmath_set_epsilon(0.0001);\n```\nThis will set the epsilon value for all further floating point operations.\n",
      "description": "Epsilon is a value used to determine whether two numbers subject to rounding error are close enough to be considered \"equal\". It is useful when dealing with floating point maths as it can reduce the \"rounding errors\" that make certain operations return values that appear incorrect or contrary to what we expect. For example, we may have added a value to the image index of a sprite and expect the result to be a single integer, but due to the nature of floating point maths, the actual final value ends up being something like 5.0000002, so when we have the following check:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/math_set_epsilon.htm"
    },
    "matrix_build": {
      "name": "matrix_build",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x component of the translation vector."
        },
        {
          "parameter": "y",
          "description": "The y component of the translation vector."
        },
        {
          "parameter": "z",
          "description": "The z component of the translation vector."
        },
        {
          "parameter": "xrotation",
          "description": "The angle to rotate around the x-axis (in degrees °)."
        },
        {
          "parameter": "yrotation",
          "description": "The angle to rotate around the y-axis (in degrees °)."
        },
        {
          "parameter": "zrotation",
          "description": "The angle to rotate around the z-axis (in degrees °)."
        },
        {
          "parameter": "xscale",
          "description": "The x scale amount."
        },
        {
          "parameter": "yscale",
          "description": "The y scale amount."
        },
        {
          "parameter": "zscale",
          "description": "The z scale amount."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nt_matrix = matrix_build(x, y, 0, 0, 90, 0, 1, 2, 1);\n```\nThe above code will build a new matrix transform and store the resulting matrix index in the variable \"t_matrix\".\n",
      "description": "This function can be used to create your own custom matrix and will return an index value for this new matrix which should be stored in a variable for future reference and use. The matrix itself is created as 16 value  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) where the first 4 elements are row 1, the second 4 elements are row 2 etc... of a 4x4 matrix.",
      "returns": "Matrix index (4x4 Matrix)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build.htm"
    },
    "matrix_build_identity": {
      "name": "matrix_build_identity",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ni_matrix = matrix_build_identity();\n```\nThe above code will create an identity matrix and store its index in a variable for future use.\n",
      "description": "This will build a 4x4 identity matrix with the following structure:",
      "returns": "Matrix index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_identity.htm"
    },
    "matrix_build_lookat": {
      "name": "matrix_build_lookat",
      "parameters": [
        {
          "parameter": "xfrom",
          "description": "The x coordinate of the position to look from."
        },
        {
          "parameter": "yfrom",
          "description": "The y coordinate of the position to look from."
        },
        {
          "parameter": "zfrom",
          "description": "The z coordinate of the position to look from."
        },
        {
          "parameter": "xto",
          "description": "The x coordinate of the position to look to."
        },
        {
          "parameter": "yto",
          "description": "The y coordinate of the position to look to."
        },
        {
          "parameter": "zto",
          "description": "The z coordinate of the position to look to."
        },
        {
          "parameter": "xup",
          "description": "The x coordinate of the \"up\" vector."
        },
        {
          "parameter": "yup",
          "description": "The y coordinate of the \"up\" vector."
        },
        {
          "parameter": "zup",
          "description": "The z coordinate of the \"up\" vector."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nviewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0); projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0); camera_set_view_mat(view_camera[0], viewmat); camera_set_proj_mat(view_camera[0], projmat);\n```\nThe above code creates a new look-at matrix and orthographic matrix, stores their IDs in local variables and then uses them to set the view and projection matrices for the camera assigned to view port[0].\n",
      "description": "This function builds a \"look-at\" (view) matrix based on the specified parameters listed below. Since this function modifies the view matrix and not the projection matrix, you should first initialize the projection matrix using the other matrix\n    function `matrix_build_projection_perspective()`, then use this function to move the view camera around within the projection.",
      "returns": "Matrix index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_lookat.htm"
    },
    "matrix_build_projection_ortho": {
      "name": "matrix_build_projection_ortho",
      "parameters": [
        {
          "parameter": "w",
          "description": "The width of the projection."
        },
        {
          "parameter": "h",
          "description": "The height of the projection."
        },
        {
          "parameter": "znear",
          "description": "The near clipping plane."
        },
        {
          "parameter": "zfar",
          "description": "The far clipping plane."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nviewmat = matrix_build_lookat(640, 240, -10, 640, 240, 0, 0, 1, 0); projmat = matrix_build_projection_ortho(640, 480, 1.0, 32000.0); camera_set_view_mat(view_camera[0], viewmat); camera_set_proj_mat(view_camera[0], projmat);\n```\nThe above code creates a new look-at matrix and orthographic matrix, stores their IDs in local variables and then uses them to set the view and projection matrices for the camera assigned to view port[0].\n",
      "description": "This function builds an orthographic projection matrix based on the specified parameters listed below (this is the default projection method used when you create a room in GameMaker Studio 2 without changing anything). Sometimes you need to switch\n    from a perspective projection to an orthographic projection which is what this function is for. It is typically used to draw an overlay, for example, to show the score or other aspects as this gives a \"flat\" view of the elements drawn (ie:\n    no perspective) in a 3D game. See the image below to get an idea of the difference between orthographic and perspective views.",
      "returns": "Matrix index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_ortho.htm"
    },
    "matrix_build_projection_perspective": {
      "name": "matrix_build_projection_perspective",
      "parameters": [
        {
          "parameter": "w",
          "description": "The width of the projection at the near Z position."
        },
        {
          "parameter": "h",
          "description": "The height of the projection at the near Z position."
        },
        {
          "parameter": "znear",
          "description": "The near clipping plane."
        },
        {
          "parameter": "zfar",
          "description": "The far clipping plane."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar projmat = matrix_build_projection_perspective(640, 480, 640.0, 32000.0);\n    camera_set_proj_mat(view_camera[0], projmat);\n```\nThe above code creates a perspective projection and then uses the matrix returned to set the camera assigned to view port[0].\n",
      "description": "This function builds a perspective projection matrix based on the dimensions of the near clipping plane, using the specified parameters listed below.",
      "returns": "Matrix index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_perspective.htm"
    },
    "matrix_build_projection_perspective_fov": {
      "name": "matrix_build_projection_perspective_fov",
      "parameters": [
        {
          "parameter": "fov",
          "description": "The angle of the field of view."
        },
        {
          "parameter": "aspect",
          "description": "The aspect ratio of the field of view."
        },
        {
          "parameter": "znear",
          "description": "The near clipping plane."
        },
        {
          "parameter": "zfar",
          "description": "The far clipping plane."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nprojmat = matrix_build_projection_perspective_fov(60, 320/240, 1.0, 32000.0); camera_set_proj_mat(view_camera[0], projmat);\n```\nThe above code creates a field of view projection matrix which is then stored in a variable. This matrix is then used to set up the camera assigned to view port[0].\n",
      "description": "This function builds a perspective projection matrix matrix based on field of view, using the specified parameters listed below.",
      "returns": "Matrix index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_build_projection_perspective_fov.htm"
    },
    "matrix_get": {
      "name": "matrix_get",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of matrix to get the values of (see the *constants* listed above)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nv_array = matrix_get(matrix_view);\n```\nThe above code will get the values of the current view matrix and populate the array \"v_array\" with them.\n",
      "description": "This function returns an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements [0 - 3], row 2 is elements [4 -7], etc... (see the image on the  [main page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm)).\n    The available matrices are *view*, *projection* and *world*, for which you would use one of the following constants:",
      "returns": "Array (16 elements)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_get.htm"
    },
    "matrix_multiply": {
      "name": "matrix_multiply",
      "parameters": [
        {
          "parameter": "matrix1",
          "description": "The first matrix index to use."
        },
        {
          "parameter": "matrix2",
          "description": "The second matrix index to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar v_matrix = matrix_get(matrix_view); var new_matrix = matrix_multiply(v_matrix, my_matrix); matrix_set(matrix_view, new_matrix);\n```\nThe above code will get the current view matrix, then multiply that with a custom matrix and then use the resulting matrix index to set the view matrix again.\n",
      "description": "With this function you can multiply two matrix arrays together to create a new transform matrix. The function will return the new matrix index which should be stored in a variable for future use.",
      "returns": "Matrix Index (4x4 Matrix)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_multiply.htm"
    },
    "matrix_set": {
      "name": "matrix_set",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of matrix to get the values of (see the *constants* listed above)"
        },
        {
          "parameter": "matrix",
          "description": "The matrix data as an array"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmatrix_set(matrix_world, m_array);\n```\nThe above code will set the values of the current world matrix to those stored in the array matrix \"m_array\".\n",
      "description": "This function takes an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) of 16 values, corresponding to a given 4x4 matrix type, where elements [0 - 3] would be row 1, elements [4 -7] would be row 2, etc... (see the image on the  [main page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm)).\n    You can create such a matrix using the `matrix_build()` or `matrix_get()` functions or simply building the array yourself and passing that into the function. The available matrix\n    types are *view*, *projection* and *world*, for which you would use one of the following constants:",
      "returns": "NA",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm"
    },
    "matrix_stack_clear": {
      "name": "matrix_stack_clear",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !matrix_stack_is_empty()\n    {\n        matrix_stack_clear();\n    }\n```\nThe above code checks the matrix stack to see if it is empty and if it is not it clears it.\n",
      "description": "This function clears the matrix stack.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_clear.htm"
    },
    "matrix_stack_is_empty": {
      "name": "matrix_stack_is_empty",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !matrix_stack_is_empty()\n    {\n        matrix_stack_clear();\n    }\n```\nThe above code checks the matrix stack to see if it is empty and if it is not it clears it.\n",
      "description": "This function can be used to check whether the matrix stack is empty (returns `true`) or not (returns `false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_is_empty.htm"
    },
    "matrix_stack_pop": {
      "name": "matrix_stack_pop",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar m1 = matrix_build(66, 145, 0, 0, 0, 0, 1, 1, 1);\n    var m2 = matrix_build(0, 0, 0, 0, 0, image_angle * 6, 1, 1, 1) ;\n    matrix_stack_push(m1);\n    matrix_stack_push(m2);\n    matrix_set(matrix_world, matrix_stack_top());\n    draw_sprite(spr_tyre, 0, 0, 0);\n    matrix_stack_pop();\n    matrix_stack_pop();\n```\nThe above code will build two new matrices and then push them onto the matrix stack. The world matrix is then set to the top of the stack, a sprite is drawn and the transforms are then popped from the stack.\n",
      "description": "This function removes the matrix that is at the top of the current matrix stack.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_pop.htm"
    },
    "matrix_stack_push": {
      "name": "matrix_stack_push",
      "parameters": [
        {
          "parameter": "matrix",
          "description": "The matrix to push to the stack"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar m1 = matrix_build(66, 145, 0, 0, 0, 0, 1, 1, 1);\n    var m2 = matrix_build(0, 0, 0, 0, 0, image_angle * 6, 1, 1, 1) ;\n    matrix_stack_push(m1);\n    matrix_stack_push(m2);\n    matrix_set(matrix_world, matrix_stack_top());\n    draw_sprite(spr_tyre, 0, 0, 0);\n    matrix_stack_pop();\n    matrix_stack_pop();\n```\nThe above code will build two new matrices and then push them onto the matrix stack. The world matrix is then set to the top of the stack, a sprite is drawn and the transforms are then popped from the stack.\n",
      "description": "This function is used to push a new matrix to the top of the current matrix stack. It will first multiply the given matrix with the matrix currently at the top of the stack, and then push the resulting matrix to the stack.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_push.htm"
    },
    "matrix_stack_set": {
      "name": "matrix_stack_set",
      "parameters": [
        {
          "parameter": "matrix",
          "description": "The matrix index to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar m = matrix_build(x, y, 0, 0, 0, 0, 1, 1, 1); matrix_stack_set(m);\n  \n```\nThe above code will build a new matrix and store the resulting matrix index in the variable \"m\" before replacing the top of the matrix stack with it.\n",
      "description": "This function overwrites the current top of the matrix stack with the specified matrix.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_set.htm"
    },
    "matrix_stack_top": {
      "name": "matrix_stack_top",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar m1 = matrix_build(66, 145, 0, 0, 0, 0, 1, 1, 1); var m2 = matrix_build(0, 0, 0, 0, 0, image_angle * 6, 1, 1, 1) ; matrix_stack_push(m1);\n     matrix_stack_push(m2);\n     matrix_set(matrix_world, matrix_stack_top()); draw_sprite(tyre, 0, 0, 0); matrix_stack_pop();\n     matrix_stack_pop();\n  \n```\nThe above code will build two new matrices and then push them onto the matrix stack. The world matrix is then set to the top of the stack, a sprite is drawn and the transforms are then popped from the stack.\n",
      "description": "This function returns the current top matrix of the stack, but does *not* remove it (for that use `matrix_stack_pop()`).",
      "returns": "Matrix index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_stack_top.htm"
    },
    "matrix_transform_vertex": {
      "name": "matrix_transform_vertex",
      "parameters": [
        {
          "parameter": "matrix",
          "description": "The matrix to use"
        },
        {
          "parameter": "x",
          "description": "The x component of the transform vector"
        },
        {
          "parameter": "y",
          "description": "The y component of the transform vector"
        },
        {
          "parameter": "z",
          "description": "The z component of the transform vector"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nt_matrix = matrix_build(0, 0, 0, 0, 90, 0, 1, 2, 1); verts = matrix_transform_vertex(t_matrix, x, y, z);\n```\nThe above code transforms the given values using the matrix stored in the variable \"t_matrix\" and stores them in the array \"verts\".\n",
      "description": "This function transforms a vector by a matrix. You supply the transform matrix ID (as returned by the function `matrix build()`), as well as the x, y and z values for the vector to transform. The function will return\n    an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) of 3 elements where:",
      "returns": "Array (3 elements)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_transform_vertex.htm"
    },
    "max": {
      "name": "max",
      "parameters": [
        {
          "parameter": "val0 ... max_val",
          "description": "The values to compare."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\nx = max(x, 0);\n```\nThis will stop the player from exiting the left of the room. This works by constantly setting its x to either itself or 0, whichever is larger. If the player exits the left, its x would be smaller than 0 (ie negative), so it'll get set straight\n    back.\n",
      "description": "This function returns the maximum of the input values, of which it can have up to 16. For example `max(12, 96, 32, 75)` will return 96 as that is the highest of all the input values.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/max.htm"
    },
    "md5_file": {
      "name": "md5_file",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The file to generate the MD5 hash for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nhash = md5_file(working_directory + \"game_data.ini\")\n```\nThe above code will generate an MD5 hash for the specified file and store the returned value in the variable \"hash\".\n",
      "description": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings.\n    This function will take the given file and generate a unique MD5 for that file which can then be stored for later use.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/md5_file.htm"
    },
    "md5_string_unicode": {
      "name": "md5_string_unicode",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to hash."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar hash, str; str = base64_encode(game_data); hash = md5_string_unicode(str); http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?hash=\" + hash); http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?data=\"\n    + str);\n```\nThe above code will base64 encode a string and then generate an MD5 hash. Finally, both the hash and the encoded string are sent to a server.\n",
      "description": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings.\n    This function will take an input unicode string (which is 16bits for each char) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used to check the integrity\n    of the information being sent to (or received from) an external server (for example).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/md5_string_unicode.htm"
    },
    "md5_string_utf8": {
      "name": "md5_string_utf8",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to hash."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar hash, str; str = json_encode(hiscore_map); hash = md5_string_utf8(str); ini_open(\"local.ini\");\n     ini_write_string(\"info\", \"0\", hash); ini_close();\n     get[0] = http_post_string(\"http://www.MacSweeney Games.com/CatchTheHaggis?game_hiscores=\" + string(global.game_id), str)\n```\nThe above code will encode a DS map into a JSON string. An MD5 hash is then generated and stored in an ini file so that this can later be used to check the integrity of the JSON should the same information be received later form the server. The JSON\n    is then sent.\n",
      "description": "In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings.\n    This function will take an input UTF-8 string (which has a variable number of bytes per character) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used\n    to check the integrity of the information being sent to (or received from) an external server (for example).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/md5_string_utf8.htm"
    },
    "mean": {
      "name": "mean",
      "parameters": [
        {
          "parameter": "val0 ... max_val",
          "description": "The values to compare."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\nxmiddle = mean(obj_player1.x, obj_player2.x, obj_player3.x); ymiddle = mean(obj_player1.y, obj_player2.y, obj_player3.y);\n```\nThis will set xmiddle and ymiddle to the x and y coordinates of the average of the coordinates of three player objects, obj_player1, obj_player2 and obj_player3. You could, for instance, use this to keep the game camera focused on all three players\n    instead of just one.\n",
      "description": "This function works by adding up all the input values and then dividing them by their own number. You can have as many arguments as you require (note that more arguments will mean that the function will be slower to parse). So, `mean(2, 6, 9, 32)`    returns 12.25 as 2+6+9+32=49 and 49/4=12.25.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/mean.htm"
    },
    "median": {
      "name": "median",
      "parameters": [
        {
          "parameter": "val0 ... max_val",
          "description": "The values to compare."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\nx = median( 0, x, room_width ); y = median( 0, y, room_height );\n```\nThis will stop the player from exiting any side of the room, by using median as a clamp. If the player, for instance, moves to the left of the room boundary, its x will be smaller than 0. This will mean the middle number of the first of the medians\n    will be 0, so the player will be jumped to (0,y).\n",
      "description": "This function returns the median of the input values, that is, the middle value. When the number of arguments is even, the smaller of the two middle values is returned and the function can have as many arguments as required (note that more arguments\n    will mean that the function will be slower to parse) which must all be real values. This means that, for example, `median(43, 12, 25, 19, 6)` would return 19 as it is the middle value between all the rest.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/median.htm"
    },
    "merge_colour": {
      "name": "merge_colour",
      "parameters": [
        {
          "parameter": "col1",
          "description": "The first colour to merge"
        },
        {
          "parameter": "col2",
          "description": "The second colour to merge"
        },
        {
          "parameter": "amount",
          "description": "How much of each colour should be merged. For example, 0 will return col1, 1 will return col2, and 0.5 would return a merge of both colours equally"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncol = merge_colour(c_lime, c_orange, 0.5);\n```\nThe above code uses the function to create a colour by merging lime and orange 50/50 and then stores its value in the variable \"col\" for later use.\n",
      "description": "With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the \"amount\" argument, where a value of 0 will return the first colour (col1),\n    a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and\n    blue together:",
      "returns": "Int",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/merge_colour.htm"
    },
    "method": {
      "name": "method",
      "parameters": [
        {
          "parameter": "struct_ref_or_instance_id",
          "description": "The unique reference or ID value of the struct or instance to use (or `undefined` for `self`)"
        },
        {
          "parameter": "function",
          "description": "The ID of the function to use"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _inst = instance_position(mouse_x, mouse_y, obj_Enemy);\n    if instance_exists(_inst)\n    {\n        enemy_func = method(_inst, enemy_ai);\n    }\n```\nThe above code will check to see if an instance exists at the given position and if it does then a function is bound to the instance and returned as the method variable `\"enemy_func\"`.\n",
      "description": "With this function you can bind any function that has previously been defined to a given instance or struct, creating a  [method variable](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Method_Variables.htm) that can be used later. You supply the instance ID to use (it *must* be an instance that is active and in the room, and can't be an object ID) or a struct reference, as well as the ID of the function that you want to bind. The function will return a method (tooltip) which can be called from the variable it is assigned to (see the code example below). It is worth noting that you can bind built-in functions as well as user defined functions, and you can also supply `undefined` as the instance/struct argument meaning that the current `self` scope will be used for the binding.",
      "returns": "Method",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/method.htm"
    },
    "method_get_index": {
      "name": "method_get_index",
      "parameters": [
        {
          "parameter": "method",
          "description": "The method variable to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _index = method_get_index(light_setup);\n    if _index != -1\n    {\n        show_debug_message(script_get_name(_index));\n    }\n```\nThe above code will check the script index for the method \"light_setup\" and then if it is not -1 it will output the script name to the console.\n",
      "description": "With this function you can retrieve the  [Script](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) index for the script where the method was defined. If the method was not defined in a script then the function will return -1, otherwise it will return the index value for the script.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/method_get_index.htm"
    },
    "method_get_self": {
      "name": "method_get_self",
      "parameters": [
        {
          "parameter": "method",
          "description": "The method variable to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _self = method_get_self(light_properties); show_debug_message(string(_self));\n  \n```\nThe above code gets the self context for the given method variable and outputs it to the console.\n",
      "description": "With this function you can retrieve the instance ID or struct reference which is the `self` context used when the method is called. If the variable is *not* a method then the function\n    will return `undefined`. Please note that the function may also return the constant pointer_null, in which case the current self is being used at the time of the call.",
      "returns": "Integer, undefined, pointer_null",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/method_get_self.htm"
    },
    "min": {
      "name": "min",
      "parameters": [
        {
          "parameter": "val0 ... max_val",
          "description": "The values to compare."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": true,
      "example": "```\nx = min(x, room_width);\n```\nThis will stop the player from exiting the right of the room. This works by constantly setting its x to either itself or the room_width variable, whichever is smaller. If the player exits the right, its x would be larger than room_width, so it'll\n    get set straight back.\n",
      "description": "This function returns the minimum of the input values, of which it can have as many as you require (note that more arguments will mean that the function will be slower to parse). For example `min(12, 96, 32, 75)` will return 12 as that is the\n    lowest of all the input values.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/min.htm"
    },
    "motion_add": {
      "name": "motion_add",
      "parameters": [
        {
          "parameter": "dir",
          "description": "The added direction."
        },
        {
          "parameter": "speed",
          "description": "The added speed."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar pdir; pdir = point_direction(other.x, other.y, x, y); motion_add(pdir, other.speed); if speed > 8 speed = 8;\n```\nthe above code would be called in the collision event with another object. It adds to the direction of motion and the speed of the instance a vector based on the position and speed of the other instance involved in the collision. It then limits the\n    speed if it goes over 8 (pixels per step).\n",
      "description": "This function will modify the current  [direction](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/direction.htm) and  [speed](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm) of\n    the instance running the code, combining the values given with the current values. If you wish to simply change these values, you should be using the function  [motion_set()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/motion_set.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/motion_add.htm"
    },
    "motion_set": {
      "name": "motion_set",
      "parameters": [
        {
          "parameter": "dir",
          "description": "The new direction."
        },
        {
          "parameter": "speed",
          "description": "The new speed.`"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif irandom(9) = 1\n    {\n        motion_set(random(360), 1 + random(3));\n    }\n```\nThis above code will make the instance change speed and direction at random intervals.\n",
      "description": "This function sets a new direction of movement and a new speed to the instance running the code. Note that this *does not* add to the instances current speed and direction (for that you would use `motion_add()`) but rather forces it to the new settings.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/motion_set.htm"
    },
    "mouse_check_button": {
      "name": "mouse_check_button",
      "parameters": [
        {
          "parameter": "numb",
          "description": "Which mouse button constant to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button(mb_left)\n    {\n        instance_create_layer(mouse_x, mouse_y, \"Effects\", obj_Star);\n    }\n```\nThe above code will check for the left mouse button and every step that it is held down will create an instance of the object indexed in \"obj_Star\".\n",
      "description": "This function will return `true` if the mouse button being checked is held down or `false` if it is not. You supply the mouse button to check from one of the following constants:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button.htm"
    },
    "mouse_check_button_pressed": {
      "name": "mouse_check_button_pressed",
      "parameters": [
        {
          "parameter": "numb",
          "description": "Which mouse button constant to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        score += 50;\n    }\n```\nThe above code will check to see if the left mouse button has been pressed and if it has it will add 50 to the score.\n",
      "description": "This function will return `true` if the mouse button being checked has been pressed or `false` if it has not. This function will only be triggered *once* for any mouse button when it is first pressed and to trigger it again the button will need to have been released and pressed again. Note that it will be considered triggered for the duration of the step, and for all instances that have any mouse events or that use this same function.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button_pressed.htm"
    },
    "mouse_check_button_released": {
      "name": "mouse_check_button_released",
      "parameters": [
        {
          "parameter": "numb",
          "description": "Which mouse button constant to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_released(mb_right)\n    {\n        speed = point_distance(x, y, mouse_x, mouse_y) / 10;\n    }\n```\nThe above code will check to see if the right mouse button has been released and if it has it will set the speed of the instance to a tenth of the distance between the current x/y position and the mouse x/y position.\n",
      "description": "This function will return `true` if the mouse button being checked has been released or `false` if it has not. This function will only be triggered *once* for any mouse button when it is released and to trigger it again the button will need to have been pressed and released again. You supply the mouse button to check from one of the following constants:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button_released.htm"
    },
    "mouse_clear": {
      "name": "mouse_clear",
      "parameters": [
        {
          "parameter": "button",
          "description": "Which mouse button constant to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmouse_clear(mb_any);\n```\nThe above code will clear the down state of all the mouse buttons.\n",
      "description": "This function will clear the current state of the given mouse button. This means that checks for it being held down will not return `true` until the player releases the button and presses it again (but the release state will still be detected\n    if the clear is done while the mouse button is being held down).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_clear.htm"
    },
    "mouse_wheel_down": {
      "name": "mouse_wheel_down",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif mouse_wheel_down()\n    {\n        y += 10;\n    }\n```\nThis moves the current instance down the screen if the mouse wheel is rotated upwards.\n",
      "description": "This function returns `true` if the mouse wheel is being rotated downwards and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_wheel_down.htm"
    },
    "mouse_wheel_up": {
      "name": "mouse_wheel_up",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif mouse_wheel_up()\n    {\n        y -= 10;\n    }\n```\nThis moves the current instance up the screen if the mouse wheel is rotated upwards.\n",
      "description": "This function returns `true` if the mouse wheel is being rotated upwards and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_wheel_up.htm"
    },
    "move_bounce_all": {
      "name": "move_bounce_all",
      "parameters": [
        {
          "parameter": "adv",
          "description": "Whether to enable advanced bouncing (true) or not (false)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif other.visible\n    {\n        move_bounce_all(false);\n    }\n```\nThe above code would be placed in a collision event with another object. It first checks to see if the object is visible and if it is it then performs the `move_bounce_all()` action. Note that in this case the bounce is selective and will only be calculated for this collision, rather than for every instance, every step.\n",
      "description": "With this function you can command an instance to bounce off **all** instances within the room, with the only exception being those that have no sprite or mask index assigned to them. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too, as illustrated by the code example below.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_bounce_all.htm"
    },
    "move_bounce_solid": {
      "name": "move_bounce_solid",
      "parameters": [
        {
          "parameter": "adv",
          "description": "Whether to enable advanced bouncing (true) or not (false)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmove_bounce_solid(false);\n```\nThis will enable non-precise bouncing off instances flagged as \"solid\".\n",
      "description": "With this function you can command an instance to bounce off only those instances marked as **solid** within the room. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise\n    masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_bounce_solid.htm"
    },
    "move_contact_all": {
      "name": "move_contact_all",
      "parameters": [
        {
          "parameter": "dir",
          "description": "The direction to move in."
        },
        {
          "parameter": "maxdist",
          "description": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !place_meeting(x, y + 1, all)\n    {\n        move_contact_all(270, -1);\n    }\n```\nThe above code will check beneath the instance for a collision, and if there is none, then it will move it down until there is or until 1000pixels have been covered.\n",
      "description": "This function will move the instance running the code a set number of pixels in the specified direction until it meets *any* other instance with a valid mask. You can use -1 or 0 for the maxdist being a default 1000px, ie: GameMaker Studio 2 will move the instance continually up 1000 pixels until it is out of collision.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_contact_all.htm"
    },
    "move_contact_solid": {
      "name": "move_contact_solid",
      "parameters": [
        {
          "parameter": "dir",
          "description": "The direction to move in."
        },
        {
          "parameter": "maxdist",
          "description": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !place_meeting(x, y + 1, obj_Floor)\n    {\n        move_contact_solid(270, -1);\n    }\n```\nThe above code will check beneath the instance for a collision with \"obj_Floor\", and if there is none, then it will move it down until there is a collision, or 1000 pixels have been covered.\n",
      "description": "This function will move the instance running the code a set number of pixels in the specified direction until it meets an instance with **solid** flagged as true. You can use -1 or 0 for the maxdist being a default 1000px, ie: GameMaker Studio 2 will move the instance continually up 1000 pixels until it is out of collision.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_contact_solid.htm"
    },
    "move_outside_all": {
      "name": "move_outside_all",
      "parameters": [
        {
          "parameter": "dir",
          "description": "The direction to move in."
        },
        {
          "parameter": "maxdist",
          "description": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif place_meeting(x, y, all)\n    {\n        move_outside_all(90, 1);\n    }\n```\nThe above code will move the instance up 1 pixel each step that it is in collision with any other instance.\n",
      "description": "With this function you can tell an instance to move out of a collision in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: GameMaker Studio 2 will move the instance continually up 1000 pixels until it is out of collision.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_outside_all.htm"
    },
    "move_outside_solid": {
      "name": "move_outside_solid",
      "parameters": [
        {
          "parameter": "dir",
          "description": "The direction to move in."
        },
        {
          "parameter": "maxdist",
          "description": "The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif other.solid\n    {\n        var pdir;\n        pdir = point_direction(other.x, other.y, x, y);\n        move_outside_solid(pdir, -1);\n    }\n```\nThe above code would go in a collision event and checks to see if the \"other\" instance in the collision is flagged as \"solid\". If it is, it will then move the instance out of collision.\n",
      "description": "With this function you can tell an instance to move out of a collision with any instance flagged as **solid** in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: GameMaker Studio 2 will move the instance continually up 1000 pixels until it is out of collision.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_outside_solid.htm"
    },
    "move_random": {
      "name": "move_random",
      "parameters": [
        {
          "parameter": "hsnap",
          "description": "The horizontal snapping (the size in pixels between 'cells')."
        },
        {
          "parameter": "vsnap",
          "description": "The vertical snapping (the size in pixels between 'cells')."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_space)\n    {\n        move_random(1, 1);\n    }\n```\nThis will move the instance to a random position anywhere in the room when the space key is pressed.\n",
      "description": "With this function you can set the instance to a position anywhere in the room, but aligned to an \"invisible\" grid. So a value of 32 for the hsnap and vsnap will set the instance to a random position that is aligned to a grid of 32x32 squares. you can set these values to 1 to get a position anywhere in the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_random.htm"
    },
    "move_snap": {
      "name": "move_snap",
      "parameters": [
        {
          "parameter": "hsnap",
          "description": "The horizontal snapping (the size in pixels between 'cells')."
        },
        {
          "parameter": "vsnap",
          "description": "The vertical snapping (the size in pixels between 'cells')."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwith (obj_Pieces)\n    {\n        if !place_snapped(32, 32)\n        {\n            move_snap(32, 32);\n        }\n    }\n```\nThe above code checks all instances of \"obj_Pieces\" to see if they are snapped to a grid of 32x32 pixels, and if they are not it snaps them to the nearest position in that grid.\n",
      "description": "This function is used to \"snap\" the instance to a grid of a given size. It will be snapped to the nearest corresponding position on the \"invisible\" grid that the hsnap and vsnap values define.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_snap.htm"
    },
    "move_towards_point": {
      "name": "move_towards_point",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position of the point to move towards."
        },
        {
          "parameter": "y",
          "description": "The y position of the point to move towards."
        },
        {
          "parameter": "sp",
          "description": "The speed to move at in pixels per step."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif point_distance(x, y, target.x, target.y) > 5\n    {\n        move_towards_point(target.x, target.y, 5);\n    }\n    else speed = 0;\n```\nThe above code will move the instance towards the position of the instance indexed in the variable \"target\" at a speed of 5 pixels per step. Once it reaches that position the speed is set to 0.\n",
      "description": "This function simply tells the instance running the code to move towards a set point at a set speed. Bear in mind that it is up to you to tell it what to do once it gets there, as it won't just stop by itself. This means that you can get a \"vibrating\" instance as it moves (for example) 3 pixels forward, overshoots the x/y target position by 2, then moves 3 pixels back again, overshooting the target point by one and so on... There are a number of ways that this can be avoided, for example using `distance_to_point()` to see how far from the specified location the instance is before moving.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_towards_point.htm"
    },
    "move_wrap": {
      "name": "move_wrap",
      "parameters": [
        {
          "parameter": "hor",
          "description": "Whether to wrap horizontally (true) or not (false)."
        },
        {
          "parameter": "vert",
          "description": "Whether to wrap vertically (true) or not (false)."
        },
        {
          "parameter": "margin",
          "description": "How far outside the room, in pixels, the object must be to initiate wrapping."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nmove_wrap(true, false, sprite_width);\n```\nThis will make the instance wrap horizontally but not vertically, when it is over its own sprite width outside of the room.\n",
      "description": "This function will automatically \"wrap\" an instance that has left the room on either the horizontal or vertical (or both) axis. You can specify a margin outside the edges of the room for this to occur, and when the instance has travelled outside\n    of that margin GameMaker Studio 2 will automatically wrap it back into the room at the other side. Note that the instance must have a speed for wrapping to work, because the direction of wrapping is based on the direction of the motion.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_wrap.htm"
    },
    "mp_grid_add_cell": {
      "name": "mp_grid_add_cell",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "h",
          "description": "Horizontal position of the cell in the grid"
        },
        {
          "parameter": "v",
          "description": "Vertical position of the cell in the grid"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nwith (obj_Wall)\n    {\n        mp_grid_add_cell(grid, floor(x / 32), floor(y / 32));\n    }\n    with (obj_Door)\n    {\n        mp_grid_add_cell(grid, x>>5, y>>5);\n    }\n```\nThe above code will make all \"obj_Wall\" and all obj_Door add their equivalent cell positions into the mp_grid indexed in the variable \"grid\". In the first part of the example, this is done by taking the x/y coordinates of the object and dividing them by the resolution of the grid (using `floor` to keep the values as integers), and in the second part (since the grid resolution is a power of 2) it is done by bit-shifting the x,y coordinates 5 places to the right.\n",
      "description": "With this function we can mark individual cells within the given MP grid as being \"forbidden\" meaning that the path finding functions will not ever cross them. Now, normally you work in x/y *room* coordinates, and not in MP grid *cell* coordinates. So let's consider the following image which shows how the two can correlate:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_add_cell.htm"
    },
    "mp_grid_add_instances": {
      "name": "mp_grid_add_instances",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "obj",
          "description": "Object index, or instance id, of the instances to be added into the mp_grid"
        },
        {
          "parameter": "prec",
          "description": "Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nmp_grid_add_instances(grid, obj_Wall, true);\n```\nThe above code will add all instances of \"obj_Wall\" into the mp_grid indexed in the variable \"grid\" using the precise collision mask rather than the bounding box.\n",
      "description": "This function uses the instance collision mask (decided by the sprite properties or the mask index of the calling instance) to mark cells as forbidden or not in an MP grid, where forbidden cells cannot be crossed by any of the pathfinding functions.\n    You can specify in the function whether to consider precise collisions or not and the forbidden cells marked will change depending on this setting. This image illustrates this behaviour:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_add_instances.htm"
    },
    "mp_grid_add_rectangle": {
      "name": "mp_grid_add_rectangle",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the rectangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the rectangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the rectangle to check."
        },
        {
          "parameter": "y2",
          "description": "The x coordinate of the bottom side of the rectangle to check."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nmp_grid_add_rectangle(grid, 0, 0, 100, 200);\n```\nThe above code will mark as forbidden all cells of the mp_grid indexed in the variable \"grid\" that fall within the area 0,0 to 100,200.\n",
      "description": "This function asks you to define a rectangle within the room, and then it marks all MP grid cells \"touch\" that rectangle as being forbidden, meaning that the path-finding functions cannot cross them. The image below illustrates how this works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_add_rectangle.htm"
    },
    "mp_grid_clear_all": {
      "name": "mp_grid_clear_all",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !instance_exists(obj_Player)\n    {\n        mp_grid_clear_all(grid);\n    }\n```\nThe above code will clear the mp_grid indexed in the variable \"grid\", marking all the cells as free, if an instance of the object \"obj_Player\" no longer exists in the room.\n",
      "description": "With this function you can clear an MP grid of all \"forbidden\" cells.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_clear_all.htm"
    },
    "mp_grid_clear_cell": {
      "name": "mp_grid_clear_cell",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "h",
          "description": "Horizontal position of the cell to clear"
        },
        {
          "parameter": "v",
          "description": "vertical position of the cell to clear"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nwith (obj_Box)\n    {\n        mp_grid_clear_cell(grid, floor(x / 32), floor(y /32));\n        instance_destroy();\n    }\n```\nThe above code will make all \"obj_Box\" destroy themselves and have them mark the cells they occupied in the mp_grid indexed in the variable \"grid\" as free. In this example, we find the appropriate cell by taking the x/y coordinate of the object and dividing them by the resolution of the grid (using `floor` to keep the values as integers).\n",
      "description": "This function can be used to clear a specific \"cell\" of an MP grid. Cells are *not* calculated as room coordinates, but rather as grid coordinates, where (0,0) is the top let corner of the grid. this means that to clear a cell at a specific position in the room, we must change the x and y coordinates into cell coordinate dividing them by the resolution of the MP grid. The code example below shows how this works.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_clear_cell.htm"
    },
    "mp_grid_clear_rectangle": {
      "name": "mp_grid_clear_rectangle",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the rectangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the rectangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the rectangle to check."
        },
        {
          "parameter": "y2",
          "description": "The x coordinate of the bottom side of the rectangle to check."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nmp_grid_clear_rectangle(grid, 0, 0, 100, 200);\n```\nThe above code will mark as free all cells of the mp_grid indexed in the variable \"grid\" that fall within the area 0,0 to 100,200.\n",
      "description": "With this function you can define an area *in room coordinates* which will then clear the corresponding cells in the specified MP grid. Even if a cell partially falls within the defined rectangular region it will be cleared.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_clear_rectangle.htm"
    },
    "mp_grid_create": {
      "name": "mp_grid_create",
      "parameters": [
        {
          "parameter": "left",
          "description": "Starting x coordinate of the mp_grid in the room"
        },
        {
          "parameter": "top",
          "description": "Starting y coordinate of the mp_grid in the room"
        },
        {
          "parameter": "hcells",
          "description": "Number of horizontal cells that the mp_grid will contain"
        },
        {
          "parameter": "vcells",
          "description": "Number of vertical cells that the mp_grid will contain"
        },
        {
          "parameter": "cellwidth",
          "description": "The width (in pixels) of each individual cell of the mp_grid"
        },
        {
          "parameter": "cellheight",
          "description": "The height (in pixels) of each individual cell of the mp_grid"
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nglobal.grid = mp_grid_create(0, 0, room_width / 32, room_height / 32, 32, 32);\n```\nThe above code creates a global variable \"grid\", then generates an mp_grid and assigns its index (id) to that variable for use in all further mp_grid function calls. The grid covers the room, with a cell resolution of 32x32 pixels. This means that, for example, in a room that is 640x480, the grid would contain 300 cells: 20 horizontal cells (640 / 32) multiplied by 15 vertical cells (480 /32) gives 300 cells\n",
      "description": "With this function you can create an mp_grid for the motion planning functions. It returns an index that should be stored in a variable for use in all the other MP grid function calls. The x and y coordinates indicate the position of the top-left corner of the grid, hcells and vcells indicate the number of horizontal and vertical cells to be created within the grid, and cell width and cell height indicate the size of the cells in pixels. You can create and maintain multiple grid structures at the same moment if you need them for different things, but be aware that each grid will require memeory, and the more cells they have the more memory they will require. Also note that the MP functions are quite processor heavy to use so the more often you call them and the higher the cell resolution then the more likely you are to have a drop in performance.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_create.htm"
    },
    "mp_grid_destroy": {
      "name": "mp_grid_destroy",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be destroyed"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif timer = 0\n    {\n        mp_grid_destroy(grid);\n        room_goto(rm_Menu);\n    }\n```\nThe above code will destroy the mp_grid indexed in the variable \"grid\" if the variable \"timer\" is equal to 0, and then goto another room.\n",
      "description": "You can use this function to destroy the indicated mp_grid (as defined by the function mp_grid_create()) and free up the memory allocated it. It is *essential* that you call this whenever the MP grid is finished with or you could potentially get a memory leak, meaning that your game will slow down over time and eventually crash.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_destroy.htm"
    },
    "mp_grid_draw": {
      "name": "mp_grid_draw",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be drawn"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_set_alpha(0.3); mp_grid_draw(grid);\n     draw_set_alpha(1);\n  \n```\nThe above code will draw the mp_grid indexed in the variable \"grid\" as a semi-transparent overlay (but only if the instance running the code has a depth lower than all the rest).\n",
      "description": "This function will draw the specified MP grid (as defined by mp_grid_create()), marking free cells as green and forbidden cells as red. This function is essential as a debug tool but it should\n    be noted that it is *very* slow and only works when used in the **draw** event of the instance, and that you can set the draw alpha to change the opacity of the grid, permitting you to draw it as an overlay and see what is actually in the\n    room at the same time.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_draw.htm"
    },
    "mp_grid_get_cell": {
      "name": "mp_grid_get_cell",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the grid to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the grid to check."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif mp_grid_get_cell(grid, mouse_x div 16, mouse_y div 16) == -1\n    {\n        image_blend = c_red;\n    }\n    else\n    {\n        image_blend = c_lime;\n    }\n```\nThe above code will check the mp_grid cell that corresponds to the mouse position and if it is occupied it sets the `image_blend` variable to red, and if it is not occupied it sets it to green.\n",
      "description": "With this function you can check any given cell of the mp_grid to see if it has been flagged as occupied or not, giving the index of the (previously created) mp_grid and the x an y coordinates of the cell to check. If it has been occupied or the position being checked is out of the grids bounds then the function will return -1 otherwise it will return 0.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_get_cell.htm"
    },
    "mp_grid_path": {
      "name": "mp_grid_path",
      "parameters": [
        {
          "parameter": "id",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "path",
          "description": "index of the path that is to be used by the function"
        },
        {
          "parameter": "x start",
          "description": "Starting x coordinate of the new path"
        },
        {
          "parameter": "y start",
          "description": "Starting y coordinate of the new path"
        },
        {
          "parameter": "xgoal",
          "description": "Finishing x coordinate of the new path"
        },
        {
          "parameter": "ygoal",
          "description": "Finishing y coordinate of the new path"
        },
        {
          "parameter": "allowdiag",
          "description": "Indicates whether diagonal moves are allowed instead of just horizontal or vertical"
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nglobal.grid = mp_grid_create(0, 0, room_width div 32, room_height div 32, 32, 32);\n    mp_grid_add_instances(global.grid, obj_wall, false);\n    with (obj_Enemy)\n    {\n        path = path_add();\n        if mp_grid_path(global.grid, path, x, y, obj_Player.x, obj_Player.y, 1)\n        {\n            path_start(path, 0, 3, 0);\n        }\n    }\n```\nThe above code creates a global variable \"global.grid\", then generates an mp_grid and assigns its index (id) to that variable for use in all further mp_grid function calls. It then adds all instances of \"obj_Wall\" into the grid before getting all instances of \"obj_Enemy\" to create a path and then use `mp_grid_path` to calculate a rout from their position to the position of \"obj_Player\". If a route exists then the object starts itself along the path.\n",
      "description": "With this function you can create a path that will navigate from a start point to a finish point using an `mp_grid` that you have previously defined, avoiding any obstacles that have already been added into the grid. The xstart and ystart arguments indicate the start of the path in room coordinates, while xgoal, ygoal arguments indicate the destination. You can also select either horizontal/vertical movement only, or allow full diagonal movements by specifying true in the allowdiag argument. The function returns either true (it succeeded in finding a path) or false (it failed) as well as setting the chosen path. In the following image, you can see how this all works together:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_path.htm"
    },
    "mp_grid_to_ds_grid": {
      "name": "mp_grid_to_ds_grid",
      "parameters": [
        {
          "parameter": "source",
          "description": "Index of the mp_grid that is to be used"
        },
        {
          "parameter": "destination",
          "description": "Index of the ds_grid that is to be used to copy the grid data to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmotion_grid = ds_grid_create(room_width / 32, room_height / 32); mp_grid_to_ds_grid(mp_grid, motion_grid);\n```\nThe above code will create a new DS grid and then copy the MP grid data contained in the variable \"mp_grid\" into the new DS grid.\n",
      "description": "With this function you can copy the given MP grid into a  [DS grid](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/DS_Grids.htm). The DS grid should be the same size as the MP grid, although it doesn't have to be (data will be lost if it is smaller, and\n    if it is larger all extra grid cells will be 0). The DS grid cells will contain the value -1 if the MP grid cell was flagged as occupied, or it will be 0 if not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_grid_to_ds_grid.htm"
    },
    "mp_linear_path": {
      "name": "mp_linear_path",
      "parameters": [
        {
          "parameter": "path",
          "description": "The index of the path to be used."
        },
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "checkall",
          "description": "Whether to check for collisions with all instances (true) or just solid ones (false)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif mp_linear_path(path, obj_Player.x, obj_Player.y, 2, 0)\n    {\n        path_start(path, 2, 0, 0);\n    }\n```\nThis gets the object to check and see if there is a linear path from its current position to the position of \"obj_Player\". If there is then it starts the path.\n",
      "description": "This function computes a straight line path from the current instance position to the point specified by the \"xgoal\" and \"ygoal\" values. It uses the indicated step size, the same as in the function `mp_linear_step()`. The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). If false is returned then a path is still generated, but it will only run up to the position where the path was blocked.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_path.htm"
    },
    "mp_linear_path_object": {
      "name": "mp_linear_path_object",
      "parameters": [
        {
          "parameter": "path",
          "description": "The index of the path to be used"
        },
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "obj",
          "description": "The object that is to block the path. Can be an object index, an instance id or the special keyword ,**all**"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif mp_linear_path_object(path, mouse_x, mouse_y, 4, obj_Wall)\n    {\n        path_start(path, 4, 0, 0);\n    }\n```\nThe above code checks for a collision with \"obj_Wall\" along the path between the object running the code and the x/y position of the mouse. If there is no collision and the complete path is generated then it will start the object along the path generated.\n",
      "description": "This function computes a straight line path from the current instance position to the point specified by the \"xgoal\" and \"ygoal\" values. It uses the indicated step size, the same as in the function `mp_linear_step()`. The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). A full path is only found there was no collision with the specified object or instance and if false is returned then a path is still generated, but it will only run up to the position where the path was blocked.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_path_object.htm"
    },
    "mp_linear_step": {
      "name": "mp_linear_step",
      "parameters": [
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "checkall",
          "description": "Whether to check all instances (true) or just solid ones (false)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif mp_linear_step(mouse_x, mouse_y, 5, 0)\n    {\n        instance_create_layer(x, y, \"Effects\", obj_Explosion);\n        instance_destroy();\n    }\n```\nThe above code will make the object move towards the mouse at a speed of 5 pixels per step. Once it reaches the mouse position it will create an object \"obj_Explosion\" and destroy itself.\n",
      "description": "With this function you tell an instance to take a \"step\" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like `move_towards_point()`. The stepsize is also the distance \"ahead\" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with *any* instance or only those that are flagged as solid. The function will return whether it has reached the goal position (true) or if it has failed (false).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_step.htm"
    },
    "mp_linear_step_object": {
      "name": "mp_linear_step_object",
      "parameters": [
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "obj",
          "description": "The object that is to block the path. Can be an object index, an instance id or the special keyword, **all**"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif mp_linear_step_object(mouse_x, mouse_y, 5, obj_Wall)\n    {\n        instance_create_layer(x, y, \"Effects\", obj_Explosion);\n        instance_destroy();\n    }\n```\nThe above code will make the object move towards the mouse at a speed of 5 pixels per step, only checking for collisions with the object \"obj_Wall\". Once it reaches the mouse position it will create an object \"obj_Explosion\" and destroy itself.\n",
      "description": "With this function you tell an instance to take a \"step\" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like `move_towards_point()`. The stepsize is also the distance \"ahead\" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with an object or instance of your choice.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_linear_step_object.htm"
    },
    "mp_potential_path": {
      "name": "mp_potential_path",
      "parameters": [
        {
          "parameter": "path",
          "description": "index of the path that is to be used by the function"
        },
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "factor",
          "description": "This number is used to prevent an infinite loop. It should be larger than 1. See the function description for more information."
        },
        {
          "parameter": "checkall",
          "description": "Whether to check all instances (true) or just solid ones (false)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\npath = path_add(); mp_potential_path(path, obj_Player.x, obj_Player.y, 3, 4, 0); path_start(path, 3, 0, 0);\n```\nThe above code creates a new path resource and stores its index in the variable \"path\". It then generates a path using `mp_potential_path` between the object with this code and the object \"obj_Player\", checking for collisions\n    with all instances in the room. Finally it starts the object along that path, even if the function has failed to return a complete route to the \"obj_Player\".\n",
      "description": "This function computes a path for the instance from its current position *and orientation* to the position specified by the xgoal,ygoal arguments. It uses the indicated step size while trying to avoid collision with either all instances or only\n    those flagged as solid. Like in the function `mp_potential_step()` it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function `mp_potential_settings()`.\n    The indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_path.htm"
    },
    "mp_potential_path_object": {
      "name": "mp_potential_path_object",
      "parameters": [
        {
          "parameter": "path",
          "description": "index of the path that is to be used by the function"
        },
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "factor",
          "description": "This number is used to prevent an infinite loop. It should be larger than 1. See the function description for more information."
        },
        {
          "parameter": "obj",
          "description": "The object that is to block the path. Can be an object index, an instance id or the special keyword ,**all**"
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\npath = path_add(); mp_potential_path_object(path, obj_Player.x, obj_Player.y, 3, 4, obj_Wall); path_start(path, 3, 0, 0);\n```\nThe above code creates a new path resource and stores its index in the variable \"path\". It then generates a path using `mp_potential_path` between the object with this code and the object \"obj_Player\", checking for collisions\n    with the object \"obj_Wall\". Finally it starts the object along that path, even if the function has failed to return a complete route to the \"obj_Player\".\n",
      "description": "This function computes a path for the instance from its current position *and orientation* to the position specified by the xgoal, ygoal arguments. It uses the indicated step size while trying to avoid collision with instances of the object specified\n    by the \"obj\" argument. Like in the function `mp_potential_step()` it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function `mp_potential_settings()`.\n    The indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_path_object.htm"
    },
    "mp_potential_settings": {
      "name": "mp_potential_settings",
      "parameters": [
        {
          "parameter": "maxrot",
          "description": "The number of degrees either side of the current direction that the instance can rotate in a step"
        },
        {
          "parameter": "rotstep",
          "description": "The number of degrees either side of the current direction that the instance can check for a collision"
        },
        {
          "parameter": "ahead",
          "description": "The number of steps ahead that the instance can check for a collision. Larger values are slower than lower ones."
        },
        {
          "parameter": "onspot",
          "description": "Use this to allow the instance to rotate on the spot when no path is found (true) or not (false)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nmp_potential_settings(45, 5, 5, 0);\n```\nThe above code will set the `mp_potential_` functions to use the following settings: the instance can look ahead five steps, change direction 45 degrees each step, look 5 degrees either side of the current direction if there is an obstacle and\n    not rotate on the spot of there is a collision.\n",
      "description": "The `mp_potential_` functions do their work using a number of parameters that can be changed using this function. Globally the method works as follows: it first tries to move straight towards the goal, looking a number of steps ahead which can\n    be set with the parameter \"ahead\" (default value is 3). Reducing this value means that the instance will start changing direction later as it doesn't \"see\" as far ahead, and increasing it means it will start changing direction\n    earlier. If this check leads to a collision then it starts looking at directions more to the left and to the right of the ideal, straight-line direction. It does this in steps of size \"rotstep\" (default value is 10), and reducing this gives\n    the instance more movement possibilities but will be slower as it needs more processing power.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_settings.htm"
    },
    "mp_potential_step": {
      "name": "mp_potential_step",
      "parameters": [
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "checkall",
          "description": "Whether to check all instances (true) or just solid ones (false)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif instance_exists(obj_Enemy)\n    {\n        var inst;\n        inst = instance_nearest(x, y, obj_Enemy);\n        mp_potential_step(inst.x, inst.y, 5, false);\n    }\n```\nThe above code first checks to see if there are any instances of \"obj_Enemy\" in the room. If there are it then finds the nearest one and stores its id in a variable. This variable is then used to tell `mp_potential_step` to move the instance with the code towards the x/y position of the object that was found at a speed of 5 pixels per step while avoiding only instances flagged as solid.\n",
      "description": "This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into a solid instance (or any instance when checkall is true) it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_step.htm"
    },
    "mp_potential_step_object": {
      "name": "mp_potential_step_object",
      "parameters": [
        {
          "parameter": "xgoal",
          "description": "The target x position."
        },
        {
          "parameter": "ygoal",
          "description": "The target y position."
        },
        {
          "parameter": "stepsize",
          "description": "The speed the instance moves in pixels per step."
        },
        {
          "parameter": "obj",
          "description": "The object that is to block the path of the instance running the function. Can be an object index, an instance id or the special keyword ,**all**."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif instance_exists(obj_Enemy)\n    {\n        var inst;\n        inst = instance_nearest(x, y, obj_Enemy);\n        mp_potential_step_object(inst.x, inst.y, 5, obj_Wall);\n    }\n```\nThe above code first checks to see if there are any instances of \"obj_Enemy\" in the room. If there are it then finds the nearest one and stores its id in a variable. This variable is then used to tell `mp_potential_step_object` to move the instance with the code towards the x/y position of the object that was found at a speed of 5 pixels per step while avoiding only instances of the object \"obj_Wall\".\n",
      "description": "This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into an instance of the object specified by the \"obj\" argument it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/mp_potential_step_object.htm"
    },
    "network_connect": {
      "name": "network_connect",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "url",
          "description": "The URL or IP to connect to (a string)."
        },
        {
          "parameter": "port",
          "description": "The port to connect to."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nclient = network_create_socket(network_socket_tcp); network_connect(client, \"192.134.0.1\", 6510);\n```\nThe above code will create a new TCP socket then attempt to connect through that to the given IP address on port 6510.\n",
      "description": "With this function you can send a request to connect to a server. The function takes the *socket id* to connect through (see `network_create_socket()`) and requires you to give the IP address to connect\n    to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only GameMaker Studio 2 games connect to each other, however if you need\n    to connect to a server that is not a GameMaker Studio 2 game, you can use `network_connect_raw()`. Note that by default the function is synchronous, meaning that your game may appear to \"hang\"\n    as the connection is made. You can set a timeout value for connection, or alternatively make the creation asynchronous, using the function  [network_set_config()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm), or alternatively use the function\n     [network_connect_async()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_connect_async.htm) instead.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_connect.htm"
    },
    "network_connect_async": {
      "name": "network_connect_async",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "url",
          "description": "The URL or IP to connect to (a string)."
        },
        {
          "parameter": "port",
          "description": "The port to connect to."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nclient = network_create_socket(network_socket_tcp); network_connect_async(client, \"192.134.0.1\", 6510);\n```\nThe above code will create a new TCP socket then attempt make an asynchronous connection through that to the given IP address on port 6510.\n",
      "description": "With this function you can send a request to connect to a server. The function takes the *socket id* to connect through (see `network_create_socket()`) and requires you to give the IP address to connect\n    to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only GameMaker Studio 2 games connect to each other, however if you need\n    to connect to a server that is not a GameMaker Studio 2 game, you can use `network_connect_async_raw()`. Note that this function is asynchronous, generating an  [Asynchronous Networking](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Networking.htm)    event of the type network_type_non_blocking_connect.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_connect_async.htm"
    },
    "network_connect_raw": {
      "name": "network_connect_raw",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "url",
          "description": "The URL or IP to connect to (a string)."
        },
        {
          "parameter": "port",
          "description": "The port to connect to."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nclient = network_create_socket(network_socket_tcp); network_connect_raw(client, \"www.macsweeneygames.com\", 6510);\n```\nThe above code will create a new TCP socket then attempt to create a \"raw\" connection through that to the given URL on port 6510.\n",
      "description": "With this function you can send a request to connect to a server. The function takes the *socket id* to connect through (see `network_create_socket()`) and requires you to give the IP address to connect\n    to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and `network_connect()` is that this function\n    can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that by default the function is synchronous, meaning that your game may appear to \"hang\" as the\n    connection is made. You can set a timeout value for connection, or alternatively make the creation asynchronous, using the function `network_set_config()`, or alternatively use the function network_connect_async_raw()    instead.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_connect_raw.htm"
    },
    "network_connect_raw_async": {
      "name": "network_connect_raw_async",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "url",
          "description": "The URL or IP to connect to (a string)."
        },
        {
          "parameter": "port",
          "description": "The port to connect to."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nclient = network_create_socket(network_socket_tcp); network_connect_raw_async(client, \"www.macsweeneygames.com\", 6510);\n```\nThe above code will create a new TCP socket then attempt to create a \"raw\" asynchronous connection through that to the given URL on port 6510.\n",
      "description": "With this function you can send a request to connect to a server. The function takes the *socket id* to connect through (see `network_create_socket()`) and requires you to give the IP address to connect\n    to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and `network_connect_async()`is that this\n    function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an  [Asynchronous Networking](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Networking.htm)    event of the type network_type_non_blocking_connect.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_connect_raw_async.htm"
    },
    "network_create_server": {
      "name": "network_create_server",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of server to create (see the constants listed above)."
        },
        {
          "parameter": "port",
          "description": "The port that the server will use."
        },
        {
          "parameter": "max_client",
          "description": "The maximum number of clients that can connect at once."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar port = 6510;\n    server = network_create_server(network_socket_tcp, port, 32);\n    while (server < 0 && port < 65535)\n    {\n        port++\n        server = network_create_server(network_socket_tcp, port, 32);\n    }\n```\nThe above code will try and create a server using TCP through port 6510. If that port is unavailable, it will then loop through the ports to find one that is.\n",
      "description": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique *id* which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_server.htm"
    },
    "network_create_server_raw": {
      "name": "network_create_server_raw",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of server to create (see the constants listed below)."
        },
        {
          "parameter": "port",
          "description": "The port that the server will use."
        },
        {
          "parameter": "max_client",
          "description": "The maximum number of clients that can connect at once."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar port = 6510;\n    server = network_create_server_raw(network_socket_tcp, port, 32);\n    while (server < 0 && port < 65535)\n    {\n        port++\n        server = network_create_server(network_socket_tcp, port, 32);\n    }\n```\nThe above code will try and create a server using TCP through port 6510. If that port is unavailable, it will then loop through the ports to find one that is.\n",
      "description": "This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique *id* which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_server_raw.htm"
    },
    "network_create_socket": {
      "name": "network_create_socket",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of socket connection to create (see the constants listed above)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif os_browser == browser_not_a_browser\n    {\n        client = network_create_socket(network_socket_tcp);\n        network_connect( client, \"192.134.0.1\", 6510 );\n    }\n    else\n    {\n        client = network_create_socket(network_socket_ws);\n        network_connect( client, \"192.134.0.1\", 6520 );\n    }\n```\nThe above code will check whether the game is running in a browser or not and create a new TCP or Web socket before attempting to connect through that to the given IP address on the given port.\n",
      "description": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique *id* for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_socket.htm"
    },
    "network_create_socket_ext": {
      "name": "network_create_socket_ext",
      "parameters": [
        {
          "parameter": "protocol",
          "description": "The network protocol to use"
        },
        {
          "parameter": "port",
          "description": "The port to use"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nclient = network_create_socket_ext(network_socket_udp, 6510);\n```\nThe above code will create a new UDP socket on port 6510.\n",
      "description": "This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and give a port to use, and the function will return a unique *id* which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_socket_ext.htm"
    },
    "network_destroy": {
      "name": "network_destroy",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to remove."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !os_is_network_connected()\n    {\n        network_destroy(sock);\n    }\n```\nThe above code will check to see if there is a data connection and if none is found, destroy the socket with the id \"sock\".\n",
      "description": "With this function you can remove a network socket connection from your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_destroy.htm"
    },
    "network_resolve": {
      "name": "network_resolve",
      "parameters": [
        {
          "parameter": "url",
          "description": "The URL to get the IP of (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngame_ip = network_resolve(\"www.macsweeneygames.com\");\n```\nThe above code will return the IP address of the given URL and store it in the variable \"game_ip\".\n",
      "description": "This function will return the IP address of the given URL.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_resolve.htm"
    },
    "network_send_broadcast": {
      "name": "network_send_broadcast",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "port",
          "description": "The port that the server will use."
        },
        {
          "parameter": "buffer",
          "description": "The id of the buffer to get the data from."
        },
        {
          "parameter": "size",
          "description": "The size (in bytes) of the data."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nbuffer_seek(broadcast_buffer, buffer_seek_start, 0); buffer_write(broadcast_buffer, buffer_string, global.ServerName); network_send_broadcast(server, 6511, broadcast_buffer, buffer_tell(broadcast_buffer));\n```\nThe above code writes the name string of the current server (stored in \"global.ServerName\"), then writes it to a binary buffer with the id \"broadcast_buffer\". This data is then broadcast locally to a range of IPs (the device IP is\n    currently implied as the broadcast base range) to port 6511.\n",
      "description": "With this function you can broadcast the data from a buffer locally to a range of IP addresses (for more information on buffers see  [Reference - Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)). The range is limited to that of the device running the server,\n    such that if the device has an IP of 92.168.11.130, then the data will be broadcast over the range 92.168.11.*. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_send_broadcast.htm"
    },
    "network_send_packet": {
      "name": "network_send_packet",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "buffer",
          "description": "The id of the buffer to get the data from."
        },
        {
          "parameter": "size",
          "description": "The size (in bytes) of the data."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuff = buffer_load(\"player_save.dat\"); network_send_packet(sock, buff, buffer_get_size(buff));\n```\nThe above information loads a previously saved buffer data into memory and returns the buffer id to be stored in the variable \"buff\". This complete buffer is then send as a packet over the network using the socket identified by the variable\n    \"sock\".\n",
      "description": "With this function you can send a data \"packet\" through the network. The function takes the *socket id* to connect through and then you must supply the *buffer id* which contains the data to be sent (for more information on buffers\n    see  [Reference - Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)) and finally the size (in bytes) of the data packet. Packets sent with this function are formatted such that the GameMaker Studio 2 game receiving the data can \"split\" the\n    packets correctly, and the function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the\n    GameMaker header information, which is an additional 12 bytes.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_send_packet.htm"
    },
    "network_send_raw": {
      "name": "network_send_raw",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "buffer",
          "description": "The id of the buffer to get the data from."
        },
        {
          "parameter": "size",
          "description": "The size (in bytes) of the data."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nbuff = buffer_load(\"player_save.dat\"); network_send_raw(sock, buff, buffer_get_size(buff));\n```\nThe above information loads a previously saved buffer data into memory and returns the buffer id to be stored in the variable \"buff\". This complete buffer is then send as a raw data packet over the network using the socket identified by the\n    variable \"sock\".\n",
      "description": "With this function you can send a \"raw\" data packet through the network. The function takes the *socket id* to connect through and then you must supply the *buffer id* which contains the data to be sent (for more information on buffers\n    see  [Reference - Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)) and finally the size (in bytes) of the data packet. The data sent is not formatted by GameMaker Studio 2 in any way and the receiving devices will get the data as a stream which\n    means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_send_raw.htm"
    },
    "network_send_udp": {
      "name": "network_send_udp",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "url",
          "description": "The url or IP to connect to (a string)."
        },
        {
          "parameter": "port",
          "description": "The port to connect to."
        },
        {
          "parameter": "buffer",
          "description": "The id of the buffer to get the data from."
        },
        {
          "parameter": "size",
          "description": "The size (in bytes) of the data."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nnetwork_send_udp(sock, \"www.macsweeneygames.com\", 6510, buff, buffer_tell(buff));\n```\nThe above code will send a UDP packet to the server defined by the URL on the port 6510. The data is taken from the buffer indexed in the variable \"buff\".\n",
      "description": "With this function you can send data over the network using UDP to a server. The function takes the *socket id* to connect through, the URL to connect to and the port to use. You must then supply the *buffer id* which contains the data to\n    be sent (for more information on buffers see  [Reference - Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)) and finally the size (in bytes) of the data. UDP is \"connectionless\" in that you don't actually do a connect, you just send a packet\n    directly to an IP, and the server gets incoming data from an IP address and has to deal with it \"as is\". The function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the\n    final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_send_udp.htm"
    },
    "network_send_udp_raw": {
      "name": "network_send_udp_raw",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "url",
          "description": "The url or IP to connect to (a string)."
        },
        {
          "parameter": "port",
          "description": "The port to connect to."
        },
        {
          "parameter": "buffer",
          "description": "The id of the buffer to get the data from."
        },
        {
          "parameter": "size",
          "description": "The size (in bytes) of the data."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nnetwork_send_udp_raw(sock, \"www.macsweeneygames.com\", 6510, buff, buffer_tell(buff));\n```\nThe above code will send a raw UDP packet to the server defined by the URL on the port 6510. The data is taken from the buffer indexed in the variable \"buff\".\n",
      "description": "With this function you can send data over the network using UDP to a server. The function takes the *socket id* to connect through, the URL to connect to and the port to use. You must then supply the *buffer id* which contains the data to\n    be sent (for more information on buffers see  [Reference - Buffers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/Buffers.htm)) and finally the size (in bytes) of the data. UDP is \"connectionless\" in that you don't actually do a connect, you just send a packet\n    directly to an IP, and the server gets incoming data from an IP address and has to deal with it \"as is\". The data sent is not formatted by GameMaker Studio 2 in any way and the receiving devices will get the data as a stream which\n    means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_send_udp_raw.htm"
    },
    "network_set_config": {
      "name": "network_set_config",
      "parameters": [
        {
          "parameter": "config_value",
          "description": "The config constant to set (refer to the table at the top of this page)."
        },
        {
          "parameter": "setting",
          "description": "The setting of the config value."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nnetwork_set_config(network_config_connect_timeout, 1000);\n    network_set_config(network_config_use_non_blocking_socket, 1);\n```\nThe above code will set the timeout for the network connection to 1000ms and tell GameMaker Studio 2 not to block on connect.\n",
      "description": "With this function you can set different network configurations.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm"
    },
    "network_set_timeout": {
      "name": "network_set_timeout",
      "parameters": [
        {
          "parameter": "socket",
          "description": "The id of the socket to use."
        },
        {
          "parameter": "read_timeout",
          "description": "The milliseconds in which a transfer from a server will timeout."
        },
        {
          "parameter": "write_timeout",
          "description": "The milliseconds in which a transfer to a server will timeout."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nnetwork_set_timeout(sock, 3000, 3000);\n```\nThe above code will set the timeout for reading and writing data through the socket indexed in the variable \"sock\" to 3 seconds.\n",
      "description": "With this function you can set the timeout for reading and writing data to/from a server through the given socket. Note that the timeout does not generate any type of event, so you will need to deal with timeouts yourself using alarms (for example).\n    Note that this value only affects the sending and receiving of data, and should you wish to change the connection timeout value then you should be using the function `network_set_config()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_timeout.htm"
    },
    "object_exists": {
      "name": "object_exists",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar object_id = buffer_read(net_buffer, buffer_u16);\n    var pos_x = buffer_read(net_buffer, buffer_u16);\n    var pos_y = buffer_read(net_buffer, buffer_u16);\n    \n    if (object_exists(object_id))\n    {\n        instance_create_layer(pos_x, pos_y, \"Instances\", object_id);\n    }\n  \n```\nThe above code reads data from a buffer that was received via networking. Since it contains an object ID (used for spawning instances), we first need to ensure that the value is not invalid and that the object actually exists. For that we call object_exists() in a condition, and if that is true, we create an instance of that object at the received position.\n",
      "description": "This function returns whether the specified value is an object asset (true) or not (false). Note that this checks to see if an object is present in the Asset Browser, and not actually in the game room. For that you should use the function `instance_exists()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_exists.htm"
    },
    "object_get_mask": {
      "name": "object_get_mask",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (mask_index != object_get_mask(object_index))\n    {\n        mask_index = object_get_mask(object_index);\n    }\n```\nThe above example will check the mask index of the instance against the mask of the object_index of the instance. If they are not the same, then it will assign the same mask as the one the object index has to the instance.\n",
      "description": "This function will tell you whether the object you are checking has a mask index or not, and if it does then it will return the index of that mask, or -1 if it does not. Please note that this is not an instance function! You can have an object with no mask while an instance of that same object can have one and vice-versa, or they can even have different masks. You can set an individual instances mask index using the `mask_index` instance variable.",
      "returns": "real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_mask.htm"
    },
    "object_get_name": {
      "name": "object_get_name",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr = object_get_name(object_index);\n```\nThe above code will get the name of the object index for the instance running the code and store the return value in the variable \"str\".\n",
      "description": "This function will return the name *as a string* of the specified object. This name is the one that has been specified for the object in the Asset Browser of the main GameMaker Studio 2 window. Please note that this is *only* a string\n    and cannot be used to reference the object directly - for that you would need the *object index*. You can, however, use this string to get the *object index* using the returned string along with the function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_name.htm"
    },
    "object_get_parent": {
      "name": "object_get_parent",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npar = object_get_parent(object_index);\n```\nThe above code will get the parent of the object index for the instance running the code and store the return value in the variable \"par\".\n",
      "description": "This function will get you the object_index of any parent that has been assigned to the specified object, or else return -100 to show that the object has no parent assigned to it, or -1 if the object being checked does not exist. For more information\n    on parents see the section on the  [Object Editor](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_parent.htm"
    },
    "object_get_persistent": {
      "name": "object_get_persistent",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (!persistent) && (object_get_persistent(object_index))\n    {\n        persistent = true;\n    }\n```\nThe above code will check the instance running it to see if it is persistent or not as well as check the object index of the instance to see if it is flagged as persistent or not. If the instance is *not* persistent yet the object index is flagged as persistent, it will set \"persistent\" to true for that instance.\n",
      "description": "This function will tell you whether the object you are checking has been flagged as \"persistent\" or not. A persistent object is one that will cause any instances of it to be carried through from room to room unless they are explicitly destroyed. Please note that this is not an instance function! So, you can have a persistent object and a non-persistent instance of the same object and vice-versa. You can set an individual instances persistent flag using the `persistent` instance variable.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_persistent.htm"
    },
    "object_get_physics": {
      "name": "object_get_physics",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif object_get_physics(object_index)\n    {\n        phy_active = true;\n    }\n```\nThe above code will check the instance running it to see if the object it is created from is physics enabled, and if it is it activates the physics simulation for the instance.\n",
      "description": "This function will tell you whether the object you are checking has been flagged as \"physics enabled\"  - in which case it'll return `true`, - or not - in which case it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_physics.htm"
    },
    "object_get_solid": {
      "name": "object_get_solid",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (!solid) && (object_get_solid(object_index))\n    {\n        solid = true;\n    }\n```\nThe above code will check the instance running it to see if it is solid or not as well as check the object index of the instance to see if it is flagged as solid or not. If the instance is *not* solid yet the object index is flagged as solid, it will set \"solid\" to true for that instance.\n",
      "description": "This function will tell you whether the object you are checking has been flagged as \"solid\" or not. A solid object generates a special collision event when using the traditional collision system (ie: the physics world is off). Please note that this is not an instance function! So, you can have a solid object and a normal instance of the same object and vice-versa. You can set an individual instances solid flag using the `solid` instance variable.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_solid.htm"
    },
    "object_get_sprite": {
      "name": "object_get_sprite",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _spr = object_get_sprite(object_index);\n    if (sprite_index != _spr)\n    {\n        sprite_index = _spr;\n    }\n```\nThe above example will check the sprite_index of the instance against the sprite of the object_index of the instance. If they are not the same, then it will assign the same sprite as that of the object index to the instance.\n",
      "description": "This function will tell you whether the object you are checking has a sprite or not, and if it does then it will return the index of that sprite, or -1 if it does not. Please note that this is not an instance function! You can have an object with no sprite while an instance of that same object can have one and vice-versa, or they can even have different sprites. You can set an individual instances sprite using the `sprite_index` instance variable.",
      "returns": "Real (sprite asset ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_sprite.htm"
    },
    "object_get_visible": {
      "name": "object_get_visible",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The index of the object to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (!visible) && (object_get_visible(object_index))\n    {\n        visible = true;\n    }\n```\nThe above code will check the instance running it to see if it is visible or not as well as check the object index of the instance to see if it is flagged as visible or not. If the instance is *not* visible yet the object index is flagged as on, it will set \"visible\" to true for that instance.\n",
      "description": "This function will tell you whether the object you are checking has been flagged as \"visible\" (runs its draw event) or not (does not run its draw event). Please note that this is not an instance function! So, you can have a visible object and an invisible instance of the same object and vice-versa. You can set an individual instances visibility using the `visible` instance variable.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_get_visible.htm"
    },
    "object_is_ancestor": {
      "name": "object_is_ancestor",
      "parameters": [
        {
          "parameter": "obj",
          "description": "The object that is being checked as the child."
        },
        {
          "parameter": "par",
          "description": "The object that is being checked as the ancestor (parent)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif object_is_ancestor(object_index, obj_Enemy)\n    {\n        instance_destroy();\n    }\n```\nThe above code checks to see if the instance running the code is a child of the object \"obj_Enemy\", and if so it is destroyed.\n",
      "description": "This function can be used to check an object and see if it is an ancestor or not of another object. So, both arguments need to be object indices and *not* the instance ids, and the first one is always the object that you want to find out if it is a child of the second argument, which is always the object that want to check as the ancestor (parent).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_is_ancestor.htm"
    },
    "object_set_mask": {
      "name": "object_set_mask",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the object to change."
        },
        {
          "parameter": "spr",
          "description": "The new sprite to use as the object's mask."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (global.level == 10)\n    {\n        object_set_mask(obj_Platform, spr_mask_10);\n    }\n```\nThe above code checks the value of global variable and then changes the mask index of the object \"obj_Platform\" if it is equal to ten.\n",
      "description": "With this function you can set the mask_index of a specific object (for more information on masks see  [The Object Editor](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm)). This means that all instances of this object that are created *after the mask has been changed* will be created with this new mask, while instances that are already in the room may not be affected. You can set this to -1 to remove a mask sprite and so default to the mask defined for the sprite of the object (or no masks if no sprite has been chosen).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_mask.htm"
    },
    "object_set_persistent": {
      "name": "object_set_persistent",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the object to change."
        },
        {
          "parameter": "pers",
          "description": "Whether the object should be flagged as persistent (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (room == rm_final)\n    {\n        object_set_persistent(obj_Player, false);\n    }\n    instance_create_layer(32, 32, \"Instances\", obj_Player);\n```\nThe above code checks to see in which room the instance is currently in and if it is in the specified \"rm_final\" then it sets the persistence of the object \"obj_Player\" to false and then creates the instance.\n",
      "description": "With this function you can set the persistence of a specific object. A persistent object is \"carried over\" from room to room and maintains its properties at all times (for more information on persistence see the section on the  [Object Editor](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm)). Setting the persistence of the object means that all instances of this object that are created *after the persistence has been changed* will be created persistent, while instances that are already in the room may not be affected.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_persistent.htm"
    },
    "object_set_solid": {
      "name": "object_set_solid",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the object to change."
        },
        {
          "parameter": "solid",
          "description": "The new solidity of the object (true=solid, false=not solid)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !object_get_solid(obj_Block)\n    {\n        object_set_solid(obj_Block, true);\n    }\n```\nThe above code checks the solid flag of the object \"obj_Block\" and if it is false then it is changed to be flagged as true.\n",
      "description": "With this function you can flag a specific object as being solid or not (for more information on the \"solid\" flag see the section on the  [Object Editor](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm)). This means that all instances of this object that are created *after solid has been changed* will be created with this new state, while instances that are already in the room may not be affected.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_solid.htm"
    },
    "object_set_sprite": {
      "name": "object_set_sprite",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the object to change."
        },
        {
          "parameter": "spr",
          "description": "The sprite to assign to the object."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nswitch (room)\n    {\n        case rm_start: object_set_sprite(obj_Player, spr_uniform); break;\n        case rm_middle: object_set_sprite(obj_Player, spr_swimsuit); break;\n        case rm_end: object_set_sprite(obj_Player, spr_casual); break;\n    }\n    instance_create_layer(32, 32, \"Instances\", obj_Player);\n```\nThe above code will set the object \"obj_Player\" sprite index to different values depending on the room that the instance running the code is currently in. It then creates an instance of \"obj_Player\".\n",
      "description": "With this function you can set the sprite index of a specific object. This means that all instances of this object that are created *after the sprite_index has been changed* will be created with this new sprite_index, while instances that are already in the room may not be affected.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_sprite.htm"
    },
    "object_set_visible": {
      "name": "object_set_visible",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the object to change."
        },
        {
          "parameter": "vis",
          "description": "The new visibility of the object (true=visible, false=invisible)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !object_get_visible(obj_Block)\n    {\n        object_set_visible(obj_Block, true);\n    }\n```\nThe above code checks the visible flag of the object \"obj_Block\" and if it is false then it is changed to be flagged as true.\n",
      "description": "With this function you can flag a specific object as being visible or not (for more information on the \"visible\" flag see the section on the  [Object Editor](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm)). This means that all instances of this object that are created *after visible has been changed* will be created with this new state, while instances that are already in the room may not be affected.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_set_visible.htm"
    },
    "ord": {
      "name": "ord",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string with which to find the Unicode code."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check(ord(\"W\"))\n    {\n        y -= 4;\n    }\n```\nThis will move the calling instance four pixels upwards if the key W is held down.\n",
      "description": "This function takes a single character input string and returns the Unicode (UTF8) value for that character. Note that when used with the `keyboard_check*` functions, the input string can only be one character in length and can only be a number from 0 to 9 or a *capitalised* Roman character from A to Z.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/ord.htm"
    },
    "os_check_permission": {
      "name": "os_check_permission",
      "parameters": [
        {
          "parameter": "permission",
          "description": "The permission to request (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (os_type == os_android)\n    {\n        if (os_check_permission(\"android.permission.INTERNET\") == os_permission_denied)\n        {\n            os_request_permission(\"android.permission.INTERNET\");\n        }\n    }\n```\nThe above code checks the OS type and if is Android, it performs a check on the permissions and if the \"INTERNET\" permission has not yet been granted, it requests it.\n",
      "description": "With this function you can request a specific permission. You supply the permission to request as a string using the format \"`android.permission.<permission>`\", so to request the `RECORD_AUDIO` permission (for example) you would call",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_request_permission.htm"
    },
    "os_get_config": {
      "name": "os_get_config",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif os_get_config() = \"Free_Version\"\n    {\n        global.Ads = true;\n    }\n    else global.Ads = false;\n```\nThe above code will check to see which configuration is being used and if it is the one called \"Free_Version\", ads will be enabled in the game.\n",
      "description": "This function returns the name (as a string) of the currently selected configuration for your game. For more information on configurations please see the section  [Configurations](https://manual.yoyogames.com/Settings/Configurations.htm).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_config.htm"
    },
    "os_get_info": {
      "name": "os_get_info",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (os_type == os_android)\n    {\n        var _info = os_get_info();\n        \n        if (_info[? \"android_tv\"])\n        {\n            global.android_tv = true;\n        }\n    }\n```\nThe above code checks if the current OS is Android, gets the OS info and reads the returned map to check if the game is running on an Android TV; in that case it sets the custom variable global.android_tv to true.\n",
      "description": "This function returns a `DS Map` with detailed information about the OS that the game is running on. The exact information returned will depend on the OS and the device, so it is recommended that you test this function on all platforms that you wish to target and output the returned values using a function like  [show_debug_message()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/show_debug_message.htm). Note that the DS map is not automatically cleared from memory and you should use the `ds_map_destroy()` function when you no longer need it.",
      "returns": "Real (ds_map index)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_info.htm"
    },
    "os_get_language": {
      "name": "os_get_language",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nswitch (os_get_language())\n    {\n        case \"es\": ini_open(\"spanish.ini\"); break;\n        case \"fr\": ini_open(\"french.ini\"); break;\n        case \"it\": ini_open(\"italian.ini\"); break;\n        default: ini_open(\"english.ini\"); break;\n    }\n```\nThe above code checks the OS language and opens a different `*.ini` file depending on the returned value.\n",
      "description": "This function returns a string with the two letter Language Code for the OS that is running the game, as set by the  [ISO639](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/http://en.wikipedia.org/wiki/ISO_639) standard. If the information is not available, it will hold simply an empty string \"\", or \"en\" for \"English\" language. Note that some languages also have a relevant Regional Code too, so to distinguish between different regions of the same country use the function `os_get_region()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_language.htm"
    },
    "os_get_region": {
      "name": "os_get_region",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nswitch (os_get_language())\n    {\n        case \"zh\":\n            var region = os_get_region();\n            if (region == \"HK\" || region == \"MO\" || region == \"TW\")\n            {\n                ini_open(\"chinese_traditional.ini\");\n            }\n            else\n            {\n                ini_open(\"chinese_simplified.ini\");\n            }\n        break;\n    \n        case \"fr\":\n            ini_open(\"french.ini\");\n        break;\n    \n        case \"it\":\n            ini_open(\"italian.ini\");\n        break;\n    \n        default:\n            ini_open(\"english.ini\");\n        break;\n    }\n  \n```\nThe above code checks the OS language and if it is Chinese, it then checks the OS region, opening a different `*.ini` file depending on the returned values.\n",
      "description": "This function returns a string with the two or three letter Regional Code for the OS that is running the game, as set by the  [ISO3166-1](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/http://en.wikipedia.org/wiki/ISO_3166-1) standard. If the information is not available, it will hold simply an empty string \"\".",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_get_region.htm"
    },
    "os_is_network_connected": {
      "name": "os_is_network_connected",
      "parameters": [
        {
          "parameter": "attempt_connection",
          "description": "OPTIONAL! For Nintendo Switch Target **only**. Set to true to attempt an OS level connection when called."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif os_is_network_connected()\n    {\n        global.connected = true;\n    }\n```\nThe above code checks to see if the device has a connection to the internet and if so it sets a global variable.\n",
      "description": "With this function you can check and see if your device currently has an internet connection and it will return `true` if it does, or `false` if it does not, and depending on the OS, it may attempt to make a connection before returning a value.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_is_network_connected.htm"
    },
    "os_is_paused": {
      "name": "os_is_paused",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif os_is_paused()\n    {\n        if !instance_exists(obj_PauseMenu)\n        {\n            instance_create_layer(0, 0, \"Controllers\", obj_PauseMenu);\n        }\n    }\n```\nThe above code checks to see if the game has been paused, and if it has then it creates an instance of the object \"obj_PauseMenu\" if none exist already.\n",
      "description": "When developing for mobile devices, you need to have a way to check that the device is still focused on your game or not, especially as if your game is on an iOS, Android or Windows Phone device then it can be interrupted by phone calls and other apps. You can use this function to check if the device is paused or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_is_paused.htm"
    },
    "os_lock_orientation": {
      "name": "os_lock_orientation",
      "parameters": [
        {
          "parameter": "flag",
          "description": "Set to `true` or `false` to enable or disable orientation locking."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (os_type == os_android) || (os_type == os_ios)\n    {\n        os_lock_orientation(true);\n    }\n```\nThe above code checks the OS type and if it is either Android or an iOS then the orientation locking is flagged as `true`.\n",
      "description": "With this function you can \"lock\" your device to the current orientation until such time as you \"free\" it to allow all  [Game Options](https://manual.yoyogames.com/Settings/Game_Options.htm) enabled orientations again for that target platform. Note that you likely want to confirm the orientation is as desired before locking.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_lock_orientation.htm"
    },
    "os_powersave_enable": {
      "name": "os_powersave_enable",
      "parameters": [
        {
          "parameter": "flag",
          "description": "Set to `true` or `false` to enable or disable powersave functions."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (os_type == os_android) || (os_type == os_ios)\n    {\n        os_powersave_enable(false);\n    }\n```\nThe above code checks the OS type and if it is either Android or an iOS then power saving features are deactivated.\n",
      "description": "With this function you can turn on or off the power saving features of the device. This is important as certain games (for example those that use the tilt functions) may not generate events that the OS can interpret as being user input and so shut down the screen or exit the game. By setting this function to `false` you can disable the power saving features and ensure that the screen (and game) are always functioning.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_powersave_enable.htm"
    },
    "parameter_count": {
      "name": "parameter_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\np_num = parameter_count();\n```\nThe above code will store the number of command-line parameters that have been used for the game in the variable \"p_num\".\n",
      "description": "Command-line parameters are those extra commands that you can add to an exe to change how the program is run. You can find the number of parameters for the current game using this function, where the first parameter has index 1 and the last one has\n    the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/parameter_count.htm"
    },
    "parameter_string": {
      "name": "parameter_string",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar p_num;\n    p_num = parameter_count();\n    if p_num > 0\n    {\n        var i;\n        for (i = 0; i < p_num; i += 1)\n        {\n            p_string[i] = parameter_string(i + 1);\n        }\n    }\n```\nThe above code will get the number of command-line parameters, and if there is 1 or more it will loop through them and store them as strings in an array.\n",
      "description": "Command-line parameters are those extra commands that you can add to an exe to change how the program is run and with this function you can get the chosen command-line parameter as a string. You can find the number of parameters for the current game using the function `parameter_count()`, where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/parameter_string.htm"
    },
    "part_emitter_burst": {
      "name": "part_emitter_burst",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system that the emitter is in."
        },
        {
          "parameter": "ind",
          "description": "The index of the emitter to burst from."
        },
        {
          "parameter": "parttype",
          "description": "The index (type) of the particles to be created."
        },
        {
          "parameter": "number",
          "description": "The number of particles to create."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\npart_emitter_burst(global. Sname, p_emit1, p1, 30 + irandom(30));\n```\nThe above code will burst a random number of particles between 30 and 60 from the chosen emitter.\n",
      "description": "This function allows you to set an emitter to burst a specific type of particle and is typically used in alarms and destroy events as it is a one off code that creates the number of particles specified all at once following the distribution, shape and\n    position set by the function `part_emitter_region()`. Should you need the particles to appear every step, you should be using the function `part_emitter_stream()`    rather than calling this function every step.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_burst.htm"
    },
    "part_emitter_clear": {
      "name": "part_emitter_clear",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system that the emitter is in."
        },
        {
          "parameter": "ind",
          "description": "The index of the emitter to clear."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npart_emitter_clear(Sname, p_emit1 );\n```\nThe above code will clear the particle emitter indexed in the variable \"p_emit1\".\n",
      "description": "With this function you can clear the given emitter from the specified particle system back to its default state. This will also stop any particles that are being streamed from the emitter at the time, and if you wish to use the emitter again you will\n    need to set the region position and particle type using the `part_emitter_region()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_clear.htm"
    },
    "part_emitter_create": {
      "name": "part_emitter_create",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system to create the emitter in."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\np_emit1 = part_emitter_create(Sname);\n```\nThis will create a new particle emitter and store its index in the variable \"p_emit\".\n",
      "description": "This function must be used to create a new emitter and assign it to a given particle system. The function will return the index value for the new emitter which must be stored in a variable and used in all further functions that reference the emitter,\n    and the emitter itself must be destroyed when no longer being used to prevent memory leaks (this can be achieved using the specific emitter destroy functions or by destroying the whole particle system that the emitter belongs to).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_create.htm"
    },
    "part_emitter_destroy": {
      "name": "part_emitter_destroy",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system to destroy the emitter from."
        },
        {
          "parameter": "ind",
          "description": "The index of the emitter to destroy."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif part_emitter_exists(global.Sname, p_emit)\n    {\n        part_emitter_destroy(global.Sname, p_emit1);\n    }\n```\nThe above code will check to see if the particle emitter indexed in the variable \"p_emit\" exists in the give particle system and if it does it is destroyed.\n",
      "description": "This function will remove the specified emitter from the given system and clear it from memory (this will also stop any particles from being produced by the given emitter, but it does *NOT* remove them from the room). This function should always be called when the given emitter is no longer needed for the system to prevent memory leaks and errors.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_destroy.htm"
    },
    "part_emitter_destroy_all": {
      "name": "part_emitter_destroy_all",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system to destroy all emitters from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif lives == 0\n    {\n        part_emitter_destroy_all(global.Sname);\n        room_goto(rm_Menu);\n    }\n```\nThe above code checks the built in global variable \"lives\" and if it is 0, it destroys all particle emitters and then changes room.\n",
      "description": "This function will remove all defined emitters from the given system and clear them from memory (this will also stop any particles from being produced by the given emitter, but it does *NOT* remove them from the room). This function should always be called when the emitters are no longer needed for the system to prevent memory leaks and errors.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_destroy_all.htm"
    },
    "part_emitter_exists": {
      "name": "part_emitter_exists",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system to check for an emitter."
        },
        {
          "parameter": "ind",
          "description": "The index of the emitter to search for."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif part_emitter_exists(sname, p_emit1)\n    {\n        part_emitter_burst(sname, p_emit1, part_1, 30);\n    }\n```\nThe above code will check for the emitter indexed in the variable \"permit\" and if it exists, it will burst 30 particles from it.\n",
      "description": "With this function you can check to see if the given particle emitter indexed exists in the given system or not. Note that if the variable being checked is an uninitialised variable (that a particle emitterwould otherwise have its index assigned to) this will throw an error.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_exists.htm"
    },
    "part_emitter_region": {
      "name": "part_emitter_region",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system that the emitter is in."
        },
        {
          "parameter": "ind",
          "description": "The index of the emitter to set."
        },
        {
          "parameter": "xmin",
          "description": "The x coordinate of the left side of the region."
        },
        {
          "parameter": "xmax",
          "description": "The x coordinate of the right side."
        },
        {
          "parameter": "ymin",
          "description": "The y coordinate of the top of the region."
        },
        {
          "parameter": "ymax",
          "description": "The y coordinate of the bottom of the region."
        },
        {
          "parameter": "shape",
          "description": "The shape of the region."
        },
        {
          "parameter": "distribution",
          "description": "The distribution style of the particles."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\npart_emitter_region(global.Sname , emit_1, x - 50, x + 50, y - 50, y + 50, ps_shape_ellipse, ps_distr_linear);\n```\nThe above code will set an emitter to the a 100px tall and 100px wide elliptical shape around the current (x,y) position of the instance running the code.\n",
      "description": "This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding\n    box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm"
    },
    "part_emitter_stream": {
      "name": "part_emitter_stream",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system that the emitter is in."
        },
        {
          "parameter": "ind",
          "description": "The index of the emitter to burst from."
        },
        {
          "parameter": "parttype",
          "description": "The index (type) of the particles to be created."
        },
        {
          "parameter": "number",
          "description": "The number of particles to create per step."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\npart_emitter_stream(global. Sname, p_emit1, p1, 1);\n```\nThe above code will stream 1 particle every step of the game until the emitter is destroyed or the stream set to 0.\n",
      "description": "This function allows you to set an emitter to stream a specific type of particle and is typically used the create event as it is a one off code that sets the emitter to generate the number of particles specified every step of the game there-after. The\n    particles are emitted following the distribution, shape and position set by the function `part_emitter_region()`. You can set the number of particles being streamed to zero and call this function again\n    to \"switch off\" the particle streaming, and the function will also accept negative numbers for the amount, in which case the emitter will produce particles based on random chance. For example, if you have the particle number set to -5, there\n    is a 1:5 chance that a particle will be produced every step. Should you need the particles to appear all at once rather than every step, you should be using the function `part_emitter_burst()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_stream.htm"
    },
    "part_particles_clear": {
      "name": "part_particles_clear",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (lives <= 0)\n    {\n        part_particles_clear(global.Sname);\n        room_goto(rm_intro);\n    }\n```\nThe above code will check the value of the variable \"lives\" and if it is equal to 0, it clears all particles from the system and then changes room.\n",
      "description": "With this function you can clear all the particles currently created by the system from the room. It does *not* reset or remove the particle types themselves, just their visual representation, and if you have any object streaming particles from an emitter, these particles disappear but will begin to appear again the next step after calling this code.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_clear.htm"
    },
    "part_particles_count": {
      "name": "part_particles_count",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (part_particles_count(Sname) == 0)\n    {\n        part_system_destroy(Sname);\n        instance_destroy();\n    }\n```\nThe above code will check the number of particles in the local particle system indexed in the variable \"Sname\" and if there are none, it will destroy the system and then the instance.\n",
      "description": "With this function you can check to see if a particle system currently has any particles created in the room, and it will return the number of them too.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_count.htm"
    },
    "part_particles_create": {
      "name": "part_particles_create",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to create the particles."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to create the particles."
        },
        {
          "parameter": "parttype",
          "description": "The index (type) of the particles to be created."
        },
        {
          "parameter": "number",
          "description": "The number of particles to create."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif mouse_check_button(mb_left)\n    {\n        part_particles_create(sname, mouse_x, mouse_y, p_CursorEffect, 5);\n    }\n```\nThe above code checks for the mouse button being pressed and if it returns `true` it generates 5 particles at the mouse position.\n",
      "description": "This function is ideal for those effects that do not require any of the functionality offered by  [particle emitters](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/Particle_Emitters.htm) (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. Note that you must have created the particle system and the particle type previously for this function to be used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_create.htm"
    },
    "part_particles_create_colour": {
      "name": "part_particles_create_colour",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of where to create the particles."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to create the particles."
        },
        {
          "parameter": "parttype",
          "description": "The index (type) of the particles to be created."
        },
        {
          "parameter": "colour",
          "description": "The colour blending for the particles."
        },
        {
          "parameter": "number",
          "description": "The number of particles to create."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif (speed > 1)\n    {\n        var _c = choose(c_aqua, c_lime, c_fuchsia, c_orange);\n        part_particles_create_colour(sname, x, y, p_Smoke, _c, 1);\n    }\n```\nThe above code will generate a single particle every step that the instance with the code has a speed greater than one. These particles will be of a random colour.\n",
      "description": "This function is ideal for those effects that do not require any of the functionality offered by  [particle emitters](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/Particle_Emitters.htm) (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. You can also colour the particles \"on the fly\" as they are created with this function, and this colour will over-ride the predefined colour of the particle, but it does not blend this colour over the particles lifetime. Note that you must have created the particle system and the particle type previously for this function to be used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_particles_create_colour.htm"
    },
    "part_system_automatic_draw": {
      "name": "part_system_automatic_draw",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to change."
        },
        {
          "parameter": "automatic",
          "description": "Whether automatic drawing is on (true) or not (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npart_system_automatic_draw(global.Sname, false);\n```\nThe above code switches off automatic drawing for the particle system indexed in the global variable \"Sname\".\n",
      "description": "This function can be used to switch off the drawing of a particle system so that any updates done to the system (automatic or otherwise) will not be seen. This is a purely visual option and when set to `false` you will not be able to see the\n    particles as they are not drawn, but they still exists and are changing position, colour etc... as they would normally. When automatic drawing is off, you can *explicitly* order GameMaker Studio 2 to draw the current state of the particle\n    system using the function `part_system_drawit()`, and if you set this function to `true` again you can switch automatic drawing back on.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_automatic_draw.htm"
    },
    "part_system_automatic_update": {
      "name": "part_system_automatic_update",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to change."
        },
        {
          "parameter": "automatic",
          "description": "Whether automatic updating is on (`true`) or not (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif global.Pause\n    {\n        part_system_automatic_update(global.Sname, false);\n    }\n```\nThe above code will switch off the particle updates if the global variable \"Paused\" is true.\n",
      "description": "This function controls whether GameMaker Studio 2 should update the particle system automatically or not, and normally you would not need to use this function as the default value of `true` (automatic update is on) is what you wish to happen. However, for special effects or for pausing the game, you can set this to `false` and it will prevent any updates being carried out on the given particle system unless *explicitly* commanded by the use of the function `part_system_update()` or you use this function again to turn automatic updates on. No updating means that particles created in this system will no longer change position, colour or any other parameter and that emitters will cease to work too, \"freezing\" the system at the exact point in which the automatic update was set to `false`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_automatic_update.htm"
    },
    "part_system_clear": {
      "name": "part_system_clear",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npart_system_clear(global.Sname);\n```\nThe above code will clear the particle system indexed in the global variable \"Sname\" to its default state.\n",
      "description": "With this function you can clear the indexed system to its default state, removing all emitters and resetting the depth and position (if they had been changed). Be careful using this function as if you have any instance setting or bursting or any other\n    action using an emitter associated with this system, you will get an error unless you are using the `part_emitter_exists()` function to check. There is also no need to call the  [part_emitter_destroy()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_destroy.htm) function\n    as this is taken care of automatically too.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_clear.htm"
    },
    "part_system_create": {
      "name": "part_system_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.Sname = part_system_create();\n```\nThis will create a new particle system and store the index in the global variable \"Sname\".\n",
      "description": "This function is used to create a new particle system and will return a unique index number that should be stored and used in all further functions relating to that system. The system will be assigned a managed layer and will be set to have a depth\n    of 0. Managed layers are not accessible to the user and used only for internal management when depth is used instead of layers. Normally you would use the function `part_system_create_layer()` instead\n    of this one.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_create.htm"
    },
    "part_system_create_layer": {
      "name": "part_system_create_layer",
      "parameters": [
        {
          "parameter": "layer",
          "description": "The layer ID value or string to assign the particle system to (can be any layer type)"
        },
        {
          "parameter": "persistent",
          "description": "Flag the particle system as persistent (set to `true`) or not (set to `false`)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.p_sys = part_system_create_layer(\"effects_layer\", true);\n```\nThe above code will create a new particle system on the given layer and flag it as persisting over subsequent rooms. The ID for the particle system is stored in a global scope variable for future reference.\n",
      "description": "This function will create a new particle system on a given layer. You give the unique layer ID as returned by the function `layer_create()` or the name of\n    the layer to use as a string - for example \"instance_layer\" - and then flag the system as being persistent or not. If the system is not flagged as persistent then it will be automatically destroyed at the end of the room it was created in\n    (this is the same as if you had called the function `part_system_destroy()` and will also destroy any emitters associated with the system). However, when flagged as persistent, the system will be carried\n    to the next room when the room is changed, and if the following room does *not* have a layer with the same name or depth as the one assigned, then a new layer will be created for the system that is persisting across the rooms, and it will be\n    named the same as original layer. When changing rooms, if there is another layer in the following rooms with the same name, then the persisted instance will be assigned to the layer with the that name *regardless of the depth of the layer*. Finally,\n    if a persisted system moves to a room with a layer at the same depth as the layer the system was created on, it will *not* be assigned to this layer, but instead a new layer will be created at the same depth (with the same name as the original\n    layer).",
      "returns": "Real (unique particle system ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_create_layer.htm"
    },
    "part_system_depth": {
      "name": "part_system_depth",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to change."
        },
        {
          "parameter": "depth",
          "description": "The depth at which to set the particle system."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.Sname = part_system_create(); part_system_depth(global.Sname, -1000 );\n```\nThe above code will create a particle system and store its index in the global variable \"Sname\". this system is then given a low depth of -1000, meaning that it will appear above everything with a higher draw depth.\n",
      "description": "With this function you can set the draw depth for the particle system, much the same as you can set the *render depth* of different layers within the room, where a low draw depth means that it will appear on top of all things drawn with a higher\n    depth, and a high draw depth placing it below everything with a lower draw depth.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_depth.htm"
    },
    "part_system_destroy": {
      "name": "part_system_destroy",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to destroy."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (global.player_hp <= 0)\n    {\n        part_system_destroy(p_sys);\n        room_goto_next();\n    }\n```\nThe above code checks to see if a global variable value is less than or equal to zero, and if it is then it destroys the particle system referenced in the given variable and then goes to the next room.\n",
      "description": "With this function you can destroy a given particles system and remove it from memory. This should always be called when the system is no longer needed, like at the end of a room, or in the destroy event of an instance, otherwise you could end up with particles appearing in later rooms and no way to remove them as well as a memory leak which will eventually crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_destroy.htm"
    },
    "part_system_draw_order": {
      "name": "part_system_draw_order",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to change."
        },
        {
          "parameter": "oldtonew",
          "description": "Whether old particles should be drawn behind newer ones (true) or vice versa (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmysystem = part_system_create(); part_system_draw_order(mysystem, true);\n```\nThis will create a new particle system with the index \"`mysystem`\", and then it sets particles to draw newer particles atop older ones.\n",
      "description": "With this function you can set the way in which particles are drawn when created on the screen. The default system uses an old > new look (the function is set to `true`), where old particles are drawn at a higher depth than newer ones and\n    so appear \"beneath\" them new particles, but by setting this function to `false` you can reverse this order and have the new particles drawn higher and so appear \"beneath\" the older ones. The images below illustrate this,\n    with the image on the left being the default value of `true` and the image on the right being `false`:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_draw_order.htm"
    },
    "part_system_exists": {
      "name": "part_system_exists",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !part_system_exists(global.Sname)\n    {\n        global.Sname = part_system_create();\n    }\n```\nThe above code checks to see if the particle system referenced in the global variable exists and if it does not it is created.\n",
      "description": "With this function you can check to see if the given particle system indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle system would otherwise have its index assigned to) this will throw an error.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_exists.htm"
    },
    "part_system_get_layer": {
      "name": "part_system_get_layer",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The particle system ID value to get the layer ID of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (part_system_get_layer(global.p_sys) != \"effects_layer\")\n    {\n        part_system_layer(global.p_sys, \"effects_layer\";\n    }\n```\nThe above code will check a particle system to see what layer it is on and if it is not on the given layer it will be changed.\n",
      "description": "This function can be used to retrieve the unique layer ID value for the given particle system. You supply the particle system ID value (as returned by the function `part_system_create_layer()`) and the function will return the ID value of the layer.",
      "returns": "Real (unique layer ID value or 0 if the layer is an internally managed one)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_get_layer.htm"
    },
    "part_system_layer": {
      "name": "part_system_layer",
      "parameters": [
        {
          "parameter": "ps",
          "description": "The particle system ID"
        },
        {
          "parameter": "layer",
          "description": "The new layer ID"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (part_system_get_layer(global.p_sys) != \"effects_layer\")\n    {\n        part_system_layer(global.p_sys, \"effects_layer\";\n    }\n```\nThe above code will check a particle system to see what layer it is on and if it is not on the given layer it will be changed.\n",
      "description": "This function can be used to switch a particle system from its current layer to a new one. You supply the particle system ID value (as returned by the function `part_system_create_layer()`) and then the unique layer ID (as returned by the function `layer_create()` or the name of the layer to use as a string - for example \"instance_layer\" - as defined in the room editor), and the system will be moved to the new layer.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_layer.htm"
    },
    "part_system_position": {
      "name": "part_system_position",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to change."
        },
        {
          "parameter": "x",
          "description": "The new x coordinate of the particle system."
        },
        {
          "parameter": "y",
          "description": "The new y coordinate of the particle system."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        part_system_position(global.Sname, mouse_x, mouse_y);\n    }\n```\nThe above code will check for the press of the mouse button and if it detects one, the particle system indexed in the global variable \"Sname\" is shifted to the mouse x/y position\n",
      "description": "With this function you can set the base position for the particle system relative to the (0,0) position of the room, meaning that all further particle functions relating to this system will now be drawn relative to the new position. By default this position is always (0,0), but in some very special circumstances you may wish to change this to something else.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_position.htm"
    },
    "part_system_update": {
      "name": "part_system_update",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle system to update."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nrepeat (room_speed * 3)\n    {\n        part_system_update(global.RainSys);\n    }\n```\nThe above code will advance the particle system indexed in the global variable \"RainSys\" by 3 seconds.\n",
      "description": "This function will advance the given particle system one step in game time and can be used to simulate the particle system behaviour when automatic updating is off, or it can be used to advance a particle system to a specific point all in one step. For example, if you have a particle system for snow, and you want it to appear that the snow is falling right from the moment the player enters the room then you may wish to advance your snow particles for a few seconds in the create event of an instance so that the first time they are drawn, there are particles all over the screen (the code example below shows this). You can also use this function when automatic updating of the system is switched off by the function `part_system_automatic_update()` to move the system along.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Systems/part_system_update.htm"
    },
    "part_type_alpha1": {
      "name": "part_type_alpha1",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "alpha1",
          "description": "The alpha of the particle."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npart_type_alpha1(global.Snow_Part, 0.5);\n```\nThe above code will set all particles created of the particle type indexed in the global variable \"Snow_Part\" to have an alpha value of 0.5 (semi-transparent).\n",
      "description": "This function is used to set a particle type to have a single alpha value (transparency) for the total duration of the lifetime of each individual particle, and this can be from 0 (transparent) to 1 (opaque).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_alpha1.htm"
    },
    "part_type_alpha2": {
      "name": "part_type_alpha2",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "alpha1",
          "description": "The start alpha of the particle."
        },
        {
          "parameter": "alpha2",
          "description": "The end alpha of the particle."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\npart_type_alpha2(global.Snow_Part, 0, 1);\n```\nThe above code will set all particles created of the particle type indexed in the global variable \"Snow_Part\" to have an alpha value of 0 (transparent) and then fade in to have an alpha of 1 (opaque) at the end of their lifetime.\n",
      "description": "This function can be used to set an alpha value (transparency) gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one on with which the particle will end with,\n    and a smooth gradient change will occur to the alpha over the particles lifetime from one to the other. This can be from 0 (transparent) to 1 (opaque).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_alpha2.htm"
    },
    "part_type_alpha3": {
      "name": "part_type_alpha3",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "alpha1",
          "description": "The starting alpha of the particle."
        },
        {
          "parameter": "alpha2",
          "description": "The halfway point alpha of the particle."
        },
        {
          "parameter": "alpha3",
          "description": "The ending alpha of the particle."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\npart_type_alpha3( part_Health, 0.5, 1, 0);\n```\nThe above code will make all particles created of the type indexed in the variable \"part_Health\" have an alpha blend from 0.5 to 1 to 0 over their lifetime.\n",
      "description": "This function can be used to set a three alpha (transparency) value gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one that will be blended to half way through\n    its lifetime and the third alpha is the one with which the particle will end with. A smooth gradient change will occur through the alphas over the particles lifetime from one to the other.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_alpha3.htm"
    },
    "part_type_blend": {
      "name": "part_type_blend",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "additive",
          "description": "Whether the particles should be blended additively (true) or normally (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npart_type_blend(part_Fire, true);\n```\nThe above code will set all particles created of the particle type indexed in the variable \"part_Fire\" to have an additive blend mode.\n",
      "description": "With this function you can make your particles be drawn with an additive blend mode (`true`) or not (`false`). Additive blending is a special blend mode that adds the luminosity values of each particle as they overlap, so that light colours\n    will gradually get brighter (until they appear white) as they overlap, and dark colours become more and more transparent with black being almost invisible. This function can give some beautiful particle effects but may not always be necessary. For\n    example, a smoke trail would have additive blending off to keep the effect gray, but a flame effect would probably have it on to make the particles more translucent and brighter.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_blend.htm"
    },
    "part_type_clear": {
      "name": "part_type_clear",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npart_type_clear(global.explode_part);\n```\nThe above code will clear the particle type indexed in the global variable \"explode_part\" to its default values.\n",
      "description": "With this function you can \"reset\" a particle, returning all the values for each of the functions relating to the particle (life, colour, alpha, orientation etc...) to their default values. Note that this function does not remove any particles\n    currently visible in the room from the screen, for that you should be using `part_particles_clear()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_clear.htm"
    },
    "part_type_colour1": {
      "name": "part_type_colour1",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "colour1",
          "description": "The single colour to make the particle type."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npart_type_colour1(global.Snow_Part, c_white);\n```\nThe above code will set all particles created of the particle type indexed in the global variable \"Snow_Part\" to be white only.\n",
      "description": "This function is used to set a particle type to be a single colour for the total duration of the lifetime of each individual particle.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour1.htm"
    },
    "part_type_colour2": {
      "name": "part_type_colour2",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "colour1",
          "description": "The colour the particle will start at."
        },
        {
          "parameter": "colour2",
          "description": "The colour the particle will end at."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\npart_type_colour2( part_Health, c_red, c_white);\n```\nThe above code will make all particles created of the type indexed in the variable \"part_Health\" have a colour blend from red to white over their lifetime.\n",
      "description": "This function can be used to set a two colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one on which the particle will end with, and a smooth gradient\n    change will occur to the colour over the particles lifetime from one colour to the other.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour2.htm"
    },
    "part_type_colour3": {
      "name": "part_type_colour3",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "colour1",
          "description": "The colour the particle will start at."
        },
        {
          "parameter": "colour2",
          "description": "The colour the particle will be halfway through its lifespan."
        },
        {
          "parameter": "colour3",
          "description": "The colour the particle will end at."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\npart_type_colour3( part_Health, c_red, c_white, c_maroon);\n```\nThe above code will make all particles created of the type indexed in the variable \"part_Health\" have a colour blend from red to white to maroon over their lifetime.\n",
      "description": "This function can be used to set a three colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one that will be blended to half way through its lifetime\n    and the third colour is the one with which the particle will end with. A smooth gradient change will occur through the colours over the particles lifetime from one colour to the other.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour3.htm"
    },
    "part_type_colour_hsv": {
      "name": "part_type_colour_hsv",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "hmin",
          "description": "The minimum the final colour's hue component can be."
        },
        {
          "parameter": "hmax",
          "description": "The maximum the final colour's hue component can be."
        },
        {
          "parameter": "smin",
          "description": "The minimum the final colour's saturation component can be."
        },
        {
          "parameter": "smax",
          "description": "The maximum the final colour's saturation component can be."
        },
        {
          "parameter": "vmin",
          "description": "The minimum the final colour's value component can be."
        },
        {
          "parameter": "vmax",
          "description": "The maximum the final colour's value component can be."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\npart_type_hsv(global.Stars, 0, 255, 0, 255, 255, 255 );\n```\nThe above code sets each particle emitted of the particle type indexed in the global variable \"Stars\" to have different colours and saturations, but the same value (luminosity).\n",
      "description": "With this function you can set a hue, saturation and value range for all particles of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given\n    range of parameters. In this way you can create particles of the same hue but different saturations, or of different hues but the same value (luminosity) etc... All values must be between 0 and 255.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_hsv.htm"
    },
    "part_type_colour_mix": {
      "name": "part_type_colour_mix",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "colour1",
          "description": "The first colour the blend will take from."
        },
        {
          "parameter": "colour2",
          "description": "The second colour the blend will take from."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\npart_type_colour_mix(global.P_Damage, c_red, c_yellow);\n```\nThe above code will set the colour for each particle emitted of the particle type indexed in the global variable \"P_Damage\" to be a random mix between the colours red and yellow.\n",
      "description": "With this function you can set the given particle type to be a random blend of two colours.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_mix.htm"
    },
    "part_type_create": {
      "name": "part_type_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmypart = part_type_create();\n```\nThis will create a new particle type, storing its index in the variable \"mypart\".\n",
      "description": "With this function you can create a new particle type and the return value should be stored in a variable for use in all subsequent particle functions.",
      "returns": "Integer (particle ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_create.htm"
    },
    "part_type_death": {
      "name": "part_type_death",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "death_number",
          "description": "The quantity of the new particle to create at the particle death. If a negative value, it will instead create a fraction chance one is created (eg -3 would mean that one is created every 3 or so steps)."
        },
        {
          "parameter": "death_type",
          "description": "The index of the particle type to create."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nparticle1 = part_type_create(); part_type_shape(particle1, pt_shape_flare); part_type_size(particle1, 0.20, 0.30, 0.50, 0); part_type_scale(particle1, 0.10, 0.20); part_type_colour3(particle1, 33023, 8454143, 33023); part_type_alpha3(particle1,\n    0.30, 0.50, 0); part_type_speed(particle1, 0.40, 1, 0, 0); part_type_direction(particle1, 0, 359, 0, 20); part_type_gravity(particle1, 0.20, 90); part_type_orientation(particle1, 90, 90, 0, 0, 1); part_type_blend(particle1,\n    1); part_type_life(particle1, 1, 40); particle2 = part_type_create(); part_type_shape(particle2, pt_shape_smoke); part_type_size(particle2, 1, 1, 0, 0); part_type_scale(particle2, 0.50, 0.50); part_type_colour1(particle2,\n    12632256); part_type_alpha3(particle2, 0.10, 0.40, 0); part_type_speed(particle2, 0.50, 0.50, 0, 0); part_type_direction(particle2, 0, 359, 0, 0); part_type_gravity(particle2, 0.20, 90); part_type_orientation(particle2, 0,\n    359, 0, 1, 1); part_type_blend(particle2, 0); part_type_life(particle2, 60, 60); part_type_death(particle1, 1, particle2);\n```\nThe above code creates and defines two particles and sets the particle indexed in the variable \"particle1\" to create 1 particle of \"particle2\" at the end of its lifetime.\n",
      "description": "This function can be used to make your particle burst another type of particle at the end of its lifetime.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_death.htm"
    },
    "part_type_destroy": {
      "name": "part_type_destroy",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to destroy."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif part_particles_count(smoke_sys) = 0\n    {\n        part_type_destroy(smoke_part);\n        part_system_destroy(smoke_sys);\n        instance_destroy();\n    }\n    else alarm[0] = 1;\n```\nThe above code checks a particle system to see if any particles are currently visible in the room and if not, the particles, the system and the instance are destroyed.\n",
      "description": "With this function you can remove the specified particle type from the game. When you use this function, all particles of the given type will disappear from the room and the particle itself is removed form memory, so this function should be used only when you no longer need the particle.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_destroy.htm"
    },
    "part_type_direction": {
      "name": "part_type_direction",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "dir_min",
          "description": "The minimum direction the particle can start at."
        },
        {
          "parameter": "dir_max",
          "description": "The maximum direction the particle can start at."
        },
        {
          "parameter": "dir_incr",
          "description": "How much the particle direction should increase or decrease per step."
        },
        {
          "parameter": "dir_wiggle",
          "description": "How much should randomly be added or subtracted from the particle's direction per step."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\npart_type_shape(particle1, pt_shape_pixel); part_type_size(particle1, 0.19, 0.79, 0.01, 0); part_type_scale(particle1, 5, 5); part_type_colour3(particle1, 32768, 8454016, 8454016); part_type_alpha3(particle1, 0, 0.80, 0); part_type_speed(particle1,\n    8, 10, -0.50, 1); part_type_direction(particle1, 0, 359, 1, 20); part_type_gravity(particle1, 0, 270); part_type_orientation(particle1, 0, 359, 0, 0, 1); part_type_blend(particle1, 1); part_type_life(particle1, 10, 50);\n```\nThe above code will set various particle values including the direction which will be random value between 0 and 359 degrees. It will also go up by 1 degree each step and has a random amount added to it of anywhere between 0 and 20 each step too.\n",
      "description": "This function is used to determine the direction of the particle when it is created and can also be used to make the particle increase or decrease its direction over its lifetime. The minimum and maximum direction values default at 0, which means that\n    the particle will move to the right with no variation, but these values can be changed to limit the direction of movement following the standard GameMaker Studio 2 directions of 0 being right, 90 being up, 180 being left and 270 being down.\n    If you set them to the same value the particles will only move in one direction.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_direction.htm"
    },
    "part_type_exists": {
      "name": "part_type_exists",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !part_type_exists(global.p1)\n    {\n        global.p1 = part_type_create();\n    }\n```\nThe above code checks to see if the global variable \"p1\" stores the index of a particle type and if it does not it creates one.\n",
      "description": "With this function you can check to see if the given particle type indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle type would otherwise have its index assigned to) this will throw an error.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_exists.htm"
    },
    "part_type_gravity": {
      "name": "part_type_gravity",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "grav_amount",
          "description": "Strength of the gravity."
        },
        {
          "parameter": "grav_direction",
          "description": "The direction of the gravity."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\npart_type_shape(global.p1, pt_shape_pixel); part_type_size(global.p1, 1, 3, 0, 0); part_type_scale(global.p1, 1, 1); part_type_colour1(global.p1, c_white); part_type_alpha2(global.p1, 1, 0); part_type_speed(global.p1, 2, 4,\n    0, 0); part_type_direction(global.p1, 0, 180, 0, 0); part_type_gravity(global.p1, 0.20, 270); part_type_orientation(global.p1, 0, 0, 0, 0, 1); part_type_blend(global.p1, 1); part_type_life(global.p1, 15, 60);\n```\nThe above code will set various particle values including the gravity which will add 0.2 to the speed each step with a direction of 270º, so will pull the particle \"down\" towards the bottom of the screen.\n",
      "description": "This function will set the gravity that is to affect each particle of the given type that is created. The gravity strength value is added to the particle speed every step and is usually a small value like 0.5, while the direction is the direction of\n    the gravity \"pull\" and follows the standard GameMaker Studio 2 directions of 0° being right, 90° being up, 180° being left and 270° being down.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_gravity.htm"
    },
    "part_type_life": {
      "name": "part_type_life",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "life_min",
          "description": "The minimum lifespan of the particles."
        },
        {
          "parameter": "life_max",
          "description": "The maximum lifespan of the particles."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\npart_type_life(part_Flare, room_speed, room_speed * 2);\n```\nThe above code will set all particles created of the particle type indexed in the variable \"part_Flare\" to have a lifetime of between 1 and 2 seconds, based on the current room-speed.\n",
      "description": "This is the function that governs how long each individual particle of the indicated type remains on the screen. As with other particle functions, you provide a minimum and a maximum value (in steps)and each particle lifespan will be a random number\n    of steps from within the specified range. To have all particles with the same lifetime, set the two values to be the same.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_life.htm"
    },
    "part_type_orientation": {
      "name": "part_type_orientation",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "ang_min",
          "description": "The minimum starting angle of the particles."
        },
        {
          "parameter": "ang_max",
          "description": "The maximum starting angle of the particles."
        },
        {
          "parameter": "ang_incr",
          "description": "The increase (or decrease if set negative) of the angle in degrees per step."
        },
        {
          "parameter": "ang_wiggle",
          "description": "The amount the angle wiggles clockwise/counterclockwise per step."
        },
        {
          "parameter": "ang_relative",
          "description": "Whether to set its angle relative to the direction of the particle's motion (true) or not (false)."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\npart_type_shape(particle2, pt_shape_spark); part_type_size(particle2, 0.10, 0.50, 0.01, 0); part_type_scale(particle2, 0.30, 0.30); part_type_colour1(particle2, 8454143); part_type_alpha1(particle2, 0.50); part_type_speed(particle2,\n    4, 4, -0.07, 1); part_type_direction(particle2, 0, 359, 0, 20); part_type_orientation(particle2, 0, 359, 0, 20, 1); part_type_blend(particle2, 1); part_type_life(particle2, 1, 5);\n```\nThe above code will set various particle values including the orientation which will be random value between 0º and 359º. It will also have a random amount added to it of anywhere between 0 and 20 each step too, and the orientation is relative to the\n    direction of motion.\n",
      "description": "This function is used to determine the orientation of the particle sprite when it is created and can also be used to make the particle orientation increase or decrease over its lifetime. The minimum and maximum orientation values default at 0 but these\n    values can be changed to randomise the orientation following the standard GameMaker Studio 2 directions of 0 degrees being right, 90 degrees being up, 180 degrees being left and 270 degrees being down. If you set them to the same value the\n    particles will all be created with the same orientation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_orientation.htm"
    },
    "part_type_scale": {
      "name": "part_type_scale",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the base particle."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the base particle."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\npart_type_shape(particle1, pt_shape_flare); part_type_size(particle1, 2, 2, 0.10, 1); part_type_scale(particle1, 8, 0.50); part_type_colour3(particle1, 8388608, 4227327, 8454143); part_type_alpha3(particle1, 0.10, 0.10, 0);    part_type_speed(particle1, 0, 1, 0.18, 20); part_type_direction(particle1, 0, 359, 0, 0); part_type_orientation(particle1, 0, 0, 0, 0, 1); part_type_blend(particle1, 1); part_type_life(particle1, 10, 40);\n```\nThe above code will set various particle values including the scale which sets the xscale to eight times the size and the yscale to half the size.\n",
      "description": "This function will set the horizontal and vertical scale of the particle before any other size changes are made. This function works on the ratio of the sprite size, so a value of 1 (the default value) is a 1:1 ratio, meaning that 0.5 would be half\n    and 2 double.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_scale.htm"
    },
    "part_type_shape": {
      "name": "part_type_shape",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to set."
        },
        {
          "parameter": "shape",
          "description": "The shape to choose."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.p1 = part_type_create(); part_type_shape(global.p1, pt_shape_square); part_type_size(global.p1, 1, 3, 0, 0); part_type_scale(global.p1, 1, 1); part_type_colour1(global.p1, c_white); part_type_alpha2(global.p1, 1, 0);    part_type_speed(global.p1, 2, 4, 0, 0); part_type_direction(global.p1, 0, 180, 0, 0); part_type_gravity(global.p1, 0.20, 270); part_type_orientation(global.p1, 0, 0, 0, 0, 1); part_type_blend(global.p1, 1); part_type_life(global.p1,\n    15, 60);\n```\nThe above code sets the particle type indexed in the global variable \"p1\" to the shape of a square, then sets various other particle properties.\n",
      "description": "With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm"
    },
    "part_type_size": {
      "name": "part_type_size",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "size_min",
          "description": "The minimum size the particle can start at."
        },
        {
          "parameter": "size_max",
          "description": "The maximum size the particle can start at."
        },
        {
          "parameter": "size_incr",
          "description": "How much the particle should increase or decrease per step."
        },
        {
          "parameter": "size_wiggle",
          "description": "How much should randomly be added or subtracted from the particles size per step."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\npart_type_shape(particle1, pt_shape_explosion); part_type_size(particle1, 2, 2, 0.10, 0.01); part_type_scale(particle1, 1, 1); part_type_colour2(particle1, 16777215, 12632256); part_type_alpha3(particle1, 0, 0.20, 0); part_type_speed(particle1,\n    0.20, 0.20, 0, 0); part_type_direction(particle1, 0, 359, 0, 20); part_type_orientation(particle1, 0, 359, 0, 0, 1); part_type_blend(particle1, 0); part_type_life(particle1, 40, 60);\n```\nThe above code will set various particle values including the size which is set to double the size when each particle is created, and then increment the size by 0.01 each step with a wiggle of 0.1 too.\n",
      "description": "This function is used to determine the size of the particle when it is created and can also be used to make the particle increase or decrease in size over its lifetime. The minimum and maximum size values default at 1 (meaning that the size is the same\n    ratio as the base particle after the `part_type_scale()` scale has been set) and if they are set to the same value, the initial size for all particles will be the same, but if set to different values, each\n    particle will start with a random size from within the range, for example if you have a minimum of 0.5 and a maximum of 2, all particles will be created with a size between half and double the base scale.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_size.htm"
    },
    "part_type_speed": {
      "name": "part_type_speed",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "speed_min",
          "description": "The minimum speed the particle can start at."
        },
        {
          "parameter": "speed_max",
          "description": "The maximum speed the particle can start at."
        },
        {
          "parameter": "speed_incr",
          "description": "How much the particle speed should increase or decrease per step."
        },
        {
          "parameter": "speed_wiggle",
          "description": "How much should randomly be added or subtracted from the particle's speed per step."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\npart_type_shape(particle2, pt_shape_flare);\n    part_type_size(particle2, 0.01, 0.50, 0.01, 20);\n    part_type_scale(particle2, 0.10, 0.10);\n    part_type_colour3(particle2, 4210816, 4227327, 8240895);\n    part_type_alpha3(particle2, 0.20, 0.80, 0);\n    part_type_speed(particle2, 5, 10, -0.20, 20);\n    part_type_direction(particle2, 0, 359, -1, 20);\n    part_type_gravity(particle2, 0, 270);\n    part_type_orientation(particle2, 0, 359, 0, 20, 1);\n    part_type_blend(particle2, 1);\n    part_type_life(particle2, 1, 20);\n```\nThe above code will set various particle values including the speed which sets a minimum speed of five and a maximum speed of ten, with the speed slowing down by a value of -0.2 each step. The speed will also wiggle by a random value between 0 and 20 each step.\n",
      "description": "This function is used to set the movement speed of the particle when it is created and can also be used to make the particle increase or decrease its speed over its lifetime. The minimum and maximum speed values default at 1, which means that the particle will move 1 pixel each step, and if they are set to the same value, the initial speed for all particles will be the same, but if set to different values, each particle will start with a random speed from within the given range. For example if you have a minimum of 3 and a maximum of 6, all particles will be created with a speed between three and six pixels per step.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_speed.htm"
    },
    "part_type_sprite": {
      "name": "part_type_sprite",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "sprite",
          "description": "The index of the sprite to set the particle type to."
        },
        {
          "parameter": "animate",
          "description": "Whether to follow the sprite's animation normally (true) or not (false)."
        },
        {
          "parameter": "stretch",
          "description": "Whether to stretch the sprite's animation to match the particle lifespan (true) or not (false)."
        },
        {
          "parameter": "random",
          "description": "Whether to choose a random sub-image (true) or not (false)."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nglobal.p1 = part_type_create();\n    part_type_sprite(global.p1 , spr_Coins, 1, 0, 0);\n    part_type_size(global.p1, 1, 3, 0, 0);\n    part_type_scale(global.p1, 1, 1);\n    part_type_colour1(global.p1, c_white);\n    part_type_alpha2(global.p1, 1, 0);\n    part_type_speed(global.p1, 2, 4, 0, 0);\n    part_type_direction(global.p1, 0, 180, 0, 0);\n    part_type_gravity(global.p1, 0.20, 270);\n    part_type_orientation(global.p1, 0, 0, 0, 0, 1);\n    part_type_blend(global.p1, 1);\n    part_type_life(global.p1, 15, 60);\n```\nThe above code sets the particle type indexed in the global variable \"p1\" to the shape of the sprite indexed in \"spr_Coins\", and then sets various other particle properties.\n",
      "description": "This function can be used to set a particle type to use a custom sprite from the game assets. You can select the sprite and then tell GameMaker Studio 2 to use the sprite and animate it or not, and if you choose animated, then you can also choose to have the sub-images changed at an interval such that the animation will begin and end at the beginning and end of the lifetime of each particle created (so that if you have a lifetime set to a 15 step minimum and a 30 step maximum, no matter what value the lifetime has the animation will be made to fit, with it running faster for the shorter lifetimes and slower for the longer). You can also select to choose a random sub-image so that if the sprite is not animated, a different image will be chosen at random to create the sprite, or if the particle is animated it will start the animation at a random point.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm"
    },
    "part_type_step": {
      "name": "part_type_step",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the particle type to change."
        },
        {
          "parameter": "step_number",
          "description": "The quantity of the new particle to create per step."
        },
        {
          "parameter": "step_type",
          "description": "The index of the particle type to create."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nparticle2 = part_type_create(); part_type_shape(particle2, pt_shape_smoke); part_type_size(particle2, 0.01, 0.01, 0.01, 0); part_type_scale(particle2, 1, 1); part_type_colour3(particle2, 4227327, 8454143, 4227327); part_type_alpha3(particle2,1,\n    0.50, 0.80); part_type_speed(particle2, 0, 0, 0, 0); part_type_direction(particle2, 0, 359, 0, 0); part_type_gravity(particle2, 0, 270); part_type_orientation(particle2, 0, 0, -2, 0, 1); part_type_blend(particle2, 1);    part_type_life(particle2, 160, 160); particle3 = part_type_create(); part_type_shape(particle3, pt_shape_flare); part_type_size(particle3, 0.20, 0.20, 0.02, 0); part_type_scale(particle3, 1, 1); part_type_colour3(particle3,\n    16777215, 8454143, 16777215); part_type_alpha3(particle3, 0, 0.50, 0); part_type_speed(particle3, 3, 3, -0.03, 0); part_type_direction(particle3, 0, 359, 0, 0); part_type_gravity(particle3, 0, 270); part_type_orientation(particle3,\n    0, 0, 0, 0, 1); part_type_blend(particle3, 1); part_type_life(particle3, 40, 80); part_type_step(particle2, 2, particle3);\n```\nThe above code creates and defines two particles and sets the particle indexed in the variable \"particle2\" to create 2 particles of \"particle3\" every step of its lifetime.\n",
      "description": "This function can be used to make your particle type stream another type each step until the end of its lifetime. You can set a negative value for the step number and a particle will be emitted at a random interval based on that, so that, for example,\n    a value of -3 will have a 1:3 chance of emitting a particle each step.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_step.htm"
    },
    "path_add": {
      "name": "path_add",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.newpath = path_add();\n```\nThis will create a new path and assign its index to global.newpath.\n",
      "description": "With this function you can create a path in GameMaker Studio 2 without using the path editor. this function will return the index of the path which should be stored in a variable and used as the reference for that path from then on. Please note\n    that the created path is *empty* ie: it has no points defined, so you will then have to use the  [other available functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add_point.htm) to add points to the path or be using  [MP grids](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Motion_Planning/Motion_Planning.htm) to\n    generate the path. Once you have finished using the path, or wish to create a new one and store its index in the same variable you should first delete the old path with `path_delete` to prevent memory leaks which\n    can eventually crash your game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add.htm"
    },
    "path_add_point": {
      "name": "path_add_point",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to add the point to."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of the new point."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the new point."
        },
        {
          "parameter": "speed",
          "description": "The speed factor of the point (default value is 100)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": " \n```\nmy_path = path_add();\n    for (var i = 0; i <= 360; i += 36;)\n    {\n        path_add_point(my_path, x + lengthdir_x(50, i), y + lengthdir_y(50, i), 100);\n    }\n```\nThe above code will create a circular path around the x/y position of the instance running the code.\n",
      "description": "With this function you can add a point to the specified path and set its speed factor. This point is added onto the end of the path, irrespective of the position of the point, and the factor is equal to the percentage of `path_speed` that the following instance actually goes at when it reaches this point in the path. If you wish to place a path point at some other position that is not the end, you should use `path_insert_point()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add_point.htm"
    },
    "path_append": {
      "name": "path_append",
      "parameters": [
        {
          "parameter": "index",
          "description": "The new index of the path."
        },
        {
          "parameter": "path",
          "description": "The index of the path that will be appended to 'index'."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npath_append(mypath, mppath); path_delete(mppath);\n  \n```\nThe above code appends the path data indexed in the variable \"mppath\" to the path indexed in the variable \"mypath\" and then deletes the \"mppath\" from memory.\n",
      "description": "With this code you can append one path onto another one, effectively joining them together, and for this to work, both paths must previously exist. In general you would want to use this function on paths created using  [path_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add.htm),\n    since if you use it on a path asset, **it will permanently affect the path for instances in the game** from the moment the function is used until the end of the game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_append.htm"
    },
    "path_assign": {
      "name": "path_assign",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to be overwritten."
        },
        {
          "parameter": "path",
          "description": "The index of the path that will overwrite 'index'."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nmypath = path_add(); path_assign(mypath, choose(path_1, path_2, path_3));\n```\nThe above code will create a new, empty path indexed in the variable \"mypath\" and then copy over the path data from one of the three available path resources.\n",
      "description": "With this function you can copy the path data from one path to another. The path being copied *to* will be cleared first (should it have any path points) and be **completely overwritten** by the path being\n    copied from. Neither path is deleted in the process and the result is two paths, with two different indexes, but the exact same form and points. In general you would want to use this function on a path created using  [path_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_add.htm),\n    since if you use it on a path asset, **it will permanently affect the path for all instances in the game** from the moment the function is used until the end of the game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_assign.htm"
    },
    "path_change_point": {
      "name": "path_change_point",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to change a point of."
        },
        {
          "parameter": "n",
          "description": "The defining point to change the attributes of."
        },
        {
          "parameter": "x",
          "description": "The new x coordinate (relative to the path) of the point."
        },
        {
          "parameter": "y",
          "description": "The new y coordinate (relative to the path) of the point."
        },
        {
          "parameter": "speed",
          "description": "The new speed factor of the point."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nfor (var i = 0; i < path_get_number(path0); ++i;)\n    {\n        var px = path_get_point_x(pth_Patrol, i) + 64 - random(128);\n        var py = path_get_point_y(pth_Patrol, i) + 64 - random(128);\n        path_change_point(pth_Patrol, i, px, py, 100);\n    }\n```\nThe above code loops through all the points in the path indexed as \"path0\" and re-positions all the points to a random position within an area of 128x128 pixels.\n",
      "description": "With this function you can change the position and/or the speed factor of any point previously defined for a path (the path can have been created in the path editor or through code using `path_add()`). If used on a path from the Asset Browser, note that **the function will change the actual asset**, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_change_point.htm"
    },
    "path_clear_points": {
      "name": "path_clear_points",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif path_get_number(mypath) > 0\n    {\n        path_clear_points(mypath);\n    }\n```\nThe above code checks to see if there are any points on the path indexed in the variable \"mypath\" and if there are, it clears the path.\n",
      "description": "With this function you can remove all point definitions from a path, effectively making an \"empty\" path. This *does not* delete the path, for that you should use `path_delete()`, however it should be noted that **this function changes the actual path asset**, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_clear_points.htm"
    },
    "path_delete": {
      "name": "path_delete",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": " \n```\nvar t_path = path_add();\n    if mp_grid_path(grid, t_path, x, y, obj_Player.x, obj_Player.y, 1)\n    {\n        path_assign(mypath, t_path);\n    }\n    path_delete(t_path);\n```\nThe above code will create a path and store its index in a local variable. This path is then used to store an `mp_grid_path()` generated path which, if it succeeds in finding its way to the target, is then assigned to the path indexed in \"mypath\". Finally the \"t_path\" is deleted.\n",
      "description": "You can use this code to remove a path from memory. If this path has been created dynamically using `path_add()`, the variable that holds the path index will no longer be valid for accessing the path as it no longer exists, and if the path was created using the  [Path Editor](https://manual.yoyogames.com/The_Asset_Editors/Paths.htm) that path can no longer be accessed in the *whole game* as you are permanently deleting it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm"
    },
    "path_delete_point": {
      "name": "path_delete_point",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to delete a point from."
        },
        {
          "parameter": "n",
          "description": "The defining point to delete."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _col = true;\n    while (_col)\n    {\n        var _num = path_get_number(mypath) - 1;\n        if (_num > 2)\n        {\n            var _x1 = path_get_point_x(my_path, _num);\n            var _y1 = path_get_point_y(my_path, _num);\n            var _x2 = path_get_point_x(my_path, _num -1);\n            var _y2 = path_get_point_y(my_path, _num -1);\n            if collision_line(_x1, _y1, _x2, _y2, obj_Wall, true, false)\n            {\n                path_delete_point(mypath, _num);\n                _num -= 1;\n            }\n            else _col = false;\n        }\n        else _col = false;\n    }\n```\nThe above code generates a loop that checks the points on a backwards from the end for a collision with the given object. If a collision is found, a path point is deleted, until there is no collision, or the path is only 2 points long.\n",
      "description": "With this function you can remove a point from the specified path. Path points are numbered from 0 so the first point is always the 0th point and the last path point will be `path_get_number()` - 1. If you call this function on a path asset, **then the removal of the point will be permanent** and all instances assigned the path in the future will be missing the point that was removed. If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete_point.htm"
    },
    "path_duplicate": {
      "name": "path_duplicate",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the existing path to duplicate."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmypath = path_duplicate(choose(pth_1, pth_2, pth_3, pth_4));\n```\nThe above code chooses one of four path resources and duplicates it, storing the index of the new path in the variable \"mypath\".\n",
      "description": "This function takes a path and copies it into a new path. The new path is created in the process, and the index is returned to be used in all further calls to use this new path.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm"
    },
    "path_end": {
      "name": "path_end",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": " \n```\nif place_meeting(x, y, obj_Blocker)\n    {\n        path_end();\n    }\n```\nThe above code will end the current path if the instance detects any collision with any instance of the given object.\n",
      "description": "Calling this function will end the current path that the instance is following, as set when the function path_start() was called..",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_end.htm"
    },
    "path_exists": {
      "name": "path_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (path_exists(my_path))\n    {\n        path_delete(my_path);\n    }\n```\nThis code checks to see if the given variable stores a path index and if it does, then the path is deleted from memory.\n",
      "description": "his function returns whether a path with the given index exists or not. Note that if you check for the existence of a path through a variable that has yet to have been declared, this will throw an error.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_exists.htm"
    },
    "path_flip": {
      "name": "path_flip",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to flip."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npath_flip(mypath);\n```\nThis would flip the path indexed in the variable \"mypath\" along the horizontal axis.\n",
      "description": "This function takes all the path points and flips them along the horizontal axis. **This function changes the actual path asset**, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_flip.htm"
    },
    "path_get_closed": {
      "name": "path_get_closed",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstate = path_get_closed(pth_Patrol);\n```\nThis will set \"state\" to either `true` or `false` depending on the closed state of the path indexed in \"pth_Patrol\".\n",
      "description": "This function can be used to return whether the path is flagged as closed (true) or open (false), ie whether the path loops or if it has a definitive beginning and end.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_closed.htm"
    },
    "path_get_kind": {
      "name": "path_get_kind",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npath_kind = path_get_kind(pth_Patrol);\n```\nThis will set the \"path_kind\" variable to `true` or `false` depending on the kind of path the given path index is.\n",
      "description": "Paths can be either *smooth* or *straight* (a smooth path calculates a curved path around the defining points, whereas a straight path just goes straight from one point to another). This\n    function can be used to find out whether the given path is smooth (`true`) or not (`false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_kind.htm"
    },
    "path_get_length": {
      "name": "path_get_length",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to measure."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npath_len = path_get_length(pth_AI);\n```\nThis will set \"path_len\" to the total length of the path indexed in \"pth_AI\" in pixels.\n",
      "description": "You can use this function to get the exact length of a path in pixels. this is *not* an approximate length from point to point, but rather an exact length along the shape of the path, even when the path is smooth with\n    a high curved precision.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_length.htm"
    },
    "path_get_name": {
      "name": "path_get_name",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npath_name = path_get_name(path_array[0]);\n```\nThis will set \"path_name\" to the name of the path indexed in the given array at position 0.\n",
      "description": "This function will return the name of the path that is referenced as a string. The name is whatever has been used to define the path in the editor or (if the path has been created through a code function) it will return a string with the format \"\n    _newpathXX\" where \"XX\" is the number of the path generated, starting at 0 and incrementing by one every time a new path is created. Please note that this is *only* a\n      string and cannot be used to reference the path directly - for that you would need the *path index ID*. You can, however, use this string to get the *path index ID* using the returned string along\n      with the function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_name.htm"
    },
    "path_get_number": {
      "name": "path_get_number",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (path_get_number(pth_AI) > 1)\n    {\n        path_start( pth_AI, 4, 3, 0);\n    }\n```\nThe above code checks to see if a path has more than one point on it and if so it starts the instance moving along that path.\n",
      "description": "This function can be used to return the number of points on a path.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_number.htm"
    },
    "path_get_point_speed": {
      "name": "path_get_point_speed",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        },
        {
          "parameter": "n",
          "description": "The point identity to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (path_get_point_speed(pth_Patrol, 0) != 100)\n    {\n        var _px = path_get_point_x(pth_Patrol, 0);\n        var _py = path_get_point_x(pth_Patrol, 0);\n        path_change_point(pth_Patrol, 0, _px, _py, 100);\n    }\n```\nThe above code checks the path point \"0\" of the path indexed by \"pth_Patrol\" to see if the speed is not equal to 100. If it is not then it sets the speed of that point to 100.\n",
      "description": "With this function you can get the speed of the point (as defined in the  [Path Editor](https://manual.yoyogames.com/The_Asset_Editors/Paths.htm) or when you dynamically add a path point using `path_add_point()`) expressed as a percentage. So, if you have a path point set to 50 in the path editor, this function would return 50 when used.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_point_speed.htm"
    },
    "path_get_point_x": {
      "name": "path_get_point_x",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        },
        {
          "parameter": "n",
          "description": "The point identity to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": " \n```\nif (path_position == 1)\n    {\n        var _num = path_get_number(pth_Patrol);\n        var _pos = floor(random(_num));\n        x = path_get_point_x(pth_Patrol, _pos);\n        y = path_get_point_y(pth_Patrol, _pos);\n        path_position = (1 / _num) * _pos;\n    }\n```\nThe above code will check to see if an instance is at the end of a path. If it is it will then choose a random point on the path and move the instance to that point.\n",
      "description": "This function will return the x position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the x position of point 10) then a value of 0 will be returned.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_point_x.htm"
    },
    "path_get_point_y": {
      "name": "path_get_point_y",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        },
        {
          "parameter": "n",
          "description": "The point identity to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (path_position == 1)\n    {\n        var _num = path_get_number(pth_Patrol);\n        var _pos = floor(random(_num));\n        x = path_get_point_x(pth_Patrol, _pos);\n        y = path_get_point_y(pth_Patrol, _pos);\n        path_position = (1 / _num) * _pos;\n    }\n```\nThe above code will check to see if an instance is at the end of a path. If it is it will then choose a random point on the path and move the instance to that point.\n",
      "description": "This function will return the y position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the y position of point 10) then a value of 0 will be returned.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_point_y.htm"
    },
    "path_get_precision": {
      "name": "path_get_precision",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (path_get_kind(pth_Patrol))\n    {\n        if (path_get_precision(pth_Patrol)) != 8\n        {\n            path_set_precision(pth_Patrol, 8);\n        }\n    }\n```\nThe above code checks the path indexed in \"pth_Patrol\" to see what kind it is and if it is smooth, it then checks how precise the smoothing is. If it is less than 8, it is then set to a value of 8.\n",
      "description": "This function returns with what precision the given path has been \"smoothed\", and will be an integer value from 1 to 8. Although you can get (and set) this value for a straight-line path it will have no influence over how an instance uses the path as it is only relevant when the path kind is set to \"smooth\".",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_precision.htm"
    },
    "path_get_speed": {
      "name": "path_get_speed",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        },
        {
          "parameter": "pos",
          "description": "How far through the path to check. Between 0 (start) and 1 (end), can be decimal."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nspeed = path_get_speed(pth_Patrol, 0.5) / 20;\n```\nThis will set the calling instance's speed to the speed factor of the point at exactly halfway through the given path, divided by 20. So if the speed factor found is the default 100, it will set the speed of the calling instance to 5.\n",
      "description": "This function returns the speed factor of any given position on a path. The position should be a value between 0 and 1 (you can use `path_position`, for example, if you need the current\n    position of the instance) with 0 being the start position and 1 being the end. The value returned will be the factor by which the actual  [path_speed](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_speed.htm)` `is being set. For example, on a path\n    with only two points, 0 and 1, where the point 0 speed factor is 100 and point 1 speed factor is 0, the function `path_get_speed(path, 0.5)` will return 50.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_speed.htm"
    },
    "path_get_y": {
      "name": "path_get_y",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to check."
        },
        {
          "parameter": "pos",
          "description": "How far through the path to check. Between 0 (start) and 1 (end)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ny = path_get_y(pth_WallWalk, 0.5);\n```\nThis will set the calling instance's y to the y coordinate of the point at exactly halfway through the given path.\n",
      "description": "With this function you can get the y coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to the normalised distance along the length of the path. This value needn't be\n    a defining point of the path, it can be anywhere on it.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_get_y.htm"
    },
    "path_insert_point": {
      "name": "path_insert_point",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to insert the point into."
        },
        {
          "parameter": "n",
          "description": "The defining point to insert the new point BEFORE."
        },
        {
          "parameter": "x",
          "description": "The x coordinate (relative to the path) of the new point."
        },
        {
          "parameter": "y",
          "description": "The y coordinate (relative to the path) of the new point."
        },
        {
          "parameter": "speed",
          "description": "The speed factor of the point."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\npath_insert_point(mypath, 0, 50, 50, 100);\n```\nThis will insert a point at the very beginning of the path indexed in the variable \"mypath\", at (50,50), with a speed factor of 100%.\n",
      "description": "With this function you can insert a new point into a path (the path can have been created in the path editor or through code using `path_add()`). The point will be added into the path before the point \"n\"\n    that is specified in the function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_insert_point.htm"
    },
    "path_mirror": {
      "name": "path_mirror",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to mirror."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\npath_mirror(mypath);\n```\nThis would mirror the path indexed in the variable \"mypath\" along the vertical axis.\n",
      "description": "This function takes all the path points and mirrors them along the vertical axis. **This function changes the actual path asset**, and so will permanently affect how the path is used by all instances in the game from the moment the function\n    is used until the end of the game. If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the\n    duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_mirror.htm"
    },
    "path_rotate": {
      "name": "path_rotate",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to flip."
        },
        {
          "parameter": "angle",
          "description": "The angle of rotation degrees."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npath_rotate(pth_Patrol, 90);\n```\nThis would rotate the given 90 degrees counterclockwise.\n",
      "description": "You can use this function to rotate a given path around its center. Remember that in GameMaker Studio 2 (unless you are using physics) the angles are calculated counter-clockwise, so rotating the path by 90 degrees would\n    rotate the path to the *left*. **This function changes the actual path resource**, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of\n    the game. If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the duplicated asset (don't\n    forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_rotate.htm"
    },
    "path_set_closed": {
      "name": "path_set_closed",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to change."
        },
        {
          "parameter": "closed",
          "description": "Whether the path is closed (true) or not (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npath_set_closed(pth_Patrol, true);\n```\nThis will set the given path to be a closed path.\n",
      "description": "This function can be used to flag a given path as being open (false) or closed (true). A closed path has its start point connected to its end point, forming a loop, and an open path has a definitive, unconnected start and finish. **This function changes the actual path asset**,\n    and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm)    to create a copy of the path first, then call this function on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_set_closed.htm"
    },
    "path_set_kind": {
      "name": "path_set_kind",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to change."
        },
        {
          "parameter": "val",
          "description": "The kind of the path, 0 for straight or 1 for smooth."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npath_set_kind(pth_Patrol, true);\n```\nThis will set the given path to be a \"smooth\" path.\n",
      "description": "This function can be used to set the kind of path that you wish the specified resource to be. This can be either a straight line path (set to 0) or a smoothed path (set to 1) in which case the path precision has to be taken into account too (the precision\n    can be set too using `path_set_precision()`). This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment\n    the function is used until the end of the game.If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function\n    on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_set_kind.htm"
    },
    "path_set_precision": {
      "name": "path_set_precision",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to change."
        },
        {
          "parameter": "prec",
          "description": "The precision of the path. Must be an integer between 1 and 8."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\npath_set_precision(pth_Patrol, 2);\n```\nThis will set the precision of the given path to 2.\n",
      "description": "With this function you can change the \"smoothness\" of a path. This value must be between 1 and 8, with a low value creating straighter edges with sharper curves between points, while a higher value will round the points and make the path a\n    lot more \"curvy\". Note that this function will have no visible effect if the path has not been set to smooth in the path editor or using the function `path_set_kind()`. **This function changes the actual path asset**,\n    and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm)    to create a copy of the path first, then call this function on the duplicated asset (don't forget to call  [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_set_precision.htm"
    },
    "path_shift": {
      "name": "path_shift",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the path to change."
        },
        {
          "parameter": "xshift",
          "description": "The number of horizontal pixels to shift the path. Negative=left, positive=right."
        },
        {
          "parameter": "yshift",
          "description": "The number of vertical pixels to shift the path. Negative=up, positive=down."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nmy_path = path_duplicate(pth_AI); path_shift(my_path, 50, 50); path_start(my_path, 4, path_action_reverse, true);\n```\nThe above code duplicates a path asset and stores its ID value in a variable. This variable is then used to shift the duplicated path position and then the instance starts the path.\n",
      "description": "With this function you can shift a path along the horizontal and vertical axis. Please note that this will have no visible effect in-game if the instance following the path being shifted follows it relatively (rather than absolutely) as the path's\n    position is disregarded then. **This function changes the actual path asset**, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is\n    not what you require, then you should use a function like  [path_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_duplicate.htm) to create a copy of the path first, then call this function on the duplicated asset (don't forget to call\n     [path_delete()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_delete.htm) on the asset when it is no longer required).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Manipulation/path_shift.htm"
    },
    "path_start": {
      "name": "path_start",
      "parameters": [
        {
          "parameter": "path",
          "description": "The path index to start."
        },
        {
          "parameter": "speed",
          "description": "The speed of which to follow the path in pixels per step, negative meaning going backwards."
        },
        {
          "parameter": "endaction",
          "description": "What to do when the end of the path is reached (see the constants listed below)."
        },
        {
          "parameter": "absolute",
          "description": "Whether the calling instance should follow the absolute path as it is in the editor (true) or a relative path to its current position (false)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\npath_start(path, 4, path_action_reverse, 0);\n```\nThis will make the calling instance follow the path indexed in the variable \"path\" at a speed of 4 pixels per step. It will follow the path relative to its own position, and when it reaches the end it will reverse direction and go back the\n    way it came.\n",
      "description": "A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, *or* in the Path Editor and they are assigned to an instance\n    to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the *absolute* or *relative* path\n    position. This last part means that it either starts and follows the path exactly as you designed and placed it in the  [Path Editor](https://manual.yoyogames.com/The_Asset_Editors/Paths.htm) (absolute), or it starts and follows the path from the position\n    at which the instance was created (relative).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm"
    },
    "physics_apply_angular_impulse": {
      "name": "physics_apply_angular_impulse",
      "parameters": [
        {
          "parameter": "impulse",
          "description": "The impulse (in Newton metres) to be applied"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_up)\n    {\n        physics_apply_angular_impulse(10);\n    }\n```\nThe code above will give the physics enabled fixture an angular impulse if a key is pressed.\n",
      "description": "This function will give an angular impulse to a physics enabled instance. This impulse will set the angular rotation by the amount given, ignoring the current torque, essentially setting the amount of \"spin\" that a fixture has. If you wish to apply an angular force to an instance using torque, then you should be using the function `physics_apply_torque()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_angular_impulse.htm"
    },
    "physics_apply_force": {
      "name": "physics_apply_force",
      "parameters": [
        {
          "parameter": "xpos",
          "description": "The x coordinate *in the room* where the force will be applied"
        },
        {
          "parameter": "ypos",
          "description": "The y coordinate *in the room* where the force will be applied"
        },
        {
          "parameter": "xforce",
          "description": "the x component of the force vector"
        },
        {
          "parameter": "yforce",
          "description": "the y component of the force vector"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nwith (other)\n    {\n        physics_apply_force(x, y, 0, -30);\n    }\n```\nThe code above will apply code to the *other* object in the collision with a force of 30 Newtons and a direction.\n",
      "description": "When working with physics you need to apply not only gravity to objects, but forces as well. A force is any influence that causes an object to undergo a change in speed, a change in direction, or a change in shape, and is defined in the GameMaker Studio 2 physics world the same as we define gravity, by getting the vector from the two xforce/yforce components. It should be noted that forces are not applied to the center of mass of the object, but rather at a point in the room and they will change the direction and speed as well as the torque (spin) dependant on any other forces that are working on the object (like gravity). Here is an example image to help illustrate:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_force.htm"
    },
    "physics_apply_impulse": {
      "name": "physics_apply_impulse",
      "parameters": [
        {
          "parameter": "xpos",
          "description": "The x coordinate *in the room* where the impulse will be applied"
        },
        {
          "parameter": "ypos",
          "description": "The y coordinate *in the room* where the impulse will be applied"
        },
        {
          "parameter": "ximpulse",
          "description": "the x component of the impulse vector"
        },
        {
          "parameter": "yimpulse",
          "description": "the y component of the impulse vector"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        with (place_meeting(mouse_x, mouse_y, all))\n        {\n            physics_apply_impulse(mouse_x, mouse_y, -10 + irandom(20), -10 + irandom(20));\n        }\n    }\n```\nThe code above will apply an impulse with a random vector to an instance that is at the mouse position when the left button is pressed.\n",
      "description": "Not only can you apply force and gravity to an object with the physics in GameMaker Studio 2 but you can also apply an impulse. This is slightly different to a force in that when it is applied it will *immediately *affect the speed, and, potentially the torque (or \"spin\") of the object, particularly if the point chosen to apply the impulse is not aligned with the center of mass (note: the center of mass is *not necessarily* the same as the origin!). Here is an illustration:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_impulse.htm"
    },
    "physics_apply_local_force": {
      "name": "physics_apply_local_force",
      "parameters": [
        {
          "parameter": "xlocal",
          "description": "The x coordinate *relative to the origin* where the force will be applied"
        },
        {
          "parameter": "ylocal",
          "description": "The y coordinate *relative to the origin* where the force will be applied"
        },
        {
          "parameter": "xforce",
          "description": "the x component of the force vector"
        },
        {
          "parameter": "yforce",
          "description": "the y component of the force vector"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_right)\n    {\n        physics_apply_local_force(-25, 0, -50, 0);\n    }\n```\nThe code above will apply a force to the instance of 50 Newtons from left to right *relative* to the origin while the right arrow key is pressed.\n",
      "description": "Another way to use force in the physics world is to apply it *locally* to an instance. What this means is that the strength and direction of the force are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. It should be noted that with this function, forces are not applied to the center of mass of the object, but rather at a point relative to the instance and they will not be instantly applied as they are dependent on any other forces that are working on the object (like gravity). This illustration demonstrates how a local force works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_local_force.htm"
    },
    "physics_apply_local_impulse": {
      "name": "physics_apply_local_impulse",
      "parameters": [
        {
          "parameter": "xpos",
          "description": "The x coordinate *relative to the origin* where the impulse will be applied"
        },
        {
          "parameter": "ypos",
          "description": "The y coordinate *relative to the origin* where the impulse will be applied"
        },
        {
          "parameter": "ximpulse",
          "description": "the x component of the impulse vector (relative to the xpos coordinate)"
        },
        {
          "parameter": "yimpulse",
          "description": "the y component of the impulse vector (relative to the ypos coordinate)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif jump\n    {\n        physics_apply_local_impulse(0, 20, 0, 50);\n    }\n```\nThe code above will apply an impulse with force of 30 Newtons and a direction going from bottom to top *relative* to the instance origin if the variable \"jump\" is true.\n",
      "description": "Not only can you apply force and gravity to an object with the physics in GameMaker Studio 2 but you can also apply an impulse. This is slightly different to a force in that when it is applied it will *immediately* affect the speed, and, potentially the torque (or \"spin\") of the object, particularly if the point chosen to apply the impulse has a vector that is not aligned with the centre of mass (note: the center of mass is *not necessarily* the same as the origin!). This function applies an impulse *locally* to an instance. What this means is that the strength and direction of the impulse are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. Here is an illustration:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_local_impulse.htm"
    },
    "physics_apply_torque": {
      "name": "physics_apply_torque",
      "parameters": [
        {
          "parameter": "torque",
          "description": "The torque (in Newton metres) to be applied"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_left)\n    {\n        physics_apply_torque(-100);\n    }\n```\nThe code above will rotate the instance to the anti-clockwise (to the left) with a torque of 100Nm when the left arrow key is pressed.\n",
      "description": "When we talk about torque, we are generally talking about the tendency of a force or impulse to rotate an instance about its centre of mass, but in GameMaker Studio 2 you can also apply torque independently to an instance, causing it to rotate in a given direction. How much torque you apply to get the desired rotation all depends on the size and density of the fixture you assign to your instance, as both these properties go towards defining its mass, which defines its inertia, which affects torque! The general rule of thumb is that if an instance has a lot of inertia, you will need a lot of torque to get it to start rotating. It should also be noted that other factors like gravity and collisions can also affect the torque of an instance. Here is an image to help explain:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Forces/physics_apply_torque.htm"
    },
    "physics_draw_debug": {
      "name": "physics_draw_debug",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndraw_set_colour(c_red); physics_draw_debug();\n  \n```\nThe code above will draw a representation of the physical properties associated with that instance using the colour red.\n",
      "description": "When creating a physics system in GameMaker Studio 2, it is often important to have a visual representation of what is actually happening with an instance. This can be achieved by using `physics_draw_debug()`, which draws a schematic outline\n    of the physical properties associated with the instance running the code. Here is an image of how it looks:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_draw_debug.htm"
    },
    "physics_fixture_add_point": {
      "name": "physics_fixture_add_point",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "xpos",
          "description": "the x position of the point (*relative to the fixture origin* for polygon shapes)"
        },
        {
          "parameter": "ypos",
          "description": "the y position of the point (*relative to the fixture origin* for polygon shapes)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_polygon_shape(fix_Ship); physics_fixture_add_point(fix_Ship, 0,0); physics_fixture_add_point(fix_Ship, -40, 100); physics_fixture_add_point(fix_Ship, 40, 100);\n```\nThe code above will apply a polygon shape to the fixture indexed in the variable \"fix_Ship\" and then defines three points to create a triangular shape.\n",
      "description": "This function defines the points of a polygon which has previously been set to the fixture using either `physics_fixture_set_polygon_shape()` or it can be used to add points to a chain of edge\n    fixtures using the function `physics_fixture_set_chain_shape()`. For a polygon shape, the points are relative to the origin of the fixture, with the 0,0 position of the x/y axis being the centre,\n    and the subsequent coordinates being calculated as usual in GameMaker Studio 2 with down/right being +x,+y and up/left being -x,-y. Here is an illustration to help you visualise this process:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_add_point.htm"
    },
    "physics_fixture_bind": {
      "name": "physics_fixture_bind",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the fixture that is to be bound"
        },
        {
          "parameter": "target",
          "description": "the target instance that is to receive the fixture (can be an instance id, an object id, *other*, or *all*)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar fix, inst; fix = physics_fixture_create(); physics_fixture_set_circle_shape(fix, 16); physics_fixture_set_density(fix, 1.0); inst = instance_create_layer(x, y, \"Instances\", genericBodyObject); my_fix = physics_fixture_bind(fix,\n    inst); physics_fixture_delete(fix);\n  \n```\nThe code above will create a fixture and assign its index to the variable \"fix\". It then defines the shape and density of the fixture before binding it to the instance that was created with the index for the **bound** fixture stored in\n    the variable \"my_fix\". Finally, the fixture is deleted to prevent memory leaks as it is no longer needed.\n",
      "description": "Once we have defined our fixture it has to be bound to an instance. This means that its *properties* are transferred to the selected instance, **not the actual fixture itself**, so that one fixture can be bound to multiple instances if all are\n    to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special\n    keywords *other* and *all*. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer\n    necessary and the instances with that fixtures properties will not be affected and maintain those properties.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_bind.htm"
    },
    "physics_fixture_bind_ext": {
      "name": "physics_fixture_bind_ext",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the fixture that is to be bound"
        },
        {
          "parameter": "target",
          "description": "the target instance that is to receive the fixture (can be an instance id, an object id, *other*, or *all*)"
        },
        {
          "parameter": "xoffset",
          "description": "the offset along the x-axis"
        },
        {
          "parameter": "yoffset",
          "description": "the offset along the y-axis"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar fix, inst; fix = physics_fixture_create(); physics_fixture_set_circle_shape(fix, 16); physics_fixture_set_density(fix, 1.0); inst = instance_create_layer(x, y, \"Instances\", genericBodyObject); my_fix = physics_fixture_bind_ext(fix,\n    inst, sprite_width / 2, -(sprite_height / 2)); physics_fixture_delete(fix);\n  \n```\nThe code above will create a fixture and assign its index to the variable \"fix\". It then defines the shape and density of the fixture before binding it to the instance at an offset based on the width and height of the sprite. The index for\n    the **bound** fixture is stored in the variable \"my_fix\". Finally, the fixture itself is deleted to prevent memory leaks as it is no longer needed.\n",
      "description": "Once we have defined our fixture it has to be bound to an instance. This means that its *properties* are transferred to the selected instance, **not the actual fixture itself**, so that one fixture can be bound to multiple instances if all are\n    to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special\n    keywords *other* and *all*. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer\n    necessary and the instances with that fixtures properties will not be affected and maintain those properties.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_bind_ext.htm"
    },
    "physics_fixture_create": {
      "name": "physics_fixture_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nfix_Ball = physics_fixture_create();\n```\nThe code above will create a fixture and store its index in the variable \"fix_Ball\".\n",
      "description": "The first step in setting up a fixture is creating it with this function. The returning index should be stored in a variable to be used in all further functions that are used to define and use this fixture.",
      "returns": "Index of the fixture",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_create.htm"
    },
    "physics_fixture_delete": {
      "name": "physics_fixture_delete",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the fixture that is to be deleted from memory"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar fix, inst; fix = physics_fixture_create(); physics_fixture_set_circle_shape(fix, 16); physics_fixture_set_density(fix, 1.0); inst = instance_create_layer(x, y, \"Instances\", genericBodyObject); physics_fixture_bind(fix,\n    inst); physics_fixture_delete(fix);\n  \n```\nThe code above will create a fixture and assign its index to the variable \"fix\". It then defines the shape and density of the fixture before binding it to the instance that was created with the index stored in the variable \"inst\".\n    Finally, the fixture is deleted to prevent memory leaks as it is no longer needed.\n",
      "description": "Since once a fixture has been bound to an instance that instance maintains the fixtures properties, we can remove the fixture from memory with this function, particularly if we no longer plan to use it again. Please note that failure to remove fixtures\n    after they are no longer needed may cause a memory leak which will slow down and eventually crash your game, so you should take care to clean up properly after defining and binding fixtures.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_delete.htm"
    },
    "physics_fixture_set_angular_damping": {
      "name": "physics_fixture_set_angular_damping",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "damping",
          "description": "the angular damping of the fixture, usually between 0 and 1"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_angular_damping(fix_Ball, 0.1);\n```\nThe code above will set the angular damping of the fixture indexed in \"fix_ball\" to 0.1.\n",
      "description": "If you think about any rotating object in the \"real world\", unless it has a motor or is in space, it slows down over time due to the influence of external forces (like friction with the air around it). We can use the function `physics_fixture_set_angular_damping()`    in GameMaker Studio 2 to simulate this effect and reduce the velocity of rotation of instances in the physics world, as, without it, any rotating instance would continue to rotate infinitely. Damping parameters should be between 0 and infinity,\n    with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 1, but you can use any non-negative value if required.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_angular_damping.htm"
    },
    "physics_fixture_set_awake": {
      "name": "physics_fixture_set_awake",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the id of the bound fixture"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar fric = physics_get_friction(fix_id); physics_set_friction(fix_id, fric + 0.1);\n```\nThe code above gets the current friction value for the bound physics properties of the instance and then sets them to a different value.\n",
      "description": "When you bind a fixture to an instance using `physics_fixture_bind()` this returns an \"id\" for the bound fixture. You can use this id to get the friction value of the bound fixture (*not*    the \"base\" fixture) at any time using this function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_get_friction.htm"
    },
    "physics_fixture_set_box_shape": {
      "name": "physics_fixture_set_box_shape",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "halfWidth",
          "description": "the *half* width of the box"
        },
        {
          "parameter": "halfHeight",
          "description": "the *half* height of the box"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_box_shape(fix_Border, room_width/2, 10);\n```\nThe code above will apply a box shape to the fixture indexed in the variable \"fix_Border\" with a width of the room and a height of 20 pixels.\n",
      "description": "This function defines a box shape for your fixture. It takes the *half* width and height as the physics world uses this value far more than whole width/height values to determine things like collisions.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_box_shape.htm"
    },
    "physics_fixture_set_chain_shape": {
      "name": "physics_fixture_set_chain_shape",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "The index of the fixture"
        },
        {
          "parameter": "loop",
          "description": "Whether to close the chain (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar xx = -100;\n    var yy = room_height / 2;\n    var fix = physics_fixture_create(); physics_fixture_set_chain_shape(fix, false);\n    for (var i = 0; i < 10; i++;)\n    {\n        physics_fixture_add_point(fix, xx, yy);\n        xx += 50 + random(150);\n        yy = (room_height / 2) - 250 + irandom(500);\n    }\n    physics_fixture_bind(fix, id);\n```\nThe above code will create a line of \"edge\" fixtures with a variety of heights over the length of the room.\n",
      "description": "This function defines a \"chain\" fixture shape. A chain fixture is comprised of a number of points, which are then connected together using edge shapes to join them. The function itself takes the index (ID) of the fixture and can tell the fixture to loop or not. Setting this to `true` will connect the last point to the first point with an edge, while setting it to `false` will not. Note that this function on prepares the fixture to accept the points required to make the chain, and these should be added after calling this function using `physics_fixture_add_point()`, much as you would when building a polygon fixture.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_chain_shape.htm"
    },
    "physics_fixture_set_circle_shape": {
      "name": "physics_fixture_set_circle_shape",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "rad",
          "description": "radius of the circle"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_circle_shape(fix_Ball, sprite_get_width(spr_Ball) / 2);\n```\nThe code above will apply a circle shape to the fixture indexed in the variable \"fix_Ball\" with a radius the same as that of the width of the sprite \"spr_Ball\" divided by 2.\n",
      "description": "This function defines a circle shape for your fixture with a radius defined by the argument \"rad\".",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_circle_shape.htm"
    },
    "physics_fixture_set_collision_group": {
      "name": "physics_fixture_set_collision_group",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the fixture that is to be bound"
        },
        {
          "parameter": "group",
          "description": "the group that this fixture is assigned to (either a positive value, 0, or a negative value)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_collision_group(fix_Wheel, -1);\n```\nThe code above will set the fixture indexed in the variable \"fix_Wheel\" to be part of the group \"-1\".\n",
      "description": "Once you have created your fixture you can define it as being part of a collision group. This means that you can tell instances with that fixture to *always* collide or *never* collide with other instance that have fixtures bound to them with\n    the same collision group. The values that can be assigned are based on positive or negative numbers, with 0 being the default value (meaning that the instance with this fixture setting is ignored unless a collision event is created for it). Here is\n    an image to help explain:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_collision_group.htm"
    },
    "physics_fixture_set_density": {
      "name": "physics_fixture_set_density",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "density",
          "description": "the density of the fixture calculated as kg/m²"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_density(fix_Balloon, 0.1);\n```\nThe code above will set the density of the fixture indexed in \"fix_Ballon\" to 0.1.\n",
      "description": "The density of something is defined as its mass per unit volume, which basically means *how much mass is crammed into the space it takes up in the world*. So, a balloon would have a low density as it has little mass that occupies a large space,\n    while a lead bar would have a high density as it has a great mass, yet occupies little space.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_density.htm"
    },
    "physics_fixture_set_edge_shape": {
      "name": "physics_fixture_set_edge_shape",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "local_x1",
          "description": "start x position for the edge"
        },
        {
          "parameter": "local_y1",
          "description": "start y position for the edge"
        },
        {
          "parameter": "local_x2",
          "description": "end x position for the edge"
        },
        {
          "parameter": "local_y2",
          "description": "end y position for the edge"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar xx = 0;\n    var y1 = room_height - 100;\n    var y2 = room_height - 50 - irandom(100);\n    for (var i = 0; i < 10; i++;)\n    {\n        var fix = physics_fixture_create();\n        physics_fixture_set_edge_shape(fix, xx, y1, xx + 50, y2);\n        physics_fixture_bind(fix, id);\n        physics_fixture_delete(fix);\n        xx += 50;\n        y1 = y2;\n        y2 = room_height - 50 - irandom(100);\n    }\n```\nThe above code will create a line of \"edge\" fixtures with a variety of heights over the length of the room.\n",
      "description": "This function defines an \"edge\" fixture shape. An edge shape is simply a line that will generate a collision when other fixtures over lap it, and can be very useful for generating (for example) terrain, or for creating borders around a room. The position of the edge is defined using *local* space, ie: the x/y position of the instance is considered (0,0), so this should be taken into consideration when creating them (in the code example below, the instance would have been placed at (0,0) in the room to avoid complications).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_edge_shape.htm"
    },
    "physics_fixture_set_friction": {
      "name": "physics_fixture_set_friction",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "friction",
          "description": "the friction of the fixture"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_friction(fix_Brick, 0.1);\n```\nThe code above will set the friction of the fixture indexed in \"fix_brick\" to 0.1.\n",
      "description": "Friction is the force that resists the relative motion of material elements sliding against each other, which in the GameMaker Studio 2 physics world, translates as the loss of momentum caused by the collision of two instances with fixtures bound\n    to them. So, when two instances collide, their motion is affected by this value, with a high friction causing a larger loss of momentum than a lower value. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative\n    value if required.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_friction.htm"
    },
    "physics_fixture_set_kinematic": {
      "name": "physics_fixture_set_kinematic",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_kinematic(fix_Cloud);\n```\nThe code above will indicate that the fixture indexed in \"fix_Cloud\" should be marked as kinematic.\n",
      "description": "There will be certain instances in a physics based game which you want to move around but do not wish to be acted on by forces such as gravity, nor forces incurred by collisions with dynamic objects (think of moving platforms in a platform game, for\n    example). For such objects simply setting the density of a fixture to 0 will mean that the physics will assume that the object is intended to be static. However, should you set the `phy_speed_x`,\n    `phy_speed_y` or `phy_angular_velocity` variables for an instance that has had such a fixture bound to it, it will be converted\n    into a kinematic object and begin movement. Change the instance from static to kinematic mid-simulation can be expensive in terms of processing (depending on the state of the instances in the physics world) and therefore it is recommended to set the\n    fixture to be kinematic using this function prior to binding it to an instance, so that it will be unaffected by collisions and forces (such as gravity) but may move with constant linear and/or angular velocity.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_kinematic.htm"
    },
    "physics_fixture_set_linear_damping": {
      "name": "physics_fixture_set_linear_damping",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "damping",
          "description": "the damping of the fixture, usually between 0 and 1"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_linear_damping(fix_Ball, 0.1);\n```\nThe code above will set the linear damping of the fixture indexed in \"fix_ball\" to 0.1.\n",
      "description": "Damping is used to reduce the physics world velocity of instances, and differs from friction in that friction only occurs when two instances with fixtures are in contact. Damping is also much cheaper to simulate than friction, but please note that damping\n    is not a replacement for friction; the two effects can, and should, be used together. Here is an image to illustrate damping:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_linear_damping.htm"
    },
    "physics_fixture_set_polygon_shape": {
      "name": "physics_fixture_set_polygon_shape",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_polygon_shape(fix_Ship); physics_fixture_add_point(fix_Ship, 0,0); physics_fixture_add_point(fix_Ship, -40, 100); physics_fixture_add_point(fix_Ship, 40, 100);\n```\nThe code above will apply a polygon shape to the fixture indexed in the variable \"fix_Ship\" and then defines three points to create a triangular shape.\n",
      "description": "This function sets a polygon shape for your fixture, but you will need to use `physics_fixture_add_point()` to actually define the shape of this polygon relative to the origin of the fixture. The polygon\n    is closed when the fixture is bound to an instance. You should note too that this function *must* be called before defining any points, and you must also have at least three points defined for your polygon before binding it to an instance or\n    you will get an error.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_polygon_shape.htm"
    },
    "physics_fixture_set_restitution": {
      "name": "physics_fixture_set_restitution",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "The index of the fixture"
        },
        {
          "parameter": "restitution",
          "description": "The restitution of the fixture (usually between 0 and 1)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_restitution(fix_Ball, 0.9);\n```\nThe code above will set the restitution of the fixture indexed in \"fix_ball\" to 0.9.\n",
      "description": "In physics, restitution is defined as \"the return of an object or system to its original state after elastic deformation\", but as the fixtures in the GameMaker Studio 2 are really rigid bodies and cannot be deformed, restitution is\n    really a way of saying how \"bouncy\" the fixture is. This setting will affect how much an object \"bounces\" when it collides with other objects and is co-dependent on other forces that act on the instance like gravity and friction,\n    and is usually a value between 0 and 1 (higher values can be used but may give unpredictable results). Here is an illustration of how it works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_restitution.htm"
    },
    "physics_fixture_set_sensor": {
      "name": "physics_fixture_set_sensor",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the index of the fixture"
        },
        {
          "parameter": "state",
          "description": "whether a fixture is a sensor (true) or not (false)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_fixture_set_sensor(fix_Cloud, 1);\n```\nThe code above will turn the sensor state of the fixture indexed in \"fix_Cloud\" to true.\n",
      "description": "Some times you will want your game to detect and recognise when two instances with fixtures collide, but not have any physical reaction to the collision. This can be done by converting the fixture into a sensor, which basically means that they will\n    generate a collision event but with no physical response so that you can use these instances as \"triggers\" for other events to happen in the game room. Any fixture can be flagged as a sensor, and it makes no difference if the instance it\n    is bound to is static or in movement.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_fixture_set_sensor.htm"
    },
    "physics_get_density": {
      "name": "physics_get_density",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the id of the bound fixture"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar density = physics_get_density(fix_id); physics_set_density(fix_id, density - 0.1);\n```\nThe code above gets the current density value for the bound physics properties of the instance and then sets them to a different value.\n",
      "description": "When you bind a fixture to an instance using `physics_fixture_bind()` this returns an \"id\" for the bound fixture. You can use this id to get the density value of the bound fixture (*not* the\n    \"base\" fixture) at any time using this function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_get_density.htm"
    },
    "physics_get_restitution": {
      "name": "physics_get_restitution",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the id of the bound fixture"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar rest = physics_get_restitution(fix_id); physics_set_restitution(fix_id, rest * 2);\n```\nThe code above gets the current restitution value for the bound physics properties of the instance and then sets them to a different value.\n",
      "description": "When you bind a fixture to an instance using `physics_fixture_bind()` this returns an \"id\" for the bound fixture. You can use this id to get the restitution (the \"bounciness\" property)\n    value of the bound fixture, *not* the \"base\" fixture, at any time using this function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_get_restitution.htm"
    },
    "physics_joint_delete": {
      "name": "physics_joint_delete",
      "parameters": [
        {
          "parameter": "joint",
          "description": "The index of the joint that you wish to delete"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar reactionForceX, reactionForceY, reactionForce;\n    if shipJoint\n    {\n        reactionForceX = physics_joint_get_value(shipJoint, phy_joint_reaction_force_x);\n        reactionForceY = physics_joint_get_value(shipJoint, phy_joint_reaction_force_x);\n        reactionForce = sqrt((reactionForceX + reactionForceX) + (reactionForceY + reactionForceY));\n        if reactionForce > 2\n        {\n            physics_joint_delete(shipJoint);\n            shipJoint = -1;\n        }\n    }\n```\nThe above code checks to see if the variable \"shipJoint\" holds a joint index and if it does, it then calculates the force being applied to that joint using the two constants. Finally, if the total force is greater than 2, the joint is deleted.\n",
      "description": "Once two instances with physics representations have been bound by a joint, this can be deleted again at any time. Normally this will happen automatically when one of the two instances is destroyed, or when the room ends, but there are times when you may wish to do this manually. In those cases you would use this function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_delete.htm"
    },
    "physics_joint_distance_create": {
      "name": "physics_joint_distance_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "w_anchor1_x",
          "description": "The first x coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor1_y",
          "description": "The first y coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor2_x",
          "description": "The second x coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor2_y",
          "description": "the second y coordinate for the joint, within the game world"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nvar mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id=instance_create_layer(x+300, y, \"Instances\", obj_Rudder); physics_fixture_bind(mainFixture,\n    id); physics_fixture_bind(mainFixture, o_id); physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0); physics_fixture_delete(mainFixture);\n  \n```\nThe above code creates and defines a new fixture and then creates an instance of \"obj_Rudder\". The fixture is then assigned to the instance that is running the code as well as the newly created one and a joint is created between them. Finally\n    the fixture is deleted as it is no longer needed.\n",
      "description": "One of the simplest joint is a distance joint which says that the distance between two points on two instances must be constant. When you specify a distance joint the two instances should already be created and have a fixture assigned, then you define\n    the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance between these points imply the length of the distance constrain. The image below shows\n    how this works:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_distance_create.htm"
    },
    "physics_joint_enable_motor": {
      "name": "physics_joint_enable_motor",
      "parameters": [
        {
          "parameter": "joint",
          "description": "The joint that you wish to enable or disable the motor on"
        },
        {
          "parameter": "motor",
          "description": "Whether you wish to turn the motor on (true) or off (false)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar t_fix = physics_fixture_create(); physics_fixture_set_circle_shape(t_fix, sprite_get_width(sprite_index) / 2); var o_id=instance_create_layer(x+300, y, \"Instances\", obj_Door); physics_fixture_bind(t_fix, id); physics_fixture_bind(t_fix,\n    o_id); perma_joint = physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 10, 2, 0, 0); physics_joint_enable(perma_joint, 1); physics_fixture_delete(t_fix);\n  \n```\nThe above code creates and defines a new fixture and then creates an instance of \"obj_Door\", binding the created fixture to the two instances. They are then joined by a revolute joint with no motor and the angles limited to a +/- 90 degree\n    swing, and we store the joint index in the variable \"perma_joint\". We then switch the motor on using this variable, before finally deleting the fixture from memory as it is no longer needed.\n",
      "description": "When you have a joint with a motor ( [prismatic](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_prismatic_create.htm) or  [revolute](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_revolute_create.htm)), you may want to be able to switch the motor on or off depending on variables and conditions\n    within the game. For this, you need to have stored the index of the joint previously in a variable and then you can switch the motor on or off by using this function and setting the \"motor\" argument to `true` or `false`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_enable_motor.htm"
    },
    "physics_joint_friction_create": {
      "name": "physics_joint_friction_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "anchor_x",
          "description": "The x coordinate for the joint, within the game world"
        },
        {
          "parameter": "anchor_y",
          "description": "The y coordinate for the joint, within the game world"
        },
        {
          "parameter": "max_force",
          "description": "The maximum frictional force that will be applied"
        },
        {
          "parameter": "max_torque",
          "description": "The maximum rotational force that will be applied"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nvar mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id = instance_create_layer(x+300, y, \"Instances\", obj_Rudder); physics_fixture_bind(mainFixture,\n    id); physics_fixture_bind(mainFixture, o_id); physics_joint_friction_create(id, o_id, x, y, 10, 0.3, true); physics_fixture_delete(mainFixture);\n  \n```\nThe above code will create a fixture then bind it to two instances, before connecting them both using a friction joint.\n",
      "description": "The friction joint is a bit different to all other joints in the physics simulation in that the connection created will not constrain the instances position or movement, but rather its speed and rotation. This works by taking the maximum input values\n    for force and torque and applying those to the second fixture to bring the speed and angular momentum down to the same values as that of the first instance. So, if you have a stationary instance and a moving instance then connect them with a friction\n    joint, the moving instance will gradually slow down until it too is stationary. If both instances were moving then the second instance will have its movement speed modified to match that of the first instance.",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_friction_create.htm"
    },
    "physics_joint_gear_create": {
      "name": "physics_joint_gear_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "joint_1",
          "description": "A previously defined **revolute** joint"
        },
        {
          "parameter": "joint_2",
          "description": "A previously defined revolute *or* prismatic joint"
        },
        {
          "parameter": "ratio",
          "description": "Set the velocity ratio between the two joints"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar t_fix, g_fix, inst1, inst2, inst3, r_joint, p_joint; g_fix = physics_fixture_create(); physics_fixture_set_box_shape(g_fix, 40, 10); t_fix = physics_fixture_create(); physics_fixture_set_circle_shape(t_fix, 10); physics_fixture_set_density(t_fix,\n    0.5); inst1 = instance_create_layer(60, room_height - 30, \"Background\", obj_Ground); inst2 = instance_create_layer(40, room_height - 300, \"Instances\", obj_Cog); inst3 = instance_create_layer(150, room_height - 300,\n    \"Instances\", obj_Barrel); physics_fixture_bind(g_fix, inst1); physics_fixture_bind(t_fix, inst2); physics_fixture_bind(t_fix, inst3); r_joint = physics_create_revolute_joint(inst1, inst2, 40, room_height - 300, -80, 80,\n    1, 10, 0.5, 1, 0); p_joint = physics_create_prismatic_joint(inst1, inst3, 150, room_height - 300, 0, 1, -10, 10, true, 0, 0, 0, 0); physics_create_gear_joint(inst2, inst3, r_joint, p_joint, 0.5);\n```\nThe above code creates and defines two fixture and then creates three instances, one \"obj_Ground\" and two others, \"obj_Cog\" and \"obj_Barrel\". The fixtures are then bound to these instances and two joints are created. A\n    revolute joint between the ground and the cog, and a prismatic joint between the ground and the barrel. Finally a gear joint is created between the cog and barrel instances using the previously defined revolute and prismatic joints.\n",
      "description": "If you want to create a sophisticated mechanical contraption you might want to use gears. In principle you can create gears in GameMaker Studio 2 by using compounding instances to model gear teeth, but this is not very efficient and might be\n    tedious to author! Thankfully there is a simpler method, and that is to use a *gear joint*. To make one you need to have previously defined your fixtures and created the two basic joints that are going to comprise your gear - these **must**    be made up of one  [revolute joint](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_revolute_create.htm) and either a  [prismatic joint](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_prismatic_create.htm) or another *revolute joint*. The image below shows how a gear would typically be created\n    in a game:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_gear_create.htm"
    },
    "physics_joint_get_value": {
      "name": "physics_joint_get_value",
      "parameters": [
        {
          "parameter": "joint",
          "description": "The index of the joint that you wish to test"
        },
        {
          "parameter": "value",
          "description": "The constant for the joint property that you wish to test"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif shipJoint\n    {\n        var reactionForceX = physics_joint_get_value(shipJoint, phy_joint_reaction_force_x);\n        var reactionForceY = physics_joint_get_value(shipJoint, phy_joint_reaction_force_y);\n        var reactionForce = point_distance(0, 0, reactionForceX, reactionForceY);\n        if reactionForce > 2\n        {\n            physics_joint_delete(shipJoint);\n            shipJoint = -1;\n        }\n    }\n```\nThe above code checks to see if the variable \"shipJoint\" holds a joint index and if it does, it then calculates the force being applied to that joint using the two constants. Finally, if the total force is greater than 2, the joint is deleted.\n",
      "description": "By using a series of predefined constants, you can ask GameMaker Studio 2 to tell you a number of things about the state of any given joint. This is very useful as it gives you the ability to delete joints or change an instances behaviour depending on whatever your needs are at the time. There are a number of constants that can be used in this function and they can be found here:  [Physics Joint Constants](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm), but be aware that complex calculations are done when you call these, so they should be used with care and only when necessary and note that *many are unique to a specific type of joint*.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_get_value.htm"
    },
    "physics_joint_prismatic_create": {
      "name": "physics_joint_prismatic_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "w_anchor_x",
          "description": "The x coordinate where the joint is anchored, within the game world"
        },
        {
          "parameter": "w_anchor_y",
          "description": "The y coordinate where the joint is anchored, within the game world"
        },
        {
          "parameter": "w_axis_x",
          "description": "The x component of the axis vector"
        },
        {
          "parameter": "w_axis_y",
          "description": "The y component of the axis vector"
        },
        {
          "parameter": "lower_trans_limit",
          "description": "The lower permitted limit for the joint movement"
        },
        {
          "parameter": "upper_trans_limit",
          "description": "The lower permitted limit for the joint movement"
        },
        {
          "parameter": "limit",
          "description": "Whether to limit the movement of the joint (true) or not (false)"
        },
        {
          "parameter": "max_motor_force",
          "description": "Sets the maximum movement speed for the motor"
        },
        {
          "parameter": "motor_speed",
          "description": "This is the speed at which the motor should move"
        },
        {
          "parameter": "motor",
          "description": "Whether the motor should be active (true) or not (false)"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 13,
      "isVariadic": false,
      "example": "```\nvar mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id = instance_create_layer(x+25, y, \"Instances\", obj_Piston); physics_fixture_bind(mainFixture,\n    id); physics_fixture_bind(mainFixture, o_id); physics_joint_prismatic_create(id, o_id, x, y, 0, 10, 0, 0, 0, 5, 0, 1, 1); physics_fixture_delete(mainFixture);\n  \n```\nThe above code creates and defines a new fixture and then creates an instance of \"obj_Piston\", binding the created fixture to the two new objects. They are then joined by a prismatic joint with the anchor position at the same x/y coordinates\n    of the first instance and an axis formed by the vector of the x/y position and the axis x/y (in this case 0,10, which is \"down\"). There are no limits placed on the amount of movement along this axis, but we have added a motor with 0 speed\n    and a maximum force of 5 to simulate joint friction.\n",
      "description": "Like a revolute joint, the prismatic joint only has one degree of freedom, but with this joint it is directional relative to an axis rather than rotational and actually prevents any form of rotation. Here is an image to help you visualise how this works:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_prismatic_create.htm"
    },
    "physics_joint_pulley_create": {
      "name": "physics_joint_pulley_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "w_anchor1_x",
          "description": "The x coordinate where the first part of joint is anchored, within the game world"
        },
        {
          "parameter": "w_anchor1_y",
          "description": "The y coordinate where the first part of the joint is anchored, within the game world"
        },
        {
          "parameter": "w_anchor2_x",
          "description": "The x coordinate where the second part of the joint is anchored, within the game world"
        },
        {
          "parameter": "w_anchor2_y",
          "description": "The y coordinate where the second part of the joint is anchored, within the game world"
        },
        {
          "parameter": "l_anchor1_x",
          "description": "The local x coordinate where joint 1 is anchored to the first instance"
        },
        {
          "parameter": "l_anchor1_y",
          "description": "The local y coordinate where joint 1 is anchored to the first instance"
        },
        {
          "parameter": "l_anchor2_x",
          "description": "The local x coordinate where joint 2 is anchored to the second instance"
        },
        {
          "parameter": "l_anchor2_y",
          "description": "The local y coordinate where joint 2 is anchored to the second instance"
        },
        {
          "parameter": "ratio",
          "description": "Set the velocity ratio between two instances"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 12,
      "isVariadic": false,
      "example": "```\nvar t_fix, inst1, inst2; t_fix = physics_fixture_create(); physics_fixture_set_circle_shape(t_fix, 20); inst1 = instance_create_layer(150, room_height - 90, \"Instances\", obj_Block); inst2 = instance_create_layer(300, room_height\n    - 90, \"Instances\", obj_block); physics_fixture_bind(t_fix, inst1); physics_fixture_bind(t_fix, inst2); physics_joint_pulley_create(inst1, inst2, 150, room_height - 140, 300, room_height - 140, 0, 0, 0, 0, 2, 0); physics_fixture_delete(t_fix);\n  \n```\nThe above code creates and defines a new fixture, creates two instances of \"obj_Block\", and then binds this fixture two them. It then goes on to define a pulley joint between these instance, with no offset for the joints, a ratio of 2:1 (meaning\n    that inst2 will move faster). No collisions occur between the two instances in the pulley.\n",
      "description": "The pulley joint is used to connect two instances within the physics world in such a way that moving one will directly influence the movement of the other. These joints are first anchored in the world space at two points, each one connected to an instance\n    at its center of mass. This can be changed by setting the local anchor x/y coordinates relative to the origin of the instance, meaning that the actual connection from the instance to the physics world anchor point can be offset somewhere other than\n    its origin. The following image illustrates this:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_pulley_create.htm"
    },
    "physics_joint_revolute_create": {
      "name": "physics_joint_revolute_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "w_anchor_x",
          "description": "The x coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor_y",
          "description": "The y coordinate for the joint, within the game world"
        },
        {
          "parameter": "ang_min_limit",
          "description": "The lower permitted limit for the joint angle"
        },
        {
          "parameter": "ang_max_limit",
          "description": "The upper permitted limit for the joint angle"
        },
        {
          "parameter": "ang_limit",
          "description": "Whether the to limit the angle of the joint (true) or not (false)"
        },
        {
          "parameter": "max_motor_torque",
          "description": "Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)"
        },
        {
          "parameter": "motor_speed",
          "description": "This is the speed at which the motor should rotate"
        },
        {
          "parameter": "motor",
          "description": "Whether the motor should be active (true) or not (false)"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 11,
      "isVariadic": false,
      "example": "```\nvar mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id=instance_create_layer(x+25, y, \"Instances\", obj_Door); physics_fixture_bind(mainFixture,\n    id); physics_fixture_bind(mainFixture, o_id); physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 0, 0, 0, 0); physics_fixture_delete(mainFixture);\n  \n```\nThe above code creates and defines a new fixture and then creates an instance of \"obj_Door\", binding the created fixture to the two new objects. They are then joined by a revolute joint with no motor and the angles limited to a +/- 90 degree\n    swing. Finally the fixture is deleted as it is no longer needed.\n",
      "description": "A revolute joint forces two bodies to share a common anchor point (often called a hinge point) and the joint has a single degree of freedom - the relative rotation of the two bodies around this point. To specify a revolute you need to provide two instances\n    and a single anchor point in the room, as you can see in the image provided:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_revolute_create.htm"
    },
    "physics_joint_rope_create": {
      "name": "physics_joint_rope_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "w_anchor1_x",
          "description": "The first x coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor1_y",
          "description": "The first y coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor2_x",
          "description": "The second x coordinate for the joint, within the game world"
        },
        {
          "parameter": "w_anchor2_y",
          "description": "the second y coordinate for the joint, within the game world"
        },
        {
          "parameter": "maxlength",
          "description": "The maximum length that the joint can \"stretch\""
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nvar mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id=instance_create_layer(x+300, y, \"Instances\", obj_Rudder); physics_fixture_bind(mainFixture,\n    id); physics_fixture_bind(mainFixture, o_id); physics_joint_rope_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 300, 0); physics_fixture_delete(mainFixture);\n  \n```\nThe above code creates and defines a new fixture and then creates an instance of \"obj_Rudder\". The fixture is then assigned to the instance that is running the code as well as the newly created one and a rope joint is created between them.\n    Finally the fixture is deleted as it is no longer needed.\n",
      "description": "A rope joint is one which is used to join two instances that you want to keep a constant distance apart, no matter what other forces are acting on it. With a distance joint, you can get \"joint stretching\" where the two fixtures will separate\n    and behave strangely should too much stress be put on the joint, however the rope joint does not do this and will not stretch any further than the maximum defined length. When you create a rope joint the two instances should already be created and\n    have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance and the maxlength argument sets the maximum\n    length constraint on the joint. The image below shows how this works:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_rope_create.htm"
    },
    "physics_joint_set_value": {
      "name": "physics_joint_set_value",
      "parameters": [
        {
          "parameter": "joint",
          "description": "The index of the joint that you wish to change"
        },
        {
          "parameter": "field",
          "description": "The constant for the joint property that you wish to change"
        },
        {
          "parameter": "value",
          "description": "The new value for the joint property"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif physics_joint_get_value(revJoint, phy_joint_max_motor_torque) < 2\n    {\n        physics_joint_set_value(revJoint, phy_joint_max_motor_torque, 2);\n    }\n```\nThe above code checks to see if the joints maximum motor torque is set to less than 2 and if it is it then sets it to 2.\n",
      "description": "Certain joint properties can be changed and set even after the creation of the joint. There are a number of constants that can be used in this function and they can be found here:  [Physics Joint Constants](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_set_value.htm"
    },
    "physics_joint_weld_create": {
      "name": "physics_joint_weld_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "anchor_x",
          "description": "The x coordinate for the joint, within the game world"
        },
        {
          "parameter": "anchor_y",
          "description": "The y coordinate for the joint, within the game world"
        },
        {
          "parameter": "ref_angle",
          "description": "The joint angle to maintain"
        },
        {
          "parameter": "freq_hz",
          "description": "This is the oscillation frequency for the joint, in hertz"
        },
        {
          "parameter": "damping_ratio",
          "description": "This damping ratio for the joint"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nvar i, fix, o_id, p_id;\n    p_id = noone;\n    o_id = noone;\n    fix = physics_fixture_create();\n    physics_fixture_set_box_shape(fix, 64, 32);\n    for (i = 0; i < 5; i++;)\n    {\n        o_id = instance_create_layer(x + (128 * i), y, \"Instances\", obj_BridgePart);\n        physics_fixture_bind(fix, o_id);\n        if i > 0 && i < 4\n        {\n            physics_joint_weld_create(p_id, o_id, x + (128 * i) - 64, y, 0, 10, 12, true);\n        }\n        p_id = o_id;\n    }\n    physics-fixture_delete(fix);\n```\nThe above code will create a fixture, then use a loop to create a number of instances, binding the fixture to each new instance and then joining them all together using a weld joint. Finally the fixture is deleted from memory.\n",
      "description": "The weld joint is designed to attach two fixtures together in a strong, yet flexible bond. The weld joint will permit flexing between the two joined fixtures but without the stretching associated with, for example, a distance joint, and will always try to \"spring\" back to the reference angle when put under any stress or load. You define the point in the room where the joint should be created, as well as the angle that you wish the joint to try and maintain at all times, as shown in the image below:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_weld_create.htm"
    },
    "physics_joint_wheel_create": {
      "name": "physics_joint_wheel_create",
      "parameters": [
        {
          "parameter": "inst1",
          "description": "The first instance to connect with the joint"
        },
        {
          "parameter": "inst2",
          "description": "The second instance to connect with the joint"
        },
        {
          "parameter": "anchor_x",
          "description": "The x coordinate where the joint is anchored, within the game world"
        },
        {
          "parameter": "anchor_y",
          "description": "The y coordinate where the joint is anchored, within the game world"
        },
        {
          "parameter": "axis_x",
          "description": "The x component of the wheel axis vector"
        },
        {
          "parameter": "axis_y",
          "description": "The y component of the wheel axis vector"
        },
        {
          "parameter": "enableMotor",
          "description": "Whether the motor should be active (true) or not (false)"
        },
        {
          "parameter": "max_motor_torque",
          "description": "Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)"
        },
        {
          "parameter": "motor_speed",
          "description": "This is the speed at which the motor should rotate"
        },
        {
          "parameter": "freq_hz",
          "description": "This is the oscillation frequency for the joint, in hertz"
        },
        {
          "parameter": "damping_ratio",
          "description": "This damping ratio for the joint"
        },
        {
          "parameter": "col",
          "description": "Whether the two instances can collide (true) or not (false)"
        }
      ],
      "requiredParameters": 12,
      "isVariadic": false,
      "example": "```\nvar mainFixture = physics_fixture_create(); physics_fixture_set_box_shape(mainFixture, 128, 32); var wheelFixture = physics_fixture_create(); physics_fixture_set_circle_shape(wheelFixture, 32); var o_id = instance_create_layer(x+25,\n    y + 100, \"Instances\", obj_Wheel); physics_fixture_bind(mainFixture, id); physics_fixture_bind(wheelFixture, o_id); physics_joint_wheel_create(id, o_id, o_id.x, o_id.y, 0, 1, true, 10, 1, 15, 6, false); physics_fixture_delete(mainFixture);\n     physics_fixture_delete(wheelFixture);\n  \n```\nThe above code creates and defines two new fixtures. These are then bound to the calling instance and a new instance that is created before having a wheel joint applied to connect them, after which the fixtures are deleted from memory.\n",
      "description": "A wheel joint simply combines a piston and a revolute joint, like a wheel mounted on the shock absorber of a car. You specify the anchor point for the joint well as the two physics enabled instances to joint, and the first instance will act as the \"body\"\n    for the joint, while the second will be the \"wheel\", and be permitted to move freely around the joint axis. You can also set an axis vector, which is the imaginary line along which the joint will act as a \"spring\" permitting the\n    wheel to bounce up and down along it as it encounters obstacles (much like the piston joint). The following image illustrates this:",
      "returns": "Integer (index of the joint)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_wheel_create.htm"
    },
    "physics_mass_properties": {
      "name": "physics_mass_properties",
      "parameters": [
        {
          "parameter": "mass",
          "description": "The new mass that you want the fixture to have."
        },
        {
          "parameter": "local_center_x",
          "description": "The local x coordinate of the new center of mass."
        },
        {
          "parameter": "local_center_y",
          "description": "The local y coordinate of the new center of mass."
        },
        {
          "parameter": "inertia",
          "description": "Set the inertia for the fixture."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nphysics_mass_properties(phy_mass, -10, -10, phy_inertia);\n```\nThe above code will shift the center of mass of the physical body to the left.\n",
      "description": "This function can be used to set custom mass and inertia values for a physics enabled instance. Normally the mass, center of mass, and inertia for an instance is calculated using a combination the surface area of the bound fixtures and their density.\n    However in very special occasions you may need to offset the center of mass or change the inertia and that is when you would use this function. Bear in mind that the mass is calculated in real world weight (ie:kilograms) and you should always try\n    and keep values realistic for what you are modelling. So if your physics object is meant to represent a person, their mass would be approximately 70 kilos.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/physics_mass_properties.htm"
    },
    "physics_particle_count": {
      "name": "physics_particle_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (physics_particle_count() < physics_particle_get_max_count())\n    {\n        physics_particle_create(0, x, y, 0, 0, c_white, 1, 1)\n    }\n```\nThe above code will check to see if there are less than the maximum number of permitted particles in the room, and if so create one more.\n",
      "description": "This function will return the number of particles that are active in a physics enabled room.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_count.htm"
    },
    "physics_particle_create": {
      "name": "physics_particle_create",
      "parameters": [
        {
          "parameter": "flags",
          "description": "The flags to set on the particle."
        },
        {
          "parameter": "x",
          "description": "The x position to create the particle at."
        },
        {
          "parameter": "y",
          "description": "The y position to create the particle at."
        },
        {
          "parameter": "xv",
          "description": "The initial horizontal velocity."
        },
        {
          "parameter": "yv",
          "description": "The initial vertical velocity."
        },
        {
          "parameter": "col",
          "description": "The base colour to use for the particle."
        },
        {
          "parameter": "alpha",
          "description": "The base alpha to use for the particle."
        },
        {
          "parameter": "category",
          "description": "The user defined category to which the particle belongs."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var x_vel = lengthdir_x(5, image_angle); var y_vel = lengthdir_y(5, image_angle); var p = physics_particle_create(flags, x, y, x_vel, y_vel,\n    c_white, 1, 1);\n```\nThe above code will create variables to set the particle type and it's initial velocity, then use these to create a particle at the instances x/y position.\n",
      "description": "With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The \"flags\" are the return value of a combination of the following **constants**:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_create.htm"
    },
    "physics_particle_delete": {
      "name": "physics_particle_delete",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index (ID) of the particle to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_delete(part);\n```\nThe above code will delete the particle with the ID stored in the variable \"part\" from the simulation.\n",
      "description": "With this function you can delete (remove) a particle from the physics simulation in the current room. The function takes the unique ID of the particle to delete, as returned by the function `physics_particle_create()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete.htm"
    },
    "physics_particle_delete_region_box": {
      "name": "physics_particle_delete_region_box",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position of the center of the area to delete."
        },
        {
          "parameter": "y",
          "description": "The y position of the center of the area to delete."
        },
        {
          "parameter": "halfWidth",
          "description": "The *half* width of the rectangle."
        },
        {
          "parameter": "halfHeight",
          "description": "The *half* height of the rectangle."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nphysics_particle_delete_region_box(mouse_x, mouse_y, 32, 32);\n```\nThe above code will delete all particles found in a rectangular area around the mouse position.\n",
      "description": "With this function you can delete (remove) all the particles that fall within the bounds of the defined rectangular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as\n    well as the half width and height of the rectangle (in pixels) which defines the area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete_region_box.htm"
    },
    "physics_particle_delete_region_circle": {
      "name": "physics_particle_delete_region_circle",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position of the center of the area to delete."
        },
        {
          "parameter": "y",
          "description": "The y position of the center of the area to delete."
        },
        {
          "parameter": "radius",
          "description": "The radius (in pixels) of the circular area to delete."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nphysics_particle_delete_region_circle(mouse_x, mouse_y, 32);\n```\nThe above code will delete all particles found in a circular area around the mouse position.\n",
      "description": "With this function you can delete (remove) all the particles that fall within the bounds of the defined circular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well\n    as the radius (in pixels) which defines the circular area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete_region_circle.htm"
    },
    "physics_particle_delete_region_poly": {
      "name": "physics_particle_delete_region_poly",
      "parameters": [
        {
          "parameter": "pointList",
          "description": "A ds_list of points to use to create the polygon."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar list = ds_list_create(p_list);\n    for (var i = 0; i < 5; i ++;)\n    {\n        ds_list_add(p_list, mx[i]);\n        ds_list_add(p_list, my[i]);\n    }\n    physics_particle_delete_region_poly(p_list);\n    ds_list_destroy(p_list);\n```\nThe above code will delete all particles found in the polygonal area defined by the points added to the `DS List`.\n",
      "description": "With this function you can delete (remove) all the particles that fall within the bounds of the defined polygonal area from the physics simulation in the current room. The function takes a (previously created) `ds_list()` containing the x/y position of each point of the polygon, with the even numbered positions in the list being the x coordinates, and odd numbered positions the y coordinates, ie: for a triangle, your list would have six entries, with entry 0, 2, and 4 being the x coordinates and 1, 3, and 5 being the y coordinates. The polygon will then be used to delete all the particles that fall within the defined area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_delete_region_poly.htm"
    },
    "physics_particle_draw": {
      "name": "physics_particle_draw",
      "parameters": [
        {
          "parameter": "typemask",
          "description": "The mask to compare the particles flags with."
        },
        {
          "parameter": "category",
          "description": "The user defined category to draw (use 0 to draw all categories)."
        },
        {
          "parameter": "sprite",
          "description": "The sprite to use for each particle."
        },
        {
          "parameter": "subimg",
          "description": "The `image_index` of the sprite to draw."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; physics_particle_draw(flags, 2, sprBlob, 0);\n```\nThe above code will draw a sprite for all the particles in the user defined category \"2\" which have the same flags as the given mask.\n",
      "description": "This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the\n    flags when creating the particle (see the function `physics_particle_create()` for an example), ie: using the  [bitwise ](https://manual.yoyogames.com/Additional_Information/Bitwise_Operators.htm)*or*    \"|\" to mask off the appropriate bits for each flag.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_draw.htm"
    },
    "physics_particle_draw_ext": {
      "name": "physics_particle_draw_ext",
      "parameters": [
        {
          "parameter": "typemask",
          "description": "The mask to compare the particles flags with."
        },
        {
          "parameter": "category",
          "description": "The user defined category to draw (use 0 to draw all categories)."
        },
        {
          "parameter": "sprite",
          "description": "The sprite to use for each particle."
        },
        {
          "parameter": "subimg",
          "description": "The `image_index` of the sprite to draw."
        },
        {
          "parameter": "xscale",
          "description": "The scale factor to apply to the sprite along the x axis."
        },
        {
          "parameter": "yscale",
          "description": "The scale factor to apply to the sprite along the y axis."
        },
        {
          "parameter": "ang",
          "description": "The angle (in degrees) to draw the sprite at."
        },
        {
          "parameter": "col",
          "description": "The colour to blend with the sprite (default is `c_white`)."
        },
        {
          "parameter": "alpha",
          "description": "The alpha value to use when drawing (0 - 1)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; physics_particle_draw_ext(flags, 2, sprBlob, 0, 2, 2, 0, c_white, 0.5);\n```\nThe above code will draw a sprite for all the particles in the user defined category \"2\" which have the same flags as the given mask, scaled by 2 along both axis and with an alpha of 0.5.\n",
      "description": "This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the\n    flags when creating the particles (see the functions `physics_particle_create()` for an example), ie: using the  [bitwise ](https://manual.yoyogames.com/Additional_Information/Bitwise_Operators.htm)*or*    \"|\" to mask off the appropriate bits for each flag.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_draw_ext.htm"
    },
    "physics_particle_get_damping": {
      "name": "physics_particle_get_damping",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (physics_particle_get_damping() < 1)\n    {\n        physics_particle_set_damping(physics_particle_get_damping() + 0.01);\n    }\n```\nThe above code will check the current damping value for all particles in the system and if it is less than 1 then it will add 0.01 to it.\n",
      "description": "With this function you can find out what the current linear damping is for particles in the physics simulation (you can set this value using `physics_particle_set_damping()`).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_damping.htm"
    },
    "physics_particle_get_data": {
      "name": "physics_particle_get_data",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The (previously created) buffer to use to store the data."
        },
        {
          "parameter": "flags",
          "description": "The flags to use to extract data about specific particle types."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar count = physics_particle_count();\n    var flags = phy_particle_data_flag_position | phy_particle_data_flag_colour;\n    if (count > 0)\n    {\n        var buffer = buffer_create(count * 12, buffer_grow, 4);\n        physics_particle_get_data(buffer, flags);\n        for (var n = 0; n < count; n++;)\n        {\n            var xx = buffer_read(buffer, buffer_f32);\n            var yy = buffer_read(buffer, buffer_f32);\n            var argb = buffer_read(buffer, buffer_u32);\n            var alpha = (argb >> 24) & 255;\n            draw_sprite_ext(sprBlob, 0, xx, yy, 1, 1, 0, c_green, alpha);\n        }\n        buffer_delete(buffer);\n    }\n```\nThe above code gets the number of particles and creates a variable with the data flags to check, then checks to see if there are any particles in the room. If there are, a buffer is created and then filled with the particle data, which is checked and used to draw a sprite at the particle position.\n",
      "description": "This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function `buffer_create()`, and should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the  [bitwise ](https://manual.yoyogames.com/Additional_Information/Bitwise_Operators.htm)*or* \"|\" to create a single flag value to get the desired information.",
      "returns": "Buffer data",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data.htm"
    },
    "physics_particle_get_data_particle": {
      "name": "physics_particle_get_data_particle",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index (ID) of the particle to get the data from."
        },
        {
          "parameter": "buffer",
          "description": "The (previously created) buffer to use to store the data."
        },
        {
          "parameter": "flags",
          "description": "The flags to use to extract data about specific particle types."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar part = physics_particle_create(flags, x, y, x_vel, y_vel, c_white, 1, 1) var flags = phy_particle_data_flag_position | phy_particle_data_flag_velocity; var buffer = buffer_create(16, buffer_grow, 4); physics_particle_get_data_particle(part,\n    buffer, flags); px = buffer_read(buffer, buffer_f32); py = buffer_read(buffer, buffer_f32); pvelx = buffer_read(buffer, buffer_f32); pvely = buffer_read(buffer, buffer_f32); buffer_delete(buffer);\n  \n```\nThe above code gets the position and velocity of the particle indexed by the variable \"part\" and stores the data in a number of variables.\n",
      "description": "This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function `physics_particle_create()`,\n    and the buffer used must have been created previously using the function `buffer_create()`. It should be of the \"grow\" type, with the size being approximately that of the expected return\n    data. The flags themselves are set using the constants given below, and you would use the bitwise *or* \"|\" to create a single flag value to get the desired information.",
      "returns": "Buffer data",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm"
    },
    "physics_particle_get_density": {
      "name": "physics_particle_get_density",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (physics_particle_get_density() < 1)\n    {\n        physics_particle_set_density(physics_particle_get_density() + 0.01);\n    }\n```\nThe above code will check the current density value for all particles in the system and if it is less than 1 then it will add 0.01 to it.\n",
      "description": "With this function you can find out what the current density is for particles in the physics simulation (you can set this value using `physics_particle_set_density()`).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_density.htm"
    },
    "physics_particle_get_gravity_scale": {
      "name": "physics_particle_get_gravity_scale",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nphysics_particle_set_gravity_scale(physics_particle_get_gravity_scale() + 0.1);\n```\nThe above code will set the gravity scale.\n",
      "description": "With this function you can find out what the current gravity scale factor is for particles in the physics simulation (you can set this value using `physics_particle_set_gravity_scale()`).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_gravity_scale.htm"
    },
    "physics_particle_get_group_flags": {
      "name": "physics_particle_get_group_flags",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar flags = physics_particle_get_group_flags(group, flags);\n    if flags != phy_particle_group_flag_solid | phy_particle_group_flag_rigid\n    {\n        flags = phy_particle_group_flag_solid | phy_particle_group_flag_rigid;\n        physics_particle_set_group_flags(group, flags);\n    }\n```\nThe above code will create a variable to store the flags value and then use it to check the flags of the group indexed in the variable \"group\". If they are not the same, the group is set with these flags.\n",
      "description": "With this function you can retrieve the group flags for a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`, and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_group_flags.htm"
    },
    "physics_particle_get_max_count": {
      "name": "physics_particle_get_max_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (physics_particle_count() < physics_particle_get_max_count())\n    {\n        physics_particle_create(0, x, y, 0, 0, c_white, 1, 1)\n    }\n```\nThe above code will check to see if there are less than the maximum number of permitted particles in the room, and if so create one more.\n",
      "description": "With this function you can find out what the current cap value is on particles permitted in the physics simulation (you can set this value using `physics_particle_set_max_count()`).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_max_count.htm"
    },
    "physics_particle_get_radius": {
      "name": "physics_particle_get_radius",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (physics_particle_get_radius() < 32)\n    {\n        physics_particle_set_radius(physics_particle_get_radius() + 1);\n    }\n```\nThe above code will check the current radius of the particles in the simulation and if it is less than 32, then it will increase their size by 1.\n",
      "description": "With this function you can find out what the current radius (in pixels) is for particles in the physics simulation (you can set this value using `physics_particle_set_radius()`).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_radius.htm"
    },
    "physics_particle_group_add_point": {
      "name": "physics_particle_group_add_point",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position in the room for the point."
        },
        {
          "parameter": "y",
          "description": "The y position in the room for the point."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid; physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);    physics_particle_group_polygon();\n     physics_particle_group_add_point(200, 200); physics_particle_group_add_point(300, 300); physics_particle_group_add_point(100, 300); mLastGroup = physics_particle_group_end();\n```\nThe above code stores the flags for the particle type and the particle group properties in variables then uses these to create a polygon particle group of three sides at the mouse position.\n",
      "description": "This function sets a point in the room to define the shape of a polygon which will be used to create a group of soft body particles. You must have previously signaled to GameMaker Studio 2 that you are going define a polygon shape using the function\n     [physics_particle_group_polygon()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_polygon.htm) and then use this function to define the individual points of the polygon. You must give at least three points when defining the polygon shape, but can give up to eight,\n    and the function will permit the definition of concave polygons. However, if you generate a polygon with any cavities, the points within will be ignored and a convex shape will be created for the particle group.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_add_point.htm"
    },
    "physics_particle_group_begin": {
      "name": "physics_particle_group_begin",
      "parameters": [
        {
          "parameter": "flags",
          "description": "The flags to set on the particle."
        },
        {
          "parameter": "groupflags",
          "description": "The group flags to set on the particle (see **Description** below)."
        },
        {
          "parameter": "x",
          "description": "The x position to create the particle group at."
        },
        {
          "parameter": "y",
          "description": "The y position to create the particle group at."
        },
        {
          "parameter": "ang",
          "description": "The angle (in degrees) to rotate the group to on create."
        },
        {
          "parameter": "xv",
          "description": "The initial horizontal velocity."
        },
        {
          "parameter": "yv",
          "description": "The initial vertical velocity."
        },
        {
          "parameter": "ang_velocity",
          "description": "The initial angular velocity."
        },
        {
          "parameter": "col",
          "description": "The base colour to use for the particle group."
        },
        {
          "parameter": "alpha",
          "description": "The base alpha to use for the particle group."
        },
        {
          "parameter": "strength",
          "description": "Set the cohesion strength between particles in the group."
        },
        {
          "parameter": "category",
          "description": "The user defined category to which the group belongs."
        }
      ],
      "requiredParameters": 12,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid | phy_particle_group_flag_rigid; physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y,\n    0, 0, 0, 0, c_white, 1, 1, 2); physics_particle_group_circle(100);\n     mLastGroup = physics_particle_group_end();\n```\nThe above code stores the flags for the particle type and the particle group properties in variables then uses these to create a circular particle group with a 100px radius at the mouse position.\n",
      "description": "With this function you can create a group of particles in a room. A group of particles is one where the particles necessary to create a specific form are created all at once as a group, permitting you to create simulated soft-bodies with various properties\n    set by the flags used. The \"flags\" are the return value of a combination of the **particle constants** (see the function `physics_particle_create()` for details of these), while the \"groupFlags\"\n    are a combination of the following **group constants** (or 0 for no flags):",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_begin.htm"
    },
    "physics_particle_group_box": {
      "name": "physics_particle_group_box",
      "parameters": [
        {
          "parameter": "halfWidth",
          "description": "The *half* width of the box."
        },
        {
          "parameter": "halfHeight",
          "description": "The *half* height of the box."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid; physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);    physics_particle_group_box(100, 100); mLastGroup = physics_particle_group_end();\n```\nThe above code stores the flags for the particle type and the particle group properties in variables then uses these to create a rectangular particle group with with sides of 200px at the mouse position.\n",
      "description": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function `physics_particle_group_begin()`, and then you would\n    use this function to set the approximate half width and half height of the group in pixels - approximate because the exact width and height will depend on the size of the base particles, as defined by the `physics_particle_set_radius()`    function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape. Finally you need to call `physics_particle_group_end()` to create the group\n    of particles in the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_box.htm"
    },
    "physics_particle_group_circle": {
      "name": "physics_particle_group_circle",
      "parameters": [
        {
          "parameter": "radius",
          "description": "The radius (in pixels) of the circle to create."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid; physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);    physics_particle_group_circle(100);\n     mLastGroup = physics_particle_group_end();\n```\nThe above code stores the flags for the particle type and the particle group properties in variables then uses these to create a circular particle group with a 100px radius at the mouse position.\n",
      "description": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function `physics_particle_group_begin()`, and then you would\n    use this function to set the approximate radius of the group in pixels - approximate because the exact radius will depend on the size of the base particles, as defined by the `physics_particle_set_radius()`    function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape. Finally you need to call `physics_particle_group_end()` to create the group\n    of particles in the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_circle.htm"
    },
    "physics_particle_group_count": {
      "name": "physics_particle_group_count",
      "parameters": [
        {
          "parameter": "group",
          "description": "The group index (ID) of the particle group to count."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ngp_num = physics_particle_group_count(group1);\n```\nThe above code will get the number of particles used to make the group indexed in the variable \"group1\" and store the value in a variable.\n",
      "description": "This function will return the number of particles that are active in a single group. The group index (ID) is the value that is returned when you call the function `physics_particle_group_end()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_count.htm"
    },
    "physics_particle_group_delete": {
      "name": "physics_particle_group_delete",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index (ID) of the particle group to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_group_delete(gp1);\n```\nThe above code will delete all the particles that comprise the group with the ID stored in the variable \"gp1\" from the simulation.\n",
      "description": "With this function you can delete (remove) a particle group from the physics simulation in the current room. The function takes the unique group ID of the group to delete, as returned by the function `physics_particle_group_end()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_delete.htm"
    },
    "physics_particle_group_end": {
      "name": "physics_particle_group_end",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid; physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);    physics_particle_group_circle(100);\n     mLastGroup = physics_particle_group_end();\n```\nThe above code stores the flags for the particle type and the particle group properties in variables then uses these to create a circular particle group with a 100px radius at the mouse position. The ID for the group that has been created is stored\n    in the variable \"mLastGroup\".\n",
      "description": "This function is used to end the definition of a particle group shape. Calling this function will create the particles within the given shape parameters, and also return an ID value which can be stored and used in further functions for interactions\n    with the particle group.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_end.htm"
    },
    "physics_particle_group_get_ang_vel": {
      "name": "physics_particle_group_get_ang_vel",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nang_v = physics_particle_group_get_ang_vel(group1);\n```\nThe above code will get the angular velocity of the particle group indexed in the variable \"group1\" and store it in a variable.\n",
      "description": "With this function you can retrieve the angular velocity of a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_ang_vel.htm"
    },
    "physics_particle_group_get_angle": {
      "name": "physics_particle_group_get_angle",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nang = physics_particle_group_get_angle(group1);\n```\nThe above code will get the angle of the particle group indexed in the variable \"group1\" and store it in a variable.\n",
      "description": "With this function you can retrieve the rotation (angle) in the room of a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_angle.htm"
    },
    "physics_particle_group_get_centre_x": {
      "name": "physics_particle_group_get_centre_x",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nxx = physics_particle_group_get_centre_x(group1); yy = physics_particle_group_get_centre_y(group1);\n```\nThe above code will get the x and y position for the center of mass of the particle group indexed in the variable \"group1\" and store them in variables.\n",
      "description": "With this function you can retrieve the x component of the center of mass of an entire group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_centre_x.htm"
    },
    "physics_particle_group_get_centre_y": {
      "name": "physics_particle_group_get_centre_y",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nxx = physics_particle_group_get_centre_x(group1); yy = physics_particle_group_get_centre_y(group1);\n```\nThe above code will get the x and y position for the center of mass of the particle group indexed in the variable \"group1\" and store them in variables.\n",
      "description": "With this function you can retrieve the y component of the center of mass of an entire group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_centre_y.htm"
    },
    "physics_particle_group_get_data": {
      "name": "physics_particle_group_get_data",
      "parameters": [
        {
          "parameter": "group",
          "description": "The group index (ID) of the particle group to get the data from."
        },
        {
          "parameter": "buffer",
          "description": "The (previously created) buffer to use to store the data."
        },
        {
          "parameter": "flags",
          "description": "The flags to use to extract data about specific particle types."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar count = physics_particle_group_count(gp);\n    var flags = phy_particle_data_flag_position | phy_particle_data_flag_colour;\n    if (count > 0)\n    {\n        var buffer = buffer_create(count * 12, buffer_grow, 4);\n        physics_particle_group_get_data(gp, buffer, flags);\n        for (var n = 0; n < count; n++;)\n        {\n            var xx = buffer_read(buffer, buffer_f32);\n            var yy = buffer_read(buffer, buffer_f32);\n            var argb = buffer_read(buffer, buffer_u32);\n            var alpha = (argb >> 24) & 255;\n            draw_sprite_ext(sprBlob, 0, xx, yy, 1, 1, 0, c_green, alpha);\n        }\n        buffer_delete(buffer);\n    }\n```\nThe above code gets the position and velocity of the every particle in the group indexed by the variable \"gp\", stores the buffer data in a number of variables, and then uses that to draw a sprite at the position of each particle in the group.\n",
      "description": "This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function `physics_particle_group_end()`, and the buffer used must have been created previously using the function `buffer_create()`. It should be of the \"grow\" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the  [bitwise ](https://manual.yoyogames.com/Additional_Information/Bitwise_Operators.htm)*or* \"|\" to create a single flag value to get the desired information.",
      "returns": "Buffer data",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_data.htm"
    },
    "physics_particle_group_get_inertia": {
      "name": "physics_particle_group_get_inertia",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ni = physics_particle_group_get_inertia(group1);\n```\nThe above code will get the inertia of the particle group indexed in the variable \"group1\" and store it in a variable.\n",
      "description": "With this function you can retrieve the inertia of an entire group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_inertia.htm"
    },
    "physics_particle_group_get_vel_x": {
      "name": "physics_particle_group_get_vel_x",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvx = physics_particle_group_get_vel_x(group1); vy = physics_particle_group_get_vel_y(group1);\n```\nThe above code will get the horizontal and vertical velocity of the particle group indexed in the variable \"group1\" and store them in variables.\n",
      "description": "With this function you can retrieve the horizontal velocity of a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_vel_x.htm"
    },
    "physics_particle_group_get_vel_y": {
      "name": "physics_particle_group_get_vel_y",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvx = physics_particle_group_get_vel_x(group1); vy = physics_particle_group_get_vel_y(group1);\n```\nThe above code will get the horizontal and vertical velocity of the particle group indexed in the variable \"group1\" and store them in variables.\n",
      "description": "With this function you can retrieve the vertical velocity of a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_vel_y.htm"
    },
    "physics_particle_group_get_x": {
      "name": "physics_particle_group_get_x",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nxx = physics_particle_group_get_x(group1); yy = physics_particle_group_get_y(group1);\n```\nThe above code will get the x and y positions of the particle group indexed in the variable \"group1\" and store them in variables.\n",
      "description": "With this function you can retrieve the x position in the room of a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_x.htm"
    },
    "physics_particle_group_get_y": {
      "name": "physics_particle_group_get_y",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to get."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nxx = physics_particle_group_get_x(group1); yy = physics_particle_group_get_y(group1);\n```\nThe above code will get the x and y positions of the particle group indexed in the variable \"group1\" and store them in variables.\n",
      "description": "With this function you can retrieve the y position in the room of a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    and the function will return a value which is the combined value of the currently set flags.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_get_y.htm"
    },
    "physics_particle_group_join": {
      "name": "physics_particle_group_join",
      "parameters": [
        {
          "parameter": "to",
          "description": "The first particle group to join."
        },
        {
          "parameter": "from",
          "description": "The second particle group to join."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid; physics_particle_group_begin(flags, groupflags, mouse_x- 45, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);    physics_particle_group_circle(50);\n     var g1 = physics_particle_group_end(); physics_particle_group_begin(flags, groupflags, mouse_x + 45, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2); physics_particle_group_circle(50);\n     var g2 = physics_particle_group_end(); physics_particle_group_join(g1, g2);\n```\nThe above code creates two circular particle groups and joins them together.\n",
      "description": "With this function you can join two particle groups together, and the joined groups will then behave as if they were both part of a single entity. The groups should have been created with over-lapping edges, as, if they are not already touching, they\n    will not be joined. The function takes the unique group IDs of the groups to join, as returned by the function `physics_particle_group_end()`, and you can use the function any number of times for\n    a single group to join various soft bodies together.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_join.htm"
    },
    "physics_particle_group_polygon": {
      "name": "physics_particle_group_polygon",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; var groupflags = phy_particle_group_flag_solid; physics_particle_group_begin(flags, groupflags, mouse_x, mouse_y, 0, 0, 0, 0, c_white, 1, 1, 2);    physics_particle_group_polygon();\n     physics_particle_group_add_point(200, 200); physics_particle_group_add_point(300, 300); physics_particle_group_add_point(100, 300); mLastGroup = physics_particle_group_end();\n```\nThe above code stores the flags for the particle type and the particle group properties in variables then uses these to create a polygon particle group of three sides at the mouse position.\n",
      "description": "This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function `physics_particle_group_begin()`, and then you would\n    use this function to tell GameMaker Studio 2 that you are going to add in the approximate points that will be used to define the polygon shape - approximate because the exact shape will depend on the size of the base particles, as defined by\n    the `physics_particle_set_radius()` function, as the physics simulation tries to \"fit\" as many of the particles as possible into the defined shape.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_polygon.htm"
    },
    "physics_particle_set_category_flags": {
      "name": "physics_particle_set_category_flags",
      "parameters": [
        {
          "parameter": "category",
          "description": "The particle category to set."
        },
        {
          "parameter": "flags",
          "description": "The flags to set on the particle."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; physics_particle_set_category_flags(1, flags);\n```\nThe above code will create a variable to store the flags value and then use it to set the flags of all particles created with the category value of 1.\n",
      "description": "With this function you can change the particle flags for a category of particles. The `category` value is that which you defined in the function `physics_particle_create()` or (if you created a\n    group) `physics_particle_group_begin()`, while the flags are the return value of a combination of the following **constants**:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_category_flags.htm"
    },
    "physics_particle_set_damping": {
      "name": "physics_particle_set_damping",
      "parameters": [
        {
          "parameter": "damping",
          "description": "The linear damping to be applied to the particle fixture."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_set_radius(15); physics_particle_set_density(0.5);\n     physics_particle_set_damping(1);\n     physics_particle_set_gravity_scale(1);\n  \n```\nThe above code will set the base properties for all particles in the simulation.\n",
      "description": "With this function you can set the linear damping of particles in the simulation. Damping is used to reduce the physics simulation velocity of instances over time, much like air resistance in the real world. This function is *global* in scope,\n    in that it will change the damping not just for new particles created after the change, but also for those already present in the simulation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_damping.htm"
    },
    "physics_particle_set_density": {
      "name": "physics_particle_set_density",
      "parameters": [
        {
          "parameter": "density",
          "description": "The density of the particle fixture."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_set_radius(15); physics_particle_set_density(0.5);\n     physics_particle_set_damping(1);\n     physics_particle_set_gravity_scale(1);\n  \n```\nThe above code will set the base properties for all particles in the simulation.\n",
      "description": "With this function you can set the density of the particles in a physics simulation. Setting the density of the particle will have a direct impact on how much inertia it has as well as how it reacts to collisions, so if you make a small particle with\n    a high density it will have a very large mass, but if you define a large particle with a low density it will have a much smaller mass. This function is *global* in scope, in that it will change the density not just for new particles created after\n    the change, but also for those already present in the simulation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_density.htm"
    },
    "physics_particle_set_flags": {
      "name": "physics_particle_set_flags",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the particle."
        },
        {
          "parameter": "flags",
          "description": "The flags to set on the particle."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_flag_water | phy_particle_flag_viscous | phy_particle_flag_tensile; physics_particle_set_flags(p, flags);\n```\nThe above code will create a variable to store the flags value and then use it to set the flags on a previously created particle with the index stored in the variable \"p\".\n",
      "description": "With this function you can change the particle flags for an individual particle. The `index` value is the particle ID as returned by the function `physics_particle_create()`, while the flags are\n    the return value of a combination of the following **constants**:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm"
    },
    "physics_particle_set_gravity_scale": {
      "name": "physics_particle_set_gravity_scale",
      "parameters": [
        {
          "parameter": "scale",
          "description": "The scaling factor to be applied to gravity for all particles."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_set_radius(15); physics_particle_set_density(0.5);\n     physics_particle_set_damping(1);\n     physics_particle_set_gravity_scale(1);\n  \n```\nThe above code will set the base properties for all particles in the simulation.\n",
      "description": "With this function you can set the gravity scale factor for particles in the physics simulation. The function is designed to help prevent instability in the physics simulation, especially when using very small particles which may behave unpredictably\n    (i.e. break conservation of momentum) in scenarios such as explosions. Slowing these particles down by reducing gravity scale can stabilize their behaviour. This function is *global* in scope, in that it will change the gravity scale not just\n    for new particles created after the change, but also for those already present in the simulation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_gravity_scale.htm"
    },
    "physics_particle_set_group_flags": {
      "name": "physics_particle_set_group_flags",
      "parameters": [
        {
          "parameter": "group",
          "description": "The particle group to set."
        },
        {
          "parameter": "flags",
          "description": "The flags to set on the particle."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar flags = phy_particle_group_flag_solid | phy_particle_group_flag_rigid; physics_particle_set_group_flags(group, flags);\n```\nThe above code will create a variable to store the flags value and then use it to set the flags of all particles created in the group indexed by the variable \"group\".\n",
      "description": "With this function you can change the group flags for a group of particles. The `group` value is that which was returned when you created the group of particles using the function `physics_particle_group_end()`,\n    while the flags are the return value of a combination of the following **constants**:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_group_flags.htm"
    },
    "physics_particle_set_max_count": {
      "name": "physics_particle_set_max_count",
      "parameters": [
        {
          "parameter": "count",
          "description": "The maximum number of particles to permit."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_set_max_count(500);\n```\nThe above code will set the particle cap of the physics simulation to 500.\n",
      "description": "This function will set the total permitted number of particles in a physics simulation. If you set this value to 0, then there is no cap the particles created, and setting it to any other value will stop any further particles being created when the\n    total number of particles is equal to the value. Note that the *minimum* number of particles you can create in a simulation is 128, so setting this value any lower will have no effect (unless set to 0).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_max_count.htm"
    },
    "physics_particle_set_radius": {
      "name": "physics_particle_set_radius",
      "parameters": [
        {
          "parameter": "radius",
          "description": "The radius (in pixels) of the particle fixture."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_particle_set_radius(15); physics_particle_set_density(0.5);\n     physics_particle_set_damping(1);\n     physics_particle_set_gravity_scale(1);\n  \n```\nThe above code will set the base properties for all particles in the simulation.\n",
      "description": "With this function you can set the radius (in pixels) for the particles in a physics simulation. This function is *global* in scope, in that it will change the radius not just for new particles created after the change, but also for those already\n    present in the simulation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_radius.htm"
    },
    "physics_pause_enable": {
      "name": "physics_pause_enable",
      "parameters": [
        {
          "parameter": "flag",
          "description": "This can be set to `true` to pause the simulation, or `false` to start it again."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif os_is_paused()\n    {\n        physics_pause_enable(true);\n        instance_deactivate_all(true);\n        instance_create_layer(x, y, \"Controllers\", obj_PauseMenu);\n    }\n```\nThe code above checks to see if the OS has been paused and if it has then it pauses the physics world, deactivates everything except itself, and then creates a pause menu instance.\n",
      "description": "Normally for a physics simulation to work, it must be continuous and cannot be stopped and started, or have instances suddenly moved from one place to another in the room. However, there are moments when you *need* to pause the simulation as (for example) the device os has paused, and so you would use this function. It pauses the simulation if the flag is set to `true` and no further physics calculations will be done until the flag is set to `false` again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_pause_enable.htm"
    },
    "physics_remove_fixture": {
      "name": "physics_remove_fixture",
      "parameters": [
        {
          "parameter": "id",
          "description": "The ID of the instance to remove the fixture from"
        },
        {
          "parameter": "fixture",
          "description": "The ID of the fixture that is to be removed from the instance"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_remove_fixture(id, my_fix);\n```\nThe code above will remove the fixture with the \"id\" stored in the variable \"my_fix\" from the instance.\n",
      "description": "This function removes (or \"un-binds\") a fixture from an instance or instances. It requires the unique \"id\" of the bound fixture (as returned by the function `physics_fixture_bind()` and\n    it will remove all the currently defined physics properties for the instance, permitting you to redefine a new fixture and bind that to the instance. In this way you can change the instances physical properties without having to destroy and re-create\n    it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_remove_fixture.htm"
    },
    "physics_set_density": {
      "name": "physics_set_density",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the id of the bound fixture"
        },
        {
          "parameter": "density",
          "description": "the new density value to apply"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar density = physics_get_density(fix_id); physics_set_density(fix_id, density - 0.1);\n```\nThe code above gets the current density value for the bound physics properties of the instance and then sets them to a different value.\n",
      "description": "When you bind a fixture to an instance using `physics_fixture_bind()` this returns an \"id\" for the bound fixture. You can use this id to set the density value of the bound fixture, *not* the\n    \"base\" fixture, at any time using this function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_set_density.htm"
    },
    "physics_set_friction": {
      "name": "physics_set_friction",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the id of the bound fixture"
        },
        {
          "parameter": "friction",
          "description": "the new friction value to apply"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar fric = physics_get_friction(fix_id); physics_set_friction(fix_id, fric + 0.1);\n```\nThe code above gets the current friction value for the bound physics properties of the instance and then sets them to a different value.\n",
      "description": "When you bind a fixture to an instance using `physics_fixture_bind()` this returns an \"id\" for the bound fixture. You can use this id to set the friction value of the bound fixture, *not*    the \"base\" fixture, at any time using this function. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative value if required.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_set_friction.htm"
    },
    "physics_set_restitution": {
      "name": "physics_set_restitution",
      "parameters": [
        {
          "parameter": "fixture",
          "description": "the id of the bound fixture"
        },
        {
          "parameter": "restitution",
          "description": "the new restitution value to apply"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar rest = physics_get_restitution(fix_id); physics_set_restitution(fix_id, rest * 2);\n```\nThe code above gets the current restitution value for the bound physics properties of the instance and then sets them to a different value.\n",
      "description": "When you bind a fixture to an instance using `physics_fixture_bind()` this returns an \"id\" for the bound fixture. You can use this id to set the restitution value of the bound fixture, *not*    the \"base\" fixture, at any time using this function. Restitution is usually set as a value between 0 and 1, but you can use higher values if required, although the results may be unpredictable.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Fixtures/physics_set_restitution.htm"
    },
    "physics_test_overlap": {
      "name": "physics_test_overlap",
      "parameters": [
        {
          "parameter": "xpos",
          "description": "The x position in the room to check"
        },
        {
          "parameter": "ypos",
          "description": "The y position in the room to check"
        },
        {
          "parameter": "angle",
          "description": "The angle to check (of the calling instance)"
        },
        {
          "parameter": "obj",
          "description": "The object to check for"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif physics_test_overlap(x+20, y-35, 0, obj_Bomb)\n    {\n        alarm[0] = room_speed;\n        ignited = true;\n    }\n```\nThe above code will check a position for a physics fixture overlap, and if there is one, it sets a variable and an alarm.\n",
      "description": "This function can be used to check and see if a physical body (ie: the fixture of an instance) overlaps, or *will* overlap, when rotated and placed at a given position in the room. the \"angle\" argument is the angle of rotation that the calling instance has (or will have) at the position to be checked, and the \"obj\" argument can be either a single instance id, and object index or the *keywords* **all** or **other**.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/physics_test_overlap.htm"
    },
    "physics_world_create": {
      "name": "physics_world_create",
      "parameters": [
        {
          "parameter": "pixeltometrescale",
          "description": "defines the ratio of pixels on screen to metres in the real world. A ratio of 32:1 will be specified as 1/32 (or 0.03125)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_world_create(1/32);\n```\nThe above code will create a physics world in the current room with a scale ratio of 32 pixels being the equivalent of 1 metre.\n",
      "description": "Even if you have defined the physics for your objects, without a world to place them in they will default to the traditional GameMaker Studio 2 collision system, so you need this function to create the physics system for the specified room either\n    in an object event, or the creation code of the room itself (it can also be defined without using code in the room editor). This function will associate a physics \"world\" with the room and all instances created in the room will behave using\n    the physics that has been defined for them and the world itself.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_create.htm"
    },
    "physics_world_draw_debug": {
      "name": "physics_world_draw_debug",
      "parameters": [
        {
          "parameter": "flag",
          "description": "The flag value for showing different debug features"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nflag = phy_debug_render_aabb | phy_debug_render_collision_pairs | phy_debug_render_obb; physics_world_draw_debug(flag);\n  \n```\nThe code above will draw all of the absolute bounding boxes, the relative bounding boxes as well as the fixtures in collision within the current physics system.\n",
      "description": "This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example\n    a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going\n    on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various \"flag\" constants:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_draw_debug.htm"
    },
    "physics_world_gravity": {
      "name": "physics_world_gravity",
      "parameters": [
        {
          "parameter": "xg",
          "description": "The x component of the gravity vector"
        },
        {
          "parameter": "yg",
          "description": "The y component of the gravity vector"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nphysics_world_gravity(-5, 0);\n```\nThe above code will set gravity to be (assuming the room physics 0,0 is set to top left) to the right - 0 degrees - with an acceleration of 5 metres per second squared.\n",
      "description": "As with all the physics functions, `physics_world_gravity()` will only work on an instance if the room has a physics world defined for it in the room editor or using `physics_world_create()`. It will\n    then use the 0,0 defining point of the physics world to calculate the direction and strength of gravity based on the vector calculated from the xg and yg inputs. Here are some images to illustrate...",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_gravity.htm"
    },
    "physics_world_update_iterations": {
      "name": "physics_world_update_iterations",
      "parameters": [
        {
          "parameter": "y1",
          "description": "the iterations (per step) that the physics system will perform"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_world_update_iterations(20);\n```\nThe code above sets the physics world in the current room to perform calculations 20 times a step.\n",
      "description": "Everything in GameMaker Studio 2 is based around steps and, normally, each event will only happen once per step. However, to get the necessary precision with the physics functions they are made to do several calculations each step which are called\n    \"iterations\" the number of which are controlled by this function. The default number for the physics system is 10, but this can be changed to higher or lower depending how many times you want the physics to calculate each step, but it is\n    recommended that you set this no lower than 5 and no higher than 30. You should also be aware that this function is dependent on the `physics_world_update_speed()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_update_iterations.htm"
    },
    "physics_world_update_speed": {
      "name": "physics_world_update_speed",
      "parameters": [
        {
          "parameter": "speed",
          "description": "the number of times per second that the physics system updates"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nphysics_world_update_speed(room_speed * 2);\n```\nThe code above sets the physics system update speed to be twice that of the room speed.\n",
      "description": "GameMaker Studio 2 updates things based on the room speed, so that if you set it to ,say, 30, GameMaker Studio 2 will run 30 steps in the course of a second. However, for the physics functions that may not be enough and you may want things\n    to be updated at a slightly faster speed to increase stability or precision. To that end we use the function `physics_world_update_speed()` which sets the update speed for the physics system *independently* of the room speed. This means\n    that you could have a room speed of 30, but set the physics to 60, effectively doubling the speed at which the physics system updates and performs its calculations compared to the speed at which the step are updated.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/The_Physics_World/physics_world_update_speed.htm"
    },
    "place_empty": {
      "name": "place_empty",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check."
        },
        {
          "parameter": "y",
          "description": "The y position to check."
        },
        {
          "parameter": "[object_id]",
          "description": "Optional! The object to check against."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif place_empty(mouse_x, mouse_y, obj_Enemy)\n    {\n        x = mouse_x;\n        y = mouse_y;\n    }\n```\nThe above code will check for a collision with any other instance of the object \"obj_Enemy\", as if the calling instance were to be placed at the same position as the mouse. If there is no collision detected, then the instance has its x/y coordinates set to those of the mouse.\n",
      "description": "You can use this function to check and see if the calling instance would collide with *any other instance* of an object or all instances in your game. For this to collision to resolve correctly, the instance running the code must have a valid collision mask (either for the sprite itself, or through the `mask_index`) and it will only register collisions with those instances that also have a valid mask.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/place_empty.htm"
    },
    "place_free": {
      "name": "place_free",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check."
        },
        {
          "parameter": "y",
          "description": "The y position to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif place_free(mouse_x, mouse_y)\n    {\n        x = mouse_x;\n        y = mouse_y;\n    }\n```\nThe above code will check for a collision with any solid flagged instance if the calling instance were to be placed at the same position as the mouse. If there is no collision detected, then the instance has its x/y coordinates set to those of the mouse.\n",
      "description": "You can use this function to check and see if the calling instance would collide with any instance *flagged as ***solid** in your game. Now, it should be noted that for this to work, the instance running the code must have a valid collision mask (either for the sprite itself, or through the `mask_index`) and it will only register collisions with those solid flagged instances that also have a valid mask.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/place_free.htm"
    },
    "place_meeting": {
      "name": "place_meeting",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check."
        },
        {
          "parameter": "y",
          "description": "The y position to check."
        },
        {
          "parameter": "obj",
          "description": "The instance or object to check for."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif keyboard_check(vk_left)\n    {\n        if !place_meeting(x - 5, y, obj_wall) x -=5;\n    }\n```\nThe above code checks to see if there is *not* a collision to the left of the instance and moves the instance if there is none.\n",
      "description": "With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker Studio 2 to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. This function also accepts the special keywords **all** and **other**. Please note that should you need to get the unique instance **id** of the object being collided with, you should use `instance_place()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/place_meeting.htm"
    },
    "place_snapped": {
      "name": "place_snapped",
      "parameters": [
        {
          "parameter": "hsnap",
          "description": "The horizontal snapping to check."
        },
        {
          "parameter": "vsnap",
          "description": "The vertical snapping to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwith (obj_Pieces)\n    {\n        if !place_snapped(32, 32)\n        {\n            move_snap(32, 32);\n        }\n    }\n```\nThe above code checks all instances of \"obj_Pieces\" to see if they are snapped to a grid of 32x32 pixels, and if they are not it snaps them to the nearest position in that grid.\n",
      "description": "With this function you can check and see if the origin of an instance (its x and y position) is aligned to a grid with the hsnap and vsnap values specified by you.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/place_snapped.htm"
    },
    "point_direction": {
      "name": "point_direction",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first component of the vector"
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first component of the vector"
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second component of the vector"
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second component of the vector"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar ex, ey;\n    ex = instance_nearest(x, y, enemy).x;\n    ey = instance_nearest(x, y, enemy).y;\n    with (instance_create_layer(x, y, \"Bullets\", obj_Missile))\n    {\n        direction = point_direction(x, y, ex, ey);\n    }\n```\nThe above code will get the x and y coordinates of the nearest enemy and then pass them to a bullet object to use in the point_direction function to set its direction of travel correctly.\n",
      "description": "This function returns the direction of a vector formed by the specified components [x1,y1] and [x2,y2] in relation to the fixed x/y coordinates of the room. For example, in the image below if we want to get the direction from the player ship position to the enemy position so that we can fire a missile at the enemy then we would use this function (the exact code is in the example below the image):",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/point_direction.htm"
    },
    "point_distance": {
      "name": "point_distance",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first component of the vector"
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first component of the vector"
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second component of the vector"
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second component of the vector"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar ex, ey;\n    ex = instance_nearest(x, y, enemy).x;\n    ey = instance_nearest(x, y, enemy).y;\n    if (point_distance(x, y, ex, ey) < 200)\n    {\n        instance_create_layer(x, y, \"Bullets\", obj_Missile)\n    }\n```\nThe above code will get the x and y coordinates of the nearest enemy and then use them to check the distance (length) of the vector formed by them and the player coordinates. If the value is less than 200, the player object will create an instance of \"obj_Missile\".\n",
      "description": "This function returns the length of a vector formed by the specified components [x1,y1] and [x2,y2]. For example, in the image below if we want to get the distance between the player ship position and the enemy position so that we can calculate if the enemy is close enough to shoot at then we would use this function (the exact code is in the example below the image):",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/point_distance.htm"
    },
    "point_distance_3d": {
      "name": "point_distance_3d",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The x coordinate of the first component of the vector"
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first component of the vector"
        },
        {
          "parameter": "z1",
          "description": "The z coordinate of the first component of the vector"
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second component of the vector"
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second component of the vector"
        },
        {
          "parameter": "z2",
          "description": "The z coordinate of the second component of the vector"
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nvar inst, ex, ey, ez;\n    inst = instance_nearest(x, y, enemy);\n    if inst\n    {\n        ex = inst.x;\n        ey = inst.y;\n        ez = inst.z;\n        if point_distance_3d(x, y, z, ex, ey, ez) < 200\n        {\n            instance_create_layer(x, y, \"Bullets\", obj_Missile)\n        }\n    }\n```\nThe above code will get the x and y and z coordinates of the nearest enemy and then use them to check the distance (length) of the vector formed by them and the player coordinates. If the value is less than 200, the player object will create an instance of \"obj_Missile\".\n",
      "description": "This function takes the supplied components of the vector and returns the length (distance) of the vector. It works in exactly the same way as `point_distance()` but with the addition of factoring in the z value (depth) for use in 3D space.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/point_distance_3d.htm"
    },
    "point_in_circle": {
      "name": "point_in_circle",
      "parameters": [
        {
          "parameter": "px",
          "description": "The x coordinate of the point to check."
        },
        {
          "parameter": "py",
          "description": "The y coordinate of the point to check."
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the circle centre."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the circle centre."
        },
        {
          "parameter": "rad",
          "description": "The radius of the circle."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif point_in_circle(mouse_x, mouse_y, x, y, 16)\n    {\n        over = true;\n    }\n    else\n    {\n        over = false;\n    }\n```\nThe above code uses the `point_in_circle` function to check if the mouse position falls within the defined circular area, setting the variable \"over\" to `true` if it does, or `false` otherwise.\n",
      "description": "When using this function, you define a circular area and GameMaker Studio 2 will work out whether the given point falls within its bounds or not. If the point falls within the defined circle the function will return `true` otherwise the function will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/point_in_circle.htm"
    },
    "point_in_rectangle": {
      "name": "point_in_rectangle",
      "parameters": [
        {
          "parameter": "px",
          "description": "The x coordinate of the point to check."
        },
        {
          "parameter": "py",
          "description": "The y coordinate of the point to check."
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the left side of the rectangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the top side of the rectangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the right side of the rectangle to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the bottom side of the rectangle to check."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif point_in_rectangle(mouse_x, mouse_y, x -10, y - 10, x + 10, y + 10)\n    {\n        audio_play_sound(snd_click, 0, false);\n    }\n```\nThis short code checks the mouse position against the defined rectangular area and plays a sound if it falls within the bounds.\n",
      "description": "When using this function, you define a rectangular area and GameMaker Studio 2 will work out whether the given point falls within its bounds or not. If the point falls within the defined rectangle the function will return `true` otherwise the function will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/point_in_rectangle.htm"
    },
    "point_in_triangle": {
      "name": "point_in_triangle",
      "parameters": [
        {
          "parameter": "px",
          "description": "The x coordinate of the point to check."
        },
        {
          "parameter": "py",
          "description": "The y coordinate of the point to check."
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the first corner of the triangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first corner of the triangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second corner of the triangle to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second corner of the triangle to check."
        },
        {
          "parameter": "x3",
          "description": "The x coordinate of the third corner of the triangle to check."
        },
        {
          "parameter": "y3",
          "description": "The y coordinate of the third corner of the triangle to check."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nvar inst = instance_nearest(x, y, obj_Player);\n    if instance_exists(inst)\n    {\n        var x1 = x + lengthdir_x(100, image_angle - 45);\n        var y1 = y + lengthdir_y(100, image_angle - 45);\n        var x2 = x + lengthdir_x(100, image_angle + 45);\n        var y2 = y + lengthdir_y(100, image_angle + 45);\n        if point_in_triangle(inst.x, inst.y, x, y, x1, y1, x2, y2)\n        {\n            can_see = true;\n        }\n    }\n```\nThe above code uses the `point_in_triangle` function as a \"cone of vision\" to check for an instance of \"obj_player\", setting a variable to `true` should the objects x/y position fall within the defined triangle.\n",
      "description": "When using this function, you define a triangular area and GameMaker Studio 2 will work out whether the given point falls within its bounds or not. If the point falls within the defined triangle the function will return `true` otherwise the function will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/point_in_triangle.htm"
    },
    "position_change": {
      "name": "position_change",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of where to change colliding instances."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to change colliding instances."
        },
        {
          "parameter": "obj",
          "description": "The new object the calling object will change into."
        },
        {
          "parameter": "perf",
          "description": "Whether to perform that new object's Create event (true) or not (false)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nposition_change(200, 200, obj_Bird, true);\n```\nThis will change all instances colliding at point (200,200) into an instance of \"obj_Bird\", performing \"obj_Bird\"s Create event for each of them in the process.\n",
      "description": "This function will check a position for a collision with *any instances* at the given point, and if there is one, it will change **all** instances in collision to be instances of the chosen object. You can set the \"perf\" argument to\n    `true` which will force GameMaker Studio 2 to perform the **Destroy** and **Clean Up** events of the found instance as well as the **Create** event of the new instance, or `false` to not\n    perform any of these events. Please note, that if you choose not to perform the Destroy, Clean Up and Create events, any instance created that uses a variable normally defined in the create event will crash the game as that variable will no longer\n    exist.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_change.htm"
    },
    "position_destroy": {
      "name": "position_destroy",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of where to destroy colliding instances."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to destroy colliding instances."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        position_destroy(mouse_x, mouse_y);\n    }\n```\nThis will destroy all instances that collide with the position of the mouse cursor when the left mouse button is pressed.\n",
      "description": "This function simply destroys all instances that are found to be in collision with the specified position. Collisions are based on the mask of the instances, and if any part of the mask over-laps with the target point it then the function will destroy that instance. Instances destroyed in this way will trigger their **Destroy** and **Clean Up** events.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_destroy.htm"
    },
    "position_empty": {
      "name": "position_empty",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check."
        },
        {
          "parameter": "y",
          "description": "The y position to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar xx, yy;\n    xx = random(room_width);\n    yy = random(room_height);\n    if position_empty(xx, yy)\n    {\n        instance_create_layer(xx, yy, \"Bullets\", obj_Bomb);\n    }\n```\nThis will check a random position somewhere in the room for a collision and if there is none it will create an instance of obj_Bomb.\n",
      "description": "This function will check to see if a given position enters into collision with *any instance* with a valid collision mask at the given position.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_empty.htm"
    },
    "position_meeting": {
      "name": "position_meeting",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position to check."
        },
        {
          "parameter": "y",
          "description": "The y position to check."
        },
        {
          "parameter": "obj",
          "description": "The object (or instance id, or the keywords \"all\" or \"other\") to check for a collision with."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif mouse_check_button(mb_left)\n    {\n        if !position_meeting(mouse_x, mouse_y, all)\n        {\n            instance_create_layer(mouse_x, mouse_y, \"Walls\", obj_Wall);\n        }\n    }\n```\nThe above code checks for the left mouse button, and if it is pressed it checks the mouse x/y position for a collision with any instance. If there is none, then an instance of \"obj_Wall\" is created.\n",
      "description": "With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked. If you need to get the unique instance **id** if the object being collided with you should use `instance_position()`. This function also accepts the special  [keywords](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Instance_Keywords.htm) **all** and **other**.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/position_meeting.htm"
    },
    "power": {
      "name": "power",
      "parameters": [
        {
          "parameter": "x",
          "description": "The number to change."
        },
        {
          "parameter": "n",
          "description": "How many times to multiply x by itself."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nscore += power(dmg, 3);\n```\nThis will add the value of held in the variable \"dmg\" to the power of 3 to the score variable.\n",
      "description": "This will return the value of a number multiplied by itself \"n\" number of times. For example, `power(5,3)` will multiply 5 by itself 3 times and return 125, which is the same as saying 5*5*5=125. Please note that the \"x\" value\n    (the number to change) *cannot* be a negative value.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/power.htm"
    },
    "ptr": {
      "name": "ptr",
      "parameters": [
        {
          "parameter": "n",
          "description": "The value to convert."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !is_ptr(val)\n    {\n        val = ptr(application_surface);\n    }\n```\nThe above code checks the variable \"val\" to see if it contains a pointer and if it does not then one is assigned to it.\n",
      "description": "This function will attempt to convert a given value into a pointer data type, where the value *must* be either a real, a string, an int64, an int32, or a ptr. Anything else will cause the game to crash with an error message.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/ptr.htm"
    },
    "push_cancel_local_notification": {
      "name": "push_cancel_local_notification",
      "parameters": [
        {
          "parameter": "ID",
          "description": "The ID of the notification to cancel."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create();\n    var ntf = push_get_first_local_notification(map);\n    while(ntf >= 0)\n    {\n        var data = ds_map_find_value(map, \"data\");\n        if data == \"Daily_Reward\"\n        {\n            push_cancel_local_notification(ntf);\n        }\n        ntf = push_get_next_local_notification(map);\n    }\n    ds_map_destroy(map);\n```\nThe above code creates a `DS Map` and then requests data for the first available notification in the queue. If a notification exists, the map is populated and the code then checks the \"data\" key for a specific string. If the string is found, the notification is canceled and moves on to check the next notification until all in the queue have been checked.\n",
      "description": "This function cancels the given push notification. You can get the ID for the notification to cancel using the functions `push_get_first_local_notification()` and `push_get_next_local_notification()` and the function will return `true` on success or `false` otherwise (for example if the notification does not exist or has already been triggered).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Push_Notifications/push_cancel_local_notification.htm"
    },
    "push_get_first_local_notification": {
      "name": "push_get_first_local_notification",
      "parameters": [
        {
          "parameter": "map",
          "description": "The `DS Map` ID to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create();\n    var ntf = push_get_first_local_notification(map);\n    while(ntf >= 0)\n    {\n        var data = ds_map_find_value(map, \"data\");\n        if data == \"Daily_Reward\"\n        {\n            push_cancel_local_notification(ntf);\n        }\n        ntf = push_get_next_local_notification(map);\n    }\n    ds_map_destroy(map);\n```\nThe above code creates a `DS Map` and then requests data for the first available notification in the queue. If a notification exists, the map is populated and the code then checks the \"data\" key for a specific string. If the string is found, the notification is cancelled and moves on to check the next notification until all in the queue have been checked.\n",
      "description": "This function will populate a pre-made  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) with a series of key/value pairs for the first local push notification in the queue to be shown. It returns -1 if there are no notifications queued, or a real value otherwise representing the ID for the notification. This ID can then be used to cancel the notification using the function `push_cancel_local_notification()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Push_Notifications/push_get_first_local_notification.htm"
    },
    "push_get_next_local_notification": {
      "name": "push_get_next_local_notification",
      "parameters": [
        {
          "parameter": "map",
          "description": "The `DS Map` ID to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create();\n    var ntf = push_get_first_local_notification(map);\n    while(ntf >= 0)\n    {\n        var data = ds_map_find_value(map, \"data\");\n        if data == \"Daily_Reward\"\n        {\n            push_cancel_local_notification(ntf);\n        }\n        ntf = push_get_next_local_notification(map);\n    }\n    ds_map_destroy(map);\n```\nThe above code creates a `DS Map` and then requests data for the first available notification in the queue. If a notification exists, the map is populated and the code then checks the \"data\" key for a specific string. If the string is found, the notification is cancelled and moves on to check the next notification until all in the queue have been checked.\n",
      "description": "This function will populate a pre-made  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) with a series of key/value pairs for the next local push notification in the queue to be shown. It returns -1 if there are no further notifications queued, or a real value otherwise representing the ID for the notification. This ID can then be used to cancel the notification using the function `push_cancel_local_notification()`. You should call the function `push_get_first_local_notification()` to get the first notification in the queue and then use this function to continue through it.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Push_Notifications/push_get_next_local_notification.htm"
    },
    "push_local_notification": {
      "name": "push_local_notification",
      "parameters": [
        {
          "parameter": "fire_time",
          "description": "The date/time to fire the off the notification"
        },
        {
          "parameter": "title",
          "description": "The notification title (a string)"
        },
        {
          "parameter": "message",
          "description": "The notification message text (a string)"
        },
        {
          "parameter": "data",
          "description": "The data package to send to your game (a string)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "In this example we will send a local push notification using the following code:\n```\nvar fireTime = date_inc_day(date_current_datetime(), 1);\n    var data = \"daily_reward\";\n    push_local_notification(fireTime, \"Ahoy!\", \"Catch The Haggis Has A Present\", data);\n```\nThis will set a timer to \"push\" a notification to the device when one day has passed. When the day is up, if your game is either in the background or not running, a notification will be shown to the user with the given title and message (on iOS, the game name is shown and the title is ignored), and then an asynchronous Push Notification Event will be called. Note that if the game is in the foreground when the time for the notification comes, it will *not* be shown, but the asynchronous event **will still trigger**. In the event itself you would handle the callback something like this:Async Event in the following way:\n```\nvar type = ds_map_find_value(async_load, \"type\");\n    var status = ds_map_find_value(async_load, \"status\");\n    if status == 0\n    {\n        //error of some kind\n        var error = ds_map_find_value(async_load, \"error\");\n        show_debug_message(\"error=\" + string(error));\n    }\n    else\n    {\n        if type == \"register\"\n        {\n            global.reg_id = ds_map_find_value(async_load, \"reg_id\");\n        }\n        else\n        {\n            var data = ds_map_find_value(async_load, \"data\");\n            if data == \"daily_reward\"\n            {\n                global.Gold += 1000;\n            }\n        }\n    }\n```\n",
      "description": "This function can be used to set a local notification to be shown on a given date at a given time. The \"fire_time\" is the date/time that the notification should be pushed to the user device (you can use the GameMaker Studio 2  [Date and Time Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/Date_And_Time.htm) to get this), and you can give the notification a title and a message text as well as a payload string which will be passed to your game when the users taps the notification.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Push_Notifications/push_local_notification.htm"
    },
    "radtodeg": {
      "name": "radtodeg",
      "parameters": [
        {
          "parameter": "rad",
          "description": "The radians to convert."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = radtodeg( pi );\n```\nThis will set val to 180.\n",
      "description": "Once you have done your calculations using sin, or cos etc... the result is in radians. This may not always be what you want and so to turn the radians into degrees we use this function. For example, `radtodeg(sin(180))` will return -45 degrees.\n    This function translates radians into degrees using the formula:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/radtodeg.htm"
    },
    "random": {
      "name": "random",
      "parameters": [
        {
          "parameter": "n",
          "description": "The upper range from which the random number will be selected."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (random(10) >= 9)\n    {\n        score += 100;\n    }\n```\nThis will produce approximately a one in ten chance of adding 100 to the score.\n",
      "description": "This function is good for probabilities where returning an integer (whole number) is not necessary. For example, `random(100)` will return a value from 0 to 99, but that value can be 22.56473! You can also use real numbers and not integers in this function like this - `random(0.5)`, which will return a value between 0 and 0.4999999.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random.htm"
    },
    "random_get_seed": {
      "name": "random_get_seed",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nini_open(\"Save.ini\") ini_write_real(\"Levels\", string(level), random_get_seed()); ini_close();\n  \n```\nThe above code will get the random seed and store it in an ini file.\n",
      "description": "To generate a random number GameMaker Studio 2 starts with a random *seed* number. With this function you can retrieve that seed, which can then be stored to reproduce a specific series of random events. For example, say you have a procedurally\n    generated game, but want the player to be able to go back to previously discovered areas. Well, at the start of each area, you can store the random seed with this function and so every time you need to go back there, you can use `random_set_seed()`    to set the seed to what it was previously and so force GameMaker Studio 2 to reproduce the same set of \"random\" functions that it used previously.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random_get_seed.htm"
    },
    "random_range": {
      "name": "random_range",
      "parameters": [
        {
          "parameter": "n1",
          "description": "The low end of the range from which the random number will be selected."
        },
        {
          "parameter": "n2",
          "description": "The high end of the range from which the random number will be selected."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nscore += random_range(500, 600);\n```\nThis will add anywhere between 500 and 600, to the total score.\n",
      "description": "This function returns a random number between the specified range, and this return value does not need to be an integer. For example, `random_range(20,50)` will return a random number from 20 to 50, but the value may be a real number like 38.65265.\n    Real numbers can also be used as input arguments.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random_range.htm"
    },
    "random_set_seed": {
      "name": "random_set_seed",
      "parameters": [
        {
          "parameter": "val",
          "description": "The seed to set."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif debug\n    {\n        random_set_seed(1);\n    }\n```\nThe above code sets the random seed to 1 only if the variable \"debug\" is true.\n",
      "description": "To generate a random number GameMaker Studio 2 starts with a random seed number. With this function you can set that seed to a known value and so \"force\" the outcome of all random events afterwards to be the same every time the program is run. For example, this function can be used in conjunction with `random_get_seed()` to create procedurally generated content and save the results without having huge savegames (you save the seed only, no need for anything else). Should you need truly random results for everything, you should be using the `randomise()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/random_set_seed.htm"
    },
    "randomise": {
      "name": "randomise",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nrandomise();\n```\nThe above code will randomise the seed.\n",
      "description": "This function sets the seed to a random value. Should you need to keep a consistent value over a number of runs of a game, you should be using `random_set_seed()`. Please note, that when using the random number\n    functions in GameMaker Studio 2 the initial seed is always the same, as this makes tracing errors and debugging far easier. Should you wish to test with true random, you should call this function at the start of your game. The function will\n    return the new randomised seed value (an unsigned 32bit integer).",
      "returns": "Integer (unsigned 32 bit value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/randomise.htm"
    },
    "real": {
      "name": "real",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to be converted to a real value."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar t_str = string_digits(input_str); age = real(t_str);\n```\nThe above code will take the input string, strip it of all characters other than numbers and then set the variable \"age\" to hold the real number value of the return string.\n",
      "description": "This function can be used to turn a given string into a real number. When using this function, numbers, minus signs, decimal points and exponential parts in the string are taken into account, while other characters (such as letters) will cause an error\n    to be thrown. If you know, or suspect, that a string may have other characters then you can use `string_digits()` to remove all non-numeric characters, before using this function to turn the resulting string\n    into a real number.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/real.htm"
    },
    "rectangle_in_circle": {
      "name": "rectangle_in_circle",
      "parameters": [
        {
          "parameter": "sx1",
          "description": "The x coordinate of the left side of the source rectangle."
        },
        {
          "parameter": "sy1",
          "description": "The y coordinate of the top side of the source rectangle."
        },
        {
          "parameter": "sx2",
          "description": "The x coordinate of the right side of the source rectangle."
        },
        {
          "parameter": "sy2",
          "description": "The y coordinate of the bottom side of the source rectangle."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of the centre of the circle"
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the centre of the circle."
        },
        {
          "parameter": "rad",
          "description": "The radius around the center point in which to check for a collision."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\ninst = instance_nearest(x, y, obj_Bullet);\n    if instance_exists(inst)\n    {\n        if rectangle_in_circle(inst.x - 5, inst.y - 5, inst.x + 5, inst.y + 5, x, y - 25, 20) > 0\n        {\n            hit = true;\n        }\n    }\n```\nThe above code uses the `rectangle_in_circle` function to check for a collision within a circular area and the rectangle around a found instance. If there is a collision (either an edge overlap or encompassed) then a variable will be set to `true`.\n",
      "description": "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined circular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/rectangle_in_circle.htm"
    },
    "rectangle_in_rectangle": {
      "name": "rectangle_in_rectangle",
      "parameters": [
        {
          "parameter": "sx1",
          "description": "The x coordinate of the left side of the source rectangle."
        },
        {
          "parameter": "sy1",
          "description": "The y coordinate of the top side of the source rectangle."
        },
        {
          "parameter": "sx2",
          "description": "The x coordinate of the right side of the source rectangle."
        },
        {
          "parameter": "sy2",
          "description": "The y coordinate of the bottom side of the source rectangle."
        },
        {
          "parameter": "dx1",
          "description": "The x coordinate of the left side of the destination rectangle to check against."
        },
        {
          "parameter": "dy1",
          "description": "The y coordinate of the top side of the destination rectangle to check against."
        },
        {
          "parameter": "dx2",
          "description": "The x coordinate of the right side of the destination rectangle to check against."
        },
        {
          "parameter": "dy2",
          "description": "The y coordinate of the bottom side of the destination rectangle to check against."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nswitch(rectangle_in_rectangle(x - 50, y - 50, x + 50, y + 50, mouse_x - 50, mouse_y - 50, mouse_x + 50, mouse_y + 50))\n    {\n        case 0: image_blend = c_yellow; break;\n        case 1: image_blend = c_red; break;\n        case 2: image_blend = c_orange; break;\n    }\n```\nThe above code checks two rectangular areas for collision, and will set the instance `image_blend` based on the return value.\n",
      "description": "This function will check two rectangular areas that you define to see if the source rectangle is either not in collision, completely within the destination rectangles bounds, or if they are simply touching. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/rectangle_in_rectangle.htm"
    },
    "rectangle_in_triangle": {
      "name": "rectangle_in_triangle",
      "parameters": [
        {
          "parameter": "sx1",
          "description": "The x coordinate of the left side of the source rectangle."
        },
        {
          "parameter": "sy1",
          "description": "The y coordinate of the top side of the source rectangle."
        },
        {
          "parameter": "sx2",
          "description": "The x coordinate of the right side of the source rectangle."
        },
        {
          "parameter": "sy2",
          "description": "The y coordinate of the bottom side of the source rectangle."
        },
        {
          "parameter": "x1",
          "description": "The x coordinate of the first side of the triangle to check."
        },
        {
          "parameter": "y1",
          "description": "The y coordinate of the first side of the triangle to check."
        },
        {
          "parameter": "x2",
          "description": "The x coordinate of the second side of the triangle to check."
        },
        {
          "parameter": "y2",
          "description": "The y coordinate of the second side of the triangle to check."
        },
        {
          "parameter": "x3",
          "description": "The x coordinate of the third side of the triangle to check."
        },
        {
          "parameter": "y3",
          "description": "The y coordinate of the third side of the triangle to check."
        }
      ],
      "requiredParameters": 10,
      "isVariadic": false,
      "example": "```\nvar inst = instance_nearest(x, y, obj_Player);\n    if instance_exists(inst)\n    {\n        var x1 = x + lengthdir_x(100, image_angle - 45);\n        var y1 = y + lengthdir_y(100, image_angle - 45);\n        var x2 = x + lengthdir_x(100, image_angle + 45);\n        var y2 = y + lengthdir_y(100, image_angle + 45);\n        if rectangle_in_triangle(inst.bbox_left, inst.bbox_top, inst.bbox_right, inst.bbox_bottom, x, y, x1, y1, x2, y2) == 1\n        {\n            can_see = true;\n        }\n    }\n```\nThe above code uses the `rectangle_in_triangle` function as a \"cone of vision\" to check for an instance of \"obj_player\". If the full bounding box is within the given triangular area, it will set a variable to `true`.\n",
      "description": "This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined triangular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/rectangle_in_triangle.htm"
    },
    "room_add": {
      "name": "room_add",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_width(global.myroom, 640); room_set_height(global.myroom, 480); room_set_persistent(global.myroom, false);\n```\nThis will create a new room and store its index in the variable \"global.myroom\". It will then set its width to 640 pixels, its height to 480 pixels, and its persistence to `false`.\n",
      "description": "This function will create a new, empty, room and add it to your game, returning its index to be stored in a variable for all further codes that deal with this room. Note that each room is permanently added to the game until the executable is closed,\n    ie: *rooms added through code cannot be deleted again*. This has important implications for memory use and so you should use this function with care.",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_add.htm"
    },
    "room_assign": {
      "name": "room_assign",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the room to be *copied to*."
        },
        {
          "parameter": "source",
          "description": "The index of the room to be *copied from*."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.rm = room_add(); room_assign(global.rm, rm_Base);\n```\nThe above code will add a new room to the game and then copy the contents of the room indexed as \"rm_Base\" into it.\n",
      "description": "This function will copy one room to another, removing all instances, tiles etc... from the room that is being copied to and replacing them completely with the new room contents. You supply the index to for the room to be copied to (either as defined\n    in the asset browser or as returned by the function `room_add()`) as well as the index of the source room. Note that calling this function on a room asset created in the Asset Browser **will permanently change the contents of the room**,\n    and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_assign.htm"
    },
    "room_duplicate": {
      "name": "room_duplicate",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the original room to be duplicated."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_duplicate(rm_level);\n```\nThis will duplicate the room indexed by \"rm_level\" and assign the room index of this new room to the variable \"global.myroom\".\n",
      "description": "This will duplicate a given room and return the duplicates index to be used in all further calls to reference the new room.",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_duplicate.htm"
    },
    "room_exists": {
      "name": "room_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif room_exists(global.rm[0])\n    {\n        room_goto(global.rm[0]);\n    }\n```\nThe above code checks to see if the room indexed in the array \"global.rm[]\" exists and if it does it then goes to that room.\n",
      "description": "With this function you can check and see whether the room you specify exists or not. This function takes the room *index* (a real number) and **not** the room name (a string). This function is most useful when you are creating rooms dynamically using the function `room_add()`, but you can also use the **read only** variables `room_first` and `room_last` or the functions `room_next()` and `room_previous()` to get a specific room index, or provide a variable that has stored the index of any other room in your game.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_exists.htm"
    },
    "room_get_camera": {
      "name": "room_get_camera",
      "parameters": [
        {
          "parameter": "rm",
          "description": "The index of the room to get the view camera of"
        },
        {
          "parameter": "vind",
          "description": "The index of the view port to get the camera of"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar cam = room_get_camera(rm_Game, 0);\n    if cam != global.MainCam\n    {\n        room_set_camera(rm_Game, 0, global.MainCam);\n    }\n```\nThe above code assigns a camera in a newly created room to view port [0].\n",
      "description": "With this function you can get the unique index ID of the camera assigned to a specific view in a room other than the current one. You give the room to use, the view port to use (from 0 to 7) and the function will return a camera index.",
      "returns": "Real (Camera Index)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_get_camera.htm"
    },
    "room_get_name": {
      "name": "room_get_name",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to check the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar roomname = room_get_name(room);\n    \n    draw_text(32, 32, roomname);\n  \n```\nThe above code will get the name of the current room and draw it on the screen.\n",
      "description": "This function can be used to return the name of the specified room as a string. Please note that this is *only* a string and cannot be used to reference the room directly - for that you would need the *room index*. You can, however, use this string to get the *room index* using the returned string along with the function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_get_name.htm"
    },
    "room_get_viewport": {
      "name": "room_get_viewport",
      "parameters": [
        {
          "parameter": "rm",
          "description": "The index of the room to get viewport data from"
        },
        {
          "parameter": "vind",
          "description": "The index of the view port to get"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nv_vals = room_get_viewport(rm_Game, 0);\n    \n    if v_vals[0] == false\n    {\n        room_set_view(rm_Game, true, v_vals[1], v_vals[2], v_vals[3], v_vals[4]);\n    }\n  \n```\nThe above code retrieves the view port data for the given room then checks to see if the port is flagged as visible. If it is not, the view port data is set to make it visible.\n",
      "description": "With this function you can retrieve the details of a view port in a room other than the current one. You give the room ID and the index of the view port to retrieve (from 0 to 7) and the function will return an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) of 5 indices, where:",
      "returns": "Array (5 elements: visible, x, y, width, height)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_get_viewport.htm"
    },
    "room_goto": {
      "name": "room_goto",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to go to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nswitch (global.level)\n    {\n        case 0: room_goto(rm_level1); break;\n        case 1: room_goto(rm_level2); break;\n        case 2: room_goto(rm_level3); break;\n    }\n```\nThe above code will check a global variable and change room based on the value that it holds.\n",
      "description": "This function permits you to go to any room in your game project, whether created using code or in the Asset Browser. You supply the room index (stored in the variable for the room name, or as a variable returned from the function `room_add()`). Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the **Room End** event.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_goto.htm"
    },
    "room_goto_next": {
      "name": "room_goto_next",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif room_exists(room_next(room))\n    {\n        room_goto_next();\n    }\n```\nThe above code will check to see if there is another room after the current one and if so it will go to that room.\n",
      "description": "With this function you can make your game go to the next one as listed in the  [Room Manager](https://manual.yoyogames.com/Settings/The_Room_Manager.htm) at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_goto_next.htm"
    },
    "room_goto_previous": {
      "name": "room_goto_previous",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif room_exists(room_previous(room))\n    {\n        room_goto_previous();\n    }\n```\nThe above code will check to see if there is another room before the current one and if so it will go to that room.\n",
      "description": "With this function you can make your game go to the previous one as listed in the  [Room Manager](https://manual.yoyogames.com/Settings/The_Room_Manager.htm) at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the **Room End** event.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_goto_previous.htm"
    },
    "room_instance_add": {
      "name": "room_instance_add",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to add an object instance to."
        },
        {
          "parameter": "x",
          "description": "The x position of the new instance."
        },
        {
          "parameter": "y",
          "description": "The y position of the new instance."
        },
        {
          "parameter": "obj",
          "description": "The object to add an instance of."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nglobal.rm = room_add(); room_assign(rm_Base, global.rm); room_instance_add(global.rm, 100, 100, obj_Player);\n```\nThe above code will add a new room to the game and then copy the contents of the room indexed as \"rm_Base\" into it. It will then add an instance of the object \"obj_player\" at the position 100,100 of this new room.\n",
      "description": "With this function you can add an instance into any room other than the current one and at any position within that room. The function returns the unique `id` of the instance which can then\n    be used in further function calls to set properties etc... of that instance, but **only once the game has entered the specified room**. If you wish to create an instance in the current room you should be using the function `instance_create_layer()`. Note\n    that calling this function on a room asset created in the Asset Browser **will permanently add the instance to the room**, and even calling game_restart() will not return the room to it's original state\n    (only ending the game and opening it again will start with the room in its original state again).",
      "returns": "Instance ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_instance_add.htm"
    },
    "room_instance_clear": {
      "name": "room_instance_clear",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to clear all instances in."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.rm = room_add(); room_assign(rm_Base, global.rm); room_instance_clear(global.rm);\n  \n```\nThe above code will add a new room to the game and then copy the contents of the room indexed as \"rm_Base\" into it. It will then clear all instances from this new room.\n",
      "description": "This function will clear a room of all instances (no destroy events shall be called for the instances that are being removed). Note that calling this function on a room asset created in the Asset Browser **will permanently clear the room of instances**,\n    and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_instance_clear.htm"
    },
    "room_next": {
      "name": "room_next",
      "parameters": [
        {
          "parameter": "numb",
          "description": "The index of the room to get the next one after."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif room_next(room) != -1\n    {\n        room_goto_next();\n    }\n```\nThe above code will check to see if the next room exists and if so, it will go to it.\n",
      "description": "With this function you can retrieve the index of the room *after* the room input into the function. For example you can use the variable `room` to get the index of the current room and then use this function to find the room that follows it, as listed in the  [Room Manager](https://manual.yoyogames.com/Settings/The_Room_Manager.htm). If there is no room after the one you input then -1 is returned. Note that this function will not recognise or take into consideration rooms that have been added dynamically using  [room_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_add.htm) or  [room_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_duplicate.htm).",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_next.htm"
    },
    "room_previous": {
      "name": "room_previous",
      "parameters": [
        {
          "parameter": "numb",
          "description": "The index of the room to get the one before from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif room_previous(room) != -1\n    {\n        room_goto_previous();\n    }\n```\nThe above code will check to see if the previous room exists and if so, it will go to it.\n",
      "description": "With this function you can retrieve the index of the room *before* the room input into the function. For example you can use the variable `room` to get the index of the current room and then use this function to find the room that comes before it, as listed in the  [Room Manager](https://manual.yoyogames.com/Settings/The_Room_Manager.htm). If there is no room before the one you input then -1 is returned. Note that this function will not recognise or take into consideration rooms that have been added dynamically using  [room_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_add.htm) or  [room_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_duplicate.htm).",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_previous.htm"
    },
    "room_restart": {
      "name": "room_restart",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif lives < 1 room_restart();\n```\nThe above code checks to see if the variable \"lives\" is less than 1 and if it is it will restart the room.\n",
      "description": "This function will restart the current room, as if it had just been entered. Note that the room will not restart until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the **Room End** event.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_restart.htm"
    },
    "room_set_camera": {
      "name": "room_set_camera",
      "parameters": [
        {
          "parameter": "rm",
          "description": "The index of the room to set the view camera of"
        },
        {
          "parameter": "vind",
          "description": "The index of the view port to assign the camera to"
        },
        {
          "parameter": "camera",
          "description": "The index of the camera to assign"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_camera(global.myroom, 0, global.MainCam);\n```\nThe above code assigns a camera in a newly created room to view port [0].\n",
      "description": "With this function you can assign a camera to a specific viewport in a room other than the current one. You supply the room index, the view index (from 0 to 7) and then the index of the camera to use.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_camera.htm"
    },
    "room_set_height": {
      "name": "room_set_height",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to set the height of."
        },
        {
          "parameter": "h",
          "description": "The new height of the room in pixels."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_width(global.myroom, 640); room_set_height(global.myroom, 480); room_set_persistent(global.myroom, false);\n```\nThis will create a new room and store its index in the variable \"global.myroom\". It will then set its width to 640 pixels, its height to 480 pixels, its caption to 'Game Room' and its persistence to 'false'.\n",
      "description": "With this function you can change (or set) the height of any room in your game *except the current one*.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_height.htm"
    },
    "room_set_persistent": {
      "name": "room_set_persistent",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to set the persistence of."
        },
        {
          "parameter": "val",
          "description": "Whether the room shall be persistent (`true`) or not (`false`)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_width(global.myroom, 640); room_set_height(global.myroom, 480); room_set_persistent(global.myroom, true);\n```\nThis will create a new room and store its index in the variable \"global.myroom\". It will then set its width to 640 pixels, its height to 480 pixels, its caption to 'Game Room' and its persistence to 'true'.\n",
      "description": "With this function you can change (or set) the persistence of any room in your game *except the current one*. A room with persistence flagged as `true` it will maintain the state of all instances within that room if the player leaves and\n    then returns, whereas if persistence is flagged as `false` it will be reset to the initial state every time. You should note that a persistent room uses considerably more memory than a normal room and it is not recommended to have too many\n    of them in your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_persistent.htm"
    },
    "room_set_view_enabled": {
      "name": "room_set_view_enabled",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to set."
        },
        {
          "parameter": "val",
          "description": "Whether to enable (`true`) or disable (`false`) views in the given room."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_view_enabled(global.myroom, true);\n```\nThis will enable views in the room indexed in \"global.myroom\".\n",
      "description": "With this function you can enable (`true`) or disable (`false`) the view of any room within your game *except the current one*.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_view_enabled.htm"
    },
    "room_set_viewport": {
      "name": "room_set_viewport",
      "parameters": [
        {
          "parameter": "rm",
          "description": "The index of the room to set"
        },
        {
          "parameter": "vind",
          "description": "The index of the view port to set"
        },
        {
          "parameter": "vis",
          "description": "The visibility of the view port (`true` is visible, `false is invisible`)"
        },
        {
          "parameter": "xport",
          "description": "The x position for the view port in the room"
        },
        {
          "parameter": "yport",
          "description": "The y position of the view port in the room"
        },
        {
          "parameter": "wport",
          "description": "The width (in pixels) of the view port"
        },
        {
          "parameter": "hport",
          "description": "The height (in pixels) of the view port"
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_width(global.myroom, 640); room_set_height(global.myroom, 480); room_set_viewport(global.myroom, 0, true, 0, 0, 640, 480);\n```\nThis will set the view port [0] properties in the room indexed in the variable \"global.myroom\".\n",
      "description": "With this function you can set the view port properties for any room in your game *except the current one*. You supply the room index to set the view port in, the view port index (from 0 to 7) and then whether the view port should be visible at\n    the start of the room or not (set to `true` to make the port visible, and `false` otherwise). After that you set the x and y coordinate (corresponding to the top left position of the view port) and then the width and height in pixels.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_viewport.htm"
    },
    "room_set_width": {
      "name": "room_set_width",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the room to set the width of."
        },
        {
          "parameter": "w",
          "description": "The new width of the room in pixels."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.myroom = room_add(); room_set_width(global.myroom, 640); room_set_height(global.myroom, 480); room_set_persistent(global.myroom, false);\n```\nThis will create a new room and store its index in the variable \"global.myroom\". It will then set its width to 640 pixels, its height to 480 pixels, its caption to 'Game Room' and its persistence to 'false'.\n",
      "description": "With this function you can change (or set) the width of any room in your game *except the current one*.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_set_width.htm"
    },
    "round": {
      "name": "round",
      "parameters": [
        {
          "parameter": "n",
          "description": "The number to round."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nscore += round(hp / 5);\n```\nThe above code will add a rounded integer onto the score value.\n",
      "description": "Just as it says, `round()` takes a real number and rounds it up or down to the nearest integer. In the special case where the number supplied is exactly a half-integer (1.5, 17.5, -2.5, etc), the number will be rounded to the nearest *even*    value, for example, 2.5 would be rounded to 2, while 3.5 will be rounded to 4. This type of rounding is called *bankers rounding* and over large numbers of iterations or when using floating point maths, it gives a statistically better rounding\n    than the more traditional \"round up if over .5 and round down otherwise\" approach.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/round.htm"
    },
    "scheduler_resolution_get": {
      "name": "scheduler_resolution_get",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nscheduler_resolution = scheduler_resolution_get();\n```\nThis example retrieves the resolution of the Windows thread scheduler, and stores it in the \"scheduler_resolution\" variable.\n",
      "description": "This function is used to retrieve the resolution of the Windows thread scheduler in milliseconds. If the scheduler's resolution is set to the default value (as set by Windows), the function will return -1.",
      "returns": "Real (or -1 for default)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/scheduler_resolution_get.htm"
    },
    "scheduler_resolution_set": {
      "name": "scheduler_resolution_set",
      "parameters": [
        {
          "parameter": "milliseconds",
          "description": "The new resolution value (in milliseconds) or -1 for default"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nscheduler_resolution_set(2);\n```\nThis example sets the resolution of the Windows thread scheduler to 2 milliseconds.\n",
      "description": "This function is used to change the resolution of the Windows thread scheduler. The resolution value supplied in the argument needs to be in **milliseconds**.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/scheduler_resolution_set.htm"
    },
    "screen_save": {
      "name": "screen_save",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The filename for the screenshot to save"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"S\"))\n    {\n        screen_save(working_directory + \"Screens\\Screen_\" + string(num++) + \".png\")\n    }\n```\nThe above code takes a screenshot of the game when the user presses the \"S\" key. This screen shot is saved to a specific directory and numbered using a variable which is then incremented.\n",
      "description": "With this function you can save a screenshot of the game as it currently appears in the game window. The file will be saved to the working directory of the game, which in windows is located at `<drive>:/Users/YOURUSERNAME/AppData/Local/[Game Name]/` and on Mac it would be `~/Library/Application Support/[Game Name]/`. The image captured will be the final render of the application surface of the game, or (if the app surface has been disabled) it will be an image of the whole display or window. It is important to note that the function is designed to be called in the **Draw GUI End Event**, which should give consistent results across all platforms. Using it in any other event may not work as expected, and may give different results across different targets and even devices. Should you need more control over what is being saved, you should use the function `screen_save_part()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/screen_save.htm"
    },
    "screen_save_part": {
      "name": "screen_save_part",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The filename for the screenshot to save"
        },
        {
          "parameter": "x",
          "description": "The x coordinate of the top left corner of the area of the screen to capture"
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the top left corner of the area of the screen to capture"
        },
        {
          "parameter": "w",
          "description": "The width of the area of the screen to capture"
        },
        {
          "parameter": "h",
          "description": "The height of the area of the screen to capture"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"S\"))\n    {\n        screen_save_part(\"Screens\\Screen_\" + string(num++) + \".png\", 0, 0, 100, 100)\n    }\n```\nThe above code takes a screenshot of a part of the game screen that is 100 pixels square when the user presses the \"S\" key. This screen shot is saved to a specific folder and numbered using a variable which is then incremented.\n",
      "description": "With this function you can save a screenshot of a part of the game as it currently appears in the game display. The selection coordinates are based on the *absolute* size of the display (or window if not fullscreen), so (0,0) is always the top left hand corner of the screen (or window). Below is an image that shows how this function works:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/screen_save_part.htm"
    },
    "script_execute": {
      "name": "script_execute",
      "parameters": [
        {
          "parameter": "scr",
          "description": "The name of the function/script that you want to call"
        },
        {
          "parameter": "arg0, arg1, arg2..., etc...",
          "description": "The different arguments that you want to pass through to the function/script"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": true,
      "example": "```\nscript_execute(choose(move_up, move_down, move_left, move_right), irandom(5));\n```\nThe above example code will use `script_execute` to choose one of four user defined functions (in this case related to movement) and pass a random integer to it as the first argument.\n",
      "description": "This function was originally designed for calling script *assets* in a dynamic way, but with the introduction of user-defined functions it can now be used in two ways:",
      "returns": "Will depend on the return value from the script/function being called",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_execute.htm"
    },
    "script_execute_ext": {
      "name": "script_execute_ext",
      "parameters": [
        {
          "parameter": "scr",
          "description": "The name of the function/script that you want to call"
        },
        {
          "parameter": "array_args",
          "description": "The array containing the arguments for the function/script"
        },
        {
          "parameter": "[offset]",
          "description": "OPTIONAL* *The offset into the argument array"
        },
        {
          "parameter": "[num_args]",
          "description": "OPTIONAL The number of arguments to use (from the offset onwards)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nscript_execute_ext(move_inst, move_array, floor(random(4)), 1);\n```\nThe above example code will use `script_execute_ext` to call the given function, supplying an array of four arguments, but only using one of them at random.\n**NOTE**: This function cannot be used with built-in functions.\n",
      "description": "This function works similarly to the function  [script_execute()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_execute.htm) only you can supply an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) that contains the arguments required for the function/script being called. You may also supply two optional arguments to the function to specify an offset into the array to get the arguments from, as well as the number of arguments to use from the array (this must be a maximum of array_length - offset). ",
      "returns": "Will depend on the return value from the function/script being called",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_execute_ext.htm"
    },
    "script_exists": {
      "name": "script_exists",
      "parameters": [
        {
          "parameter": "scr",
          "description": "The name of the script that you want to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nscript[0] = -1;\n    script[1] = AI_Left;\n    script[2] = AI_Right;\n    var script_num = choose(0, 1, 2);\n    if script_exists(script[script_num])\n    {\n        script_execute(script[script_num]);\n    }\n```\nThe above example adds two script functions and a value into an array, then proceeds to get a random number and use that to choose a script function to run, unless the -1 is chosen in which case nothing will happen.\n",
      "description": "This function will return `true` or `false` depending on whether the script or  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) with the given index exists. Note, that this is *not* a string, but rather the asset name which holds the unique index for each script (as it would appear in the IDE) or the script function name variable, as defined within the script asset (note that this will not work for  [method variables](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Method_Variables.htm)). For more information on scripts, see  [The Script Editor](https://manual.yoyogames.com/The_Asset_Editors/Scripts.htm).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_exists.htm"
    },
    "script_get_name": {
      "name": "script_get_name",
      "parameters": [
        {
          "parameter": "scr",
          "description": "The index of the script that you want to get the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nscr_name = script_get_name(Help_File);\n```\nThe above example code will store the name of the indicated script index in the variable \"scr_name\".\n",
      "description": "This function will return the name *as a string* of the specified script. This name is the one that has been specified for the script in the Asset Browser of the main GameMaker Studio 2 window. For more information about scripts, see  [The Script Editor](https://manual.yoyogames.com/The_Asset_Editors/Scripts.htm).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_get_name.htm"
    },
    "sequence_create": {
      "name": "sequence_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmyseq = sequence_create(); myseq.length = 120; myseq.loopmode = seqplay_pingpong;\n```\nThe above code creates a new sequence object struct and sets its playback length and loop mode.\n",
      "description": "With this function you can create a new sequence object which you can then add tracks to. The function returns a  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) which you can then access to setup the new sequence you have created. The contents\n    of this struct are detailed on  [this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Object_Struct.htm). The sequence object struct can then be used to create instances of the sequence on a room layer using the function `layer_sequence_create()`.\n    Note that when creating sequence objects in this way you should remove them again by calling the function `sequence_destroy()` when they are no longer required, otherwise you will have a memory leak which\n    can slow down and eventually crash your game.",
      "returns": "Sequence Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_create.htm"
    },
    "sequence_destroy": {
      "name": "sequence_destroy",
      "parameters": [
        {
          "parameter": "sequence_struct_or_id",
          "description": "The sequence object struct or ID to destroy"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif sequence_exists(my_seq)\n    {\n        sequence_destroy(my_seq);\n    }\n```\nThe above code checks to see if the given sequence object exists and if it does it is destroyed.\n",
      "description": "With this function you can destroy a sequence object that has been created dynamically. You supply either the sequence object struct (as returned by the function `sequence_create()`) or the sequence ID (as returned by the function `layer_sequence_get_sequence()` or from the sequence instance struct property `sequence`). This function should be used whenever a dynamically created sequence is no longer required to free up the memory associated with it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_destroy.htm"
    },
    "sequence_exists": {
      "name": "sequence_exists",
      "parameters": [
        {
          "parameter": "sequence_struct_or_id",
          "description": "The sequence object struct or ID to check for"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif sequence_exists(my_seq)\n    {\n        sequence_destroy(my_seq);\n    }\n```\nThe above code checks to see if the given sequence object exists and if it does it is destroyed.\n",
      "description": "With this function you can check to see if a sequence object exists or not. You supply either the sequence object struct (as returned by the function `sequence_create()` or `sequence_get()`) or the sequence ID (as returned by the function `layer_sequence_get_sequence()` or from the sequence instance struct property `sequence`, or the index from the asset browser) and the function will return `true` if the sequence object exists or `false` if it does not.",
      "returns": "Bool",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_exists.htm"
    },
    "sequence_get": {
      "name": "sequence_get",
      "parameters": [
        {
          "parameter": "sequence_index",
          "description": "The sequence index as defined in the asset browser."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _seq = sequence_get(seq_Logo); seq.loopmode = seqplay_pingpong;\n```\nThe above code retrieves the sequence object struct from the sequence object \"seq_Loop\" and then sets the loop mode for the sequence (all subsequently created sequence instances will now use this loop mode).\n",
      "description": "With this function you can retrieve the sequence object  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) from a sequence asset index. You supply the asset index for the sequence as defined in the asset browser, and the\n    function will return the sequence object struct that can then be accessed, or -1 if the sequence doesn't exist or the asset index given is not a sequence.",
      "returns": "struct or -1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_get.htm"
    },
    "sequence_get_objects": {
      "name": "sequence_get_objects",
      "parameters": [
        {
          "parameter": "sequence_struct_or_id",
          "description": "The sequence object struct or ID to get the objects from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _seq = sequence_get(seq_Logo); obj_array = sequence_get_objects(_seq);\n```\nThe above code gets the struct for a sequence object and then retrieves the objects that it uses and stores the array in a variable.\n",
      "description": "With this function you can retrieve an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) of all the object indices that have instances being created within the given sequence. You supply either the sequence object struct (as returned by the function\n    `sequence_create()` or `sequence_get()`) or the sequence ID (as returned by the function `layer_sequence_get_sequence()` or\n    from the sequence instance struct property `sequence`) and the function will return an array, where each item in the array is an `object_index` for the different objects being used by the sequence\n    to create instances.",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_get_objects.htm"
    },
    "sequence_instance_override_object": {
      "name": "sequence_instance_override_object",
      "parameters": [
        {
          "parameter": "sequence_instance_struct",
          "description": "The sequence instance struct to modify."
        },
        {
          "parameter": "object_id",
          "description": "The object index of the object within the sequence to override."
        },
        {
          "parameter": "instance_or_object_id",
          "description": "The object index or instance ID to use to override the sequence objects."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar _seq = layer_sequence_create(\"Background\", 0, 0, seq_AnimatedBackground);\n    var _seq_inst = layer_sequence_get_instance(_seq);\n    sequence_instance_override_object(_seq_inst, obj_Trees_Winter, obj_Trees_Summer);\n```\nThe above code creates a new sequence instance on the given layer and then modifies it so that all instances of the object \"obj_Trees_Winter\" are replaced by instances of the object \"obj_Trees_Summer\".\n",
      "description": "With this function you can override (replace) all instances of an object used in a sequence with another one. You supply the sequence instance struct ID (as returned when the sequence instance was created in the room or by using one of the room layer functions - see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/Sequence_Layers.htm)), as well as the object index (as defined in the asset browser) for the object that you want to override. Finally you give an object index or an instance ID to use as the object that is going to override the sequence (supplying an instance ID will simply use the object that the instance was created from as the override). Note that this can only be done on sequence instances (not sequence objects) and must be done before the sequence starts to play, otherwise it won't work.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_instance_override_object.htm"
    },
    "sequence_keyframe_new": {
      "name": "sequence_keyframe_new",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of keyframe to create, a constant, listed above."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyseq = sequence_create(); var mytracks = array_create(1); mytracks[0] = sequence_track_new(seqtracktype_graphic); var graphickeys = array_create(1); graphickeys[0] = sequence_keyframe_new(seqtracktype_graphic); graphickeys[0].frame\n    = 0; graphickeys[0].length = 1; graphickeys[0].stretch = true; graphickeys[0].disabled = false; var graphickeydata = array_create(1); graphickeydata[0] = sequence_keyframedata_new(seqtracktype_graphic); graphickeydata[0].spriteIndex\n    = spr_Platform; graphickeydata[0].channel = 0; graphickeys[0].channels = graphickeydata; mytracks[0].name = \"TestGraphicTrack\"; mytracks[0].keyframes = graphickeys; myseq.tracks = mytracks;\n```\nThe above code creates a new sequence and then creates a graphic asset track and sets some keyframe data on the track. This track is then assigned to the instance.\n",
      "description": "With this function you can create a new track keyframe  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm), supplying the type of track that the keyframe will be applied to, which will be one of the following constants:",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_keyframe_new.htm"
    },
    "sequence_keyframedata_new": {
      "name": "sequence_keyframedata_new",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of keyframe data to create, a constant, listed above."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyseq = sequence_create(); var mytracks = array_create(1); mytracks[0] = sequence_track_new(seqtracktype_graphic); var graphickeys = array_create(1); graphickeys[0] = sequence_keyframe_new(seqtracktype_graphic); graphickeys[0].frame\n    = 0; graphickeys[0].length = 1; graphickeys[0].stretch = true; graphickeys[0].disabled = false; var graphickeydata = array_create(1); graphickeydata[0] = sequence_keyframedata_new(seqtracktype_graphic); graphickeydata[0].spriteIndex\n    = spr_Platform; graphickeydata[0].channel = 0; graphickeys[0].channels = graphickeydata; mytracks[0].name = \"TestGraphicTrack\"; mytracks[0].keyframes = graphickeys; myseq.tracks = mytracks;\n```\nThe above code creates a new sequence and then creates a graphic asset track and sets some keyframe data on the track. This track is then assigned to the instance.\n",
      "description": "With this function you can create a new keyframe data  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm), supplying the type of track that the keyframe data will be applied to, which will be one of the following constants:",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_keyframedata_new.htm"
    },
    "sequence_track_new": {
      "name": "sequence_track_new",
      "parameters": [
        {
          "parameter": "type",
          "description": "The type of track to create, a constant, listed above."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nmyseq = sequence_create(); var mytracks = array_create(1); mytracks[0] = sequence_track_new(seqtracktype_graphic); var graphickeys = array_create(1); graphickeys[0] = sequence_keyframe_new(seqtracktype_graphic); graphickeys[0].frame\n    = 0; graphickeys[0].length = 1; graphickeys[0].stretch = true; graphickeys[0].disabled = false; var graphickeydata = array_create(1); graphickeydata[0] = sequence_keyframedata_new(seqtracktype_graphic); graphickeydata[0].spriteIndex\n    = spr_Platform; graphickeydata[0].channel = 0; graphickeys[0].channels = graphickeydata; mytracks[0].name = \"TestGraphicTrack\"; mytracks[0].keyframes = graphickeys; myseq.tracks = mytracks;\n```\nThe above code creates a new sequence and then creates a graphic asset track and sets some keyframe data on the track. This track is then assigned to the instance.\n",
      "description": "With this function you can create a new sequence track  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm), supplying the type of track that you wish to make which will be one of the following constants:",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_track_new.htm"
    },
    "sha1_file": {
      "name": "sha1_file",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The file to generate the sha1 hash for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nhash = sha1_file(working_directory + \"game_data.ini\")\n```\nThe above code will generate a sha1 hash for the specified file and store the returned value in the variable \"hash\".\n",
      "description": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States *National Security Agency* and is employed in several widely used applications popular **Git** where it is used to check for file changes, and the protocols\n    TLS and SSL, PGP, SSH, S/MIME, and IPsec. This function will take an input file and return a 160 bit message digest in ASCII format unique to that file to be used for integrity verification at any later date.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/sha1_file.htm"
    },
    "sha1_string_unicode": {
      "name": "sha1_string_unicode",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to hash."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar hash, str; str = base64_encode(game_data); hash = sha1_string_unicode(str); http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?hash=\" + hash); http_get(\"http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?data=\"\n    + str);\n```\nThe above code will base64 encode a string and then generate a sha1 hash. Finally, both the hash and the encoded string are sent to a server.\n",
      "description": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States *National Security Agency* and is employed in several widely used applications and protocols like the popular **Git** where it is used to check for file changes.\n    This function will take an input unicode string and returns a 160 bit message digest in ASCII format, for example:",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/sha1_string_unicode.htm"
    },
    "sha1_string_utf8": {
      "name": "sha1_string_utf8",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to hash."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar hash, str; str = json_encode(hiscore_map); hash = sha1_string_utf8(str); ini_open(\"local.ini\");\n     ini_write_string(\"info\", \"0\", hash); ini_close();\n     get[0] = http_post_string(\"http://www.MacSweeney Games.com/CatchTheHaggis?game_hiscores=\" + string(global.game_id), str)\n```\nThe above code will encode a DS map into a JSON string. A sha1 hash is then generated and stored in an ini file so that this can later be used to check the integrity of the JSON should the same information be received later form the server. The JSON\n    is then sent.\n",
      "description": "In cryptography, SHA-1 is a cryptographic hash function designed by the United States *National Security Agency* and is employed in several widely used applications and protocols like the popular **Git** where it is used to check for file changes.\n    This function will take an input UTF-8 string (which has a variable number of bytes per character) and returns a 160 bit message digest in ASCII format, for example:",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/sha1_string_utf8.htm"
    },
    "shader_current": {
      "name": "shader_current",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (shader_current() == -1)\n    {\n        shader_set(sh_warp)\n    }\n```\nThe above code will check to see what the current shader is and if it returns -1 (no shader being used) then a shader is set.\n",
      "description": "This function will return the index ID value of the shader currently being used for rendering, or it will return -1 if no shader is being used.",
      "returns": "Real (ID value of the shader, or -1 if no shader)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_current.htm"
    },
    "shader_enable_corner_id": {
      "name": "shader_enable_corner_id",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable (`true`) or disable (`false`) this function."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nshader_enable_corner_id(true);\n```\nThe above code will enable the use of colour bits for the corner id for all shaders.\n",
      "description": "With this function you can set a global state for all shaders being used where, when enabled, the shader \"steals\" 2 bits from the input colour values. The first is from the lower bit of the red colour value, and the second is from the lower\n    bit of the blue colour value. These values can get then be recovered in the shader to work out which vertex you are dealing with (ie: which corner).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_enable_corner_id.htm"
    },
    "shader_get_name": {
      "name": "shader_get_name",
      "parameters": [
        {
          "parameter": "shader",
          "description": "The index of the shader to get the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _shader = shader_current(); var _name = shader_get_name(_shader); draw_text(32, 32, \"Debug - Currently Rendering = \" + _name);\n```\nThe above code will get the name of the given shader and draw it to the screen.\n",
      "description": "With this function you can retrieve the name of a shader resource. You supply the unique ID value for the shader to get the name of and the function will return the name of the resource as a string.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_name.htm"
    },
    "shader_get_sampler_index": {
      "name": "shader_get_sampler_index",
      "parameters": [
        {
          "parameter": "shader",
          "description": "The index of the shader to use."
        },
        {
          "parameter": "uniform",
          "description": "The shader sampler to get the handle of (a string)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglassshader_bgsampler = shader_get_sampler_index(GlassShader, \"s_BackgroundSampler\") spr = sprite_get_texture(sprite_index, 0); shader_set(GlassShader);\n     texture_set_stage(glassshader_bgsampler, spr); shader_reset();\n  \n```\nThe above code will get the *handle* for the sampler within the shader indexed as \"GlassShader\" and then set that shader constant to the given sprite texture.\n",
      "description": "Since you cannot change the value of a shader sampler within the shader itself, you have to set it before calling the shader using one of the available **uniform set** functions. However, to be able to do *that* you\n    must first call this function to get the \"handle\" of the shader sampler that you will want to set.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_sampler_index.htm"
    },
    "shader_get_uniform": {
      "name": "shader_get_uniform",
      "parameters": [
        {
          "parameter": "shader",
          "description": "The index of the shader to use."
        },
        {
          "parameter": "uniform",
          "description": "The shader constant to get the handle of (a string)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nshader_params = shader_get_uniform(shd_glass, \"u_vRefractColour\");\n```\nThe above code will get the handle of the shader constant \"u_vRefractColour\".\n",
      "description": "Since you cannot change the value of a shader constant within the shader itself, you have to set it before calling the shader using one of the available **uniform set** functions. However, to be able to do that you must first call this\n    function to get the \"handle\" of the shader constant that you will want to change.",
      "returns": "Real (Uniform handle)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm"
    },
    "shader_is_compiled": {
      "name": "shader_is_compiled",
      "parameters": [
        {
          "parameter": "shader",
          "description": "The shader to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.GFX = false;\n    if (shader_is_compiled(sh_glass) && shader_is_compiled(sh_warp))\n    {\n        global.GFX = true;\n    }\n```\nThe above code will set a global variable to `false`, and then if both the shaders being checked have compiled correctly, it will be set to `true`.\n",
      "description": "This function will check a shader at run-time to make sure that it has been successfully compiled. If it has then the function returns `true` otherwise it returns `false`. This function should be used at the start of the game to make sure that the platform running your game has successfully compiled any shaders used (particularly on Windows where some computers may be using DX9 with Shader Level 2.0 and not a later version using shader level 3.0).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_is_compiled.htm"
    },
    "shader_reset": {
      "name": "shader_reset",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nshader_set(shader_Glass);\n    draw_self();\n    shader_reset();\n```\nThe above code will set a shader to be used for drawing, then draw the current sprite used for the instance using it. Finally it will reset the shader to revert to GameMaker's default shader.\n",
      "description": "This function resets the shader used for drawing and should be called when you no longer wish to use the current shader (set using `shader_set()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_reset.htm"
    },
    "shader_set": {
      "name": "shader_set",
      "parameters": [
        {
          "parameter": "shader",
          "description": "The index of the shader to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nshader_set(shader_Glass);\n    draw_self();\n    shader_reset();\n```\nThe above code will set a shader to be used for drawing, then draw the current sprite used for the instance using it.\n",
      "description": "With this function you can set the drawing target to the given shader and all further drawing will be done using that. You can end shader use with the function `shader_reset()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set.htm"
    },
    "shader_set_uniform_f": {
      "name": "shader_set_uniform_f",
      "parameters": [
        {
          "parameter": "handle",
          "description": "The handle of the shader constant to set."
        },
        {
          "parameter": "value1 ... value4",
          "description": "The floating point value (or values) to set the shader constant to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\nshader_set(shader_Glass); shader_params = shader_get_uniform(shader_glass, \"u_vParams\"); shader_set_uniform_f(shader_params, 0.1, 0.8, 0.25); draw_self();\n     shader_reset();\n  \n```\nThe above code will get the handle of the shader constant \"u_vParams\" ( a `vec3`), then set that constant to the given values.\n",
      "description": "With this function you can set the value (or values) of a shader constant. You must previously have gotten the \"handle\" of the constant using the function `shader_get_uniform()`, and\n    you will have to know what type of constant it is to pass the correct number of floating point values through to it, ie: if you have a `vec2` you will need to pass two values to the function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_f.htm"
    },
    "shader_set_uniform_f_array": {
      "name": "shader_set_uniform_f_array",
      "parameters": [
        {
          "parameter": "handle",
          "description": "The handle of the shader constant to set."
        },
        {
          "parameter": "array",
          "description": "A previously initialised array of floating point values."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nshader_set(shader_Glass); tex_array[0] = 0.5; tex_array[1] = 0.1; tex_array[2] = 0.25; shader_params = shader_get_uniform(shader_glass, \"u_vParams\"); shader_set_uniform_f_array(shader_params, tex_array); draw_self();\n     shader_reset();\n  \n```\nThe above code will get the handle of the shader constant \"u_vParams\" then set that constant to the given array.\n",
      "description": "With this function you can set a shader constant to hold an array of values. You must previously have gotten the \"handle\" of the constant using the function `shader_get_uniform()`, and you will have\n    to have previously initialised the array.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_f_array.htm"
    },
    "shader_set_uniform_i": {
      "name": "shader_set_uniform_i",
      "parameters": [
        {
          "parameter": "handle",
          "description": "The handle of the shader constant to set."
        },
        {
          "parameter": "value1 ... value4",
          "description": "The integer value (or values) to set the shader constant to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": true,
      "example": "```\nshader_set(shader_Glass); shader_params = shader_get_uniform(shader_glass, \"u_vParams\"); shader_set_uniform_i(shader_params, 0, 65, 255); draw_self();\n     shader_reset();\n  \n```\nThe above code will get the handle of the shader constant \"u_vParams\" ( a `vec3`), then set that constant to the given integer values.\n",
      "description": "With this function you can set the value (or values) of a shader constant. You must previously have gotten the \"handle\" of the constant using the function `shader_get_uniform()`, and\n    you will have to know what type of constant it is to pass the correct number of integer values through to it, ie: if you have a `vec2` you will need to pass two values to the function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_i.htm"
    },
    "shader_set_uniform_i_array": {
      "name": "shader_set_uniform_i_array",
      "parameters": [
        {
          "parameter": "handle",
          "description": "The handle of the shader constant to set."
        },
        {
          "parameter": "array",
          "description": "A previously initialised array of integer values."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nshader_set(shader_Glass);\n    col_array[0] = 255;\n    col_array[2] = 255;\n    col_array[3] = 64;\n    col_array[4] = 128;\n    shader_params = shader_get_uniform(shader_tint, \"cColourArray\");\n    shader_set_uniform_i_array(shader_params, col_array);\n    draw_self();\n    shader_reset();\n```\nThe above code will get the handle of the shader constant \"cColourArray\" then set that constant to the given array.\n",
      "description": "With this function you can set a shader constant to hold an array of values. You must previously have gotten the \"handle\" of the constant using the function `shader_get_uniform()`, and you will have to have previously initialised the array.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_i_array.htm"
    },
    "shader_set_uniform_matrix": {
      "name": "shader_set_uniform_matrix",
      "parameters": [
        {
          "parameter": "handle",
          "description": "The handle of the shader constant to set."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nshader_set(shader_Glass); shader_matrix = shader_get_uniform(shader_glass, \"u_vMatrix\"); shader_set_uniform_matrix(shader_matrix);\n     draw_self();\n     shader_reset();\n  \n```\nThe above code will get the handle of the shader constant \"u_vMatrix\" then set that constant to the current transform matrix.\n",
      "description": "With this function you can set the value (or values) of a shader constant to the current transform matrix (as set using the  [Matrix Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/Matrix_Functions.htm)). You must previously have gotten\n    the \"handle\" of the constant using the function `shader_get_uniform()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_matrix.htm"
    },
    "shader_set_uniform_matrix_array": {
      "name": "shader_set_uniform_matrix_array",
      "parameters": [
        {
          "parameter": "handle",
          "description": "The handle of the shader constant to set."
        },
        {
          "parameter": "array",
          "description": "A previously initialised array of floating point values."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nshader_set(shader_Glass); shader_params = shader_get_uniform(shader_tint, \"cMatrixArray\"); shader_set_uniform_matrix_array(shader_params, matrix_array); draw_self();\n     shader_reset();\n  \n```\nThe above code will get the handle of the shader constant \"cMatrixArray\" then set that constant to the given array.\n",
      "description": "With this function you can set a shader constant to hold an array of matrix values. You must previously have gotten the \"handle\" of the constant using the function `shader_get_uniform()`,\n    and you will have to have previously initialised the array as an array of floating point values, where each successive group of 16 floats is a 4x4 matrix.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set_uniform_matrix_array.htm"
    },
    "shaders_are_supported": {
      "name": "shaders_are_supported",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.GFX = false;\n    if shaders_are_supported()\n    {\n        if shader_is_compiled(sh_glass) && shader_is_compiled(sh_warp)\n        {\n            global.GFX = true;\n        }\n    }\n```\nThe above code will set a global variable to `false`, and then if the platform supports shaders and both the shaders being checked have compiled correctly, it will be set to `true`.\n",
      "description": "This function will do a check to see if the chosen target platform supports shaders, returning `true` if they do, and `false` if they do not. It is important to note that on **Android**, if the project does not have any shader resources defined, then the function will *always return *`false`, regardless of whether the device supports shaders or not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/shaders_are_supported.htm"
    },
    "shop_leave_rating": {
      "name": "shop_leave_rating",
      "parameters": [
        {
          "parameter": "text",
          "description": "Text that appears on the dialog."
        },
        {
          "parameter": "yes_string",
          "description": "Text that appears on the \"yes\" button."
        },
        {
          "parameter": "no_string",
          "description": "Text that appears on the \"no\" button."
        },
        {
          "parameter": "url",
          "description": "The full URL where the comment has to be sent."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif timer <= 0\n    {\n        shop_leave_rating(\"Thanks for playing the game! Why not leave a comment?\", \"Okay!\", \"Not Today!\", \"http://MacSweeney/comments\");\n        timer = 10000000;\n    }\n    else\n    {\n        timer -= 1;\n    }\n```\nThe above code will ask the user to leave a comment if the variable \"timer\" has counted down to 0.\n",
      "description": "This function opens up an OS dependent dialog where you can ask the user to post a rating or comment to a particular page. You can define the text that is to appear in the dialogue, as well as the text you wish to appear on the two buttons and the URL where the comment has to be posted.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/shop_leave_rating.htm"
    },
    "show_debug_message": {
      "name": "show_debug_message",
      "parameters": [
        {
          "parameter": "string",
          "description": "The custom debug message to show."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !instance_exists(obj_Exit)\n    {\n        show_debug_message(\"Exit not created!\");\n        show_debug_message(\"Error Num: \" + string(global.error));\n        game_end();\n    }\n```\nThe above code checks to see if an instance exists and if it does not, a debug message is shown in the compile window and the game is ended.\n",
      "description": "This function will create a custom debug message that is shown in the compiler window at runtime. Note that the message can be *either* a string or a real number, but if you need both then the number will have to be converted to string first using the `string()` function (see the example below) and that if the number has more than two decimal places then you should use `string_format()` to show them as by default decimals are rounded to the nearest two decimal places (so \"1.2468\" would show as \"1.25\" in the output window).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/show_debug_message.htm"
    },
    "show_debug_overlay": {
      "name": "show_debug_overlay",
      "parameters": [
        {
          "parameter": "enable",
          "description": "switch on (`true`) or off (`false) the debug overlay.`"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif global.debug\n    {\n        show_debug_overlay(true);\n    }\n    else\n    {\n        show_debug_overlay(false);\n    }\n```\nThe above code will toggle the debug on or off depending on the value of a global variable.\n",
      "description": "This function can be used to switch on and off the standard debug overlay when testing your game and is disabled by default. The debug overlay shows a graphic CPU/GPU usage bar in the actual game window itself along with the current real fps value, number of texture swaps and the number of vertex batches (note that texture swaps and vertex batches will never be zero and will normally show values of 2 or 3, since even with an empty room an no objects GameMaker Studio 2 still has to draw and batch things).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"
    },
    "show_error": {
      "name": "show_error",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to show in the pop-up message."
        },
        {
          "parameter": "abort",
          "description": "UNUSED Whether the error should abort the game (true) or allow the player to ignore it (false)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (room != rm_Dungeon)\n    {\n        show_error(\"Error: Went to wrong area. Aborting game.\", true);\n    }\n```\nThe above code will check if the current room is rm_Dungeon, and if it's not, it will show an error message.\n",
      "description": "This function will show a custom string as an error message.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/show_error.htm"
    },
    "show_message": {
      "name": "show_message",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to show in the pop-up message."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tot = 0;\n    for (var i = 0; i < 10; i += 1)\n    {\n        tot += inv[i];\n    }\n    show_message(\"Total = \" + string(tot));\n```\nThe above code will loop through the values stored in the array \"inv\" and add them to the variable \"tot\" before showing a message with the total.\n",
      "description": "This function creates a pop-up message box which displays the given string and a button marked \"Ok\" to close it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/show_message.htm"
    },
    "show_message_async": {
      "name": "show_message_async",
      "parameters": [
        {
          "parameter": "String",
          "description": "The message to show to the user."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "The **left mouse press event** (for example) of the object that is showing the message would have the following code:\n```\nmsg = show_message_async(\"You will now be taken to the store\");\n```\nThe above will show a message with the given string. The message id is stored in the variable \"msg\" and will be used in the asynchronous Dialogs event as shown below:\n```\nvar i_d, stat;\n    i_d = ds_map_find_value(async_load, \"id\");\n    if i_d == msg\n    {\n        if ds_map_find_value(async_load, \"status\")\n        {\n            url_open(\"https://play.google.com/store\");\n        }\n    }\n```\nThe above code checks the \"id\" key of the returned `DS Map` against the value stored in the variable \"msg\". If they are the same, it then checks to see if the \"Okay\" button was pressed (rather than the window being closed/cancelled) and if it returns `true` it opens a url.\n",
      "description": "This function opens a window and displays the message you define in the function to the user. This is an asynchronous function, and as such GameMaker Studio 2 does *not* block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has pressed the \"Okay\" button, an asynchronous **Dialog** event is triggered which, for the duration of that event *only*, will have a ds_map stored in the variable `async_load`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/show_message_async.htm"
    },
    "show_question": {
      "name": "show_question",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to show in the pop-up question."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (score > 500) && debug_mode\n    {\n        if show_question(\"Continue to next room?\")\n        {\n            room_goto(rm_Level2);\n        }\n        else game_end();\n    }\n```\nThe above code will check the score and if it is over 500, it will ask the user if they wish to continue or not and if the \"yes\" button is clicked it will go to another room, but if the \"no\" button is selected it will end the game.\n",
      "description": "This function creates a pop-up message box with two buttons for \"Yes\" and \"No\". It returns `true` or `false` depending on which one of the two buttons the user presses.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/show_question.htm"
    },
    "show_question_async": {
      "name": "show_question_async",
      "parameters": [
        {
          "parameter": "String",
          "description": "The question to ask to the user."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "The **left mouse press event** (for example) of the object that is showing the message would have the following code:\n```\nmsg = show_question_async(\"Do you want to buy some armour for \" + string(armour[0, 5]) + \"coins?\");\n```\nThe above will show a question with the given string, requesting that the user press either \"yes\" or \"No\". The function id is stored in the variable \"msg\" and will be used in the  [Asynchronous Dialog event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm) as shown below:\n```\nvar i_d, stat;\n    i_d = ds_map_find_value(async_load, \"id\");\n    if i_d == msg\n    {\n        if ds_map_find_value(async_load, \"status\")\n        {\n            coins -= armour[0,5];\n            global.protection += armour[0,0];\n        }\n    }\n```\nThe above code checks the \"id\" key of the returned `DS Map` against the value stored in the variable \"msg\". If they are the same, it then checks to see if one of the two buttons were pressed and if it returns `true` it will then deduct a value from a variable and add a value to a global variable too.\n",
      "description": "This function opens a window and displays the question you define in the function to the user. This is an asynchronous function, and as such GameMaker Studio 2 does *not* block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. The function has two buttons that show \"Yes\" and \"No\", and once the user has pressed one, an asynchronous **Dialog** event is triggered which, for the duration of that event *only*, will have a DS map stored in the variable `async_load`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/Dialog/show_question_async.htm"
    },
    "sign": {
      "name": "sign",
      "parameters": [
        {
          "parameter": "n",
          "description": "The number to get the sign of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ny += sign(y - mouse_y);\n```\nThe above code will add 1, -1 or 0 onto y depending on the result of `y - mouse_y`.\n",
      "description": "This function returns whether a number is positive, negative or neither and returns 1, -1, 0 respectively. For example - `sign(458)` will return 1, `sign(-5)` will return -1 and `sign(0)` will return 0.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/sign.htm"
    },
    "sin": {
      "name": "sin",
      "parameters": [
        {
          "parameter": "val",
          "description": "The angle (in radians) to return the sine of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = sin( pi/2 );\n```\nThis will set val to 1.\n",
      "description": "In a right angled triangle sin(val) = Opposite / Hypotenuse where val is one of the three angles.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/sin.htm"
    },
    "skeleton_animation_clear": {
      "name": "skeleton_animation_clear",
      "parameters": [
        {
          "parameter": "track",
          "description": "The animation track to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button(mb_right)\n    {\n        skeleton_animation_clear(1);\n    }\n```\nThe above code will clear the animation track 1 if the right mouse button is pressed.\n",
      "description": "This function will clear the specified animation track of all animations, ready to be re-assigned.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_clear.htm"
    },
    "skeleton_animation_get": {
      "name": "skeleton_animation_get",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_space)\n    {\n        if skeleton_animation_get() != \"jump\"\n        {\n            skeleton_animation_set(\"jump\");\n        }\n    }\n```\nThe above code will change the animation set being used to the \"jump\" set when the space key is pressed, but only if the current set being used is not already \"jump\".\n",
      "description": "With this function you can get the current animation set being used by your skeletal animation sprite. The return value is a string, which will be the name of the set as you defined it in your skeletal animation program.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get.htm"
    },
    "skeleton_animation_get_duration": {
      "name": "skeleton_animation_get_duration",
      "parameters": [
        {
          "parameter": "animname",
          "description": "The name (a string) of the animation set to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntime += delta_time / 1000000; var duration = skeleton_animation_get_duration(skeleton_animation_get()); var frame = floor((image_number * (mTime / duration)) + 0.5) % image_number; image_index = frame; draw_self();\n  \n```\nThe above code will set the `image_index` to the correct value for the currently assigned skeletal animation sprite.\n**Example2:**\n```\ntime += delta_time / 1000000; var d = skeleton_animation_get_duration(\"walk\"); if time > d time -= d; draw_skeleton_time(sprite_index, \"walk\", \"skin1\", time, x, y, image_xscale, image_yscale, image_angle,\n    c_white);\n```\nThe above code will draw the given skeletal animation sprite using delta-time to set the frame being drawn.\n",
      "description": "This function will return the time required for the given animation set to run before looping back to the beginning. The return value is in seconds.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_duration.htm"
    },
    "skeleton_animation_get_ext": {
      "name": "skeleton_animation_get_ext",
      "parameters": [
        {
          "parameter": "track",
          "description": "The track number to get the animation set name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif skeleton_animation_get_ext(1) != \"bodyfight\"\n    {\n        skeleton_animation_set_ext(\"bodyfight\", 1);\n    }\n```\nThe above code will change the animation set being used by track 1 to \"bodyfight\" if it is not already.\n",
      "description": "A single skeletal animation sprite can have various animation sets, and these sets can be assigned different tracks so that you can \"mix and match\" animation sets. This function will return the name of the animation set currently used by the given track number (as set by the function `skeleton_animation_set_ext`).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_ext.htm"
    },
    "skeleton_animation_get_frame": {
      "name": "skeleton_animation_get_frame",
      "parameters": [
        {
          "parameter": "track",
          "description": "The animation track to get the frame of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar frame = skeleton_animation_get_frame(0);\n    if frame > 0 && frame < 2\n    {\n        var box = skeleton_get_minmax();\n        var ww = (box[2] - box[0]) / 2;\n        var hh = (box[3] - box[1]) / 2;\n        part_particles_create(global.p_sys, box[0] + ww, box[1] + hh, global.Stars, 10);\n    }\n```\nThe above code will check the current frame of the animation assigned to track 0 and then burst some particles from a point in the middle of the total bounding box for the sprite.\n",
      "description": "This function will return the frame number of the animation on the specified animation track. The function will return -1 if no animation is assigned to the specific track given.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_frame.htm"
    },
    "skeleton_animation_get_frames": {
      "name": "skeleton_animation_get_frames",
      "parameters": [
        {
          "parameter": "anim_name",
          "description": "The animation name to get the frames of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar num = skeleton_animation_get_frames(skeleton_animation_get()); image_index = num -1; image_speed = 0;\n```\nThe above code will get the number of frames in the animation and then set the sprite to the last frame and stop animating.\n",
      "description": "This function can be used to retrieve the number of frames that any given skeleton animation has. You supply the skeleton animation name (as a string, as defined in the program used to make the animation, or as returned by using the function     `skeleton_animation_get`, and the function returns the frames that it has as an integer value. The function will return 0 if the specified animation does not exist.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_get_frames.htm"
    },
    "skeleton_animation_list": {
      "name": "skeleton_animation_list",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The sprite index of the Spine skeletal animation to get the list from."
        },
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the animation names."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar list = ds_list_create();\n    skeleton_animation_list(sprite_index, list);\n    \n    for (var i = 1; i < ds_list_size(list); i++;)\n    {\n        skeleton_animation_mix(list[| 0], list[| i], 0.5);\n    }\n    \n    ds_list_destroy(list);\n  \n```\nThe above code creates a DS list of all the animation names for the sprite being used by the instance. It then loops through these and sets the mix value for all of them with the first animation to 0.5.\n",
      "description": "With this function you can populate a (pre-created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) with all the names of the animations included as part of the skeletal animation sprite. The names will be strings and can then be used in the other animation functions for these types of sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_list.htm"
    },
    "skeleton_animation_mix": {
      "name": "skeleton_animation_mix",
      "parameters": [
        {
          "parameter": "animfrom",
          "description": "The name (a string) of the first animation set to interpolate from."
        },
        {
          "parameter": "animto",
          "description": "The name (a string) of the second animation set to interpolate to."
        },
        {
          "parameter": "duration",
          "description": "The duration of the interpolation (from 0 to 1)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nskeleton_animation_set(\"walk\"); skeleton_animation_mix(\"walk\", \"jump\", 0.2); skeleton_animation_mix(\"jump\", \"walk\", 0.4);\n```\nThe above code would go in the Create Event of an instance with a skeletal animation sprite and sets the animation mix duration for interpolating between the two animations sets \"walk\" and \"jump\".\n",
      "description": "You can switch animation sets easily using the `skeleton_animation_set()` function, but this may cause a skip or stutter as one animation is swapped for another. To prevent this, you can set the mix value\n    between two animation sets and the sprite will interpolate between them. normally you would want to do this in the Create Event of the instance with the skeletal animation as it only needs set once, and GameMaker Studio 2 will interpolate all further\n    changes to the sprite using the animation sets in that instance. Note that the duration value is from 0 to 1, where a value of 0.5 would have a \"half and half\" interpolation from one set to the other.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_mix.htm"
    },
    "skeleton_animation_set": {
      "name": "skeleton_animation_set",
      "parameters": [
        {
          "parameter": "animname",
          "description": "The name (a string) of the animation set to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_space)\n    {\n        if skeleton_animation_get() != \"jump\"\n        {\n            skeleton_animation_set(\"jump\");\n        }\n    }\n```\nThe above code will change the animation set being used to the \"jump\" set when the space key is pressed, but only if the current set being used is not already \"jump\".\n",
      "description": "Once you have assigned a skeletal animation sprite to your instance, you can then define which *animation set* it should use at any given time with this function. When you created your sprite (in Spine) you will have defined multiple animations sets for different states and named each of them appropriately. These names are what you will use to tell GameMaker Studio 2 which animation set to use at any time in your game. For example, if your sprite is for a platform game, then you may have a \"jump\" set, a \"run\" set and an \"idle\" set all contained within the one sprite and you can switch between them in your game using this function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set.htm"
    },
    "skeleton_animation_set_ext": {
      "name": "skeleton_animation_set_ext",
      "parameters": [
        {
          "parameter": "animname",
          "description": "The name (a string) of the animation set to use."
        },
        {
          "parameter": "track",
          "description": "The track for the animation set to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif mouse_check_button(mb_left)\n    {\n        skeleton_animation_set_ext(\"bodyfight\", 1);\n    }\n    else\n    {\n        skeleton_animation_set_ext(\"bodywalk\", 1);\n    }\n```\nThe above code will change the animation set being used by track 1 to the \"bodyfight\" set or the \"bodywalk\" set when the left mouse button is pressed.\n",
      "description": "When you set an animation set for your skeletal animation sprite, it is assigned *track 0* internally. However, you can assign further sets to further tracks (1 and above) and in this way have your sprite play two (or more) animations at the same time. Note that the sprite should have been designed in your animation program with this in mind, such that the \"base\" animation in track 0 only has keyframes for certain bones, while the next tracks have keyframes for the others. For example, if you have a \"walk\" animation and its keyframes only affect the legs of the sprite, you can then have a set of head animations and arm animations which you can set in tracks 1 and 2 respectively, permitting you to have a base movement and adapt on it in real-time while the game is being played.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set_ext.htm"
    },
    "skeleton_animation_set_frame": {
      "name": "skeleton_animation_set_frame",
      "parameters": [
        {
          "parameter": "track",
          "description": "The animation track to set the frame of."
        },
        {
          "parameter": "index",
          "description": "The new index for the animation frame."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif global.pause\n    {\n        skeleton_animation_set_frame(0, -image_speed);\n    }\n```\nThe above code will set the frame index for the animation in track 0 to the negative image speed when the global \"pause\" variable is `true` (essentially pausing the animation).\n",
      "description": "This function will set the animation assigned to the given track to the frame you supply. The frame index should be an real value between 0 and the number of frames for the animation (which you can get using the function `skeleton_animation_get_frames`). If you supply a value outside of this range, the animation will be looped to make up the difference, for example if the animation has 5 frames and you set the frame to 8, the actual frame shown will be 3.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Animation/skeleton_animation_set_frame.htm"
    },
    "skeleton_attachment_create": {
      "name": "skeleton_attachment_create",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name (as a string) of the attachment to create."
        },
        {
          "parameter": "sprite",
          "description": "The sprite_index to get the attachment image from."
        },
        {
          "parameter": "ind",
          "description": "The image_index to get the attachment image from."
        },
        {
          "parameter": "xorigin",
          "description": "The x origin for the image being used."
        },
        {
          "parameter": "yorigin",
          "description": "The y origin for the image being used."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the image. 0=normal, 90=turned 90 degrees counter-clockwise etc."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nskeleton_attachment_create(\"sword\", spr_Weapons, 0, 0, 80, 1, 1, 90); skeleton_attachment_create(\"knife\", spr_Weapons, 1, 0, 45, 1, 1, 90); skeleton_attachment_create(\"crossbow\", spr_Weapons, 0, 10, 30, 1, 1,\n    0); skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"knife\", \"crossbow\"));\n```\nThe above code would check the currently assigned attachment name for the slot named \"slot_leftHand\" and if an empty string is returned, a new sprite is attached.\n",
      "description": "When you create you skeletal animation sprite, you can assign *attachment slots* and *attachments* to go in them. These are simply images that are apart from the animation but when attached\n    will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires\n    that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms\n    that you wish to be applied to the image when attached. If the attachment was successfully created the function will return `1` and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine\n    sprite) then it will return `-1`.",
      "returns": "1 if successful, -1 if not",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_create.htm"
    },
    "skeleton_attachment_create_colour": {
      "name": "skeleton_attachment_create_colour",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name (as a string) of the attachment to create."
        },
        {
          "parameter": "sprite",
          "description": "The sprite_index to get the attachment image from."
        },
        {
          "parameter": "ind",
          "description": "The image_index to get the attachment image from."
        },
        {
          "parameter": "xorigin",
          "description": "The x origin for the image being used."
        },
        {
          "parameter": "yorigin",
          "description": "The y origin for the image being used."
        },
        {
          "parameter": "xscale",
          "description": "The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "yscale",
          "description": "The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc..."
        },
        {
          "parameter": "rot",
          "description": "The rotation of the image: 0 = normal, 90 = turned 90° counter-clockwise etc."
        },
        {
          "parameter": "Colour",
          "description": "The colour value to use (A constant, integer or hex value)."
        },
        {
          "parameter": "Alpha",
          "description": "The alpha value to use (from 0 to 1)."
        }
      ],
      "requiredParameters": 10,
      "isVariadic": false,
      "example": "```\nskeleton_attachment_create_colour(\"sword\", spr_Weapons, 0, 0, 80, 1, 1, 90, c_red, 1); skeleton_attachment_create_colour(\"knife\", spr_Weapons, 1, 0, 45, 1, 1, 90, c_yellow, 1); skeleton_attachment_create_colour(\"crossbow\",\n    spr_Weapons, 0, 10, 30, 1, 1, 0, c_white, 0.5); skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"knife\", \"crossbow\"));\n```\nThe above code would check the currently assigned attachment name for the slot named \"slot_leftHand\" and if an empty string is returned, a new sprite is attached.\n",
      "description": "When you create you skeletal animation sprite, you can assign *attachment slots* and *attachments* to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are\n    attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as\n    a string) and then set the `sprite_index` and `image_index` to use, as well as the x and y origin (which can\n    be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached, as well as the colour to be blended with the image and it's alpha (transparency)\n    value. If the attachment was successfully created the function will return `1` and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return `-1`.",
      "returns": "1 if successful, -1 if not",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_create_colour.htm"
    },
    "skeleton_attachment_get": {
      "name": "skeleton_attachment_get",
      "parameters": [
        {
          "parameter": "slot",
          "description": "The slot name (a string) to get the attachment of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif skeleton_attachment_get(\"slot_leftHand\") == \"\"\n    {\n        skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"spear\", \"knife\"));\n    }\n```\nThe above code would check the currently assigned attachment name for the slot named \"slot_leftHand\" and if an empty string is returned, a new sprite is attached.\n",
      "description": "A skeletal animation sprite may have other sprites added as attachments, with these sprites being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can get the name (as a string) of the attachment for the given slot of the currently assigned sprite. Note that attached sprites are referenced through their *name string* as assigned in Spine, or when you called `skeleton_attachment_create()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_get.htm"
    },
    "skeleton_attachment_set": {
      "name": "skeleton_attachment_set",
      "parameters": [
        {
          "parameter": "slot",
          "description": "The slot name (a string) to get the attachment of."
        },
        {
          "parameter": "attachment",
          "description": "The name (as a string or a sprite_index) of the attachment image."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif skeleton_attachment_get(\"slot_leftHand\") == \"\"\n    {\n        skeleton_attachment_set(\"slot_leftHand\", choose(\"sword\", \"spear\", \"knife\"));\n    }\n```\nThe above code would check the currently assigned attachment name for the slot named \"slot_leftHand\" and if an empty string is returned, a new sprite is attached.\n",
      "description": "A skeletal animation sprite may have other images added as attachments, with these images being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can set an attachment to a given slot, where you are required to give the names (as strings) of the slot and the attachment. These names are defined by the animation program used, or (in the case of the attachment) when you call `skeleton_attachment_create()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Attachments/skeleton_attachment_set.htm"
    },
    "skeleton_bone_data_get": {
      "name": "skeleton_bone_data_get",
      "parameters": [
        {
          "parameter": "bone",
          "description": "The name (as a string) of the bone."
        },
        {
          "parameter": "map",
          "description": "The (previously created) DS map that stores the bone data."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbone_map = ds_map_create(); skeleton_bone_data_get(\"leftarm\", bone_map);\n```\nThe above code creates a DS map and then populates it with the data from the bone named \"leftarm\".\n",
      "description": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program. This function can be used to get information on the named bone at any time and store the data in an empty\n     [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), which you must have created previously. Note that this data refers to the **default** pose for the skeleton, and not the current pose that is being drawn. If you need the data\n    from the **current** pose, use `skeleton_bone_state_get()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_data_get.htm"
    },
    "skeleton_bone_data_set": {
      "name": "skeleton_bone_data_set",
      "parameters": [
        {
          "parameter": "bone",
          "description": "The name (as a string) of the bone."
        },
        {
          "parameter": "map",
          "description": "The (previously created) DS map that stores the bone data."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar bone_map = ds_map_create(); skeleton_bone_data_get(\"head\", bone_map); ds_map_replace(bone_map, \"parent\", \"body\"); skeleton_bone_data_set(\"head\", bone_map); ds_map_destroy(bone_map);\n  \n```\nThe above code creates a DS map and then populates it with the data from the bone named \"head\". It then replaces the \"parent\" bone key in the map with a new value and sets the \"head\" bone again with the new set of data.\n",
      "description": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data refers\n    to the **default** pose for the skeleton, and *not* the current pose that is being drawn (for that use the function `skeleton_bone_state_set()`), and must be set from a previously created\n     [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), which should have the following keys and their equivalent values:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_data_set.htm"
    },
    "skeleton_bone_list": {
      "name": "skeleton_bone_list",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The sprite index of the Spine skeletal animation to get the list from."
        },
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the bone names."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbone_list = ds_list_create(); skeleton_bone_list(sprite_index, bone_list);\n```\nThe above code creates a DS list then populates it with the bone names for later use.\n",
      "description": "With this function you can populate a (pre-created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) with all the names of the bones used as part of the skeletal animation sprite. The names will be strings and can then be used\n    in the other skeleton animation bone functions for these types of sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_list.htm"
    },
    "skeleton_bone_state_get": {
      "name": "skeleton_bone_state_get",
      "parameters": [
        {
          "parameter": "bone",
          "description": "The name (as a string) of the bone."
        },
        {
          "parameter": "map",
          "description": "The (previously created) DS map that stores the bone data."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create(); skeleton_bone_state_get(\"head\", map); var xx = ds_map_find_value(map, \"worldX\"); var yy = ds_map_find_value(map, \"worldY\"); var deltax = mouse_x - (x + xx); var deltay\n    = mouse_y - (y + yy); var angle = -radtodeg(arctan2(deltay, deltax)); ds_map_replace(map, \"angle\", angle); skeleton_bone_state_set(\"head\", map); ds_map_destroy(map);\n  \n```\nThe above code creates a DS map and then populates it with the data from the bone named \"head\". It then extracts the world position for the bone, and uses that data to set the \"angle\" of the bone to track the mouse position in the\n    game.\n",
      "description": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to get certain data for the named bone at any time. Note that this data refers\n    to the **current** pose for the skeleton, depending on the animation set used, and the function requires a previously created  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), which will then have the following keys and their\n    equivalent values after calling the function:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_state_get.htm"
    },
    "skeleton_bone_state_set": {
      "name": "skeleton_bone_state_set",
      "parameters": [
        {
          "parameter": "bone",
          "description": "The name (as a string) of the bone."
        },
        {
          "parameter": "map",
          "description": "The (previously created) DS map that stores the bone data."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar map = ds_map_create(); skeleton_bone_state_get(\"head\", map); var xx = ds_map_find_value(map, \"worldX\"); var yy = ds_map_find_value(map, \"worldY\"); var deltax = mouse_x - (x + xx); var deltay\n    = mouse_y - (y + yy); var angle = -radtodeg(arctan2(deltay, deltax)); ds_map_replace(map, \"angle\", angle); skeleton_bone_state_set(\"head\", map); ds_map_destroy(map);\n  \n```\nThe above code creates a DS map and then populates it with the data from the bone named \"head\". It then extracts the world position for the bone, and uses that data to set the \"angle\" of the bone to track the mouse position in the\n    game.\n",
      "description": "Your skeletal animation is made up of a number of \"bones\", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data will\n    set the **current** pose for the skeleton, depending on the animation set used, and the function requires a previously created  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm), which should have the following keys and their\n    required values:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Bones/skeleton_bone_state_set.htm"
    },
    "skeleton_collision_draw_set": {
      "name": "skeleton_collision_draw_set",
      "parameters": [
        {
          "parameter": "flag",
          "description": "Set to `true` to turn on drawing, and `false` to turn it off."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif debug_mode == true\n    {\n        skeleton_collision_draw_set(true);\n    }\n```\nThe above code checks to see if the game is being run in debug mode and if it is, it toggles the skeletal collision data for the instance to be shown.\n",
      "description": "With this function, you can toggle on (`true`) or off (`false`) drawing the collision data for the current skeletal animation sprite being used by the instance. If this is switched on, the bounding box and the precise collision mask will be drawn as outlines around the sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_collision_draw_set.htm"
    },
    "skeleton_find_slot": {
      "name": "skeleton_find_slot",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x position in the room to check."
        },
        {
          "parameter": "y",
          "description": "The y position in the room to check."
        },
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the DS maps."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nslot_list = ds_list_create(); skeleton_find_slot(mouse_x, mouse_y, slot_list);\n```\nThe above code creates a DS list and then populates it with the slot names found at the position of the mouse in the room.\n",
      "description": "With this function you can find which slots are at a specified room-space position in the Spine sprite associated with the current instance. You create a  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) and supply its ID along\n    with an x/y position to check and the list will be populated with name string for each of the available attachment slots for the sprite (including any attachment modifications). Note that the list is always sorted in descending order starting from\n    the top-most slot.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_find_slot.htm"
    },
    "skeleton_get_bounds": {
      "name": "skeleton_get_bounds",
      "parameters": [
        {
          "parameter": "index",
          "description": "The bounding box index to get the values of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": " \n```\nvar num = skeleton_get_num_bounds();\n    var yy = 60;\n    for(var i = 0; i < num; i++)\n    {\n        var b_info = skeleton_get_bounds(i);\n        if b_info[0] > 0\n        {\n            var data = b_info[1] + \":\";\n            for(var j = 0; j < b_info[0]; j++)\n            {\n                data += \" (\" + string(b_info[(j * 2) + 2]) + \", \" + string(b_info[(j * 2) + 2 + 1]) + \")\";\n            }\n            draw_text(20, yy, data);\n            yy += 20;\n        }\n    }\n```\nThe above code will loop through each of the bounding boxes associated with the currently assigned sprite and then draw that data as a string to the screen.\n",
      "description": "This function will return an array of values associated with any given bounding box for the currently assigned skeleton animation sprite. You supply the index number for the bounding box to get the details of (you can retrieve the total number of bounding boxes for the sprite using the function `skeleton_get_num_bounds()`) and the function will return an array with the following elements:",
      "returns": "Array (minimum 2 elements: numPoints, name [, xPos, yPos, etc...])",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_get_bounds.htm"
    },
    "skeleton_get_minmax": {
      "name": "skeleton_get_minmax",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar frame = skeleton_animation_get_frame(0);\n    if frame > 0 && frame < 2\n    {\n        var box = skeleton_get_minmax();\n        var ww = (box[2] - box[0]) / 2;\n        var hh = (box[3] - box[1]) / 2;\n        part_particles_create(global.p_sys, box[0] + ww, box[1] + hh, global.Stars, 10);\n    }\n```\nThe above code will check the current frame of the animation assigned to track 0 and then burst some particles from a point in the middle of the total bounding box for the sprite.\n",
      "description": "This function will return an array with the total bounding box value for all the individual bounding boxes assigned to a skeleton animation sprite. The returned array will have 4 elements:",
      "returns": "Array (4 elements: xMin, yMin, xMax, yMax)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_get_minmax.htm"
    },
    "skeleton_get_num_bounds": {
      "name": "skeleton_get_num_bounds",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar num = skeleton_get_num_bounds();\n    var yy = 60;\n    for(var i = 0; i < num; i++)\n    {\n        var b_info = skeleton_get_bounds(i);\n        if b_info[0] > 0\n        {\n            var data = b_info[1] + \":\";\n            for(var j = 0; j < b_info[0]; j++)\n            {\n                data += \" (\" + string(b_info[(j * 2) + 2]) + \", \" + string(b_info[(j * 2) + 2 + 1]) + \")\";\n            }\n            draw_text(20, yy, data);\n            yy += 20;\n        }\n    }\n```\nThe above code will loop through each of the bounding boxes associated with the currently assigned sprite and then draw that data as a string to the screen.\n",
      "description": "This function will return the number of bounding boxes associated with the skeleton animation sprite assigned to the instance running the code. This can then be used along with the function `skeleton_get_bounds()` to retrieve data about each of the bounding boxes.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Drawing_And_Miscellaneous/skeleton_get_num_bounds.htm"
    },
    "skeleton_skin_get": {
      "name": "skeleton_skin_get",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif skeleton_skin_get() == \"skin_Enemy1\"\n    {\n        skeleton_skin_set(choose(\"skin_Enemy1\", \"skin_Enemy2\", \"skin_Enemy3\");\n    }\n```\nThe above code would check the currently assigned skin for the animation and if it is \"skin_Enemy1\", it chooses and sets a new skin from one of three options.\n",
      "description": "With skeletal animation sprites, you can assign separate textures (called \"skins\") to the animation, thereby using one animation for multiple different things. This function will return the name of the skin (as a string) that is currently assigned to the skeletal animation sprite your instance is using. The name returned is that which you set when you created the sprite in your animation program.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_get.htm"
    },
    "skeleton_skin_list": {
      "name": "skeleton_skin_list",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The sprite index of the Spine skeletal animation to get the list from."
        },
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the animation names."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar list = ds_list_create(); skeleton_skin_list(sprite_index, list); var num = ds_list_size(list); skeleton_skin_set(list[| irandom(num - 1)); ds_list_destroy(list);\n  \n```\nThe above code creates a DS list then populates it with the skin names. A random one is then chosen and applied to the instance before the list is destroyed.\n",
      "description": "With this function you can populate a (pre-created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) with all the names of the skins included as part of the skeletal animation sprite. The names will be strings and can then be\n    used in the other skeleton animation skin functions for these types of sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_list.htm"
    },
    "skeleton_skin_set": {
      "name": "skeleton_skin_set",
      "parameters": [
        {
          "parameter": "skinname",
          "description": "The name (a string) of the skin to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif skeleton_skin_get() == \"skin_Enemy1\"\n    {\n        skeleton_skin_set(choose(\"skin_Enemy1\", \"skin_Enemy2\", \"skin_Enemy3\");\n    }\n```\nThe above code would check the currently assigned skin for the animation and if it is \"skin_Enemy1\", it chooses and sets a new skin from one of three options.\n",
      "description": "A skeletal animation sprite can be drawn with a variety of textures (called \"skins\"), permitting you to use one single animation for multiple different purposes. For example, you may have a generic walk animation and this can be used by your NPC characters, enemies, etc... in a game simply by changing the skin it is drawn with. These skins need to have been previously created and named in your animation program, and this name is passed into the function (as a string) to set the sprite to use that skin when being drawn.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skins/skeleton_skin_set.htm"
    },
    "skeleton_slot_alpha_get": {
      "name": "skeleton_slot_alpha_get",
      "parameters": [
        {
          "parameter": "slot",
          "description": "The slot name to check, a string"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nslot_list = ds_list_create();\n    skeleton_find_slot(mouse_x, mouse_y, slot_list);\n    if !ds_list_empty(slot_list)\n    {\n        for (var i = 0; i < ds_list_size(slot_list); ++i)\n        {\n            if skeleton_slot_alpha_get(slot_list[| i]) != 1\n            {\n                skeleton_slot_colour_set(slot_list[| i], c_white, 1);\n            }\n        }\n    }\n```\nThe above code creates a DS list and then populates it with the slot names found at the position of the mouse in the room. It then loops through the slot list and resets the colour for the found slots to white with an alpha of 1 if the alpha is not already 1.\n",
      "description": "With this function you can get an attachment slot alpha value. You supply the slot name (a string) and the function will return an real value for the alpha between 0 and 1.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_alpha_get.htm"
    },
    "skeleton_slot_colour_get": {
      "name": "skeleton_slot_colour_get",
      "parameters": [
        {
          "parameter": "slot",
          "description": "The slot name to check, a string"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nslot_list = ds_list_create();\n    skeleton_find_slot(mouse_x, mouse_y, slot_list);\n    if !ds_list_empty(slot_list)\n    {\n        for (var i = 0; i < ds_list_size(slot_list); ++i)\n        {\n            if skeleton_slot_colour_get(slot_list[| i]) != c_white\n            {\n                skeleton_slot_colour_set(slot_list[| i], c_white, 1);\n            }\n        }\n    }\n```\nThe above code creates a DS list and then populates it with the slot names found at the position of the mouse in the room. It then loops through the slot list and resets the colour for the found slots to white with an alpha of 1 if the colour is not already white.\n",
      "description": "With this function you can get an attachment slot colour. You supply the slot name (a string) and the function will return an integer value for the colour.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_colour_get.htm"
    },
    "skeleton_slot_colour_set": {
      "name": "skeleton_slot_colour_set",
      "parameters": [
        {
          "parameter": "slot",
          "description": "The slot name to set, a string"
        },
        {
          "parameter": "colour",
          "description": "The colour to set, either an integer, a constant, or a hex value."
        },
        {
          "parameter": "alpha",
          "description": "The alpha to set from 0 to 1."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nslot_list = ds_list_create();\n    skeleton_find_slot(mouse_x, mouse_y, slot_list);\n    if !ds_list_empty(slot_list)\n    {\n        for (var i = 0; i < ds_list_size(slot_list); ++i)\n        {\n            if skeleton_slot_colour_get(slot_list[| i]) != c_white\n            {\n                skeleton_slot_colour_set(slot_list[| i], c_white, 1);\n            }\n        }\n    }\n```\nThe above code creates a DS list and then populates it with the slot names found at the position of the mouse in the room. It then loops through the slot list and resets the colour for the found slots to white with an alpha of 1 if the colour is not already white.\n",
      "description": "With this function you can set an attachment slot colour and alpha so all sprites attached to it will be drawn with these blend values. Keep in mind that the instance sprite can have a blend colour and alpha setting (`image_blend` and `image_alpha`), as can the attachment (see the function `skeleton_attachment_create_colour()`), and so the final colour and alpha that the assigned attachment sprite for the slot will have will be a composite of all these values.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_colour_set.htm"
    },
    "skeleton_slot_data": {
      "name": "skeleton_slot_data",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The sprite index of the Spine skeletal animation to get the data from."
        },
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the DS maps."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar list = ds_list_create();\n    var open = true;\n    slot_name = \"\";\n    skeleton_slot_data(sprite_index, list);\n    \n    for (var i = 0; i < ds_list_size(list); i++)\n    {\n        var map = list[| i];\n        if open\n        {\n            if map[? \"attachment\"] == \"(none)\"\n            {\n                open = false;\n                slot_name = map[? \"name\"];\n            }\n        }\n    \n        ds_map_destroy(map);\n    }\n    \n    ds_list_destroy(list);\n  \n```\nThe above code creates a DS list and then populates it with the slot data for the instance sprite. This data is then parsed to extract the individual DS maps with the slot data. This is then checked to see if there is an empty slot, and if so the variable \"slot_name\" is assigned the empty slot name before the DS map is destroyed. Finally we destroy the DS list as it is no longer required.\n",
      "description": "With this function you can populate a (pre-created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) with data for each of the available attachment slots that an animation contains. This data is returned in the forum of a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) which contains the following key/value pairs:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_data.htm"
    },
    "skeleton_slot_data_instance": {
      "name": "skeleton_slot_data_instance",
      "parameters": [
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the DS maps."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar list = ds_list_create();\n    var open = true;\n    slot_name = \"\";\n    skeleton_slot_data_instance(list);\n    for (var i = 0; i < ds_list_size(list); i++)\n    {\n        var map = list[| i];\n        if open\n        {\n            if map[? \"attachment\"] == \"(none)\"\n            {\n                open = false;\n                slot_name = map[? \"name\"];\n            }\n        }\n    \n        ds_map_destroy(map);\n    }\n    \n    ds_list_destroy(list);\n  \n```\nThe above code creates a DS list and then populates it with the slot data for the instance sprite. This data is then parsed to extract the individual DS maps with the slot data. This is then checked to see if there is an empty slot, and if so the variable \"slot_name\" is assigned the empty slot name before the DS map is destroyed. Finally we destroy the DS list as it is no longer required.\n",
      "description": "With this function you can populate a (pre-created)  [DS list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) with data for each of the available attachment slots for the Spine sprite associated with the current instance (including any attachment modifications). This data is returned in the forum of a  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) which contains the following key/value pairs:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_data_instance.htm"
    },
    "skeleton_slot_list": {
      "name": "skeleton_slot_list",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The sprite index of the Spine skeletal animation to get the list from."
        },
        {
          "parameter": "list",
          "description": "The ID of the DS list to populate with the bone names."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nbone_list = ds_list_create(); skeleton_slot_list(sprite_index, bone_list);\n```\nThe above code creates a DS list then populates it with the slot names for later use.\n",
      "description": "With this function you can populate a (pre-created) DS list with all the names of the slots created as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation slot functions\n    for these types of sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Slots/skeleton_slot_list.htm"
    },
    "sprite_add": {
      "name": "sprite_add",
      "parameters": [
        {
          "parameter": "fname",
          "description": "The name (a string file path) of the file to add."
        },
        {
          "parameter": "imgnum",
          "description": "Use to indicate the number of sub-images (1 for a single image or for a `*.gif`)."
        },
        {
          "parameter": "removeback",
          "description": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
        },
        {
          "parameter": "smooth",
          "description": "Indicates whether to smooth the edges if transparent."
        },
        {
          "parameter": "xorig",
          "description": "Indicate the x position of the origin in the sprite."
        },
        {
          "parameter": "yorig",
          "description": "Indicate the y position of the origin in the sprite."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nspr = sprite_add(\"player_5.png\", 16, true, true, 0, 0);\n```\nThe above code loads a sprite into the game and stores its index in the variable \"spr\".\n",
      "description": "With this function you can add an image as a sprite, loading it from an external source where the image file to be loaded should **always** be in either `*.png`, `*.gif`, `*.jpg/jpeg` or `*.json` format (`*json`    files are used for loading  [skeleton animation sprites](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Skeletal_Animation/Skeletal_Animation.htm) made with Spine). The function returns the new sprite index which must then be used in all further code that relates to the sprite. If\n    you use this function with HTML5 or are getting an image from a URL, this function will also generate an **Image Loaded** asynchronous event. See  [this page](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Image_Loaded.htm) for\n    more information.",
      "returns": "Real (sprite ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm"
    },
    "sprite_add_from_surface": {
      "name": "sprite_add_from_surface",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to add the new image to."
        },
        {
          "parameter": "surface",
          "description": "The index of the surface from which the get the image."
        },
        {
          "parameter": "x",
          "description": "The x position to copy from."
        },
        {
          "parameter": "y",
          "description": "The y position to copy from."
        },
        {
          "parameter": "w",
          "description": "The width of the area to be copied (from the x position)."
        },
        {
          "parameter": "h",
          "description": "The height of the area to be copied (from the y position)."
        },
        {
          "parameter": "removeback",
          "description": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
        },
        {
          "parameter": "smooth",
          "description": "Indicates whether to smooth the edges."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nspr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16);\n    var i;\n    for (i = 1; i < 8; i += 1)\n    {\n        sprite_add_from_surface(spr_custom, surf, i, 0, 32, 32, true, true);\n    }\n```\nThe above code creates a sprite from the surface indexed in the variable \"surf\", assigning its index to the variable \"spr_Custom\", and then uses a `for` loop to move across the surface and capture various sections which are added into the sprite as sub-images.\n",
      "description": "This function works in exactly the same way as `sprite_create_from_surface()` only instead of creating a new sprite from the area of the indexed surface that you select, it adds the defined area of the surface as a new sub-image to a previously created sprite (this means that you cannot add it directly to a sprite from the resource tree, but rather only to one previously created from a surface, or one that has been duplicated from a resource sprite using `sprite_duplicate()`).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add_from_surface.htm"
    },
    "sprite_assign": {
      "name": "sprite_assign",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to be copied to (ie: overwritten)."
        },
        {
          "parameter": "sprite",
          "description": "The sprite to be copied from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif sprite_exists(global.Player_Sprite)\n    {\n        var t_spr = sprite_add(\"player.png\", 16, true, true, 0, 0);\n        sprite_assign(global.Player_Sprite, t_spr);\n        sprite_delete(t_spr);\n    }\n    else\n    {\n        global.Player_Sprite = sprite_add(\"player.png\", 16, true, true, 0, 0);\n    }\n```\nThe above code checks to see if the global variable \"Player_Sprite\" contains a sprite and if it does it uses sprite_assign to change it for one that has been loaded from an external file. If it does not contain a sprite one is loaded and its index is stored in that variable.\n",
      "description": "This function takes two previously created (or included) sprite indexes, and copies the image from one to the other. In this way you can copy (or \"clone\") one sprite into another index. Note that *you cannot copy to a game resource*. You have to have created the sprite to be copied to previously using the `sprite_add()` or `sprite_duplicate()` functions.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_assign.htm"
    },
    "sprite_collision_mask": {
      "name": "sprite_collision_mask",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to set the bounding box of."
        },
        {
          "parameter": "sepmasks",
          "description": "Whether to create collision masks for each sub-image of the sprite (`true`), or one mask for all (`false`)."
        },
        {
          "parameter": "bboxmode",
          "description": "What kind of bounding box to use. 0 = automatic, 1 = full image, 2 = user defined."
        },
        {
          "parameter": "bbleft",
          "description": "The maximum left position of the bounding box."
        },
        {
          "parameter": "bbtop",
          "description": "The maximum top position of the bounding box."
        },
        {
          "parameter": "bbright",
          "description": "The maximum right position of the bounding box."
        },
        {
          "parameter": "bbbottom",
          "description": "The maximum bottom position of the bounding box."
        },
        {
          "parameter": "kind",
          "description": "The kind of mask, a constant (see the table in the description)."
        },
        {
          "parameter": "tolerance",
          "description": "Indicates the tolerance in the transparency value (0=no tolerance, 255=full tolerance)."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nspr = sprite_add(\"player_5.png\", 16, true, true, 0, 0); sprite_collision_mask(spr, true, 1, 0, 0, 0, 0, 0, 0);\n```\nThe above code loads a sprite from an external source and stores the new index in the variable \"spr\". The code then sets the new sprite to have a precise collision mask for each of its sub-images.\n",
      "description": "With this function you can set the properties of the collision mask that a sprite should have. If you select either automatic (0) or full image (1) as the bounding box mode then the individual bounding box values can be set to 0. However for a user\n    defined mask (2) you will have to set these values. The different bounding box values are always relative to the top left corner of the sprite (irrespective of the x and y origin) which is considered position (0, 0).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_collision_mask.htm"
    },
    "sprite_create_from_surface": {
      "name": "sprite_create_from_surface",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the surface to create from."
        },
        {
          "parameter": "x",
          "description": "The x position to copy from."
        },
        {
          "parameter": "y",
          "description": "The y position to copy from."
        },
        {
          "parameter": "w",
          "description": "The width of the area to be copied (from the x position)."
        },
        {
          "parameter": "h",
          "description": "The height of the area to be copied (from the y position)."
        },
        {
          "parameter": "removeback",
          "description": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
        },
        {
          "parameter": "smooth",
          "description": "Indicates whether to smooth the edges."
        },
        {
          "parameter": "xorig",
          "description": "Indicates the x position of the origin in the sprite."
        },
        {
          "parameter": "yorig",
          "description": "Indicates the y position of the origin in the sprite."
        }
      ],
      "requiredParameters": 9,
      "isVariadic": false,
      "example": "```\nvar surf; surf = surface_create(32, 32); surface_set_target(surf);\n     draw_clear_alpha(c_black, 0); draw_sprite(spr_Body, 0, 0, 0); draw_sprite(spr_Clothes, 0, 0, 0); draw_sprite(spr_Hair, 0, 0, 0); spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16); surface_reset_target();\n     surface_free(surf);\n  \n```\nThe above code creates a surface and stores its index in the local variable \"surf\". It then targets that surface, clears it and draws several sprites on top of each other. Finally it creates a new sprite from the composite image drawn on the\n    surface and assigns its index to \"spr_Custom\" before freeing up the memory used by the surface.\n",
      "description": "With this function you can create a sprite from a previously initialised surface (the surface index ID value is returned when you create the surface using `surface_create()`). The x and\n    y coordinates that you then input in the function should be relative to the (0,0) position of the *surface* (the top left corner) and not the game window (nor the view if you have one active). The width and height arguments are in pixels and\n    define the width and height of the part of the surface to use.",
      "returns": "Real (unique sprite ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_create_from_surface.htm"
    },
    "sprite_delete": {
      "name": "sprite_delete",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to be deleted."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar spr = sprite_create_from_surface(application_surface, 0, 0, 32, 32, false, false, 16, 16); sprite_merge(spr_Player, spr); sprite_delete(spr);\n  \n```\nThe above code creates a local variable and then stores the index of the sprite created from the application surface. This sprite is then merged with the asset indexed in the variable \"spr_Player\" before being removed from memory again.\n",
      "description": "This function will delete a sprite from the game, freeing any memory that was reserved for it. This is a very important function for those moments when you need to create and change sprites from external sources (like loading a sprite from a file with\n     [sprite_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm), or duplicating a sprite using  [sprite_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_duplicate.htm)) and should always be used to remove those assets that are no longer\n    needed by a game, or to clear an indexed asset from a variable before re-assigning another asset to that variable. **This cannot be used to delete sprites that are included in the game as part of the assets in the Asset Browser**.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_delete.htm"
    },
    "sprite_duplicate": {
      "name": "sprite_duplicate",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to duplicate."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnew_spr = sprite_duplicate(sprite_index)\n```\nThe above code duplicates the sprite currently being used as the sprite index of the instance and stores the index for this new sprite in the variable \"new_spr\".\n",
      "description": "This function will return the index of a newly created sprite that is a duplicate (copy) of the one input as the \"index\" argument. If the function fails, -1 is returned. This function *must* be used to copy any\n    sprites from the original assets before any transformations can be done on them. For example, if you wish to change the bounding box for a sprite, or set its alpha from another sprite, you must first duplicate it, then perform the operation on the\n    duplicated sprite and use that. A duplicated sprite will be places on its own unique texture page when created, meaning that duplicating multiple sprites will create multiple texture pages and have an impact on performance, so use this function only\n    when necessary.",
      "returns": "Real (unique sprite ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_duplicate.htm"
    },
    "sprite_exists": {
      "name": "sprite_exists",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif sprite_exists(spr_array[0])\n    {\n        sprite_index = spr_array[0];\n    }\n    else\n    {\n        sprite_index = spr_BaseSprite;\n    }\n```\nThe above code checks an array to see if it contains a valid sprite index and if so it assigns that sprite to the instance, but if not, it assigns a sprite from the included resources.\n",
      "description": "This function returns whether a sprite with the specified index exists or not in the project being run.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_exists.htm"
    },
    "sprite_flush": {
      "name": "sprite_flush",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index (resource name) of the sprite asset to flush"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsprite_flush(spr_Player_Aura);\n```\nThe above code flushes the sprite \"spr_Player_Aura\" from memory.\n",
      "description": "With this function you can remove the given texture page for the given sprite from texture memory. You supply the sprite index (as defined when creating the sprite resource) and the texture page it is assigned to will be removed from texture memory.\n    Note that if the texture page is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded, so care should be taken when using this function. Note that the\n    function will return `-1` if flush is not supported for the chosen resource, or it will return `0` if all worked correctly.",
      "returns": "Int (-1 or 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_flush.htm"
    },
    "sprite_flush_multi": {
      "name": "sprite_flush_multi",
      "parameters": [
        {
          "parameter": "array",
          "description": "Array with the sprite indices to flush"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nspr_a[0] = spr_Player_Aura1; spr_a[1] = spr_Player_Aura2; spr_a[2] = spr_Player_Aura3; spr_a[3] = spr_Player_Aura4; sprite_flush_multi(spr_a);\n  \n```\nThe above code creates an array where each element holds a sprite index. This array is then used to clear those sprite textures from memory.\n",
      "description": "With this function you can remove the any number of texture pages for the given sprites from texture memory. You supply the sprite indices as an array and the texture pages they are assigned to will be removed from texture memory. Note that if one of\n    the texture pages is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded back into memory again, so care should be taken when using this function.\n    Note that the function will return `-1` if flush is not supported for the chosen resources, or it will return `0` if all worked correctly.",
      "returns": "Int (-1 or 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_flush_multi.htm"
    },
    "sprite_get_bbox_bottom": {
      "name": "sprite_get_bbox_bottom",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar ww, hh; ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index); hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);\n```\nThe above code calculates the width and height of the collision mask based on the relative bounding box side positions.\n",
      "description": "This function returns the relative position of the bottom of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor\n    for the  [collision mask properties](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm). The image below shows how it is calculated:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_bottom.htm"
    },
    "sprite_get_bbox_left": {
      "name": "sprite_get_bbox_left",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar ww, hh; ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index); hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);\n```\nThe above code calculates the width and height of the collision mask based on the relative bounding box side positions.\n",
      "description": "This function returns the relative position of the left of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor\n    for the  [collision mask properties](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm). The image below shows how it is calculated:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_left.htm"
    },
    "sprite_get_bbox_mode": {
      "name": "sprite_get_bbox_mode",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif sprite_get_bbox_mode(sprite_index) != 0\n    {\n        sprite_set_bbox_mode(sprite_index, bboxmode_automatic);\n    }\n```\nThe above checks the bbox mode for the current sprite and if it's not `automatic`, then it is sets it to that value.\n",
      "description": "This function will return the current \"mode\" for the bounding box calculations. You supply the sprite index of the sprite to check, and the function will return one of the constants shown below.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_mode.htm"
    },
    "sprite_get_bbox_right": {
      "name": "sprite_get_bbox_right",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar ww, hh; ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index); hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);\n```\nThe above code calculates the width and height of the collision mask based on the relative bounding box side positions.\n",
      "description": "This function returns the relative position of the right of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor\n    for the  [collision mask properties](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm). The image below shows how it is calculated:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_right.htm"
    },
    "sprite_get_bbox_top": {
      "name": "sprite_get_bbox_top",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar ww, hh; ww = sprite_get_bbox_left(sprite_index) - sprite_get_bbox_right(sprite_index); hh = sprite_get_bbox_bottom(sprite_index) - sprite_get_bbox_top(sprite_index);\n```\nThe above code calculates the width and height of the collision mask based on the relative bounding box side positions.\n",
      "description": "This function returns the relative position of the top of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor\n    for the  [collision mask properties](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm). The image below shows how it is calculated:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_bbox_top.htm"
    },
    "sprite_get_height": {
      "name": "sprite_get_height",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to find the height of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif sprite_height != sprite_get_height(sprite_index)\n    {\n        image_yscale = 1;\n    }\n```\nThe above code checks the height of the sprite as it is in the current instance and if there is a difference between that and the original base sprite, it resets the y axis scale.\n",
      "description": "With this function you can find the height of the base sprite asset, with no transforms, in pixels.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_height.htm"
    },
    "sprite_get_info": {
      "name": "sprite_get_info",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to get the information for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _info = sprite_get_info(sprite_index);\n    \n    if (_info != undefined && _info.type == 0)\n    {\n        var _messages = _info.messages;\n        var _messageCount = array_length(_messages);\n        \n        for (var i = 0; i < _messageCount; i ++)\n        {\n            var _message = _messages[i];\n            show_debug_message(\"Message at frame \" + string(_message.frame) + \": \" + _message.message);\n        }\n    }\n  \n```\nThe above code gets the info struct for the instance's sprite, and then checks if it's not `undefined` and that its type is 0 (meaning that it's a bitmap sprite). In that case, it gets the broadcast message array for that sprite and then runs a for loop to print each broadcast message (along with its frame) to the output log.\n",
      "description": "This function is used to retrieve information for the given sprite. You supply a sprite index (which can be an asset added through the  [Asset Browser](https://manual.yoyogames.com/Introduction/The_Asset_Browser.htm) or a sprite  [added](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm) at runtime) and the function returns a  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) with the following variables:",
      "returns": "Struct (or undefined)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_info.htm"
    },
    "sprite_get_name": {
      "name": "sprite_get_name",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to get the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr = sprite_get_name(sprite_index);\n```\nThe above code will get the name of the sprite index for the instance running the code and store the return value in the variable \"str\".\n",
      "description": "This function will return the name *as a string* of the specified sprite. This name is the one that has been specified for the sprite in the resource tree of the main GameMaker Studio 2 window. Please note that this is *only* a string\n    and cannot be used to reference the sprite directly - for that you would need the *sprite index*. You can, however, use this string to get the *sprite index* using the returned string along with the function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_name.htm"
    },
    "sprite_get_nineslice": {
      "name": "sprite_get_nineslice",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite from which the Nine Slice struct will be retrieved"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _box_nineslice = \n```**sprite_get_nineslice**```\n(spr_box_0);\n     _box_nineslice.enabled = true; _box_nineslice.left = 10; _box_nineslice.right = 10; _box_nineslice.top = 10; _box_nineslice.bottom = 10;\n```\nThe code above retrieves the Nine Slice struct from a sprite, enables Nine Slicing for it and sets the guide offsets.\n",
      "description": "This function returns the Nine Slice  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) for a sprite, containing all its Nine Slice properties as set in the  [Sprite Editor](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm)    or using  [sprite_set_nineslice()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_nineslice.htm). The contents of this struct are detailed on  [this page](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm).",
      "returns": "Struct (or -1 if the sprite doesn't exist)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_nineslice.htm"
    },
    "sprite_get_number": {
      "name": "sprite_get_number",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nimage_index = floor(random(sprite_get_number(sprite_index)));\n```\nThe above code will set the image index to a random frame based on the number of sub-images that the sprite has.\n",
      "description": "A sprite has to have at least one sub-image and this function will return just how many it has. Remember, a sprite sub-image starts being numbered from 0, so if this function returns 3 (the sprite being checked has 3 sub-images) they will be numbered\n    0, 1 and 2.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_number.htm"
    },
    "sprite_get_speed": {
      "name": "sprite_get_speed",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to get the speed of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ns_speed = sprite_get_speed(sprite_index); s_type = sprite_get_speed_type(sprite_index);\n```\nThe above code gets the sprite speed and the sprite animation type and stores them in instance variables for future use.\n",
      "description": "This function can be used to retrieve the sprite speed as defined for the sprite resource in the  [Sprite Editor](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm). The value returned can then be used, for example, to calculate how\n    many frames may be drawn for different `image_speed`. Note that the return value will be very different depending on the *type* of speed\n    that was applied in the Sprite Editor, either *Frames Per Second*, or *Frames Per Game Frame*. The following two examples illustrate this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_speed.htm"
    },
    "sprite_get_speed_type": {
      "name": "sprite_get_speed_type",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to get the animation type of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ns_speed = sprite_get_speed(sprite_index); s_type = sprite_get_speed_type(sprite_index);\n```\nThe above code gets the sprite speed and the sprite animation type and stores them in instance variables for future use.\n",
      "description": "This function can be used to retrieve the sprite animation type as defined for the sprite resource in the  [Sprite Editor](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm). The value returned will be one of the following constants:\n  ",
      "returns": "Constant (see above)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_speed_type.htm"
    },
    "sprite_get_texture": {
      "name": "sprite_get_texture",
      "parameters": [
        {
          "parameter": "spr",
          "description": "The index of the sprite to use."
        },
        {
          "parameter": "subimg",
          "description": "The sub-image of the sprite to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar tex; tex = sprite_get_texture(spr_Wall, 0); draw_primitive_begin_texture(pr_trianglestrip, tex); draw_vertex_texture(0, 0, 0, 0); draw_vertex_texture(480, 0, 1, 0); draw_vertex_texture(480, 640, 1, 1); draw_vertex_texture(0,\n    640, 0, 1); draw_primitive_end();\n  \n```\nThe above code will draw a 4 vertex triangle strip textured with the texture held in the \"tex\" variable.\n",
      "description": "This function returns a special *pointer* for the sprite texture page. This value can then be used in other draw functions, particularly in the  [2D primitive](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm) functions,\n    as well as the  [Shader](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm) functions. You can get more information about the returned texture page using the different `texture_` functions found  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm).",
      "returns": "Pointer (texture page ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"
    },
    "sprite_get_tpe": {
      "name": "sprite_get_tpe",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to find the texture page entry of."
        },
        {
          "parameter": "index",
          "description": "The image index of the sprite."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nhome_but = clickable_add(32, 32, sprite_get_tpe(spr_MS_Home, 0), \"http://macsweeney_games.com\", \"_blank\", \"width=700, height=500, menubar=0, toolbar=0, scrollbars=0\");\n```\nThe above code creates a DOM button at the position (32, 32) of the page that the game canvas is running on. The button uses the sprite referenced from the texture page as \"spr_MS_Home\" and when clicked the button will open a new window for\n    the specified URL and with the defined properties for that window.\n",
      "description": "This function will return a special value that relates to the position of the given sprite and sub-image on the texture page used by your game. In this way you can pass the value to extensions for use outside of the compiled game, effectively bypassing\n    the GameMaker Studio 2 drawing functions and permitting the sprite to be used in DOM content which can then be drawn anywhere within the window that contains the game canvas. This function is of particular interest to those that wish to create buttons\n    and other interactive media outside of the GameMaker Studio 2 canvas element on their host page using the function `clickable_add()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_tpe.htm"
    },
    "sprite_get_uvs": {
      "name": "sprite_get_uvs",
      "parameters": [
        {
          "parameter": "sprite",
          "description": "The index of the sprite to use."
        },
        {
          "parameter": "subimage",
          "description": "The sub-image of the sprite to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar tex = sprite_get_uvs(sprite, 0); tex_left = tex[0]; tex_top = tex[1]; tex_right = tex[2]; tex_bottom = tex[3];\n```\nThe above code will store the UV coordinates for the given sprite in a local array and then assign the values to instance variables.\n",
      "description": "This function returns an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) with the UV coordinates and other data for the texture of the sprite sub-image on the texture page. The function returns an array with the following 8 elements:",
      "returns": "Array (1D, 8 elements)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"
    },
    "sprite_get_width": {
      "name": "sprite_get_width",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to find the width of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif sprite_width != sprite_get_width(sprite_index)\n    {\n        image_xscale = 1;\n    }\n```\nThe above code checks the width of the sprite as it is in the current instance and if there is a difference between that and the original base sprite, it resets the x axis scale.\n",
      "description": "With this function you can find the width of the base resource sprite, with no transforms, in pixels.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_width.htm"
    },
    "sprite_get_xoffset": {
      "name": "sprite_get_xoffset",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to find the xoffset of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif x - sprite_get_xoffset(sprite_index) < 0\n    {\n        x = sprite_get_xoffset(sprite_index);\n    }\n```\nThe above code will ensure that an instance is maintained within the room based on the sprite (so the sprite is always visible).\n",
      "description": "When you define a sprite in the sprite editor, you need to set the *origin* for that sprite. This is the point at which the sprite will be \"attached\" or \"drawn\" when used with an instance. This function returns the relative offset for the x-axis of the origin based on the upper left corner being the 0,0 position, with a +x being right and a -x being left of this. The following image illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_xoffset.htm"
    },
    "sprite_get_yoffset": {
      "name": "sprite_get_yoffset",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to find the yoffset of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif y - sprite_get_yoffset(sprite_index) < 0\n    {\n        y = sprite_get_yoffset(sprite_index);\n    }\n```\nThe above code will ensure that an instance is maintained within the room based on the sprite (so the sprite is always visible).\n",
      "description": "When you define a sprite in the sprite editor, you need to set the *origin* for that sprite. This is the point at which the sprite will be \"attached\" or \"drawn\" when used with an instance. This function returns the relative offset for the y-axis of the origin based on the upper left corner being the 0,0 position, with a +y being down and a -y being up from this. The following image illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_yoffset.htm"
    },
    "sprite_merge": {
      "name": "sprite_merge",
      "parameters": [
        {
          "parameter": "ind1",
          "description": "The index of the sprite to merge."
        },
        {
          "parameter": "ind2",
          "description": "The index of the sprite that ind1 is to be merged with."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar tspr; tspr[0] = spr_add(working_directory + \"Sprite Assets\\explode1.png\", 16, true, true, 0, 0); tspr[1] = sprite_duplicate(spr_Explosion); sprite_merge(tspr[0], tspr[1]); sprite_index = t_spr[0]; sprite_delete(tspr[1]);\n  \n```\nThe above code loads a sprite into a local variable then merges it with another sprite that has been duplicated. Finally the merged sprite is assigned to the instance `sprite_index` while the loaded sprite is removed\n    to free the memory it uses. Note that at some point after this operation, like in the Destroy or Room End events, you will also need to use `sprite_delete()` to remove the merged sprite\n    from memory too.\n",
      "description": "This function will merge the sprite indexed in argument 1 (\"ind2\") with that which is indexed in argument 0 (\"ind1\"). The images themselves are **NOT** merged together, but rather the image indices are\n    merged, with the sub images from sprite \"ind2\" appended onto those of sprite \"ind1\", ie: they are added on at the end. Note that if the sprites are different sizes, then the appended sprites are stretched to fit the image size\n    for \"ind1\".",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_merge.htm"
    },
    "sprite_nineslice_create": {
      "name": "sprite_nineslice_create",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar _nineslice = \n```**sprite_nineslice_create**```\n();\n     _nineslice.enabled = true; _nineslice.left = 10; _nineslice.right = 10; _nineslice.top = 10; _nineslice.bottom = 10;\n     sprite_set_nineslice(spr_box_0, _nineslice);\n```\nThe code above creates a new Nine Slice struct, enables it and sets the offsets for the guides. The struct is then applied to a sprite, changing its Nine Slice properties.\n",
      "description": "Nine Slicing* is a technique used to scale rectangular images for preserving details, making them retain their original form after scaling. See * [this page](https://manual.yoyogames.com/The_Asset_Editors/Sprite_Properties/Nine_Slices.htm)* for information on Nine Slice.*",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_nineslice_create.htm"
    },
    "sprite_prefetch": {
      "name": "sprite_prefetch",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The sprite index to fetch"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsprite_prefetch(spr_Player_Aura);\n```\nThe above code will place the referenced sprite into texture memory ready for use.\n",
      "description": "This function can be used to prefetch (place into texture memory) a texture page with the given sprite. You supply the sprite index as defined when you created the sprite asset, and the texture page it is on will be loaded into memory. Note that the\n    function will return `-1` if prefetch is not supported for the chosen resource or the target platform is HTML5, or it will return `0` if all worked correctly.",
      "returns": "Int (-1 or 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_prefetch.htm"
    },
    "sprite_replace": {
      "name": "sprite_replace",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to permanently replace."
        },
        {
          "parameter": "fname",
          "description": "The filename of the image to make the new sprite."
        },
        {
          "parameter": "imgnumb",
          "description": "The number of frames the sprite will be cut up into horizontally. 1 = one single image / `*.gif`."
        },
        {
          "parameter": "removeback",
          "description": "Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent."
        },
        {
          "parameter": "smooth",
          "description": "Indicates whether to smooth the edges."
        },
        {
          "parameter": "xorig",
          "description": "The x coordinate of the origin, relative to the sprite's top left corner."
        },
        {
          "parameter": "yorig",
          "description": "The y coordinate of the origin, relative to the sprite's top left corner."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nsprite_replace(spr_banner, \"gravemaker.png\", 1, false, false, 0, 0);\n```\nThe above code will replace the image asset indexed in \"spr_banner\" with another one loaded from an external source.\n",
      "description": "This function works in almost the exact same manner as `sprite_add()`, only instead of returning the index of the sprite you are importing, it overwrites a previously created sprite index. When using\n    this function you should use a sprite index that has been created and stored in a variable using other functions like `sprite_add()` or  `sprite_create_from_surface()`,\n    or even `sprite_duplicate()`, rather than a resource tree sprite asset. You *can* replace a sprite from the game assets using this function, but doing so means that\n    you will lose the reference ID for the sprite that you are replacing, regardless of whether you call `game_restart()` or not, and so is not recommended. Regardless of the sprite being replaced, this function will **create a new texture page for the sprite** and\n    so care should be taken when using it as it may adversely affect performance by increasing the number of required texture swaps for rendering.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_replace.htm"
    },
    "sprite_save": {
      "name": "sprite_save",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to save."
        },
        {
          "parameter": "subimg",
          "description": "The sub-image of the sprite to save."
        },
        {
          "parameter": "fname",
          "description": "The filename for the saved sprite."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar surf, spr_custom; surf = surface_create(32, 32); surface_set_target(surf);\n     draw_clear_alpha(c_black, 0); draw_sprite(spr_Body, 0, 0, 0); draw_sprite(spr_Clothes, 0, 0, 0); draw_sprite(spr_Hair, 0, 0, 0); spr_custom = sprite_create_from_surface(surf, 0, 0, 32, 32, true, true, 16, 16); surface_reset_target();\n     surface_free(surf);\n     sprite_save(spr_custom, 0, \"Player_Custom_Sprite.png\"); sprite_delete(spr_Custom);\n  \n```\nThe above code creates a surface and stores its index in the local variable \"surf\". It then targets that surface, clears it and draws several sprites on top of each other. It creates a new sprite from the composite image drawn on the surface\n    and assigns its index to the local variable \"spr_Custom\" before freeing up the memory used by the surface. Finally, the resulting sprite is saved to a file and then removed from memory too.\n",
      "description": "This function can be used to save any sub-image of a sprite to disc, giving it the specified filename. The sprite must have been  [added](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm) at runtime (you cannot save sprites added through the IDE) and the file must be saved\n    with a `*.png` extension.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_save.htm"
    },
    "sprite_save_strip": {
      "name": "sprite_save_strip",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to change the transparency map of."
        },
        {
          "parameter": "filename",
          "description": "The filename for the saved sprite strip."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar spr, i;\n    spr = sprite_create_from_surface(0, 0, 32, 32, true, true, 16, 16);\n    \n    for (i = 1; i < 8; i +=1)\n    {\n        sprite_add_from_surface(spr, i, 0, 32, 32, true, true, 16, 16);\n    }\n    \n    sprite_save_strip(spr, \"Custom_Player_Sprite.png\");\n    sprite_delete(spr);\n  \n```\nThe above code creates a sprite from the surface indexed in the variable \"surf\", assigning its index to the local variable \"spr_Custom\", and then uses a `for` loop to move across the surface and capture various sections which are added into the sprite as sub-images. this new sprite is then saved as a png strip before being removed from memory.\n",
      "description": "This function will create a strip image from all the sub-images in a sprite, saving it to disc with the specified filename. The sprite must have been  [added](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_add.htm) at runtime (you cannot save sprites added through the IDE) and the file must be saved with a `*.png` extension.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_save_strip.htm"
    },
    "sprite_set_alpha_from_sprite": {
      "name": "sprite_set_alpha_from_sprite",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to change the transparency map of."
        },
        {
          "parameter": "spr",
          "description": "The index of the sprite to take the transparency map data from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this extended example we show how you can create a special effect sprite from two sprite resources. To start with we need to have a controller variable in the **Create Event** of the instance. This variable is to ensure that the sprite is only created once:\n```\nspr_create = true;\n```\nOnce that is done we need to then go to the **Draw Event** and add in this code:\n```\nif spr_create\n    {\n        spr_create = false;\n        var _sw = sprite_get_width(spr_Explosion_Alpha);\n        var _sh = sprite_get_height(spr_Explosion_Alpha);\n        var _xo = sprite_get_xoffset(spr_Gradient);\n        var _yo = sprite_get_yoffset(spr_Gradient);\n        var _surf = surface_create(_sw, _sh);\n        surface_set_target(_surf);\n        draw_clear_alpha(c_black, 0);\n        draw_sprite(spr_Gradient, 0, 0, 0);\n        sprite_index = sprite_create_from_surface(_surf, 0, 0, _sw, _sh, false, false, _xo, _yo);\n        draw_clear_alpha(c_black, 0);\n        draw_sprite(spr_Explosion_Alpha, 0, _xo, _yo);\n        var _spr = sprite_create_from_surface(_surf, 0, 0, _sw, _sh, false, false, _xo, _yo);\n        surface_reset_target();\n        surface_free(_surf);\n        sprite_set_alpha_from_sprite(sprite_index, _spr);\n        sprite_delete(_spr);\n    }\n    \n    draw_sprite(sprite_index, 0, x, y);\n  \n```\nThe above code first checks to see if the control variable is true or not, and if it is, it then runs the code to set the sprite alpha, setting the variable to false to prevent the code from running more than once. In this case, it creates a surface the size of the alpha mask that we wish to use, then draws the sprite that is to have its alpha changed onto the surface and creates a new sprite from it, assigning it as the `sprite_index` of the object. The code then clears the surface and draws the alpha map sprite to it and creates another new sprite, storing its index in a local variable. Finally, the new sprite assigned to the object gets its alpha set from this temporary sprite, the surface is freed and the temporary sprite is removed.\nThere is one final thing to do here, and that is remove the sprite that has been created for the object from memory when not in use. This would either be done in the **Destroy Event** or the **Room End Event** like this:\n```\nsprite_delete(sprite_index);\n```\n",
      "description": "This function uses the value/saturation of one sprite and multiplies it with the alpha of the target sprite. Ideally the sprite being used to generate the new alpha map should be grey-scale, with the white areas having an equivalent alpha value of 1 (opaque), the black areas being equivalent to alpha 0 (transparent), and the grey areas being an alpha in between 0 and 1. The sprite that you are setting the alpha of *cannot be a permanent resource*, nor can the sprite you use to set the alpha, as this will give an error. This means that you must create two completely new sprites \"on the fly\" in some way for the function to work correctly. This can be achieved by using surfaces, or by creating a sprite from the screen (the code example below shows how the effect can be achieved with surfaces).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_alpha_from_sprite.htm"
    },
    "sprite_set_bbox": {
      "name": "sprite_set_bbox",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to set the bounding box on."
        },
        {
          "parameter": "left",
          "description": "The left side of the bounding box"
        },
        {
          "parameter": "top",
          "description": "The top of the bounding box."
        },
        {
          "parameter": "right",
          "description": "The right side of the bounding box"
        },
        {
          "parameter": "bottom",
          "description": "The bottom of the bounding box."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nif sprite_get_bbox_mode(sprite_index) == 2\n    {\n        left = irandom(sprite_width / 2);\n        right = irandom((sprite_width / 2) + irandom(sprite_width / 2));\n        top = irandom(sprite_height / 2);\n        bottom = irandom((sprite_height / 2) + irandom(sprite_height / 2));\n        sprite_set_bbox(sprite_index, left, top, right, bottom);\n    }\n```\nThe above code will check the bounding box mode of the sprite assigned to the `sprite_index`, and if it is set to `manual` then it will have its bounding box changed.\n",
      "description": "This function can be used to set the bounding box values for a sprite. You supply the sprite index to use and then the left, top, right and bottom values for the bounding box positions. The positions are *absolute* values, where the (0, 0) position corresponds to the top left corner of the sprite, regardless of the offset for the sprite, any \"empty\" pixels the sprite may have, or where it is being drawn in the room.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox.htm"
    },
    "sprite_set_bbox_mode": {
      "name": "sprite_set_bbox_mode",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to change the mode of."
        },
        {
          "parameter": "mode",
          "description": "The mode to set (a constant)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif sprite_get_bbox_mode(sprite_index) != bboxmode_automatic\n    {\n        sprite_set_bbox_mode(sprite_index, bboxmode_automatic);\n    }\n```\nThe above code checks the bbox mode for the current sprite and if it's not `automatic`, then it is set to that value.\n",
      "description": "This function can be used to set the bounding box mode for a sprite. You supply the sprite index and the mode to use, which should be one of the following constants:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox_mode.htm"
    },
    "sprite_set_cache_size": {
      "name": "sprite_set_cache_size",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to change the cache size of."
        },
        {
          "parameter": "max",
          "description": "The maximum number of cached copies of the sprite that can be stored."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nsprite_set_cache_size(sprite0, 2);\n```\nThis will set the sprite cache of all sub-images of sprite0 to 2 copies.\n",
      "description": "When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker Studio 2 has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies\n    of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to all sub-images of the sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_cache_size.htm"
    },
    "sprite_set_cache_size_ext": {
      "name": "sprite_set_cache_size_ext",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to change the cache size of."
        },
        {
          "parameter": "index",
          "description": "The sub-image of ind to change the cache size of."
        },
        {
          "parameter": "max",
          "description": "The maximum number of cached copies of the sprite that can be stored."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nsprite_set_cache_size_ext(sprite0, 0, 2);\n```\nThis will set the sprite cache of the first sub-image of sprite0 to 2 copies.\n",
      "description": "When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker Studio 2 has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies\n    of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to one single given sub-image of the sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_cache_size_ext.htm"
    },
    "sprite_set_nineslice": {
      "name": "sprite_set_nineslice",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to modify"
        },
        {
          "parameter": "nineslice",
          "description": "The Nine Slice struct to apply"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _nineslice = sprite_nineslice_create();\n     _nineslice.enabled = true; _nineslice.left = 10; _nineslice.right = 10; _nineslice.top = 10; _nineslice.bottom = 10;\n    \n    \n```**sprite_set_nineslice**```\n(spr_box_0, _nineslice);\n```\nThe code above creates a new Nine Slice struct, enables it and sets the offsets for the guides. The struct is then applied to a sprite, changing its Nine Slice properties.\n",
      "description": "This function is used to apply a  [Nine Slice struct](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm) to a sprite. You supply the sprite index and the Nine Slice struct to apply, which can be retrieved using sprite_nineslice_create() or sprite_get_nineslice().",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_nineslice.htm"
    },
    "sprite_set_offset": {
      "name": "sprite_set_offset",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the sprite to change the offset of."
        },
        {
          "parameter": "xoff",
          "description": "The x position of the origin."
        },
        {
          "parameter": "yoff",
          "description": "The y position of the origin."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nsprite_assign(spr_Custom, spr_Base); sprite_set_offset(spr_Custom, sprite_get_xoffset(spr_Base), sprite_get_yoffset(spr_Base));\n```\nThe above code assigns the sprite indexed in \"spr_Base\" to the sprite indexed in \"spr_Custom\" and then uses the x and y offset values of \"spr_Base\" to set the new sprite's origin.\n",
      "description": "This function can be used to set the x and y origin of a sprite, and takes relative values based on the (0,0) position being the upper left corner of the sprite. The following image illustrates this:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_offset.htm"
    },
    "sprite_set_speed": {
      "name": "sprite_set_speed",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the sprite to get the animation type of"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nsprite_set_speed(sprite_index, 10, spritespeed_framespersecond);\n```\nThe above code sets the base animation speed for the sprite assigned to the instance to 10 frames per second.\n",
      "description": "This function can be used to set the base animation speed and type as for the sprite resource. This is normally set in the  [Sprite Editor](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm), but there may be moments when you are required\n    to set this manually for a given sprite resource. You need to supply the sprite index to set, the animation speed and the type of animation speed to apply. The animation speed type can be any one of the following constants:\n  ",
      "returns": "Constant (see above)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_speed.htm"
    },
    "sqr": {
      "name": "sqr",
      "parameters": [
        {
          "parameter": "val",
          "description": "The number to square."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nscore += sqr(dmg);\n```\nThe above code will add on the square of the variable \"dmg\" to the score.\n",
      "description": "Multiplies a number by itself and so returns the square of that number. EG: `sqr(5)` would return 25 since 5*5=25.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/sqr.htm"
    },
    "sqrt": {
      "name": "sqrt",
      "parameters": [
        {
          "parameter": "val",
          "description": "The number to get the square root of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nnum = sqrt(exp);\n```\nThe above code will set the variable \"num\" to hold the square root of the value contained in \"exp\".\n",
      "description": "If you multiply a number with itself, you get the square of that number, but sometimes you want to do the reverse and get the square root of a number. So to find what number has been multiplied with itself to get any given *positive* value we use\n    this function. For example: `sqrt(9)` will return 3 since 3*3=9.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Number_Functions/sqrt.htm"
    },
    "steam_activate_overlay": {
      "name": "steam_activate_overlay",
      "parameters": [
        {
          "parameter": "overlayindex",
          "description": "The page index of the Steam API UI to show (see constants listed below)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar key = keyboard_lastkey;\n    switch (key)\n    {\n        case vk_f1: steam_activate_overlay(ov_friends); break;\n        case vk_f2: steam_activate_overlay(ov_community); break;\n        case vk_f3: steam_activate_overlay(ov_players); break;\n        case vk_f4: steam_activate_overlay(ov_settings); break;\n        case vk_f5: steam_activate_overlay(ov_gamegroup); break;\n        case vk_f6: steam_activate_overlay(ov_achievements); break;\n    }\n```\nThe above code polls the last keyboard key pressed and if it is any of the function keys from 1 to 6 it will open the corresponding page of the Steam overlay.\n",
      "description": "The Steam overlay is a piece of the Steam user interface that can be activated over the top of almost any game launched through Steam. It lets the user access their friends list, web browser, chat, and in-game DLC purchasing. The default key for a user to access the overlay while in a game is SHIFT+TAB, but you can also bring up any page of the overlay using this function. It takes one of six **constants** that are listed below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm"
    },
    "steam_activate_overlay_browser": {
      "name": "steam_activate_overlay_browser",
      "parameters": [
        {
          "parameter": "url",
          "description": "The (full) URL for the overlay to open."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_f1)\n    {\n        steam_activate_overlay_browser(\"http://www.steamgames.com/\");\n    }\n```\nThe above code polls the keyboard for the F1 key and if it is then Steam overlay will be opened and resolve to the given URL.\n",
      "description": "With this function you can open the Steam game overlay to its web browser and then have it load the specified URL. you need to use the *full* URL as a string for this to resolve correctly, for example: \"http://www.steamgames.com/\".",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay_browser.htm"
    },
    "steam_activate_overlay_store": {
      "name": "steam_activate_overlay_store",
      "parameters": [
        {
          "parameter": "app_id",
          "description": "The unique App ID for your game."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_f1)\n    {\n        steam_activate_overlay_store(global.DLC_id);\n    }\n```\nThe above code polls the keyboard for the F1 key and if it is then Steam overlay will be opened on the page for the game content using the app ID stored in the global variable.\n",
      "description": "With this function you can open the Steam overlay on the store page for a game so that users can buy or download DLC (for example). You need to supply the unique App ID for the game or DLC which you would get from the Steam dashboard when you set it up.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay_store.htm"
    },
    "steam_activate_overlay_user": {
      "name": "steam_activate_overlay_user",
      "parameters": [
        {
          "parameter": "dialog_name",
          "description": "The dialogue to open the overlay on (see below)."
        },
        {
          "parameter": "steamid",
          "description": "The Steam user ID or group ID to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar key = keyboard_lastkey;\n    switch (key)\n    {\n        case vk_f1: steam_activate_overlay_user(\"steamid\", global.GameGroupID); break;\n        case vk_f2: steam_activate_overlay_user(\"chat\", global.FriendID); break;\n    }\n```\nThe above code polls the last keyboard key pressed and if it is function key 1 or function key 2, it will open the Steam overlay to either see the Steam group stored in the global variable \"GamegroupID\", or it will open the chat window to chat with the user stored in the global \"FriendID\" variable.\n",
      "description": "This function will open the Steam overlay to one of the chosen dialogues relating to the user ID given. The possible dialogue strings available are:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay_user.htm"
    },
    "steam_available_languages": {
      "name": "steam_available_languages",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nlanguage = steam_available_languages();\n```\nThe above gets the available languages for Steam as a string and stores it in a variable.\n",
      "description": "This function can be used to retrieve a list of all available languages for Steam. The returned value is simply a a comma separated list of languages.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_available_languages.htm"
    },
    "steam_clear_achievement": {
      "name": "steam_clear_achievement",
      "parameters": [
        {
          "parameter": "ach_name",
          "description": "The name of the achievement to clear (string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        steam_clear_achievement(\"Ach_Game_Win\");\n        steam_clear_achievement(\"Ach_Died_10_Times\");\n        steam_clear_achievement(\"Ach_Killed_100_Enemies\");\n        steam_clear_achievement(\"Ach_Beat_Boss_Level_1\");\n    }\n```\nThe above code will reset the achievements of the game when the user clicks the left mouse button.\n",
      "description": "With this function you can tell the Steam API to clear (reset) a specific achievement. The achievement should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_clear_achievement.htm"
    },
    "steam_create_leaderboard": {
      "name": "steam_create_leaderboard",
      "parameters": [
        {
          "parameter": "lb_name",
          "description": "The name of the leaderboard that you are creating (a string)."
        },
        {
          "parameter": "sort_method",
          "description": "The method for sorting the leaderboard entries (see constants listed below)."
        },
        {
          "parameter": "display_type",
          "description": "The way to display the leaderboard to the user (see constants listed below)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nsteam_create_leaderboard(\"Game Times\", lb_sort_ascending, lb_disp_time_sec);\n```\nThe above code will create a leaderboard called \"Game Times\", and set it to display the results in ascending order and with a display in seconds.\n",
      "description": "With this function you can create a new leaderboard for your game. The first argument is a string which defines the name of your leaderboard, and this name should be used in any further function calls relating to the leaderboard being created. You can\n    then define the sort method (see the constants listed below) as well as the way in which the information is displayed (again, one of the constants listed below). The function will return a value of -1 if it fails to create the leaderboard or a value\n    greater than -1 if it has succeeded.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm"
    },
    "steam_current_game_language": {
      "name": "steam_current_game_language",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nlanguage = steam_current_game_language();\n```\nThe above code gets the language used for the current game.\n",
      "description": "This function is used retrieve the current language that Steam is using (as a string), for example \"english\".",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_current_game_language.htm"
    },
    "steam_download_friends_scores": {
      "name": "steam_download_friends_scores",
      "parameters": [
        {
          "parameter": "lb_name",
          "description": "The name of the leaderboard that you are downloading the scores from (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nscore_get = steam_download_friends_scores(\"Game Scores\");\n```\nThis will send off a request to the Steam Server for the users friends scores from the given leaderboard and will store the **async id** of the request in the variable \"score_get\". This will then be handled in the **Steam Async Event**,\n    as shown in the Extended Example for `steam_download_scores()`.\n",
      "description": "With this function you can retrieve *only* the scores on the leaderboard that belong to those people that are marked as \"friends\" in the Steam client. So, if your leaderboard has 200 entries, and 50 of them are your friends, this function\n    will retrieve only those 50 results. The leaderboard name is a string that was defined when you created the leaderboard using the function `steam_create_leaderboard()`, and the function will return\n    a value which can then be used to identify the call-back in the  [Steam Async Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm), or it will return -1 if it has failed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_friends_scores.htm"
    },
    "steam_download_scores": {
      "name": "steam_download_scores",
      "parameters": [
        {
          "parameter": "lb_name",
          "description": "The name of the leaderboard that you are downloading the scores from (a string)."
        },
        {
          "parameter": "start_idx",
          "description": "The start position within the leaderboard."
        },
        {
          "parameter": "end_idx",
          "description": "The end position within the leaderboard."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "In this extended example we will request the top ten ranking for the given leaderboard and parse its results in the **Steam Async Event**. to start with we need to request the scores with the following code:\n```\nscore_get = steam_download_scores(\"Game Scores\", 1, 10);\n```\nThis will send off a request to the Steam Server for the scores from the leaderboard \"Game Scores\", storing the **async id** of the request in the variable \"score_get\". this will then be handled in the **Steam Async Event** in the following way:\n```\nvar async_id = ds_map_find_value(async_load, \"id\");\n    if async_id == score_get\n    {\n        var entries = ds_map_find_value(async_load, \"entries\");\n        var map = json_decode(entries);\n        if ds_map_exists(map, \"default\")\n        {\n            ds_map_destroy(map);\n            exit;\n        }\n        else\n        {\n            var list = ds_map_find_value(map, \"entries\");\n            var len = ds_list_size(list);\n            var entry;\n            for(var i = 0; i < len; i++;)\n            {\n                entry = ds_list_find_value(list, i );\n                steam_name[i] = ds_map_find_value(entry, \"name\");\n                steam_score[i] = ds_map_find_value(entry, \"score\");\n                steam_rank[i] = ds_map_find_value(entry, \"rank\");\n            }\n        }\n        ds_map_destroy(map)\n    }\n```\nWhat we do here is first check the \"id\" key of the special `async_load` DS map. If this value is the same as the value of the original call-back function (stored in the \"score_get\" variable) we then continue to process the data. The first thing we do is parse the `async_load` ds_map for the key \"entries\" which will contain a JSON object containing the leaderboard data. This JSON object is then decoded (see `json_decode()`) as another DS map, and this new map id is stored in the variable \"map\".\nThis map is checked for the key \"default\" and if that is found then the map is destroyed and the event is exited. If no \"default\" key is found, the code will then parse the map to extract the necessary information about the leaderboard, by first extracting a DS list from the \"entries\" key of the DS map, and then looping through each entry of the list to get *another* DS map with the name, score and rank of each entry. These values are then stored to arrays.\nOnce the loop has finished, the JSON DS map is destroyed (which in turn destroys all the internal maps and lists). There is no need to destroy the `async_load` DS map as this is handled for you by GameMaker Studio 2.\n",
      "description": "This function is used retrieve a sequential range of leaderboard entries by leaderboard ranking. The `start_idx` and `end_idx` parameters control the requested range of ranks, for example, you can display the top 10 on a leaderboard for your game by setting the start value to 1 and the end value to 10. The leaderboard name is a string that was defined when you created the leaderboard using the function `steam_create_leaderboard()`, and the function will return a value which can then be used to identify the call-back in the  [Steam Async Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm), or it will return -1 if it has failed. Note that when downloading a leaderboard, the \"entries\" key of the `async_load` map may have an additional \"data\" key if any additional buffer data was uploaded along with the score(see `steam_upload_score_buffer()`). This data buffer will be **Base 64 encoded** and so you will need to use the function `buffer_base64_decode()` on the buffer before reading the data.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_scores.htm"
    },
    "steam_download_scores_around_user": {
      "name": "steam_download_scores_around_user",
      "parameters": [
        {
          "parameter": "lb_name",
          "description": "The name of the leaderboard that you are downloading the scores from (a string)."
        },
        {
          "parameter": "range_start",
          "description": "The start position within the leaderboard."
        },
        {
          "parameter": "range_end",
          "description": "The end position within the leaderboard."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nscore_get = steam_download_scores_around_user(\"Game Scores\", -4, 5);\n```\nThis will send off a request to the Steam Server for a range of 10 scores from the leaderboard \"Game Scores\", centered on the player and will store the **async id** of the request in the variable \"score_get\". This will then be\n    handled in the **Steam Async Event**, as shown in the Extended Example for `steam_download_scores()`.\n",
      "description": "This function is used to retrieve leaderboard entries relative the current users entry. The `range_start` parameter is the number of entries to retrieve *before* the current users entry, and the `range_end` parameter is the number\n    of entries after the current user's entry, and the current user's entry is *always* included in the results. For example, if the current user is number 5 on a given leaderboard, then setting the start range to -2 and the end range to\n    2 will return 5 entries: 3 through 7. If there are not enough entries in the leaderboard before or after the user's entry, Steam will adjust the range to try to return the number of entries requested. For example, if the user is #1 on the leaderboard,\n    start is set to -2, and end is set to 2, Steam will return the first 5 entries in the leaderboard.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_download_scores_around_user.htm"
    },
    "steam_file_delete": {
      "name": "steam_file_delete",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif steam_file_exists(\"Save.txt\")\n    {\n        steam_file_delete(\"Save.txt\");\n    }\n```\nThe above code will check to see if a file exists, and if it does, it deletes the file from the Steam Cloud.\n",
      "description": "This function will delete the given file from the Steam Cloud. The function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_delete.htm"
    },
    "steam_file_exists": {
      "name": "steam_file_exists",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif steam_file_exists(\"Save.txt\")\n    {\n        save_str = steam_file_read(\"Save.txt\");\n    }\n```\nThe above code checks to see if a file exists on the Steam Cloud and if it does, it opens it and reads its contents into the variable \"save_str\".\n",
      "description": "With this function you can check to see if a file from the Steam Cloud exists or not, with a return value of `true` if it exists, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_exists.htm"
    },
    "steam_file_persisted": {
      "name": "steam_file_persisted",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !steam_file_persisted(\"Save.txt\")\n    {\n        steam_file_share(\"Save.txt\");\n    }\n```\nThe above code will check to see if a file has been stored to the Steam Cloud, and if it has not it will then synchronise it.\n",
      "description": "With this function you can check the given file to see if it has been synchronised with the Steam Cloud. A return value of `true` means that it is, while `false` means it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_persisted.htm"
    },
    "steam_file_read": {
      "name": "steam_file_read",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to read from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif steam_file_exists(\"Save.txt\")\n    {\n        save_str = steam_file_read(\"Save.txt\");\n    }\n```\nThe above code checks to see if a file exists on the Steam Cloud and if it does, it opens it and reads its contents into the variable \"save_str\".\n",
      "description": "This function will read the contents of the given file into a string which can later be parsed in your game.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_read.htm"
    },
    "steam_file_share": {
      "name": "steam_file_share",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file synchronise."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !steam_file_persisted(\"Save.txt\")\n    {\n        steam_file_share(\"Save.txt\");\n    }\n```\nThe above code will check to see if a file has been stored to the Steam Cloud, and if it has not it will then synchronise it.\n",
      "description": "With this function you can force your game to synchronise the given file with the Steam Cloud. This is not normally necessary due to the fact that the game will synchronise automatically at the end of the player's session, nor is it recommended by Steam, but it can be useful to ensure sensitive information is synchronised immediately. The function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_share.htm"
    },
    "steam_file_size": {
      "name": "steam_file_size",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to check the size of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfile_bytes = steam_file_size(\"Save.txt\");\n```\nThe above code stores the size of a file from the Steam Cloud in the variable \"file_bytes\".\n",
      "description": "With this function you can check the size of a file stored on the Steam Cloud. The returned real number is the size, in bytes, of the file.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_size.htm"
    },
    "steam_file_write": {
      "name": "steam_file_write",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the file to write to."
        },
        {
          "parameter": "data",
          "description": "The data to write (a string)."
        },
        {
          "parameter": "size",
          "description": "the size of the data to be written."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar fname=\"SaveData.txt\"; var data = string(global.Level) + \"|\" + string(global.Points) + \"|\" + string(global.HP); var len = string_length(data); steam_file_write_file(fname, data, len);\n```\nThe above code will prepare a number of local variables and then use them to write to (or create) a file which will then be synchronised with the Steam Cloud.\n",
      "description": "You can use this function to write data to a file, which will then be synchronised with the Steam Cloud when the user exits the game. if the file does not exist, this function will create it for you, and if it does already exists, it will overwrite\n    any data that is already stored within the file with the new data string. The function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_write.htm"
    },
    "steam_file_write_file": {
      "name": "steam_file_write_file",
      "parameters": [
        {
          "parameter": "steam_filename",
          "description": "The Steam Cloud file to copy over."
        },
        {
          "parameter": "local_filename",
          "description": "The local file to use to copy from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nsteam_file_write_file(\"rm_koala.png\", \"Koala2.png\");\n```\nThe above code will copy the contents of the file \"Koala2.png\" to the Steam Cloud file \"rm_koala.png\".\n",
      "description": "With this function you can copy the contents of a locally saved file to a file that is synchronised with the Steam Cloud. The local file *must exist* before using this function, and it will return a value of 0 if it fails for whatever reason and\n    a value greater than 0 if it succeeds.",
      "returns": "real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_file_write_file.htm"
    },
    "steam_get_achievement": {
      "name": "steam_get_achievement",
      "parameters": [
        {
          "parameter": "ach_name",
          "description": "The name of the achievement to get (string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif hp <= 0\n    {\n        global.Deaths += 1;\n        if global.Deaths == 10\n        {\n            if !steam_get_achievement(\"ach_Player_Dies_Ten_Times\") steam_set_achievement(\"ach_Player_Dies_Ten_Times\");\n        }\n    }\n```\nThe above code will reward the player an achievement if the global variable \"Deaths\" is equal to 10 and if the achievement has not already been awarded.\n",
      "description": "With this function you can check the Steam API to see if a specific achievement has been awarded. The achievement should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_get_achievement.htm"
    },
    "steam_get_app_id": {
      "name": "steam_get_app_id",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.app_id = steam_get_app_id();\n```\nThe above code gets the unique app ID for your game on Steam and stores it in a global variable.\n",
      "description": "This function is used retrieve the unique app ID that Steam assigns for your game, which is required for using some of the  [User Generated Content](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/Steam_UGC.htm) functions.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_get_app_id.htm"
    },
    "steam_get_persona_name": {
      "name": "steam_get_persona_name",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_initialised()\n    {\n        global.p_name = steam_get_persona_name();\n    }\n```\nThe above code will set a global variable to current users screen name if the Steam client API is correctly initialised.\n",
      "description": "You can use this function to return the user name of the user currently logged into the Steam client. This is the visible screen name and *not* the unique **user id** (this can be found using the function `steam_get_user_steam_id()`).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_get_persona_name.htm"
    },
    "steam_get_quota_free": {
      "name": "steam_get_quota_free",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_is_cloud_enabled_for_app()\n    {\n        quota = steam_get_quota_free();\n    }\n```\nThe above code checks to see if the steam cloud is enabled for the game and if so it gets the size of the free storage space and stores it in a variable.\n",
      "description": "With this function you can find out how much free space is left for the user of the Steam Cloud quota. The value returned is in *bytes*.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_get_quota_free.htm"
    },
    "steam_get_quota_total": {
      "name": "steam_get_quota_total",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_is_cloud_enabled_for_app()\n    {\n        quota = steam_get_quota_total();\n    }\n```\nThe above code checks to see if the steam cloud is enabled for the game and if so it gets the size of the storage quota and stores it in a variable.\n",
      "description": "When using the Steam Cloud to store and synchronise files, you must set up the *quota* of space that your game will need. This quota is enforced on each Cloud-enabled game, on a per-user-per-game basis, so, for example, if the quota for Game X is 1 megabyte, then each Steam account that owns Game X may store, at most, 1 megabyte of data associated with that game in the Cloud. Any other Cloud-enabled games that the user owns (say, Game Y) will not be affected by the data stored by Game X. The default quota for new Steamworks games is one gigabyte, but you can change this from the Steamworks control panel for your game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_get_quota_total.htm"
    },
    "steam_get_stat_avg_rate": {
      "name": "steam_get_stat_avg_rate",
      "parameters": [
        {
          "parameter": "stat_name",
          "description": "The name of the statistic to get (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar avg = steam_get_stat_avg_rate(\"PointsPerHour\"); draw_text(8, 8, \"PPH = \" + string(avg);\n```\nThe above code gets the current value for the average statistic \"PointsPerHour\" and draws it on the screen.\n",
      "description": "With this function you can get the value of a specific **average** statistic. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match\n    that used as the **API Name** on the control panel.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_get_stat_avg_rate.htm"
    },
    "steam_get_stat_float": {
      "name": "steam_get_stat_float",
      "parameters": [
        {
          "parameter": "stat_name",
          "description": "The name of the statistic to get (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar dist_pc = (dist / dist_max) * 100;\n    if steam_get_stat_float(\"Travelled\") < dist_pc\n    {\n        steam_set_stat_int(\"Travelled\", dist_pc);\n    }\n```\nThe above code calculates a percentage based on the distance travelled variable \"dist\" and the maximum distance you can travel \"dist_max\". It then polls the current value for the statistic \"Travelled\" and if it is less than the calculated value, it sets the stat again.\n",
      "description": "With this function you can get the value of a specific **floating point** statistic. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_get_stat_float.htm"
    },
    "steam_get_stat_int": {
      "name": "steam_get_stat_int",
      "parameters": [
        {
          "parameter": "stat_name",
          "description": "The name of the statistic to get (a string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nxp += 100;\n    steam_set_stat_int(\"Total_XP\", steam_get_stat_int(\"Total_XP\") + 100);\n    if steam_get_stat_int(\"Total_XP\") > 1000\n    {\n        if !steam_get_achievement(\"Ach_1000XP\") steam_set_achievement(\"Ach_1000XP\");\n    }\n```\nThe above code sets a statistic and then checks the final value for it to decide whether to award an achievement or not.\n",
      "description": "With this function you can get the value of a specific **signed integer** statistic. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_get_stat_int.htm"
    },
    "steam_get_user_account_id": {
      "name": "steam_get_user_account_id",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.user_id = steam_get_user_account_id();\n```\nThe above code gets the unique user ID for the person who owns the game and stores it in a global variable.\n",
      "description": "This function is used retrieve the unique User ID that Steam assigns to each user, which is required for using some of the  [User Generated Content](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/Steam_UGC.htm) functions.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_get_user_account_id.htm"
    },
    "steam_get_user_persona_name": {
      "name": "steam_get_user_persona_name",
      "parameters": [
        {
          "parameter": "steamID",
          "description": "The unique Steam ID for a user."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nrequest = steam_get_user_persona_name(global.UGC_UserID);\n```\nThe above code will request the user name of the user ID stored in the global variable \"UGC_UserID\", storing the returned value in a variable for parsing in the Async Event.\n",
      "description": "This function can be used to retrieve the user name (screen name) for any specific user ID. You give the user ID then the function returns a unique async ID value which can be used to check the details correctly in the  [Steam Async event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm).\n    This event will have the `async_load` DS map which will be populated with the following key/value pairs:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_get_user_persona_name.htm"
    },
    "steam_get_user_steam_id": {
      "name": "steam_get_user_steam_id",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_initialised()\n    {\n        global.u_id = steam_get_user_steam_id();\n    }\n```\nThe above code will set a global variable to the current users unique Steam ID if the Steam client API is correctly initialised.\n",
      "description": "You can use this function to return the unique Steam **user id** of the user currently logged into the Steam client. This is a unique 64 bit value that can be used to identify individual users and *not* their on screen user name (this can be found using the function `steam_get_persona_name()`). As this is an int64 you may need to cast it as such when using it in subsequent functions using the `int64()` function.",
      "returns": "Integer (int64)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_get_user_steam_id.htm"
    },
    "steam_initialised": {
      "name": "steam_initialised",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.steam_api = false;\n    if steam_initialised()\n    {\n        if steam_stats_ready() && steam_is_overlay_enabled()\n        {\n            global.steam_api = true;\n        }\n    }\n```\nThe above code will set a global variable to `true` if the Steam client API is correctly initialised, along with the Steam statistics and overlay functionality, or it will set the variable to `false` otherwise.\n",
      "description": "When using the Steam API, this function can be called to check that the Steam client API has been initialised correctly before any doing any further calls to Steam specific functions in your game.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_initialised.htm"
    },
    "steam_is_cloud_enabled_for_account": {
      "name": "steam_is_cloud_enabled_for_account",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_is_cloud_enabled_for_account\n    {\n        steam_file_share(\"Save.txt\");\n    }\n```\nThe above code checks to see if the user has the Steam Cloud enabled and if it returns `true`, it will then synchronise the given file.\n",
      "description": "With this function you can check to make sure that the Steam Cloud service is enabled by the user in their Steam Client settings. It will return `true` if it is and `false` otherwise. Note that this does not automatically mean that you can store data to the Cloud, as it will also have to have been enabled for your game (you can check this using the function `steam_is_cloud_enabled_for_app()`). If the Steam Cloud is enabled for your game, but the user has it switched off locally, you can still use the Cloud functions to store and retrieve data from a local copy of all files, it will just not upload them to the cloud on the game end, nor synchronise on the game start.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_is_cloud_enabled_for_account.htm"
    },
    "steam_is_cloud_enabled_for_app": {
      "name": "steam_is_cloud_enabled_for_app",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_is_cloud_enabled_for_app()\n    {\n        quota = steam_get_quota_total();\n    }\n```\nThe above code checks to see if the steam cloud is enabled for the game and if so it gets the size of the storage quota and stores it in a variable.\n",
      "description": "With this function you can check to make sure that the Steam Cloud service is enabled for your game. It will return `true` if it is and `false` otherwise. Note that this does not automatically mean that you can use the Cloud functions as the user can switch off Cloud synchronisation from their Steam Client. You can check this using the function `steam_is_cloud_enabled_for_account()`, but, even if it is disabled for the user (and enabled for the game), the functions will still work to store and retrieve data from a local copy of all files, it will just not upload them to the cloud on the game end, nor synchronise on the game start.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Cloud/steam_is_cloud_enabled_for_app.htm"
    },
    "steam_is_overlay_enabled": {
      "name": "steam_is_overlay_enabled",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.steam_api = false;\n    if steam_initialised()\n    {\n        if steam_stats_ready() && steam_is_overlay_enabled()\n        {\n            global.steamapi = true;\n        }\n    }\n```\nThe above code will set a global variable to `true` if the Steam client API is correctly initialised, along with the Steam statistics and overlay functionality, or it will set the variable to `false` otherwise.\n",
      "description": "When using the Steam API, this function can be called to check that the Steam client API has the overlay functionality enabled.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_is_overlay_enabled.htm"
    },
    "steam_is_screenshot_requested": {
      "name": "steam_is_screenshot_requested",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_is_screenshot_requested()\n    {\n        var file = \"Catch_The_Haggis_\" + string(global.scrn_num) + \".png\");\n        screen_save(file)\n        steam_send_screenshot(file, window_get_width(), window_get_height());\n        global.scrn_num += 1;\n    }\n```\nThe above code will poll the Steam API for a screenshot request and if it has been, a unique name for the image file will be generated, a screenshot will be taken, and the file will be sent to the Steam Community page for the user.\n",
      "description": "This function will poll the Steam API to see if the key for taking a screenshot of the game has been pressed. The function will only return `true` for one step (game tick) when the key is pressed, and will return `false` at all other times.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_is_screenshot_requested.htm"
    },
    "steam_is_user_logged_on": {
      "name": "steam_is_user_logged_on",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif steam_is_user_logged_on()\n    {\n        global.user_id = steam_get_user_account_id();\n    }\n```\nThe above code will check to see if the user is logged onto the Steam server and if it stores the user ID in a global variable.\n",
      "description": "This function will return `true` if the Steam client currently has a live connection to the Steam servers. If it returns `false`, it means there is no active connection due to either a networking issue on the local machine, or the Steam server being down or busy.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_is_user_logged_on.htm"
    },
    "steam_reset_all_stats": {
      "name": "steam_reset_all_stats",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nini_open(\"Save.ini\");\n    if global.Version != ini_read_real(\"Data\", \"Version\", 0)\n    {\n        ini_write_real(\"Data\", \"Version\", global.Version);\n        steam_reset_all_stats();\n    }\n    ini_close();\n```\nThe above code checks a stored value in an ini file against that of a global variable and if they are different, it resets the statistics for the game.\n",
      "description": "With this function you can reset all the statistics for the **current user** to their default values (as defined in the Steamworks control panel for your game). It is recommended that you only use this function as a debug tool when developing your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_reset_all_stats.htm"
    },
    "steam_reset_all_stats_achievements": {
      "name": "steam_reset_all_stats_achievements",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nini_open(\"Save.ini\");\n    if global.Version != ini_read_real(\"Data\", \"Version\", 0)\n    {\n        ini_write_real(\"Data\", \"Version\", global.Version);\n        steam_reset_all_stats_achievements();\n    }\n    ini_close();\n```\nThe above code checks a stored value in an ini file against that of a global variable and if they are different, it resets the statistics and achievements for the game.\n",
      "description": "With this function you can reset all the statistics *and *achievements for the **current user** to their default values (as defined in the Steamworks control panel for your game). It is recommended that you only use this function as a debug tool when developing your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_reset_all_stats_achievements.htm"
    },
    "steam_send_screenshot": {
      "name": "steam_send_screenshot",
      "parameters": [
        {
          "parameter": "filename",
          "description": "The name of the image file to upload (a string)."
        },
        {
          "parameter": "width",
          "description": "The width of the image (an integer)."
        },
        {
          "parameter": "height",
          "description": "The height of the image (an integer)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif steam_is_screenshot_requested()\n    {\n        var file = \"Catch_The_Haggis_\" + string(global.scrn_num) + \".png\");\n        screen_save(file)\n        steam_send_screenshot(file, window_get_width(), window_get_height());\n        global.scrn_num += 1;\n    }\n```\nThe above code will poll the Steam API for a screenshot request and if it has been, a unique name for the image file will be generated, a screenshot will be taken, and the file will be sent to the Steam Community page for the user.\n",
      "description": "With this function you can upload a screenshot to the Steam Community profile page of the currently logged in user. The filename you supply is the name of the local file that was created when you took the screenshot using the GameMaker Studio 2 functions `screen_save()` or `screen_save_part()`. The width and height define the image size, and the function will return a value of 0 if it fails for whatever reason and a value greater than 0 if it succeeds.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_send_screenshot.htm"
    },
    "steam_set_achievement": {
      "name": "steam_set_achievement",
      "parameters": [
        {
          "parameter": "ach_name",
          "description": "The name of the achievement to set (string)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif hp <= 0\n    {\n        global.Deaths += 1;\n        if global.Deaths == 10\n        {\n            if !steam_get_achievement(\"ach_Player_Dies_Ten_Times\") steam_set_achievement(\"ach_Player_Dies_Ten_Times\");\n        }\n    }\n```\nThe above code will reward the player an achievement if the global variable \"Deaths\" is equal to 10 and if the achievement has not already been awarded.\n",
      "description": "With this function you can tell the Steam API to award (\"set\") an achievement for the player. These achievements should have been defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel. The Steam Game Overlay will display a notification panel to the user informing them of the achievement that they have received, unless the achievement has already been awarded, in which case nothing will happen.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_set_achievement.htm"
    },
    "steam_set_stat_avg_rate": {
      "name": "steam_set_stat_avg_rate",
      "parameters": [
        {
          "parameter": "stat_name",
          "description": "The name of the statistic to set (a string)."
        },
        {
          "parameter": "session_count",
          "description": "The value to get the average of (a real number)"
        },
        {
          "parameter": "session_length",
          "description": "The time that has been taken since the last time the stat was set (a real number)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "Since the average stat function can be complex to understand, we will illustrate its use with the following example. Consider the case where you'd like to track an average statistic, such as \"Points earned per hour\". One approach would\n    be to have two stats: an *integer* stat, \"TotalPoints\", and a *float* stat \"TotalPlayTimeHours\", and then divide the total points by the total time to get the \"Points per Hour\" value.\nHowever, once the player has accumulated a significant amount of playtime, the calculated average will change extremely slowly, and the more the user plays the game, the less responsive that average will be. If the user has spent 100 hours playing the\n    game, the calculated average will \"lag\" by about 50 hours of that, and if they increase their skill, they will not see the increase in \"Points Per Hour\" that they expect. To get around that we can use a \"sliding window\"\n    to only calculate the \"Points per hour\" for the last 10 hours played.\nSo, to use this function, we would need to create a Steam stat (in the control panel for the game on the Workshop) called \"AvgPointsPerHour\" and set its **Window** property to 10. Now in your game you would have to add some global variables\n    into an instance at the start:\n```\nglobal.Points = 0; global.Time = 0;\n```\nYou would then have some controller object to count up the global \"Time\" variable in an alarm (for example) every second, while your game-play would affect the global \"Points\" variable. At regular intervals while playing (again,\n    in a controller object, perhaps in an Alarm, or at intervals from polling the \"Time\" value) you would set the stat like this:\n```\nsteam_set_stat_avg_rate(\"AvgPointsPerHour\", global.Points, (global.Time / 3600)); global.Points = 0; global.Time = 0;\n```\nNote that we divide time by 3600 since we want the time in *hours* and not in seconds, and afterward we reset the global \"Points\" variable and the global \"Time\" variable to 0 so that the next time the function is called, we\n    get a new average for the statistic. Now, what Steam will do is take this value that you have sent and create an average value over the time that was set for our \"window\".\n",
      "description": "This function permits you to set an average statistic type with a \"sliding window\" effect on the average. The \"session_count\" value is the current value that you wish to average out, while the \"session_length\" is the amount\n    of game time since the last call to the function. Please see the **extended Example** below for further details on how this can be used.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_set_stat_avg_rate.htm"
    },
    "steam_set_stat_float": {
      "name": "steam_set_stat_float",
      "parameters": [
        {
          "parameter": "stat_name",
          "description": "The name of the statistic to set (a string)."
        },
        {
          "parameter": "value",
          "description": "The value (a 32bit float) to set the stat to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar dist_pc = (dist / dist_max) * 100; steam_set_stat_float(\"Travelled\", dist_pc);\n```\nThe above code calculates a percentage based on the distance travelled variable \"dist\" and the maximum distance you can travel \"dist_max\" and then sets the stat \"Travelled\" to the new value.\n",
      "description": "With this function you can set a specific statistic to a new, **floating point**, value. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should\n    match that used as the **API Name** on the control panel. Examples of when you could use this are for tracking how far your player has travelled, or what percentage of the game is complete.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_set_stat_float.htm"
    },
    "steam_set_stat_int": {
      "name": "steam_set_stat_int",
      "parameters": [
        {
          "parameter": "stat_name",
          "description": "The name of the statistic to set (a string)."
        },
        {
          "parameter": "value",
          "description": "The value (a 32bit integer) to set the stat to."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nxp += 100;\n    steam_set_stat_int(\"Total_XP\", steam_get_stat_int(\"Total_XP\") + 100);\n    if steam_get_stat_int(\"Total_XP\") > 1000\n    {\n        if !steam_get_achievement(\"Ach_1000XP\") steam_set_achievement(\"Ach_1000XP\");\n    }\n```\nThe above code sets a statistic and then checks the final value for it to decide whether to award an achievement or not.\n",
      "description": "With this function you can set a specific statistic to a new, **signed integer**, value. The statistic should have been previously defined on the Steamworks control panel accounts page for your game and the string that is passed to the function should match that used as the **API Name** on the control panel. Examples of when you could use this are for tracking how many times the player dies or for tracking progress towards an achievement.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Achievements/steam_set_stat_int.htm"
    },
    "steam_stats_ready": {
      "name": "steam_stats_ready",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.steam_api = false;\n    if steam_initialised()\n    {\n        if steam_stats_ready() && steam_is_overlay_enabled()\n        {\n            global.steam_api = true;\n        }\n    }\n```\nThe above code will set a global variable to `true` if the Steam client API is correctly initialised, along with the Steam statistics and overlay functionality, or it will set the variable to `false` otherwise.\n",
      "description": "When using the Steam API, this function can be called to check that the Steam client API has correctly initialised the statistics for your game.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_API/steam_stats_ready.htm"
    },
    "steam_ugc_create_item": {
      "name": "steam_ugc_create_item",
      "parameters": [
        {
          "parameter": "consumer_app_id",
          "description": "The unique App ID for your game on Steam."
        },
        {
          "parameter": "file_type",
          "description": "One of the available file type constants (listed below)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this example we first call the function and store the async ID value in a variable:\n```\nvar app_id = steam_get_app_id();\n    new_item = steam_ugc_create_item(app_id, ugc_filetype_community);\n```\nThis would then send off a request to the Steam API to create the new Worksop item, generating an async event which we would deal with as follows:\n```\nvar event_id = async_load[? \"id\"];\n    if event_id == new_item\n    {\n        var type = async_load[? \"event_type\"];\n        if type == \"ugc_create_item\"\n        {\n            global.Publish_ID = async_load[? \"published_file_id\"];\n        }\n    }\n```\nThe above code checks the event type and if it is \"ugc_create_item\" then it retrieves the published file ID and stores it in a global variable for future reference.\n",
      "description": "This function is used to prepare the Workshop API and generate a published file ID for the item to be added. The function *must* be called before doing anything else with the item to be uploaded, as you will be required to use the unique published ID value that it returns in the Steam Async Event for updating. To use this function, you need to supply the Steam App ID for your game, and the use one of the following constants for the `file_type` argument:",
      "returns": "Async ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_item.htm"
    },
    "steam_ugc_create_query_all": {
      "name": "steam_ugc_create_query_all",
      "parameters": [
        {
          "parameter": "query_type",
          "description": "The type of query to create (see constants listed below)."
        },
        {
          "parameter": "match_type",
          "description": "The type of UGC items to query (see constants listed below)."
        },
        {
          "parameter": "page",
          "description": "The page number to query."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nquery_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1);\n```\nThe above code creates a general query request and stores it's handle in a variable for future use.\n",
      "description": "This function can be used to query the UGC data base using some pre-defined query types. The function requires the following constants for the type of query to create, the type of item to query and the page number to query - note that a query will return\n    a *maximum* number of 50 items.",
      "returns": "Query Handle",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm"
    },
    "steam_ugc_create_query_all_ex": {
      "name": "steam_ugc_create_query_all_ex",
      "parameters": [
        {
          "parameter": "query_type",
          "description": "The type of data query to create (see constants listed below)."
        },
        {
          "parameter": "match_type",
          "description": "The type of UGC items to query (see constants listed below)."
        },
        {
          "parameter": "page",
          "description": "The page number to query."
        },
        {
          "parameter": "creator_app_id",
          "description": "The item creator app ID."
        },
        {
          "parameter": "consumer_app_id",
          "description": "The consumer app ID."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nquery_handle = steam_ugc_create_query_all_ex(ugc_query_RankedByVote, page, global.AccountID, 0, global.GameID);\n```\nThe above code creates a query request and stores it's handle in a variable for future use.\n",
      "description": "This function can be used to query the UGC data base. The function requires the ID of the game that is going to consume the item and/or the ID of the game that created the item, and you need to use the following constants for the type of query to create,\n    the type of item to query and the page number to quer. Note that a query will return a *maximum* number of 50 items.",
      "returns": "Query Handle",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all_ex.htm"
    },
    "steam_ugc_create_query_user": {
      "name": "steam_ugc_create_query_user",
      "parameters": [
        {
          "parameter": "list_type",
          "description": "The type of data list to create (see constants listed below)."
        },
        {
          "parameter": "match_type",
          "description": "The type of UGC items to query (see constants listed below)."
        },
        {
          "parameter": "sort_order",
          "description": "The way that the data should be ordered (see constants listed below)."
        },
        {
          "parameter": "page",
          "description": "The page number to query."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nquery_handle = steam_ugc_create_query_user(ugc_list_Published, ugc_match_Items, ugc_sortorder_TitleAsc, 1);\n```\nThe above code creates a query request and stores it's handle in a variable for future use.\n",
      "description": "This function can be used to query the UGC data base. The function automatically uses the default ID for the app, user and assumes that the query is being done by the consumer (rather than the creator). The function requires you to use the following\n    constants for the type of data to query, the type of item to query and the order in which the returned items will be sorted, as well as a page number - note that a query will return a *maximum* number of 50 items.",
      "returns": "Query Handle",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user.htm"
    },
    "steam_ugc_create_query_user_ex": {
      "name": "steam_ugc_create_query_user_ex",
      "parameters": [
        {
          "parameter": "list_type",
          "description": "The type of data list to create (see constants listed below)."
        },
        {
          "parameter": "match_type",
          "description": "The type of UGC items to query (see constants listed below)."
        },
        {
          "parameter": "sort_order",
          "description": "The way that the data should be ordered (see constants listed below)."
        },
        {
          "parameter": "page",
          "description": "The page number to query."
        },
        {
          "parameter": "account_id",
          "description": "The Steam account ID."
        },
        {
          "parameter": "creator_app_id",
          "description": "The item creator app ID."
        },
        {
          "parameter": "consumer_app_id",
          "description": "The consumer app ID."
        }
      ],
      "requiredParameters": 7,
      "isVariadic": false,
      "example": "```\nquery_handle = steam_ugc_create_query_user_ex(ugc_list_Published, ugc_match_Items, ugc_sortorder_TitleAsc, page, global.AccountID, 0, global.GameID);\n```\nThe above code creates a query request and stores it's handle in a variable for future use.\n",
      "description": "This function can be used to query the UGC data base. The function requires the ID value for the user and the ID of the game that is going to consume the item and/or the ID of the game that created the item. You also need to use the following constants\n    for the type of data to query, the type of item to query and the order in which the returned items will be sorted, as well as a page number - note that a query will return a *maximum* number of 50 items.",
      "returns": "Query Handle",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm"
    },
    "steam_ugc_download": {
      "name": "steam_ugc_download",
      "parameters": [
        {
          "parameter": "ugc_handle",
          "description": "The unique handle for the preview to be downloaded."
        },
        {
          "parameter": "dest_filename",
          "description": "The file name to save the preview with."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this example we first call the function and store the async ID value in a variable:\n```\nsteam_get = steam_ugc_download(steam_handle, \"\\UGC\\Preview_file.png\");\n```\nThis would then send off a file request to the Steam API, generating an async event which we would deal with as follows:\n```\nvar event_id = async_load[? \"id\"];\n    if event_id == steam_get\n    {\n        var type = async_load[? \"event_type\"];\n        if type == \"ugc_download\"\n        {\n            sprite_delete(preview_sprite);\n            preview_sprite = sprite_add(async_load[? \"dest_filename\"], 0, false, false, 0, 0);\n        }\n    }\n```\nThe above code checks the event type and then creates a sprite from the downloaded image.\n",
      "description": "With this function you can download a preview image for any given UGC item. The `ugc_handle` is the unique identifying value for the image (which you can get using the function `steam_ugc_send_query()`), and the destination filename is the name (and local path within the Steam sandbox) that you wish to give the image file when the download is complete.",
      "returns": "Async ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_download.htm"
    },
    "steam_ugc_get_item_install_info": {
      "name": "steam_ugc_get_item_install_info",
      "parameters": [
        {
          "parameter": "published_file_id",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "info_map",
          "description": "A (previously created) DS map index."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar item_map = ds_map_create(); steam_ugc_get_item_install_info(global.fileID, item_map);\n```\nThe above code will query the install status of the item indexed in the global variable \"fileID\", using a `DS Map` to store the information.\n",
      "description": "This function can be used to retrieve information about any given published file item that has been subscribed to and downloaded to the Steam local storage area for your game. You give the item ID and supply the index to an empty  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm)    which will then be populated with the following key/value pairs if the item exists:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_get_item_install_info.htm"
    },
    "steam_ugc_get_item_update_info": {
      "name": "steam_ugc_get_item_update_info",
      "parameters": [
        {
          "parameter": "published_file_id",
          "description": "The unique file ID for the UGC to be checked."
        },
        {
          "parameter": "info_map",
          "description": "A (previously created) DS map index."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar info_map = ds_map_create();\n    var info = steam_ugc_get_item_update_info(global.fileID, info_map);\n    if info\n    {\n        draw_text(32, 15, \"needs_update: \" + string(info_map[? \"needs_update\"]));\n        draw_text(32, 30, \"is_downloading: \" + string(info_map[? \"is_downloading\"]));\n        draw_text(32, 45, \"bytes_downloaded: \" + string(info_map[? \"bytes_downloaded\"]));\n        draw_text(32, 60, \"bytes_total: \" + string(info_map[? \"bytes_total\"]));\n    }\n```\nThe above code will query the download status of the item indexed in the global variable \"fileID\", using a `DS Map` to store the information.\n",
      "description": "This function can be used to retrieve information about the current download state for the given file ID. You give the item ID and supply the index to an empty  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) which will then be populated with the following key/value pairs if the item exists:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_get_item_update_info.htm"
    },
    "steam_ugc_get_item_update_progress": {
      "name": "steam_ugc_get_item_update_progress",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "info_map",
          "description": "A (previously created) DS map index."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar uploadMap = ds_map_create(); steam_ugc_get_item_update_progress(global.itemHandle, uploadMap); var statusCode = uploadMap[? \"status_code\"]; var status = uploadMap[? \"status_string\"]; var processed = uploadMap[?\n    \"bytes_processed\"]; var total = uploadMap[? \"bytes_total\"]; draw_text(32, 0, \"Upload info for item:\" + string(global.itemHandle)); draw_text(32, 15, \"status code:\" + string(statusCode));    draw_text(32, 30, \"status:\" + string(status)); draw_text(32, 45, \"bytes processed:\" +string(processed)); draw_text(32, 60, \"bytes total:\" + string( total)); ds_map_destroy(uploadMap);\n  \n```\nThe above code will query the upload status of the item indexed in the global variable \"itemHandle\", using a `DS Map` to store the information. This is then parsed and the resulting values drawn to the screen.\n",
      "description": "This function can be used to track the update status for an item. You give the item handle (as returned by the function `steam_ugc_start_item_update()`) and an empty  [DS map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm)    which will then be populated with the following key/value pairs:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_get_item_update_progress.htm"
    },
    "steam_ugc_get_subscribed_items": {
      "name": "steam_ugc_get_subscribed_items",
      "parameters": [
        {
          "parameter": "item_list",
          "description": "A (previously created) DS list index."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsteam_list = ds_list_create(); steam_ugc_get_subscribed_items(steam_list);\n  \n```\nThe above code will create an empty DS list and then populate it with the file IDs for all subscribed items for the user.\n",
      "description": "This function will populate a DS list with all the published file IDs for the items that the user is currently subscribed to. You must first create the list and store the index in a variable, then pass this to the function. The function will return\n    `true` if everything is correct and the Steam API is initialised, or `false` if there is an error.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_get_subscribed_items.htm"
    },
    "steam_ugc_num_subscribed_items": {
      "name": "steam_ugc_num_subscribed_items",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nnumSub = steam_ugc_num_subscribed_items();\n```\nThe above code will store the number of subscribed items in a variable.\n",
      "description": "This function can be used to get the number of items that the current user has subscribed to.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_num_subscribed_items.htm"
    },
    "steam_ugc_query_add_excluded_tag": {
      "name": "steam_ugc_query_add_excluded_tag",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "tag_name",
          "description": "The tag name to exclude (a string)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1); steam_ugc_query_add_excluded_tag(query_handle, \"walking simulator\"); steam_ugc_query_set_return_long_description(query_handle, true);    steam_ugc_query_set_allow_cached_response(query_handle, true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to exclude a given UGC from the query request. The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`)\n    and the second argument is a string you want to use as the tag to exclude. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_add_excluded_tag.htm"
    },
    "steam_ugc_query_add_required_tag": {
      "name": "steam_ugc_query_add_required_tag",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "tag_name",
          "description": "The tag name to include (a string)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1); steam_ugc_query_add_required_tag(query_handle, \"RPG\"); steam_ugc_query_set_return_long_description(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle,\n    true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to search only those UGC items with the given tag. The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`)\n    and the second argument is a string you want to use as the tag to include. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_add_required_tag.htm"
    },
    "steam_ugc_query_set_allow_cached_response": {
      "name": "steam_ugc_query_set_allow_cached_response",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "cache",
          "description": "Whether to have the query check the local cache or not."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1); steam_ugc_query_add_required_tag(query_handle, \"RPG\"); steam_ugc_query_set_return_long_description(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle,\n    true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to request that the query check the local cache rather than online. The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`)\n    and the second argument is either `true` or `false`. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_allow_cached_response.htm"
    },
    "steam_ugc_query_set_cloud_filename_filter": {
      "name": "steam_ugc_query_set_cloud_filename_filter",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "match_cloud_filename",
          "description": "Sets whether the UGC item file name should match or not."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1); steam_ugc_query_set_cloud_filename_filter(query_handle, true); steam_ugc_query_add_excluded_tag(query_handle, \"nasty chips\"); steam_ugc_query_set_return_long_description(query_handle,\n    true); steam_ugc_query_set_allow_cached_response(query_handle, true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to check and see if a Workshop item file name must match or not. The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`)\n    and the second argument is either `true` or `false` depending on whether you require the file names to match. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_cloud_filename_filter.htm"
    },
    "steam_ugc_query_set_match_any_tag": {
      "name": "steam_ugc_query_set_match_any_tag",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "match_any_tag",
          "description": "Sets whether the UGC item tags should match anything or not."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1); steam_ugc_query_set_match_any_tag(query_handle, false); steam_ugc_query_add_excluded_tag(query_handle, \"walking simulator\"); steam_ugc_query_set_return_long_description(query_handle,\n    true); steam_ugc_query_set_allow_cached_response(query_handle, true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to switch on or off tag matching. The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`)\n    and the second argument is either `true` or `false` depending on whether you require a check for matching tags. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_match_any_tag.htm"
    },
    "steam_ugc_query_set_ranked_by_trend_days": {
      "name": "steam_ugc_query_set_ranked_by_trend_days",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "days",
          "description": "The number of days to query."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1); steam_ugc_query_set_ranked_by_trend_days(query_handle, 5); steam_ugc_query_set_return_long_description(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle,\n    true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any UGC query made using the `ugc_query_RankedByTrend` constant, specifically to search over a number of days. The query handle is the value returned when you created the query (using, for example,\n    `steam_ugc_create_query_user()`) and the second argument is the number of days over which you want the query to run. The function will return `true` if the query filter was correctly set,\n    or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_ranked_by_trend_days.htm"
    },
    "steam_ugc_query_set_return_long_description": {
      "name": "steam_ugc_query_set_return_long_description",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "long_description",
          "description": "Whether to have the query return the long description text."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1); steam_ugc_query_set_return_long_description(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle, true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to retrieve the long description text in the call back event triggered when the query was sent. The query handle is the value returned when you created the query (using, for\n    example, `steam_ugc_create_query_user()`) and the second argument is either `true` or `false`. The function will return `true` if the query filter was correctly set, or `false`    otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_return_long_description.htm"
    },
    "steam_ugc_query_set_return_total_only": {
      "name": "steam_ugc_query_set_return_total_only",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "total_only",
          "description": "Whether to have the query return only the total number of hits or not."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1); steam_ugc_query_set_return_total_only(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle, true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to request only the number of results without any other information (meaning that the DS map generated by the send function will contain the key \"num_results\" without\n    any further map data). The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`) and the second argument is either `true` or\n    `false`. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_return_total_only.htm"
    },
    "steam_ugc_query_set_search_text": {
      "name": "steam_ugc_query_set_search_text",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to use."
        },
        {
          "parameter": "search_text",
          "description": "The search text to use (a string) for the query."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByVote, ugc_match_Items, 1); steam_ugc_query_set_search_text(query_handle, \"texture\"); steam_ugc_query_set_return_long_description(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle,\n    true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to further filter any given UGC query, specifically to search for the given string in the title and description of the UGC items. The query handle is the value returned when you created the query (using, for example, `steam_ugc_create_query_user()`)\n    and the second argument is a string you want to use as the search term. The function will return `true` if the query filter was correctly set, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_query_set_search_text.htm"
    },
    "steam_ugc_request_item_details": {
      "name": "steam_ugc_request_item_details",
      "parameters": [
        {
          "parameter": "published_file_id",
          "description": "The unique file ID for the UGC to be checked."
        },
        {
          "parameter": "max_age_seconds",
          "description": "The \"age\" of the data to check (recommended 30 - 60 seconds)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this example we send off a details request for an item and then parse the resulting `async_load` DS map to set some variables. First we send of the request:\n```\nsteam_details = steam_ugc_request_item_details(global.fileID, 60);\n```\nThe above code will request details on the item with the file ID stored in the global variable and will trigger a Steam Async event with the returned information. In this event we can then parse the map and store some of the values in variables which can then be used to display the information to the user:\n```\nvar map_id = async_load[? \"id\"];\n    var result = async_load[? \"result\"];\n    if (map_id == steam_details) && (result == ugc_result_success)\n    {\n        mTitle = async_load[? \"title\"];\n        mDesc = async_load[? \"description\"];\n        mTags = async_load[? \"tags\"];\n        m_hPreviewFile = async_load[? \"handle_preview_file\"];\n        m_hOwnerSteamId = async_load[? \"steam_id_owner\"];\n        mOwnerAccountId = async_load[? \"account_id_owner\"];\n        mPubFileId = async_load[? \"published_file_id\"];\n        mScore = async_load[? \"score\"];\n    }\n```\n",
      "description": "This function can be used to retrieve information about a given file ID. You give the file ID and supply a maximum age for checking (see the Steam docs for more information), then the function returns a unique async ID value which can be used to check the details correctly in the  [Steam Async event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm). This event will have the `async_load` DS map which will be populated with the following key/value pairs:",
      "returns": "Async ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_request_item_details.htm"
    },
    "steam_ugc_send_query": {
      "name": "steam_ugc_send_query",
      "parameters": [
        {
          "parameter": "ugc_query_handle",
          "description": "The query handle to send."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar query_handle = steam_ugc_create_query_all(ugc_query_RankedByTrend, ugc_match_Items, 1); steam_ugc_query_add_required_tag(query_handle, \"RPG\"); steam_ugc_query_set_return_long_description(query_handle, true); steam_ugc_query_set_allow_cached_response(query_handle,\n    true); query_ID = steam_ugc_send_query(query_handle);\n```\nThe above code creates a query request and stores it's handle in a local variable for future use in the rest of the functions which further define the query request before sending the query.\n",
      "description": "This function can be used to send a query request. You first define the query using the appropriate `steam_ugc_create_query_*()` functions which will return a \"query Handle\". This handle is then used to set filters etc.... before being\n    used in this function to send off the query request. The function returns a unique async ID value which can be used to check the details correctly in the  [Steam Async event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm).\n    This event will have the `async_load` DS map which will be populated with the following key/value pairs:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_send_query.htm"
    },
    "steam_ugc_set_item_content": {
      "name": "steam_ugc_set_item_content",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "content",
          "description": "The content (a path) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will set the content path to be used for the given item, and it should be a relative path to the folder which contains the content files to upload - which in turn should be in the save are *or* the game bundle (ie: an included file).\n    The update handle is the value returned when you called the function `steam_ugc_start_item_update()`. The function will return `true` if the API was successfully accessed and `false`    if there was an issue.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_content.htm"
    },
    "steam_ugc_set_item_description": {
      "name": "steam_ugc_set_item_description",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "description",
          "description": "The description (a string - max 8000 characters) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will set the description to be used for the given item. The description should be a string and the update handle is the value returned when you called the function `steam_ugc_start_item_update()`.\n    The function will return `true` if the API was successfully accessed and `false` if there was an issue.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_description.htm"
    },
    "steam_ugc_set_item_preview": {
      "name": "steam_ugc_set_item_preview",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "preview",
          "description": "The preview image (JPG, GIF or PNG - max size 1MB) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will set the preview image to be used for the given item. The image should be supplied as either a PNG, JPG or GIF format file with a maximum size of 1MB. The path to the image should be a relative path in the save are *or* the game\n    bundle (ie: an included file). The update handle is the value returned when you called the function `steam_ugc_start_item_update()`. The function will return `true` if the API was successfully\n    accessed and `false` if there was an issue.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_preview.htm"
    },
    "steam_ugc_set_item_tags": {
      "name": "steam_ugc_set_item_tags",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "tags",
          "description": "The tags (as an array) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will set the tags to be used for the given item. The tags should be added to a 1D array as string elements and the array passed to the function. The update handle is the value returned when you called the function `steam_ugc_start_item_update()`.\n    The function will return `true` if the API was successfully accessed and `false` if there was an issue.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_tags.htm"
    },
    "steam_ugc_set_item_title": {
      "name": "steam_ugc_set_item_title",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "title",
          "description": "The title (a string - max 128 characters) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will set the title to be used for the given item. The title should be a string and the update handle is the value returned when you called the function `steam_ugc_start_item_update()`.\n    The function will return `true` if the API was successfully accessed and `false` if there was an issue.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_title.htm"
    },
    "steam_ugc_set_item_visibility": {
      "name": "steam_ugc_set_item_visibility",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "visibility",
          "description": "The visibility (a constant, listed below) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will set the visibility of the given item, set using one of the following constants:",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_visibility.htm"
    },
    "steam_ugc_start_item_update": {
      "name": "steam_ugc_start_item_update",
      "parameters": [
        {
          "parameter": "consumer_app_id",
          "description": "The unique App ID for your game on Steam."
        },
        {
          "parameter": "published_file_id",
          "description": "The unique published file ID value for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various peices of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function must be called before adding or updating information on a UGC item. You need to supply the unique App ID for your game on Steam, along with the unique published file ID that was returned for the item when you created it using the function\n    `steam_ugc_create_item()`. The function will return a unique update handle for the item, which you can then use in the UGC item functions to update (or add) information for uploading.",
      "returns": "Handle",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_start_item_update.htm"
    },
    "steam_ugc_submit_item_update": {
      "name": "steam_ugc_submit_item_update",
      "parameters": [
        {
          "parameter": "ugc_update_handle",
          "description": "The unique handle for the UGC to be updated."
        },
        {
          "parameter": "change_note",
          "description": "The change notes (a string) to be used for the item."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar app_id = steam_get_app_id(); var updateHandle = steam_ugc_start_item_update(app_id, global.Publish_ID); steam_ugc_set_item_title(updateHandle, \"My workshop item(3)!\"); steam_ugc_set_item_description( updateHandle, \"testing\n    workshop...\"); steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public); var tagArray; tagArray[0] = \"Test\"; tagArray[1] = \"New\"; steam_ugc_set_item_tags(updateHandle, tagArray); steam_ugc_set_item_preview(updateHandle,\n    \"promo.jpg\"); steam_ugc_set_item_content(updateHandle, \"WorkshopContent1\"); requestId = steam_ugc_submit_item_update(updateHandle, \"Version 1.2\");\n```\nThe above code gets the game ID, then uses that along with a previously stored published file ID to generate an update handle for the item. This handle is then used to update various pieces of information before the update is pushed to the Workshop\n    servers.\n",
      "description": "This function will submit the UGC item inexed by the given handle to the Steam Workshop servers, adding the change notes to be used for the given item. The change notes should be a string and the update handle is the value returned when you called the\n    function `steam_ugc_start_item_update()`. When using this function it will return an async ID value which can then be parsed when the  [Steam Asynchronous](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm)    event is triggered to report the creation of the item. The event will contain the following key/map values in the `async_load` DS map:",
      "returns": "Async ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_submit_item_update.htm"
    },
    "steam_ugc_subscribe_item": {
      "name": "steam_ugc_subscribe_item",
      "parameters": [
        {
          "parameter": "published_file_id",
          "description": "The unique file ID for the UGC to subscribe to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsteam_sub = steam_ugc_subscribe_item(global.pubFileID);\n```\nThe above code will subscribe (and download) the item with the file ID stored in the global variable \"pubFileID\".\n",
      "description": "This function can be used to subscribe to a UGC item. You supply the published file ID and then the function returns a unique async ID value which can be used to check when the subscribed item has been downloaded in the  [Steam Async event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm).\n    This event will have the `async_load` DS map which will be populated with the following key/value pairs:",
      "returns": "Async ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_subscribe_item.htm"
    },
    "steam_ugc_unsubscribe_item": {
      "name": "steam_ugc_unsubscribe_item",
      "parameters": [
        {
          "parameter": "published_file_id",
          "description": "The unique file ID for the UGC to unsubscribe from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsteam_sub = steam_ugc_subscribe_item(global.pubFileID);\n```\nThe above code will subscribe (and download) the item with the file ID stored in the global variable \"pubFileID\".\n",
      "description": "This function can be used to unsubscribe from a UGC item. You supply the published file ID and then the function returns a unique async ID value which can be used to check that the item has been unsubscribed correctly in the  [Steam Async event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm).\n    This event will have the `async_load` DS map which will be populated with the following key/value pairs:",
      "returns": "Async ID",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_unsubscribe_item.htm"
    },
    "steam_upload_score": {
      "name": "steam_upload_score",
      "parameters": [
        {
          "parameter": "lb_name",
          "description": "The name of the leaderboard that you are uploading the scores to (a string)."
        },
        {
          "parameter": "score",
          "description": "The score to upload (a real number)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "In this example, we first upload a score and then parse the `async_load` map returned if successful. The code below shows a typical example for uploading:\n```\nif (hp <= 0)\n        {\n        upload_ID = steam_upload_score(\"Game Scores\", score);\n        if (!upload_ID)\n            {\n            alarm[0] = room_speed;\n            }\n        }\n```\nNote that we have set an alarm if the call fails. This would be used to try the upload again at a later time and you can add extra code there to retry the upload or to save the score to a text file should it continue to fail, etc... We now add the following into the **Steam async event** for the instance controlling the scores:\n```\nvar type = ds_map_find_value(async_load, \"event_type\");\n    if (type == \"leaderboard_upload\")\n    {\n        var lb_ID = ds_map_find_value(async_load, \"post_id\");\n        if lb_ID == upload_ID\n        {\n            var lb_name = ds_map_find_value(async_load, \"lb_name\");\n            var lb_done = ds_map_find_value(async_load, \"success\");\n            var lb_score = ds_map_find_value(async_load, \"score\");\n            var lb_updated = ds_map_find_value(async_load, \"updated\");\n            show_debug_message(\"leaderboard post id:\" + string(lb_ID) + \" to lb:\" + string(lb_name) + \" with score:\" + string(lb_score) + \" updated=\" + string(lb_updated));\n            if (lb_done)\n            {\n                show_debug_message(\"- Succeeded\");\n            }\n            else\n            {\n                show_debug_message(\"- Failed\");\n            }\n        }\n    }\n```\nin the example we are simply outputting the return values to the compiler window as debug messages, but you can use this event to deal with the information in any way you choose.\n",
      "description": "This function will send a score to the given leaderboard. The score to be uploaded is a real number, and the leaderboard name is a string that was defined when you created the leaderboard using the function `steam_create_leaderboard()`. If the function fails, it will return a value of -1, while a successful post will return a unique ID for the upload and trigger an asynchronous  [Steam Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Steam.htm). This event will create a `DS Map` in the built in variable `async_load` with the following key/value pairs:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_upload_score.htm"
    },
    "steam_upload_score_buffer": {
      "name": "steam_upload_score_buffer",
      "parameters": [
        {
          "parameter": "lb_name",
          "description": "The name of the leaderboard that you are uploading the scores to (a string)."
        },
        {
          "parameter": "score",
          "description": "The score to upload (a real number)."
        },
        {
          "parameter": "buffer",
          "description": "The ID of the buffer to attach."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "In this example, we first upload a score and then parse the `async_load` map returned if successful. The code below shows a typical example for uploading, with a buffer being created to hold a string telling us which level the score was uploaded from:\n```\nif (hp <= 0)\n    {\n        var buff = buffer_create(256, buffer_fixed, 1 );\n        buffer_write(buff, buffer_string, \"Uploaded on level \" + string(global.Level));\n        upload_ID = steam_upload_score(\"Game Scores\", score, buff);\n        if (!upload_ID)\n        {\n            alarm[0] = room_speed;\n        }\n        buffer_delete(buff);\n    }\n```\nNote that we have set an alarm if the call fails. This would be used to try the upload again at a later time and you can add extra code there to retry the upload or to save the score to a text file should it continue to fail, etc... Also note that we immediately delete the buffer, since it is no longer required for the function. We now add the following into the **Steam async event** for the instance controlling the scores:\n```\nvar type = ds_map_find_value(async_load, \"event_type\");\n    if (type == \"leaderboard_upload\")\n    {\n        var lb_ID = ds_map_find_value(async_load, \"post_id\");\n        if lb_ID == upload_ID\n        {\n            var lb_name = ds_map_find_value(async_load, \"lb_name\");\n            var lb_done = ds_map_find_value(async_load, \"success\");\n            var lb_score = ds_map_find_value(async_load, \"score\");\n            var lb_updated = ds_map_find_value(async_load, \"updated\");\n            show_debug_message(\"leaderboard post id:\" + string(lb_ID) + \" to lb:\" + string(lb_name) + \" with score:\" + string(lb_score) + \" updated=\" + string(lb_updated));\n            if (lb_done)\n            {\n                show_debug_message(\"- Succeeded\");\n            }\n            else\n            {\n                show_debug_message(\"- Failed\");\n            }\n        }\n    }\n```\nIn the example we are simply outputting the return values to the compiler window as debug messages, but you can use this event to deal with the information in any way you choose.\n",
      "description": "This function will send a score to the given leaderboard along with a data package created from a buffer. The buffer should be no more than 256 bytes in size - anything beyond that will be chopped off - and can contain any data you require. The score to be uploaded should be a real number, and the leaderboard name is a string that was defined when you created the leaderboard using the function `steam_create_leaderboard()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_upload_score_buffer.htm"
    },
    "steam_user_installed_dlc": {
      "name": "steam_user_installed_dlc",
      "parameters": [
        {
          "parameter": "dlc_id",
          "description": "The unique identifier for the DLC to be checked (an integer)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.Level_Max = 100;\n    if steam_user_owns_dlc(10354)\n    {\n        if steam_user_installed_dlc(10354)\n        {\n            global.Level_max = 200;\n        }\n    }\n```\nThe above code will check to see if the user has bought, and installed, the DLC with the id 10354, and if so set a global variable to a different value.\n",
      "description": "If your game has DLC created for it, you can use this function to check and see whether the user has installed it before accessing any files associated with it. The function returns `true` if the player has the content installed, and `false` if the user does not, but note that the user must also own the DLC, so you should use the additional function of `steam_user_owns_dlc()` to check that it is owned as well before using it. Note that Steam IDs can be large numbers and so you may need to cast your ID value as an `int64()` before supplying it to the function.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_DLC/steam_user_installed_dlc.htm"
    },
    "steam_user_owns_dlc": {
      "name": "steam_user_owns_dlc",
      "parameters": [
        {
          "parameter": "dlc_id",
          "description": "The unique identifier for the DLC to be checked (an int64 integer)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.Level_Max = 100;\n    if steam_user_owns_dlc(10354)\n    {\n        if steam_user_installed_dlc(10354)\n        {\n            global.Level_max = 200;\n        }\n    }\n```\nThe above code will check to see if the user has bought, and installed, the DLC with the id 10354, and if so set a global variable to a different value.\n",
      "description": "If your game has DLC created for it, you can use this function to check whether the user has bought it before accessing any files associated with it. The function will return `true` (1) if the player owns the content, `false` (0) if they don't own it *or* the given DLC ID is invalid, or -1 if they're not logged into Steam.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_DLC/steam_user_owns_dlc.htm"
    },
    "string": {
      "name": "string",
      "parameters": [
        {
          "parameter": "string",
          "description": "The real number to be turned into a string."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ndraw_text(100, 100, \"Score: \" + string(score) + \" / Health: \" + string(health));\n```\nThe above code uses the `string` function to draw both real numbers and strings together (draw will only accept *either* a string *or* a real, but not both).\n",
      "description": "With this function you can turn any real number into a string. If the real number is an integer, it will be saved with no decimal places, otherwise, it will be saved with two decimal places. If you require more decimal places, then use the function\n    string_format(). Also note that using this function on a variable storing an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm), a  [data structure](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm),\n    or a  [struct](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Structs.htm) will convert the contents of these variables into a string which can then be output to the console or saved to a file for debugging.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string.htm"
    },
    "string_byte_at": {
      "name": "string_byte_at",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to check."
        },
        {
          "parameter": "index",
          "description": "The position to get the byte from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nnewbyte = string_byte_at(\"Hello World\", 5);\n```\nThis will set `newbyte` to the raw byte value of the sixth letter of \"Hello World\".\n",
      "description": "Returns the raw byte value as a real value at a given position in the given string.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_byte_at.htm"
    },
    "string_byte_length": {
      "name": "string_byte_length",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to measure the number of bytes of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nbytesize = string_byte_length(\"Hello World\");\n```\nThis would set bytesize to the number of bytes in \"Hello World\".\n",
      "description": "This function returns the number of bytes in a string, but you should note that due to their being held as UTF8, this will *not* be equal to their string length.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_byte_length.htm"
    },
    "string_char_at": {
      "name": "string_char_at",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to check."
        },
        {
          "parameter": "index",
          "description": "The position to get the character from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hello World\";\n    str2 = string_char_at(str1, 7);\n```\nThis will set `str2` to the seventh character (\"H\" counting as the 1st) in string `str1`, in this case \"W\".\n",
      "description": "You can use this function to return a specific character at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the given index value, an empty string \"\" is returned, however if the given index is equal to or smaller than 0, then the first character of the string is returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_char_at.htm"
    },
    "string_copy": {
      "name": "string_copy",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to copy from."
        },
        {
          "parameter": "index",
          "description": "The position of the first character in the string to copy from (numbered from 1)"
        },
        {
          "parameter": "count",
          "description": "The number of characters, starting from the position of the first, to copy"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nname = keyboard_string;\n    if (string_length(name) > 15)\n    {\n        keyboard_string = string_copy(name, 1, 15);\n    }\n```\nThe above code will allow the player to input a string through the keyboard which is then stored in the variable `name`. This variable is then checked to see if it exceeds the maximum length of 15 characters and if it does, the keyboard_string is replaced by a 15 character copy of the `name` string. This effectively limits the player input to 15 characters.\n",
      "description": "With this function you can easily select a number of characters from within a string to be copied to another one. The first character in a string is always indexed as 1 and not 0 as you may expect, so to copy (for example) the first five characters of string you would have `string_copy(str, 1, 5)`. A further example is provided below.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_copy.htm"
    },
    "string_count": {
      "name": "string_count",
      "parameters": [
        {
          "parameter": "substr",
          "description": "The substring to check the string for."
        },
        {
          "parameter": "str",
          "description": "The string to check."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hello World\"; ocount = string_count( \"o\", str1 );\n```\nThis will set the variable `ocount` to the number of \"o\"s in `str1`, in this case 2.\n",
      "description": "This function will return the amount of times the given substring appears within a specific string. In this way you can check for how many times a single letter or a phrase is repeated in a section of stored text.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_count.htm"
    },
    "string_delete": {
      "name": "string_delete",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to copy and delete from."
        },
        {
          "parameter": "index",
          "description": "The position of the first character to remove."
        },
        {
          "parameter": "count",
          "description": "The number of characters to remove."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nstr1 = \"Helloo World\"; str2 = string_delete(str1, 5, 1);\n```\nThis will set `str2` to \"Hello World\", as it removes the extra \"o\" from \"Hello\", ie: the string counts along from the first letter 5 places, then deletes 1 character).\n",
      "description": "You can use this function to remove a specific part of a string. So, you supply the input string and the start and end position within that string to remove characters (index starts at 1) and the function will return a new string without that section\n    in it.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_delete.htm"
    },
    "string_digits": {
      "name": "string_digits",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to get the digits from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar t_str = string_digits(input_str); age = real(t_str);\n```\nThe above code will take the input string, strip it of all characters other than numbers and then set the variable `age` to hold the real number value of the return string (so, if the input string was - for example - \"I am 18\", the\n    function would return \"18\").\n",
      "description": "You can use this function to parse a given string and get any numbers from it. For example, say you have this text - \"I am 81 years old\". With this function you would get a return string of \"81\".",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_digits.htm"
    },
    "string_format": {
      "name": "string_format",
      "parameters": [
        {
          "parameter": "val",
          "description": "The real number to be turned into a string."
        },
        {
          "parameter": "tot",
          "description": "The total number of places of the main number to be shown. Zeroes or spaces will be inserted to match this."
        },
        {
          "parameter": "dec",
          "description": "The number of decimal places to be included."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nstr1 = string_format(1234, 8, 0); str2 = string_format(pi, 1, 10); str3 = string_format(pi, 5, 5);\n```\nThis will set `str1` to \"    1234\", `str2` to \"3.1415926535\" and `str3` to \"    3.14159\".\n",
      "description": "Turns a real number into a string using your own formatting, where you can choose how many \"places\" are saved to the string and how many decimal places are saved also. Both can be very handy, some games prefer to display a score as a set number\n    of digits, while control over decimal places can be good for a high accuracy the two decimal places of `string()` cannot provide. If the number of places specified is greater than the value to be shown and/or the number\n    plus the decimal places that have been specified is less than the total places, then spaces will be added before the value to make up the difference (see the example below). Zeros will be added to the right of the decimal point if the value given\n    is less than the total and the number of decimal places to include. The default format is no extra spaces on the left, and only two decimal places on the right, eg \"265.73\".",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_format.htm"
    },
    "string_hash_to_newline": {
      "name": "string_hash_to_newline",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to convert over multiple lines"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str = string_hash_to_newline(\"Hello#World\"); draw_text(32, 32, str);\n```\nThe above code converts the string with the hash symbol into a string split over two lines then prints it to the screen.\n",
      "description": "This function returns a string where the \"#\" symbol has been converted into a new line. So a string formatted as:",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_hash_to_newline.htm"
    },
    "string_height": {
      "name": "string_height",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to measure the height of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar hh = string_height(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"); draw_text(32, 32, string(score)); draw_text(32, 32 + hh, string(lives);\n```\nThe above code will get the height of the given string and then draw two lines of text, using the returned string height as a separator.\n",
      "description": "This function will return the height (in pixels) of the input string, taking into account the line separation and any line-breaks the text may have. It is very handy for calculating distances between text elements based on the tallest of the letters\n    that make up the string as it would be drawn with `draw_text()` using the currently defined font.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_height.htm"
    },
    "string_height_ext": {
      "name": "string_height_ext",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to measure the height of."
        },
        {
          "parameter": "sep",
          "description": "The distance in pixels between lines of text as if the string was being drawn."
        },
        {
          "parameter": "w",
          "description": "The maximum width (in pixels) of the string before a line break as if the string was bring drawn."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar hh = string_height_ext(str_Story_Text[1], -1, 100); draw_text_ext(32, 32, str_Story_Text[1], -1, 100); draw_text_ext(32, 32 + hh, str_Story_Text[2], -1, 100);\n```\nThe above code will get the height of the given string, taking into account the line separation and line-break width, and then draw two lines of text, using the returned total string height as a separator.\n",
      "description": "This function will return the height (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy\n    for calculating distances between text elements based on the tallest of the letters that make up the string as well as the actual string length itself when spread over several lines as it would be drawn with `draw_text_ext()`    using the currently defined font. Separation and width can be set to -1 to get the default spacing.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_height_ext.htm"
    },
    "string_insert": {
      "name": "string_insert",
      "parameters": [
        {
          "parameter": "substr",
          "description": "The substring to be inserted."
        },
        {
          "parameter": "str",
          "description": "The string to be copied."
        },
        {
          "parameter": "index",
          "description": "The position in characters of the string to insert the substring."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nstr2 = string_insert(username, \"Hello, , how are you?\", 8);\n```\nThis will insert the string in the \"username\" variable into the given phrase with the resulting string looking like this: \"Hello, NAME, how are you?\".\n",
      "description": "With this function you can create a new string made up of two strings, where one has been inserted into the other at a given position. It can be useful, for example, to add a user name into a predefined text and so make the player of your game feel\n    more involved in the action. Keep in mind when calculating the position to insert into that strings are indexed from 1, so the first character in a string is 1 and not 0 as you may expect.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_insert.htm"
    },
    "string_last_pos": {
      "name": "string_last_pos",
      "parameters": [
        {
          "parameter": "substr",
          "description": "The substring to look for in the string."
        },
        {
          "parameter": "str",
          "description": "The string."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (string_last_pos(\",\", text) != 0)\n    {\n        string_insert(name, text, string_last_pos(\",\", text));\n    }\n```\nThe above code searches the string stored in the variable \"text\" for a comma starting the search from the end of the string. If it finds one it inserts the substring \"name\" at that position.\n",
      "description": "This function will return the character position of an instance of a sub-string within a string, searching from the end of the string to the beginning (so the reverse of `string_pos()`. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_last_pos.htm"
    },
    "string_last_pos_ext": {
      "name": "string_last_pos_ext",
      "parameters": [
        {
          "parameter": "substr",
          "description": "The substring to look for in the string."
        },
        {
          "parameter": "str",
          "description": "The string."
        },
        {
          "parameter": "start_pos",
          "description": "The starting position to search from."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif (string_last_pos_ext(\",\", text, 20) != 0)\n    {\n        string_insert(name, text, string_last_pos_ext(\",\", text, 20));\n    }\n```\nThe above code searches the string stored in the variable \"text\" for a comma before the 20th character, and if it finds one it inserts the substring \"name\" at that position.\n",
      "description": "This function will return the character position of an instance of a sub-string within a string, searching backwards through the string from the position given as the starting position. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_last_pos_ext.htm"
    },
    "string_length": {
      "name": "string_length",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to measure the number of characters of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (string_length(name) > 10)\n    {\n        name = string_copy(name, 1, 10);\n    }\n```\nThis will check if the string of name is greater than ten characters and if it is, it will copy and use the first ten characters only.\n",
      "description": "This function returns the number of characters comprising a given string. It can be useful for things like working out when to limit a custom text entry's character length (eg: capping a player's name to 10 characters). Remember that this is different to `string_width()` in that it measures the number of *characters* in the string, not its width as drawn on the screen in pixels.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_length.htm"
    },
    "string_letters": {
      "name": "string_letters",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to convert to letters."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nusername = string_letters(username);\n```\nThe above code will set the \"username\" variable to only hold the *letter* characters of the original string (id the original string was \"MacSw33ny\" the returned string would be \"MacSwny\").\n",
      "description": "With this function you can remove all characters that are not classed as letters. This is handy for preventing people from entering unwanted characters into a text entry (like entering \"#\" to force a new line).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_letters.htm"
    },
    "string_lettersdigits": {
      "name": "string_lettersdigits",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to convert to letters and digits."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (string_length(password) > string_length(string_lettersdigits(password)))\n    {\n        draw_text(32,32, \"Invalid Password! Only Letters and numbers please!\");\n    }\n```\nThe above code will check the length of a string against the length of the same string, but with all symbols removed. If they are not the same a message is drawn on the screen.\n",
      "description": "This function will return a copy of a given string with everything but its letters and digits removed, which means it can be used to remove any unwanted characters (like \"#\" or \"?\") from, for example, a login name or a password.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_lettersdigits.htm"
    },
    "string_lower": {
      "name": "string_lower",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to convert to lowercase."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hello World\"; str2 = string_lower(str1);\n```\nThe above code will set `str2` to \"hello world\".\n",
      "description": "With this function you can force a string to contain only lower case characters.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_lower.htm"
    },
    "string_ord_at": {
      "name": "string_ord_at",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to check."
        },
        {
          "parameter": "index",
          "description": "The position to get the character code from."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nstr = \"Hello World\"; char_code = string_ord_at(str, 7);\n```\nThis will get the character code for the seventh character (where \"H\" counts as the first) in string \"str\" and store it in the variable \"char_code\".\n",
      "description": "You can use this function to return a specific character code at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the value given to index, -1 is returned.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_ord_at.htm"
    },
    "string_pos": {
      "name": "string_pos",
      "parameters": [
        {
          "parameter": "substr",
          "description": "The substring to look for in the string."
        },
        {
          "parameter": "str",
          "description": "The string."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (string_pos(\",\", text) != 0)\n    {\n        string_insert(name, text, string_pos(\",\", text));\n    }\n```\nThe above code searches the string stored in the variable \"text\" for a comma, and if it finds one it inserts the substring \"name\" at that position.\n",
      "description": "This function will return the character position of an instance of a sub-string within a string, searching from the beginning of the string (to search from the end, use the function `string_last_pos()`). The function will return 0 if it's not found at all, or the position of the first character of the sub-string if it is found. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect. One use for this is for filtering words that may be considered offensive, or for finding the correct place to insert some text into another string.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_pos.htm"
    },
    "string_pos_ext": {
      "name": "string_pos_ext",
      "parameters": [
        {
          "parameter": "substr",
          "description": "The substring to look for in the string."
        },
        {
          "parameter": "str",
          "description": "The string."
        },
        {
          "parameter": "start_pos",
          "description": "The starting position to search from."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif (string_pos_ext(\",\", text, 20) != 0)\n    {\n        string_insert(name, text, string_pos_ext(\",\", text, 20));\n    }\n```\nThe above code searches the string stored in the variable \"text\" for a comma after the 20th character, and if it finds one it inserts the substring \"name\" at that position.\n",
      "description": "This function will return the character position of an instance of a sub-string within a string, searching forwards through the string from the position given as the starting position. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_pos_ext.htm"
    },
    "string_repeat": {
      "name": "string_repeat",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to repeat."
        },
        {
          "parameter": "count",
          "description": "The number of times to repeat the string."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hello World\"; str2 = string_repeat(str1, 3);\n```\nThe above code will set `str2` to \"Hello WorldHello WorldHello World\".\n",
      "description": "This function simply returns the same string repeated a given number of times over itself.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_repeat.htm"
    },
    "string_replace": {
      "name": "string_replace",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to be copied."
        },
        {
          "parameter": "substr",
          "description": "The substring within the string to be replaced."
        },
        {
          "parameter": "newstr",
          "description": "The new substring to replace the previous one."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hello Earth\"; str2 = string_replace(str1, \"Earth\", \"World\");\n```\nThis will set `str2` to `str1`, but with its instance of \"Earth\" replaced with \"World\", resulting in `str2` being \"Hello World\".\n",
      "description": "You can use this function to parse a string looking for a specific part, which can then be replaced by the new string that you have specified.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_replace.htm"
    },
    "string_replace_all": {
      "name": "string_replace_all",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to be copied."
        },
        {
          "parameter": "substr",
          "description": "The substring within the string to be replaced in all instances."
        },
        {
          "parameter": "newstr",
          "description": "The new substring to replace the previous one(s)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hexxo Worxd\"; str2 = string_replace_all(str1, \"x\", \"l\");\n```\nThis will set `str2` to `str1`, but with its instances of \"x\" replaced with \"l\", resulting in `str2` being \"Hello World\".\n",
      "description": "You can use this function to parse a string looking for specific parts, which can then be replaced by the new string that you have specified in all places that they occur.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_replace_all.htm"
    },
    "string_set_byte_at": {
      "name": "string_set_byte_at",
      "parameters": [
        {
          "parameter": "str",
          "description": "The string to change the byte of."
        },
        {
          "parameter": "pos",
          "description": "The position within the string (starting at 1) to change the byte of."
        },
        {
          "parameter": "byte",
          "description": "The new byte value."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nstr = string_set_byte_at(\"hello\", 2, 97);\n```\nThe above code would change the byte value of the second letter in the string, and so set the variable `str` to hold \"hallo\".\n",
      "description": "This function sets a byte directly in a string (based on the UTF8 format) and returns a copy of the string with the changes.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_set_byte_at.htm"
    },
    "string_upper": {
      "name": "string_upper",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to convert to uppercase."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nstr1 = \"Hello World\"; str2 = string_upper(str1);\n```\nThe above code will set the variable `str2` to \"HELLO WORLD\".\n",
      "description": "With this function you can force a string to contain only upper case characters.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_upper.htm"
    },
    "string_width": {
      "name": "string_width",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to measure the width of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar ww = string_width(str_Name + \" \"); draw_text(32, 32, str_Name)); draw_text(32 + ww, 32, \"has won the game!\");\n```\nThe above code will get the width of the given string and then draw two lines of text, using the returned string width as a separator.\n",
      "description": "This function will return the width (in pixels) of the input string, taking into account any line-breaks the text may have. It is very handy for calculating distances between text elements based on the total width of the letters that make up the string\n    as it would be drawn with `draw_text()` using the currently defined font.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_width.htm"
    },
    "string_width_ext": {
      "name": "string_width_ext",
      "parameters": [
        {
          "parameter": "string",
          "description": "The string to measure the width of."
        },
        {
          "parameter": "sep",
          "description": "The distance in pixels between lines of text as if the string was being drawn."
        },
        {
          "parameter": "w",
          "description": "The maximum width (in pixels) of the string before a line break as if the string was bring drawn."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar ww = string_width_ext(str_Story_Text[1], -1, 100); draw_text_ext(32, 32, str_Story_Text[1], -1, 100); draw_text_ext(32 + ww, 32, str_Story_Text[2], -1, 100);\n```\nThe above code will get the width of the given string, taking into account the line separation and line-break width, and then draw two lines of text, using the returned total string width as a separator.\n",
      "description": "This function will return the maximum width (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very\n    handy for calculating distances between text elements based on the maximum width of a string that is split over several lines as it would be drawn with `draw_text_ext()` using the currently defined\n    font. Separation and width can be set to -1 to get the default spacing.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/string_width_ext.htm"
    },
    "surface_copy": {
      "name": "surface_copy",
      "parameters": [
        {
          "parameter": "destination",
          "description": "The ID of the surface to copy the other surface to."
        },
        {
          "parameter": "x",
          "description": "The x position to copy to."
        },
        {
          "parameter": "y",
          "description": "The y position to copy to."
        },
        {
          "parameter": "source",
          "description": "The ID of surface to be copied."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nif view_current == 0\n    {\n        surface_copy(surf, 0, 0, temp_surf);\n    }\n    else\n    {\n        draw_surface(surf, 0, 0);\n    }\n```\nThe above code will check the current view being drawn and if it is view[0] it copies the surface indexed in the variable \"temp_surf\" onto the surface indexed in the variable \"surf\". If the current view is anything other than view[0] the surface \"surf\" is drawn to the screen.\n",
      "description": "This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). If the destination surface already has information this will be overwritten by the copy, and the function does *not* change the source surface in any way.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_copy.htm"
    },
    "surface_copy_part": {
      "name": "surface_copy_part",
      "parameters": [
        {
          "parameter": "destination",
          "description": "The ID of the surface to copy the other surface to."
        },
        {
          "parameter": "x",
          "description": "The x position to copy to."
        },
        {
          "parameter": "y",
          "description": "The y position to copy to."
        },
        {
          "parameter": "source",
          "description": "The ID of the surface to be copied."
        },
        {
          "parameter": "xs",
          "description": "The x position in the source surface to copy from."
        },
        {
          "parameter": "ys",
          "description": "The y position in the source surface to copy from."
        },
        {
          "parameter": "ws",
          "description": "The width of the area in the source surface to copy from."
        },
        {
          "parameter": "hs",
          "description": "The height of the area in the source surface to copy from."
        }
      ],
      "requiredParameters": 8,
      "isVariadic": false,
      "example": "```\nif view_current == 0\n    {\n        surface_copy_part(surf, 0, 0, temp_surf, 0, 0, view_xview[1] - mouse_x, view_yview[1] - mouse_y);\n    }\n    else\n    {\n        draw_surface(surf, 0, 0);\n    }\n```\nThe above code will check the current view being drawn and if it is view[0] it copies the surface indexed in the variable \"temp_surf\" onto the surface indexed in the variable \"surf\". The area copied corresponds to a rectangle formed by the relative position of the mouse within the surface as it would be drawn in view[1]. If the current view is anything other than view[0] the surface \"surf\" is drawn to the screen.\n",
      "description": "This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). You can specify a local x and y position to copy from as well as the width and height of the section. Please note that these are coordinates based on the *surface size* and not on the position at which the surface is being drawn in the room. If the destination surface already has information this will be overwritten by the copy, and the function does *not* change the source surface in any way.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_copy_part.htm"
    },
    "surface_create": {
      "name": "surface_create",
      "parameters": [
        {
          "parameter": "w",
          "description": "The width of the surface to be created."
        },
        {
          "parameter": "h",
          "description": "The height of the surface to be created."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !surface_exists(surf)\n    {\n        surf = surface_create(1024, 1024);\n        surface_set_target(surf);\n        draw_clear_alpha(c_black, 0);\n        surface_reset_target();\n        view_surface_id[0] = surf;\n    }\n```\nThe above code checks to see if a surface exists and if it does not it will create a surface that is 1024 pixels wide and 1024 pixels high, assigning the index to the variable \"surf\". The drawing target is then set to the new surface, which is cleared and made transparent before having the drawing target reset to the display. Finally the surface is assigned to a view.\n",
      "description": "This function is used to create a surface and will return the index of the surface which should be stored in a variable for future function calls. When the surface is first created, it may contain \"noise\" as basically it is just an area of memory that is put aside for the purpose (and that memory may still contain information), so you may want to clear the surface before use with a function like `draw_clear_alpha()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create.htm"
    },
    "surface_create_ext": {
      "name": "surface_create_ext",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name of the canvas element to link the surface to."
        },
        {
          "parameter": "w",
          "description": "The width of the surface to be created."
        },
        {
          "parameter": "h",
          "description": "The height of the surface to be created."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ns1 = surface_create_ext(\"surface1\", 192, 550); s2 = surface_create_ext(\"surface2\", 608, 186); view_surface_id[1] = s1; view_surface_id[2] = s2;\n```\nThe above code creates two surfaces of different sizes, assigning each one to a different canvas element, and then those surfaces are assigned to two views so that the correct part of the room is captured.\n",
      "description": "This function allows you to attach a surface to a canvas element that already exists in your web page, meaning that you can effectively split up portions of your game to be drawn at various different places within the page. To that end, you *must*    have defined the canvas element correctly within the `*.html` page of your game using the correct sizes and names that correspond to the surfaces you wish to create. So, you would have your \"main\" canvas, and then your secondary surface\n    canvas elements, which will be assigned using this function to the correct surfaces. The following image is an example of how a page with three canvas elements would be set up:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create_ext.htm"
    },
    "surface_depth_disable": {
      "name": "surface_depth_disable",
      "parameters": [
        {
          "parameter": "disable",
          "description": "If set to `true` the depth buffer will be disabled for created surfaces."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _depth_setting = surface_get_depth_disable(); surface_depth_disable(false);\n     surface_with_depth = surface_create(room_width, room_height); surface_depth_disable(true);\n     surface_without_depth = surface_create(room_width, room_height); surface_depth_disable(_depth_setting);\n  \n```\nThe above code stores the current depth buffer setting in a variable and then creates two surfaces, one with depth buffering enabled and one without, before restoring the original setting again.\n",
      "description": "This function disables the automatic depth buffer generation for *all* surfaces that are created after it has been disabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it'll sort them properly by depth in\n    order to maintain functional parity between rendering to surfaces and rendering to the back buffer, however allocating depth buffers essentially doubles the amount of memory required for surfaces, which could be an excessive and unnecessary overhead\n    especially if your game is very memory intensive, and for 2D games they aren't generally required.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"
    },
    "surface_exists": {
      "name": "surface_exists",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !surface_exists(surf)\n    {\n        surf = surface_create(1024, 1024);\n    }\n    else\n    {\n        if view_current = 1\n        {\n            draw_surface(surf,0,0);\n        }\n    }\n```\nThe above code will check to see if a surface indexed in the variable \"surf\" exists, and if it does not, it will re-create it. If it does exist, it then checks to see which view is currently being drawn and if it is view[1] it draws the surface.\n",
      "description": "This function is essential when working with surfaces due to their volatile nature. Surfaces are always held in texture memory which means that they can be destroyed from one moment to the next (for example, when a screensaver starts on windows, or when minimised on an Android device), so you should always check that a surface exists before doing anything with it (this includes drawing it to the screen). The example code below shows a typical use of this command in the draw event of an instance to check for a surface and re-create it if it has been removed (note that the surface will have been originally created in the create event of the object).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_exists.htm"
    },
    "surface_free": {
      "name": "surface_free",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to be freed."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(vk_escape)\n    {\n        surface_free(surf);\n        room_goto(rm_Menu);\n    }\n```\nThe above code checks for a key press and if it detects one it frees the memory reserved for the surface indexed in the variable \"surf\" and then changes room.\n",
      "description": "When you are working with surfaces, you should always use this function whenever you are finished using them. Surfaces take up space in memory and so need to be removed, normally at the end of a room, but it can be done at any time depending on the use you put them to. Failure to do so can cause memory leaks which will eventually slow down and crash your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_free.htm"
    },
    "surface_get_depth_disable": {
      "name": "surface_get_depth_disable",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (!surface_exists(surf))\n    {\n        if surface_get_depth_disable() == false\n        {\n            surface_depth_disable(true);\n        }\n        surf = surface_create(room_width, room_height);\n    }\n```\nThe above code will check to see if the given surface exists, and if it does not, then it checks the current state of the surface depth buffer and if it is enabled, it will disable it instead, before finally creating the surface.\n",
      "description": "This function checks to see if the automatic depth buffer generation for surfaces is enabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it'll sort them properly by depth, however allocating depth buffers essentially doubles the size of surfaces, which could be an excessive and unnecessary overhead especially if your game is very memory intensive or predominantly 2D. In these cases you can check this using this function and disable the depth buffer for surfaces if required using the function `surface_depth_disable()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_depth_disable.htm"
    },
    "surface_get_height": {
      "name": "surface_get_height",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to get the height of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsh = surface_get_height(surf);\n```\nThe above code will store the height of the surface indexed in the variable \"surf\" in the variable \"sh\".\n",
      "description": "This function simply returns the height, in pixels, of the indexed surface. It should be noted that if you call this to check the `application_surface` immediately after having changed its size using `surface_resize()`    it will not return the new value as the change needs a step or two to be fully processed. After waiting a step it should return the new size correctly.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_height.htm"
    },
    "surface_get_target": {
      "name": "surface_get_target",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nsurface_get_target() != -1\n    {\n        surface_reset_target();\n    }\n    draw_surface(surf, 0, 0);\n```\nThe above code will check to see if the current render target is a surface or not, and if it is, it resets the target then draws a surface.\n",
      "description": "With this function you can get the ID of the current surface being targeted for drawing to. If you created that surface using `surface_create()`, then this will be the positive integer which is the unique ID for that surface",
      "returns": "Integer (-1 if no surface target exists, otherwise the target surface's ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_target.htm"
    },
    "surface_get_target_ext": {
      "name": "surface_get_target_ext",
      "parameters": [
        {
          "parameter": "index",
          "description": "The render target index to check (from 0 to 3)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif surface_get_target_ext(0) == -1\n    {\n        surface_set_target_ext(0, global.Surf);\n    }\n```\nThe above code will first check and see if the shader render target 0 has been set to a surface, and if not, then one is assigned.\n",
      "description": "This function will retrieve the surface ID assigned to one of the 4 render targets available to surfaces. You supply the index of the render target to check, and the function will return -1 if no surface is assigned, or an integer value >= 0, representing the ID of the surface assigned (as returned by the function `surface_create()`).",
      "returns": "Integer (-1 for no surface target, or a surface ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_target_ext.htm"
    },
    "surface_get_texture": {
      "name": "surface_get_texture",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to get the width of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex; tex = surface_get_texture(surf); draw_primitive_begin_texture(pr_trianglestrip, tex); draw_vertex_texture(0, 480, 0, 0); draw_vertex_texture(640, 480, 1, 0); draw_vertex_texture(640, 480, 1, 1); draw_vertex_texture(0,\n    480, 0, 1); draw_primitive_end();\n  \n```\nThe above code will draw a 4 vertex triangle strip textured with the texture held in the \"tex\" variable, which is itself taken from a previously created surface.\n",
      "description": "This function returns a special *pointer* for the surface texture. This value can then be used in other draw functions, particularly in general 3D and some of the 2D primitive functions.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_texture.htm"
    },
    "surface_get_width": {
      "name": "surface_get_width",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to get the width of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nsw = surface_get_width(surf);\n```\nThe above code will store the width of the surface indexed in the variable \"surf\" in the variable \"sw\".\n",
      "description": "This function simply returns the width, in pixels, of the indexed surface. It should be noted that if you call this to check the `application_surface` immediately after having changed its size using `surface_resize()`    it will not return the new value as the change needs a step or two to be fully processed. After waiting a step it should return the new size correctly.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_get_width.htm"
    },
    "surface_getpixel": {
      "name": "surface_getpixel",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface."
        },
        {
          "parameter": "x",
          "description": "The x position on the surface from which to get the pixel."
        },
        {
          "parameter": "y",
          "description": "The y position on the surface from which to get the pixel."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncol = surface_getpixel(surf, 56, 78 );\n```\nThis will return the colour of the pixel at coordinates (56,78) of the surface indexed in the variable \"surf\".\n",
      "description": "This function can be used to get the colour of a specific pixel from a surface, using the local coordinates of the surface where (0,0) is the top left corner. This function should *not* be used very often as it is extremely slow and may cause a\n    pause in your game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_getpixel.htm"
    },
    "surface_getpixel_ext": {
      "name": "surface_getpixel_ext",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to use."
        },
        {
          "parameter": "x",
          "description": "The x coordinate of the pixel to check"
        },
        {
          "parameter": "y",
          "description": "The y coordinate of the pixel to check"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\ncol = surface_getpixel_ext(mouse_x, mouse_y); alpha = (col >> 24) & 255; blue = (col >> 16) & 255; green = (col >> 8) & 255; red = col & 255;\n```\nThe above code will get the 32bit colour value at the position of the mouse and then split it into its component values, storing them in variables.\n",
      "description": "With this function you can get the full **abgr 32bit** value of any pixel of a (previously created) surface.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_getpixel_ext.htm"
    },
    "surface_reset_target": {
      "name": "surface_reset_target",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif view_current = 0\n    {\n        surface_set_target(surf);\n        with (obj_Effect)\n        {\n            draw_self();\n        }\n        surface_reset_target();\n    }\n    else\n    {\n        draw_surface(surf, 0, 0);\n    }\n```\nThe above code will check to see which view is currently being drawn, and if it is view[0] it sets the draw target to a surface and draws all instances of the object \"obj_Effect\" before resetting the draw target again. If the view is not view[0] the surface is drawn to the screen.\n",
      "description": "With this function you reset all further drawing from the target surface back to the screen. Please note that to start drawing to a surface you must first have called the function `surface_set_target()` and then this one after you have finished, *for each surface target that you have set* or else nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_reset_target.htm"
    },
    "surface_resize": {
      "name": "surface_resize",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to change."
        },
        {
          "parameter": "w",
          "description": "The width of the new surface."
        },
        {
          "parameter": "h",
          "description": "The height of the new surface."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif view_wport[0] != surface_get_width(application_surface) || view_hport[0] != surface_get_height(application_surface)\n    {\n        surface_resize(application_surface, view_wport[0],view_hport[0]);\n    }\n```\nThe above code will check the view port size against that of the surface \"aplication_surface\" and if it is different, the surface is re-sized.\n",
      "description": "This function will resize a surface to the given dimensions (in pixels). The \"surface_id\" is that of a surface you have created previously, or the `application_suface`, and the function will resize that surface. Note that this will neither crop nor stretch the contents of the surface, but rather it destroys the current surface and recreates it with the same handle (surface_id) with the new dimensions, meaning that it will need to be cleared and drawn to again (unless it is the `application_surface` in which case GameMaker Studio 2 will do this automatically).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_resize.htm"
    },
    "surface_save": {
      "name": "surface_save",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to set as the drawing target."
        },
        {
          "parameter": "fname",
          "description": "The name of the saved image file."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"S\")\n    {\n        surface_save(surf, \"test.png\");\n    }\n```\nThe above code will check to see if the user presses the \"S\" key on the keyboard and if they do it will save the surface indexed in the variable \"surf\" to disc.\n",
      "description": "This function will save a surface to disc using the given filename. The surface *must* be saved as a `*.png` format file.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_save.htm"
    },
    "surface_save_part": {
      "name": "surface_save_part",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to set as the drawing target."
        },
        {
          "parameter": "fname",
          "description": "The name of the saved image file."
        },
        {
          "parameter": "x",
          "description": "The starting x position within the surface."
        },
        {
          "parameter": "y",
          "description": "The starting y position within the surface."
        },
        {
          "parameter": "width",
          "description": "The width of the part to save."
        },
        {
          "parameter": "height",
          "description": "The height of the part to save."
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "```\nif keyboard_check_pressed(ord(\"S\")\n    {\n        surface_save_part(surf, \"test.png\", 0, 0, 100, 100);\n    }\n```\nThe above code will check to see if the user presses the \"S\" key on the keyboard and if they do it will save a part of the surface indexed in the variable \"surf\" to disc.\n",
      "description": "This function will save a part of a surface to disc using the given filename. The surface *must* be saved as a `*.png` format file, and the (x,y) position must be given as local coordinates to the surface, bearing in mind that the top left corner of the surface is always (0,0).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_save_part.htm"
    },
    "surface_set_target": {
      "name": "surface_set_target",
      "parameters": [
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to set as the drawing target."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_current = 0\n    {\n        surface_set_target(surf);\n        with (obj_Effect)\n        {\n            draw_self();\n        }\n        surface_reset_target();\n    }\n    else\n    {\n        draw_surface(surf, 0, 0);\n    }\n```\nThe above code will check to see which view is currently being drawn, and if it is view[0] it sets the draw target to a surface and draws all instances of the object \"obj_Effect\" before resetting the draw target again. If the view is not view[0] the surface is drawn to the screen.\n",
      "description": "With this function you set all further drawing to the target surface rather than the screen and in this way you can tell GameMaker Studio 2 to only draw specific things to the specified surface. Please note that if you do not call `surface_reset_target()` after you have finished, nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance. You can check the return value of this function too as a debug tool to check whether the surface target was set or not, with a return value of 0 being a failure to set the target and any other positive value being a success.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_set_target.htm"
    },
    "surface_set_target_ext": {
      "name": "surface_set_target_ext",
      "parameters": [
        {
          "parameter": "index",
          "description": "The render target index to use (from 0 to 3)."
        },
        {
          "parameter": "surface_id",
          "description": "The ID of the surface to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nsurface_set_target_ext(0, surf);\n```\nThe above code will set the render target 0 to the surface ID indexed in the variable \"surf\".\n",
      "description": "This function is for use with the  [Shader Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm) and sets the MRT (0 - 3) for native level shaders (DX9, DX11, OpenGL).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_set_target_ext.htm"
    },
    "tag_get_asset_ids": {
      "name": "tag_get_asset_ids",
      "parameters": [
        {
          "parameter": "tags",
          "description": "A single asset tag string or an array with various asset tags."
        },
        {
          "parameter": "asset_type",
          "description": "An asset type constant (listed above)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar _paths = tag_get_asset_ids(\"enemy\", asset_path); var _num = irandom(array_length(_paths) - 1); path_start(_paths[_num], 1, path_action_reverse, false);\n```\nThe above code uses the tag \"enemy\" to find all the path assets with that tag, before choosing one at random and assigning it to the instance running the code.\n",
      "description": "With this function you can get all the assets of a given type that have the given tags assigned to them. You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check.\n    the type of asset should be one of the following constants:",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_asset_ids.htm"
    },
    "tag_get_assets": {
      "name": "tag_get_assets",
      "parameters": [
        {
          "parameter": "tags",
          "description": "A single asset tag string or an array with various asset tags."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nbackgrounds = ds_list_create();\n    var _assets = tag_get_assets(\"background\");\n    for (var i = 0; i< array_length(_assets); ++i;)\n    {\n        if asset_get_type(_assets[i]) == asset_sprite\n        {\n            ds_list_add(backgrounds, asset_get_index(_assets[i]));\n        }\n    }\n```\nThe above code creates a list, then retrieves the names of all the assets with the tag \"background\". It loops through the array of names returned, checking to see if any of them are sprite assets, and if they are then the unique index value for the asset is added to the list for future use.\n",
      "description": "With this function you can retrieve the names of all assets that have been assigned the given tag or tags. You supply either a single tag string or an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm), where each item in the array is a tag string. The function will return an array where each entry is the name (as a string) of the asset with the given tag. If you need the unique index for the asset, then you can use the function `asset_get_index()` along with the returned name. If there are no assets with the given tag(s), or if there is an error (eg: the given tags do not exist), then an empty array will be returned.",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/tag_get_assets.htm"
    },
    "tan": {
      "name": "tan",
      "parameters": [
        {
          "parameter": "val",
          "description": "The angle (in radians) to return the tangent of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nval = tan( pi );\n```\nThis will set val to 0.\n",
      "description": "In a right angled triangle *tan(val) = Opposite / Adjacent* where val is one of the three angles.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/tan.htm"
    },
    "texture_debug_messages": {
      "name": "texture_debug_messages",
      "parameters": [
        {
          "parameter": "enable",
          "description": "Enable or disable the texture debug messages"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif global.debug\n    {\n        texture_debug_messages(true);\n    }\n```\nThe above code will check the value of a global variable and if it is set to `true` then texture debug messages are enabled.\n",
      "description": "This function can be used to enable or disable texture debug messages. When enabled (set to `true`), additional information about texture page use will be sent to the output window. Set to `false` to disable this output again.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_debug_messages.htm"
    },
    "texture_flush": {
      "name": "texture_flush",
      "parameters": [
        {
          "parameter": "tex_id",
          "description": "The texture page ID (an integer) *or* a texture group ID (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_textures( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        texture_flush(_tex_array[i]);\n    }\n```\nThe above code will flush all the texture pages under the texture group \"MainMenu\".\n",
      "description": "This function can be used to \"flush\" a texture page or a group of texture pages, ie: remove them from VRAM when no longer required. You supply the unique **texture page ID** (as returned by the `texturegroup_*` functions) to flush a single page, or you can supply a **texture group name** (as defined in the  [Texture Group Editor](https://manual.yoyogames.com/Settings/Texture_Groups.htm)) to flush all the texture pages in the group.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_flush.htm"
    },
    "texture_get_height": {
      "name": "texture_get_height",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The texture page asset pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntex_h = texture_get_height(surface_get_texture(global.Surf));\n```\nThe above code will get the height of the texture taken from a previously created surface.\n",
      "description": "Returns the height of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_height.htm"
    },
    "texture_get_texel_height": {
      "name": "texture_get_texel_height",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The texture page asset pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex = sprite_get_texture(sprite_index, 0); tex_w = texture_get_texel_width(tex); tex_h = texture_get_texel_height(tex);\n```\nThe above code will get the texel width and height of the texture taken from a sprite asset.\n",
      "description": "A texel, or *texture element* is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the height of a single\n    texel from the texture page of the image asset used.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_texel_height.htm"
    },
    "texture_get_texel_width": {
      "name": "texture_get_texel_width",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The texture page asset pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex = sprite_get_texture(sprite_index, 0); tex_w = texture_get_texel_width(tex); tex_h = texture_get_texel_height(tex);\n```\nThe above code will get the texel width and height of the texture taken from a sprite asset.\n",
      "description": "A texel, or *texture element* is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the width of a single\n    texel from the texture page of the image asset used.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_texel_width.htm"
    },
    "texture_get_uvs": {
      "name": "texture_get_uvs",
      "parameters": [
        {
          "parameter": "texid",
          "description": "The image asset to get the texture from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex = texture_get_uvs(surf_back); tex_left = tex[0]; tex_top = tex[1]; tex_right = tex[2]; tex_left = tex[3];\n```\nThe above code will store the UV coordinates for the given surface texture in a local array and then assign the values to instance variables.\n",
      "description": "This function returns a 1D  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) with 4 elements representing the UV coordinates for the image on the texture page, filling in the array with the following values:",
      "returns": "1D Array (4 - 8 elements)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_uvs.htm"
    },
    "texture_get_width": {
      "name": "texture_get_width",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The texture page asset pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ntex_w = texture_get_width(sprite_get_texture(spr_Model_tex, 0));\n```\nThe above code will get the width of the texture taken from a sprite asset.\n",
      "description": "Returns the width of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_get_width.htm"
    },
    "texture_global_scale": {
      "name": "texture_global_scale",
      "parameters": [
        {
          "parameter": "pow2integer",
          "description": "The scale factor to use (1, no scale, 2, half scale, 4, quarter scale, etc...)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": true,
      "example": "```\ndraw_texture_flush(); texture_global_scale(2);\n     sprite_prefetch(spr_Trees);\n  \n```\nThe above code will flush all textures from memory, then set the texture scaling to 2 (so texture pages are half size) and then finally pre-fetch the texture page that the sprite \"spr_Trees\" is contained within.\n",
      "description": "This function allows you to control the scaling of the texture pages on load from the WAD file that is part of your final game executable. The input value must be a power of two value and will work such that:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_global_scale.htm"
    },
    "texture_is_ready": {
      "name": "texture_is_ready",
      "parameters": [
        {
          "parameter": "tex_id",
          "description": "The texture page ID (an integer) *or* a texture group ID (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_textures( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        if !texture_is_ready(_tex_array[i])\n        {\n            texture_prefetch(_tex_array[i]);\n        }\n    }\n```\nThe above code will retrieve the texture page IDs for the texture group \"MainMenu\", then check to see if they are unpacked, and if they are not thenthey are prefetched into VRAM.\n",
      "description": "This function can be used to check if a specific texture page has been unpacked and is ready for use, or if a group of texture pages have been unpacked and are ready for use. You supply the unique **texture page ID** (as returned by the `texturegroup_*` functions) or the texture group ID string (as defined in the Texture Group Editor), and the function will return `true` if they have been unpacked, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_is_ready.htm"
    },
    "texture_prefetch": {
      "name": "texture_prefetch",
      "parameters": [
        {
          "parameter": "tex_id",
          "description": "The texture page ID (an integer) *or* a texture group ID (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_textures( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        texture_prefetch(_tex_array[i]);\n    }\n```\nThe above code will prefetch all the texture pages under the texture group \"MainMenu\".\n",
      "description": "This function can be used to \"prefetch\" a texture page or a group of texture pages, ie: load them into VRAM when required. You supply the unique **texture page ID** (as returned by the `texturegroup_*` functions) to prefetch a single page, or you can supply a **texture group name** (as defined in the  [Texture Group Editor](https://manual.yoyogames.com/Settings/Texture_Groups.htm)) to prefetch all the texture pages in the group.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_prefetch.htm"
    },
    "texture_set_stage": {
      "name": "texture_set_stage",
      "parameters": [
        {
          "parameter": "stage",
          "description": "The texture \"slot\" to use."
        },
        {
          "parameter": "tex",
          "description": "The texture to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglassshader_bgsampler = shader_get_sampler_index(GlassShader, \"s_BackgroundSampler\") spr = sprite_get_texture(sprite_index, 0); shader_set(GlassShader);\n     texture_set_stage(glassshader_bgsampler, spr); shader_reset();\n  \n```\nThe above code will get the *handle* for the sampler within the shader indexed as \"GlassShader\" and then set that shader constant to the given sprite texture.\n",
      "description": "This function will set the given stage \"slot\" a texture to be used. The number of stage \"slots\" available will depend on the platform you are compiling to, with a maximum of 8 being available for Windows, Mac and Linux, but on lower\n    end Android devices (for example) this number can be as low as 2. It is also worth noting that the first stage \"slot\" is always used automatically by GameMaker Studio 2.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texture_set_stage.htm"
    },
    "texturegroup_get_fonts": {
      "name": "texturegroup_get_fonts",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The name of the texture group to check (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_fonts( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        show_debug_message(\"Font \" + string(i) + \" Index:\" + string(tex_array[i]));\n    }\n```\nThe above code will retrieve the font indexes for the texture group \"MainMenu\", then display those IDs in the console output window.\n",
      "description": "With this function you can retrieve the font index of each of the fonts assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the font index for a font resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
      "returns": "1D array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_fonts.htm"
    },
    "texturegroup_get_sprites": {
      "name": "texturegroup_get_sprites",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The name of the texture group to check (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_sprites( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        show_debug_message(\"Sprite \" + string(i) + \" Index:\" + string(tex_array[i]));\n    }\n```\nThe above code will retrieve the sprite indexes for the texture group \"MainMenu\", then display those IDs in the console output window.\n",
      "description": "With this function you can retrieve the sprite index of each of the sprites assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the sprite index for a sprite resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
      "returns": "1D array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_sprites.htm"
    },
    "texturegroup_get_textures": {
      "name": "texturegroup_get_textures",
      "parameters": [
        {
          "parameter": "tex_id",
          "description": "The name of the texture group to check (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_textures( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        if texture_is_ready(_tex_array[i])\n        {\n            texture_prefetch(_tex_array[i]);\n        }\n    }\n```\nThe above code will retrieve the texture page IDs for the texture group \"MainMenu\", then check to see if they are unpacked, and if they are them they are placed into VRAM.\n",
      "description": "This function can be used to retrieve the **texture page IDs** of the individual pages that make up a texture group. You supply the texture group ID string (as defined in the Texture Group Editor), and the function will return a 1D array, where each entry in the array is a single texture page ID. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
      "returns": "1D array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_textures.htm"
    },
    "texturegroup_get_tilesets": {
      "name": "texturegroup_get_tilesets",
      "parameters": [
        {
          "parameter": "tex",
          "description": "The name of the texture group to check (a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _tex_array = texturegroup_get_tilesets( \"MainMenu\");\n    for (var i = 0; i < array_length(_tex_array); ++i;)\n    {\n        show_debug_message(\"Tileset \" + string(i) + \" Index:\" + string(tex_array[i]));\n    }\n```\nThe above code will retrieve the tileset indexes for the texture group \"MainMenu\", then display those IDs in the console output window.\n",
      "description": "With this function you can retrieve the tileset index of each of the tilesets assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the tileset index for a tileset resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).",
      "returns": "1D array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/texturegroup_get_tilesets.htm"
    },
    "tile_get_empty": {
      "name": "tile_get_empty",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    for (var i = 0; i < tilemap_get_width(map_id); i++;)\n    {\n        for (var j = 0; j < tilemap_get_height(map_id); j++;)\n        {\n            var data = tilemap_get(map_id, i, j);\n            if !tile_get_empty(data)\n            {\n                data = tile_set_empty(data)\n                tilemap_set(map_id, data, i, j);\n            }\n        }\n    }\n```\nThe above code gets the tile map ID from the given layer and then proceeds to check every tile cell on the map to see if it has data or not. If it does, the tile is set to empty.\n",
      "description": "This function can be used to check whether a given set of tile-data is for an empty tile or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and the function will return `true` if the tile is empty, or `false` if there is a tile index.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_empty.htm"
    },
    "tile_get_flip": {
      "name": "tile_get_flip",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var bool = !tile_get_flip(data); data = tile_set_flip(data, bool); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then gets the x and y cell position for the tile under the mouse. This position is then used to get the tile-data which is flipped and then used to set the tile again.\n",
      "description": "This function can be used to check whether in a given set of tile-data the tile has been flipped or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and the function will return\n    `true` if the tile is flipped, or `false` if not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_flip.htm"
    },
    "tile_get_index": {
      "name": "tile_get_index",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y);\n    var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y);\n    var data = tilemap_get(map_id, mx, my);\n    var ind = tile_get_index(data);\n    data = tile_set_index(data, irandom(23));\n    tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then uses that to get the tile-data for the cell under the mouse position. This data is then used to set the tile index to a random number.\n",
      "description": "This function can be used to get the tile index (the position of the tile within the tile set image) from a set of tile-data. You specify the tile-data, which can be retrieved using the function `tilemap_get()`, and the function will return an integer value for the index.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_index.htm"
    },
    "tile_get_mirror": {
      "name": "tile_get_mirror",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var bool = !tile_get_mirror(data); data = tile_set_mirror(data, bool); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then gets the x and y cell position for the tile under the mouse. This position is then used to get the tile-data which is mirrored and then used to set the tile again.\n",
      "description": "This function can be used to check whether in a given set of tile-data the tile has been mirrored or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and the function will return\n    `true` if the tile is mirrored, or `false` if not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_mirror.htm"
    },
    "tile_get_rotate": {
      "name": "tile_get_rotate",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var bool = !tile_get_rotate(data); data = tile_set_rotate(data, bool); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then gets the x and y cell position for the tile under the mouse. This position is then used to get the tile-data which is rotated and then used to set the tile again.\n",
      "description": "This function can be used to check whether in a given set of tile-data the tile has been rotated 90 degrees or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and the function\n    will return `true` if the tile is rotated, or `false` if not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_get_rotate.htm"
    },
    "tile_set_empty": {
      "name": "tile_set_empty",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to set"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    for (var i = 0; i < tilemap_get_width(map_id); i++;)\n    {\n        for (var j = 0; j < tilemap_get_height(map_id); j++;)\n        {\n            var data = tilemap_get(map_id, i, j);\n            if !tile_get_empty(data)\n            {\n                data = tile_set_empty(data)\n                tilemap_set(map_id, data, i, j);\n            }\n        }\n    }\n```\nThe above code gets the tile map ID from the given layer and then proceeds to check every tile cell on the map to see if it has data or not. If it does, the tile is set to empty.\n",
      "description": "This function can be used to set a given set of tile-data to be an empty tile. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and the function will return `true` if the tile is empty, or `false` if there is a tile index. The function will return a modified tile-data set which can then be applied using the  [tilemap_set()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set.htm) function.",
      "returns": "Real (tiledata)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_empty.htm"
    },
    "tile_set_flip": {
      "name": "tile_set_flip",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to set"
        },
        {
          "parameter": "flip",
          "description": "Set to `true` to flip and `false` to leave it as-is"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var bool = !tile_get_flip(data); data = tile_set_flip(data, bool); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then gets the x and y cell position for the tile under the mouse. This position is then used to get the tile-data which is flipped and then used to set the tile again.\n",
      "description": "This function can be used to set a given set of tile-data to flip the tile or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and then set the flip argument to either `true`    if you want the tile flipped, or `false` if you want the tile to be in its default, un-flipped state. The function will return a modified tile-data set which can then be applied using the `tilemap_set()`    function.",
      "returns": "Real (tiledata)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_flip.htm"
    },
    "tile_set_index": {
      "name": "tile_set_index",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to set"
        },
        {
          "parameter": "index",
          "description": "The integer index value of the tile set to use"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var ind = tile_get_index(data); data = tile_set_index(data, irandom(23)); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then uses that to get the tile-data for the cell under the mouse position. This data is then used to set the tile index to a random number.\n",
      "description": "This function can be used to set the tile index (the position of the tile within the tile set image) for a set of tile-data. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and\n    then the integer value that represents the position of the tile (its index) within the tile set. The function will return a modified tile-data set which can then be applied using the `tilemap_set()` function.",
      "returns": "Real (tiledata)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_index.htm"
    },
    "tile_set_mirror": {
      "name": "tile_set_mirror",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to set"
        },
        {
          "parameter": "mirror",
          "description": "Set to `true` to mirror and `false` to leave it as-is"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var bool = !tile_get_mirror(data); data = tile_set_mirror(data, bool); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then gets the x and y cell position for the tile under the mouse. This position is then used to get the tile-data which is mirrored and then used to set the tile again.\n",
      "description": "This function can be used to set a given set of tile-data to mirror the tile or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and then set the mirror argument to either `true`    if you want the tile mirrored, or `false` if you want the tile to be in its default, un-mirrored state. The function will return a modified tile-data set which can then be applied using the `tilemap_set()`    function.",
      "returns": "Real (tiledata)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_mirror.htm"
    },
    "tile_set_rotate": {
      "name": "tile_set_rotate",
      "parameters": [
        {
          "parameter": "tiledata",
          "description": "the tile-data to set"
        },
        {
          "parameter": "rotate",
          "description": "Set to `true` to rotate and `false` to leave it as-is"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mx = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var my = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); var data\n    = tilemap_get(map_id, mx, my); var bool = !tile_get_rotate(data); data = tile_set_rotate(data, bool); tilemap_set(map_id, data, mx, my);\n```\nThe above code gets the tile map ID from the given layer and then gets the x and y cell position for the tile under the mouse. This position is then used to get the tile-data which is rotated and then used to set the tile again.\n",
      "description": "This function can be used to set a given set of tile-data to rotate the tile 90 degrees or not. You give the tile-data, which can be retrieved using the function `tilemap_get()`, and then set the rotate argument\n    to either `true` if you want the tile rotated, or `false` if you want the tile to be in its default, un-rotated state. The function will return a modified tile-data set which can then be applied using the `tilemap_set()`    function.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tile_set_rotate.htm"
    },
    "tilemap_clear": {
      "name": "tilemap_clear",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to change"
        },
        {
          "parameter": "tiledata",
          "description": "The tile data to use to clear the layer"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar layer_id = layer_get_id(\"Forest\"); var tile_id = layer_tilemap_get_id(layer_id); tilemap_clear(tile_id, 0);\n```\nThe above code gets the ID value of a tile map created in the room editor, and then clears it using \"empty\" tiles.\n",
      "description": "Using this function you can clear/set all the tiles on a given tile-map. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use\n    the function `layer_tilemap_get_id()`), and then supply the tile data that you wish to clear the layer with. A default value of 0 will clear all the tiles from the layer (essentially making all tiles \"empty\"),\n    while you can use the dedicated tile_* functions to create your own tile data to clear the tile map with.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_clear.htm"
    },
    "tilemap_get": {
      "name": "tilemap_get",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the tile-data of"
        },
        {
          "parameter": "x_cell",
          "description": "The cell along the x-axis to get the tile data from"
        },
        {
          "parameter": "y_cell",
          "description": "The cell along the y-axis to get the tile data from"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var data = tilemap_get(map_id, 0, 0); data = tile_set_flip(data, true); tilemap_set(map_id, data, 0, 0);\n```\nThe above code gets the ID for the tile map on the layer \"Tiles_Sky\" and then uses that to get the data from the tile at cell (0, 0). This tile data is then flipped before being used to set the tile on the tile map again.\n",
      "description": "Using this function you can retrieve the tile data from a cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or\n    when you use the function `layer_tilemap_get_id()`), as well as the *cell* x and y position and the function will return the tile data \"blob\". This data is essentially a bit mask that contains\n    the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see `tilemap_set_mask()` for details), and the resulting data value can then be used in the tile_* functions\n    to change a tiles properties. Note that we are using x/y cell positions based on the size of the tile map grid and *not* as a position in the room, so \"cell_x\" is a value from 0 to  [tile map width](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_width.htm),\n    and \"cell_y\" is a value from 0 to  [tile map height](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_height.htm). If you need to get the data for a tile at a specific room position then you need to use the function `tilemap_get_at_pixel()`.",
      "returns": "Real (-1 if there is an error)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get.htm"
    },
    "tilemap_get_at_pixel": {
      "name": "tilemap_get_at_pixel",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the tile-data of"
        },
        {
          "parameter": "x",
          "description": "The position along the x-axis to get the tile data from (in room pixels)"
        },
        {
          "parameter": "y",
          "description": "The position along the y-axis to get the tile data from (in room pixels)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var data = tilemap_get_at_pixel(map_id, 64, 128); data = tile_set_flip(data, true); tilemap_set_at_pixel(map_id, data, 64, 128);\n```\nThe above code gets the ID for the tile map \"Clouds\" on the layer \"Tiles_Sky\" and then uses that to get the data from the tile at position (64, 128). This tile data is then flipped before being used to set the tile on the tile map\n    again.\n",
      "description": "Using this function you can retrieve the tile data from a position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`) as well as the x and y position *in the room* to get the tile data from and the function will return the tile data \"blob\". This data\n    is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see `tilemap_set_mask()` for details), and the resulting data value can then\n    be used in the tile_* functions to change a tiles properties. If you need to get the tile data from a specific tile cell you should be using the function `tilemap_get()` instead.",
      "returns": "Real (-1 if there is an error)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_at_pixel.htm"
    },
    "tilemap_get_cell_x_at_pixel": {
      "name": "tilemap_get_cell_x_at_pixel",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the cell x position of"
        },
        {
          "parameter": "x",
          "description": "The x position within the room to use for getting the cell"
        },
        {
          "parameter": "y",
          "description": "The y position within the room to use for getting the cell"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); var _x = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var _y = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); tiledata\n    = tilemap_get(map_id, _x, _y);\n```\nThe above code uses the retrieved tile map ID to get the cell position from a set of room coordinates and then store the data for any tile found there in an instance variable.\n",
      "description": "Using this function you can retrieve the x-axis position of an individual tile map cell by giving the relative x-axis position within the room. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), as well as the x and y position *within the room* and the function will return the x position of the cell within the tile map for that point.\n    Note that if the value is outside of the tile map area, and no cell is available, it will return -1.",
      "returns": "Integer (x-axis cell position or -1 if there is an error)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_cell_x_at_pixel.htm"
    },
    "tilemap_get_cell_y_at_pixel": {
      "name": "tilemap_get_cell_y_at_pixel",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the cell y position of"
        },
        {
          "parameter": "x",
          "description": "The x position within the room to use for getting the cell"
        },
        {
          "parameter": "y",
          "description": "The y position within the room to use for getting the cell"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); var _x = tilemap_get_cell_x_at_pixel(map_id, mouse_x, mouse_y); var _y = tilemap_get_cell_y_at_pixel(map_id, mouse_x, mouse_y); tiledata\n    = tilemap_get(map_id, _x, _y);\n```\nThe above code uses the retrieved tile map ID to get the cell position from a set of room coordinates and then store the data for any tile found there in an instance variable.\n",
      "description": "Using this function you can retrieve the y-axis position of an individual tile map cell by giving the relative y-axis position within the room. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), as well as the x and y position *within the room* and the function will return the y position of the cell within the tile map for that point.\n    Note that if the value is outside of the tile map area, and no cell is available, it will return -1.",
      "returns": "Integer (y-axis cell position or -1 if there is an error)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_cell_y_at_pixel.htm"
    },
    "tilemap_get_frame": {
      "name": "tilemap_get_frame",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the frame index of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Traps\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    if tilemap_get_frame(map_id) >= 2 && tilemap_get_frame(map_id) < 4\n    {\n        global.activate = true;\n    }\n    else\n    {\n        global.activate = false;\n    }\n```\nThe above code checks the current animation frame for the given tile map on the given layer, and sets a global variable based on the return value.\n",
      "description": "Since tiles can be animated, it can sometimes be useful to know which frame is currently being drawn and react accordingly, so with this function you can retrieve the current frame index for a given tile map. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and the function will return the frame index.",
      "returns": "Real (between 0 (inclusive) and the maximum number of frames of animation (exclusive))",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_frame.htm"
    },
    "tilemap_get_global_mask": {
      "name": "tilemap_get_global_mask",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvar mask = tilemap_get_global_mask(map_id);\n    var new_mask = tile_mirror | tile_flip | tile_rotate | 255;\n    if mask != new_mask\n    {\n        tilemap_set_global_mask(new_mask);\n    }\n```\nThe above code gets the global mask value associated with all tile maps. If it is not the same as the value defined in the variable \"new_mask\", then it is set to that value.\n",
      "description": "This function can be used to retrieve the bit mask value for *all* tile maps, returning the current mask value or -1 if there is an error or 0 if no mask is specified. For further information on global tile map bit masks, see the function `tilemap_set_global_mask()`.",
      "returns": "Real (0 for no mask, -1 for an error, mask value otherwise)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_global_mask.htm"
    },
    "tilemap_get_height": {
      "name": "tilemap_get_height",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the height of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"espadrilles\"); var map_id = layer_tilemap_get_id(lay_id); var _w = tilemap_get_width(map_id); var _h = tilemap_get_height(map_id); total_tiles = (_w * _h);\n```\nThe above code uses the retrieved tile map ID to get the tile width and height of the tile map and then uses those values to set an instance variable.\n",
      "description": "Using this function you can retrieve the height (in cells) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when\n    you use the function `layer_tilemap_get_id()`), and the function will return the height (number of cells wide).",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_height.htm"
    },
    "tilemap_get_mask": {
      "name": "tilemap_get_mask",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the mask of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    var mask = tilemap_get_mask(map_id);\n    var new_mask = tile_mirror | tile_flip | tile_rotate | 255;\n    if mask != new_mask\n    {\n        tilemap_set_mask(map_id, new_mask);\n    }\n```\nThe above code gets the tile map ID from the given layer and then checks the mask value associated with it. If it is not the same as the value defined in the variable \"new_mask\", then it is set to that value.\n",
      "description": "This function can be used to retrieve the bit mask value for the given tile map. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and the function will return the current mask value or -1 if there is an error or 0 if no mask is specified. For further information on tile map bit masks, see the function `tilemap_set_mask()`.",
      "returns": "Real (0 for no mask, -1 for an error)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_mask.htm"
    },
    "tilemap_get_tile_height": {
      "name": "tilemap_get_tile_height",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the tile cell height of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); global.snap_x = tilemap_get_tile_width(map_id); global.snap_y = tilemap_get_tile_height(map_id);\n```\nThe above code uses the retrieved tile map ID to get the tile cell width and height and use them to set two global variables.\n",
      "description": "Using this function you can retrieve the height (in pixels) of each tile cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and the function will return the tile set cell height.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_tile_height.htm"
    },
    "tilemap_get_tile_width": {
      "name": "tilemap_get_tile_width",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the tile cell width of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); global.snap_x = tilemap_get_tile_width(map_id); global.snap_y = tilemap_get_tile_height(map_id);\n```\nThe above code uses the retrieved tile map ID to get the tile cell width and height and use them to set two global variables.\n",
      "description": "Using this function you can retrieve the width (in pixels) of each tile cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and the function will return the tile set cell width.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_tile_width.htm"
    },
    "tilemap_get_tileset": {
      "name": "tilemap_get_tileset",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the tile set from"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_trees\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    if tilemap_get_tileset(map_id) != ts_Nighttime\n    {\n        tilemap_tileset(map_id, ts_Nighttime);\n    }\n```\nThe above code checks the current tile set assigned to the layer \"Tiles_trees\" and if it is not \"ts_Nighttime\" then that tile set is assigned to the tile map.\n",
      "description": "Using this function you can retrieve the index value of the tile set resource assigned to a given tile map element on a layer. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and the function will return the tile set index value.",
      "returns": "Tile Set index value (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_tileset.htm"
    },
    "tilemap_get_width": {
      "name": "tilemap_get_width",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the width of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); var _w = tilemap_get_width(map_id); var _h = tilemap_get_height(map_id); total_tiles = (_w * _h);\n```\nThe above code uses the retrieved tile map ID to get the tile width and height of the tile map and then uses those values to set an instance variable.\n",
      "description": "Using this function you can retrieve the width (in cells) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when\n    you use the function `layer_tilemap_get_id()`), and the function will return the width (number of cells wide).",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_width.htm"
    },
    "tilemap_get_x": {
      "name": "tilemap_get_x",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the x position of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); var _x = tilemap_get_x(map_id); var _y = tilemap_get_y(map_id); tilemap_x(map_id, _x + 10); tilemap_y(map_id, _y + 10);\n```\nThe above code uses the retrieved tile map ID to get the tile x and y position of the tile map and then uses those values to move it.\n",
      "description": "Using this function you can retrieve the x position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and the function will return the x-axis position.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_x.htm"
    },
    "tilemap_get_y": {
      "name": "tilemap_get_y",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to get the y position of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\"); var map_id = layer_tilemap_get_id(lay_id); var _x = tilemap_get_x(map_id); var _y = tilemap_get_y(map_id); tilemap_x(map_id, _x + 10); tilemap_y(map_id, _y + 10);\n```\nThe above code uses the retrieved tile map ID to get the tile x and y position of the tile map and then uses those values to move it.\n",
      "description": "Using this function you can retrieve the y position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and the function will return the y-axis position.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_get_y.htm"
    },
    "tilemap_set": {
      "name": "tilemap_set",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to change"
        },
        {
          "parameter": "tiledata",
          "description": "The tile data to set"
        },
        {
          "parameter": "xcell",
          "description": "The cell (grid) position to set along the x-axis"
        },
        {
          "parameter": "ycell",
          "description": "The cell (grid) position to set along the y-axis"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var data = tilemap_get(map_id, 0, 0); data = tile_set_flip(data, true); tilemap_set(map_id, data, 0, 0);\n```\nThe above code gets the ID for the tile map on the layer \"Tiles_Sky\" and then uses that to get the data from the tile at cell (0, 0). This tile data is then flipped before being used to set the tile on the tile map again.\n",
      "description": "This function can be used to set any cell (grid square) within the tile map element on the layer to a new tile. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and then the tile data to set as well as the position within the tile map. You can retrieve tile data using the function `tilemap_get()`    and then use the `tile_` functions to change it before setting the cell using this function. The function will return `true` if the tile was successfully set and `false` if there was an issue and it wasn't set.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set.htm"
    },
    "tilemap_set_at_pixel": {
      "name": "tilemap_set_at_pixel",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to change"
        },
        {
          "parameter": "tiledata",
          "description": "The tile set data to set"
        },
        {
          "parameter": "xcell",
          "description": "The x position (in the room)"
        },
        {
          "parameter": "ycell",
          "description": "The y position (in the room)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var data = tilemap_get_at_pixel(map_id, 4, 4); data = tile_set_flip(data, true); tilemap_set_at_pixel(map_id, data, 4, 4);\n```\nThe above code gets the ID for the tile map on the layer \"Tiles_Sky\" and then uses that to get the data from the tile at position (4, 4). This tile data is then flipped before being used to set the tile on the tile map again.\n",
      "description": "This function can be used to set a cell within the tile map element on the layer to a new tile using the actual position of the tile to change within the room. You give the tile map element ID (which you get when you create a tile map element using\n    `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and then the tile data to set as well as the position within the room. You\n    can retrieve tile data using the function `tilemap_get_at_pixel()` and then use the `tile_` functions to change it before setting it again using this function. The function will return `true`    if the tile was successfully set and `false` if there was an issue and it wasn't set.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_at_pixel.htm"
    },
    "tilemap_set_global_mask": {
      "name": "tilemap_set_global_mask",
      "parameters": [
        {
          "parameter": "mask",
          "description": "The mask value to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar mask = tile_mirror | tile_flip | tile_rotate | 255; tilemap_set_global_mask(mask);\n  \n```\nThe above code sets the global tile map bit mask to 8bits, preserving the flip, mirror, and rotate values for each tile in the map.\n",
      "description": "This function can be used to set the **tile bit mask** for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses\n    up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm"
    },
    "tilemap_set_height": {
      "name": "tilemap_set_height",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to set the height of"
        },
        {
          "parameter": "height",
          "description": "The height value (in \"cells\")"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    if tilemap_get_height(map_id) != room_height div 16\n    {\n        tilemap_set_height(map_id, room_height div 16);\n    }\n```\nThe above code checks the width of a specific tile map and if it is not the correct size then the width is set.\n",
      "description": "This function can be used to resize a tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and the new height of the tile map in tile cells.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_height.htm"
    },
    "tilemap_set_mask": {
      "name": "tilemap_set_mask",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to set the mask of"
        },
        {
          "parameter": "mask",
          "description": "The mask value"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_sky\"); var map_id = layer_tilemap_get_id(lay_id); var mask = tile_mirror | tile_flip | tile_rotate | 255; tilemap_set_mask(map_id, mask);\n```\nThe above code gets the tile map ID from the given layer and then sets the tile map bit mask to 8bits, preserving the flip, mirror, and rotate values for each tile in the map.\n",
      "description": "This function can be used to set the **tile bit mask** for a single tile map. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when\n    you use the function `layer_tilemap_get_id()`), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles\n    in your tile set, which only uses up 8 bits of your index in the tile data \"blob\" (from an available 19 bits of data). These bits can be \"masked\" and then the rest of the tile data can be used to store additional values.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_mask.htm"
    },
    "tilemap_set_width": {
      "name": "tilemap_set_width",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to set the width of"
        },
        {
          "parameter": "width",
          "description": "The width value (in \"cells\")"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_Walls\");\n    var map_id = layer_tilemap_get_id(lay_id);\n    if tilemap_get_width(map_id) != room_width div 16\n    {\n        tilemap_set_width(map_id, room_width div 16);\n    }\n```\nThe above code checks the width of a specific tile map and if it is not the correct size then the width is set.\n",
      "description": "This function can be used to resize a tile map element. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and the new width of the tile map in tile cells.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_width.htm"
    },
    "tilemap_tileset": {
      "name": "tilemap_tileset",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to change"
        },
        {
          "parameter": "tileset_index",
          "description": "The new tile set index to use"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Tiles_trees\");\n    var tile_id = layer_tilemap_get_id(lay_id);\n    if tilemap_get_tileset(tile_id) != ts_Nighttime\n    {\n        tilemap_tileset(tile_id, ts_Nighttime);\n    }\n```\nThe above code checks the current tile set assigned to the tile map on the layer \"Tiles_trees\" and if it is not \"ts_Nighttime\" then that tile set is assigned to the tile map.\n",
      "description": "Using this function you can change the tile set resource assigned to a given tile map element on a layer. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()` or when you use the function `layer_tilemap_get_id()`), and then supply a tile set index and the tile map will be given the new sprite.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_tileset.htm"
    },
    "tilemap_x": {
      "name": "tilemap_x",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to change"
        },
        {
          "parameter": "x",
          "description": "The x position for the tile map"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_sky\"); var map_id = layer_tilemap_get_id(lay_id); tilemap_x(map_id, irandom(room_width));\n```\nThe above code gets the ID value of the tile map asset assigned to the layer \"Asset_sky\" and then sets its x position to a random value between 0 and the width of the room.\n",
      "description": "This function controls the position along the x-axis of the room of the asset tile map element on the layer. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and then set the x value to use (based on the room coordinates).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_x.htm"
    },
    "tilemap_y": {
      "name": "tilemap_y",
      "parameters": [
        {
          "parameter": "tilemap_element_id",
          "description": "The unique ID value of the tile map element to change"
        },
        {
          "parameter": "y",
          "description": "The y position for the tile map"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar lay_id = layer_get_id(\"Asset_sky\"); var map_id = layer_tilemap_get_id(lay_id); tilemap_y(map_id, irandom(room_height));\n```\nThe above code gets the ID value of the tile map asset assigned to the layer \"Asset_sky\" and then sets its y position to a random value between 0 and the height of the room.\n",
      "description": "This function controls the position along the y-axis of the room of the asset tile map element on the layer. You give the tile map element ID (which you get when you create a tile map element using `layer_tilemap_create()`    or when you use the function `layer_tilemap_get_id()`), and then set the y value to use (based on the room coordinates).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_y.htm"
    },
    "tileset_get_name": {
      "name": "tileset_get_name",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the tile set to get the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _l = layer_get_id(\"tilemap_trees\"); var _m = layer_tilemap_get_id(_l); var _t = tilemap_tileset(_m); tileset_name = tileset_get_name(_t);\n```\nThe above code will get the name of the tile set index for the given layer, storing the return string in the variable `tileset_name`.\n",
      "description": "This function will return the name *as a string* of the specified tile set. This name is the one that has been specified for the tile set in the Asset Browser of the main GameMaker Studio 2 window. Please note that this is *only* a string\n    and cannot be used to reference the tile set directly - for that you would need the *tile set index*. You can, however, use this string to get the *tile set index* using the returned string along with the function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Tilsets/tileset_get_name.htm"
    },
    "tileset_get_texture": {
      "name": "tileset_get_texture",
      "parameters": [
        {
          "parameter": "tileset",
          "description": "The index of the tile set to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex; tex = tileset_get_texture(spr_Wall, 0); draw_primitive_begin_texture(pr_trianglestrip, tex); draw_vertex_texture(0, 0, 0, 0); draw_vertex_texture(480, 0, 1, 0); draw_vertex_texture(480, 640, 1, 1); draw_vertex_texture(0,\n    640, 0, 1); draw_primitive_end();\n  \n```\nThe above code will draw a 4 vertex triangle strip textured with the texture held in the \"tex\" variable.\n",
      "description": "This function returns a special *pointer* for the tile set texture page. This value can then be used in other draw functions, particularly in the  [2D primitive](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm) functions, as\n    well as the  [Shader](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm) functions. You can get more information about the returned texture page using the different `texture_` functions found  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm).",
      "returns": "Pointer (texture page ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Tilsets/tileset_get_texture.htm"
    },
    "tileset_get_uvs": {
      "name": "tileset_get_uvs",
      "parameters": [
        {
          "parameter": "tileset",
          "description": "The index of the tile set to use."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar tex = tileset_get_uvs(tl_Grass); tex_left = tex[0]; tex_top = tex[1]; tex_right = tex[2]; tex_bottom = tex[3];\n```\nThe above code will store the UV coordinates for the given tile set in a local array and then assign the values to instance variables.\n",
      "description": "This function returns an  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) with the UV coordinates and other data for the texture of the given tile set on the texture page. The function returns an array with the following 8 elements:",
      "returns": "Array (1D, 8 elements)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Tilsets/tileset_get_uvs.htm"
    },
    "timeline_add": {
      "name": "timeline_add",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.tl = timeline_add();\n```\nThe above code creates a new time line and stores its index in the variable \"global.tl\".\n",
      "description": "With this function you can add a new (empty) time line into your game. the function returns the index of this new time line which should be stored in a variable for use in all further function calls that involve this new time line. You should also be\n    sure to use the function `timeline_delete()` whenever you no longer wish to use the time line (like at the end of the room) so as to prevent any possible memory leaks that could slow\n    down or crash your game. To add moments to a timeline created in this way, see the function  [timeline_moment_add_script()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_moment_add_script.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_add.htm"
    },
    "timeline_clear": {
      "name": "timeline_clear",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the time line to clear."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif timeline_position > 200\n    {\n        timeline_clear(global.tl);\n        timeline_index = -1;\n    }\n```\nThe above code will clear the specified time line indexed by the variable \"global.tl\" of all moments when a specific moment has been passed.\n",
      "description": "With this function you can clear a specific time line of \"moments\", removing all codes and actions for that time line and leaving it empty.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_clear.htm"
    },
    "timeline_delete": {
      "name": "timeline_delete",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the time line to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif timeline_exists(global.tl)\n    {\n        timeline_delete(global.tl);\n    }\n```\nThe above code checks to see if a time line exists and is indexed in the global variable \"tl\" and if so it then deletes that time line.\n",
      "description": "With this function you can delete any time line from your game. if this time line was created in the GameMaker Studio 2 Asset Browser, please note that it is removed completely from the game and trying to call the indexed time line again after using this function will cause an error. If the time line was created dynamically using the `timeline_add()` function, then this function should be used the moment that the time line is no longer needed to prevent any memory leaks that could slow down (and eventually crash) your game.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_delete.htm"
    },
    "timeline_exists": {
      "name": "timeline_exists",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the time line to check for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif timeline_exists(global.tl)\n    {\n        timeline_delete(global.tl);\n    }\n```\nThe above code checks to see if a time line exists and is indexed in the global variable \"tl\" and if so it then deletes that time line.\n",
      "description": "With this function you can check and see whether a time line exists (returns `true`) or not (returns `false`). This is particularly useful when creating Timelines dynamically using the `timeline_add()` function, but you should note that if you search for an uninitialised variable (that would otherwise be assigned to a time line's index) an error will be thrown.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_exists.htm"
    },
    "timeline_get_name": {
      "name": "timeline_get_name",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the time line to check the name of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _str = timeline_get_name(timeline_index); show_debug_message(\"Current timeline = \" + _str);\n```\nThe above code get the name of the currently assigned timeline and output it to the console.\n",
      "description": "This function can be used to get the name of a time line as a string. if the time line has been created dynamically using the `timeline_add()` function, the name returned will have the\n    format \"__newtimeline*N*\" where \"*N*\" is the number of the time line (starting from 0). Please note that this is *only* a string and cannot be used to reference the timeline directly - for\n    that you would need the *timeline index*. You can, however, use this string to get the *timeline index* using the returned string along with the function `asset_get_index()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_get_name.htm"
    },
    "timeline_max_moment": {
      "name": "timeline_max_moment",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the timeline to get the last moment of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif timeline_position > timeline_max_moment(timeline_index)\n    {\n        timeline_running = false;\n    }\n```\nThe above code will check the current timeline position against the maximum active moment, and if it is greater the timeline will be stopped.\n",
      "description": "This function will return the value of the moment in which the timeline performs its final action. So, if you have a timeline with 8 different actions placed 20 moments apart, this function would return the moment value of the last action in that timeline, which would be 160. This function is a good way to test whether a timeline has passed the last active moment when running, since the timeline position will continue incrementing every step of the game whether there are further actions or not.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_max_moment.htm"
    },
    "timeline_moment_add_script": {
      "name": "timeline_moment_add_script",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the time line to add a moment to."
        },
        {
          "parameter": "step",
          "description": "The moment (step) to add to."
        },
        {
          "parameter": "script",
          "description": "The index of the script function to add into the moment."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nglobal.tl = timeline_add();\n    var i = room_speed * 60;\n    repeat(3)\n    {\n        timeline_moment_add_script(global.tl, i, choose(Attack_1, Attack_2, Attack_3);\n        i += room_speed * 60;\n    }\n```\nThe above code will create a new time line and store its index in the variable \"global.tl\". It will then add three scripts to the time line, chosen at random, at one minute intervals.\n",
      "description": "With this function you can dynamically add a  [script function](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Script_Functions.htm) to Timelines at any given \"moment\" within that time line, where a \"moment\" is the equivalent of one game tick (or step). In this way you can create a new time line using the `timeline_add()` function and add different behaviours at any point, or simply modify a previously created time line resource with new behaviours. Note that the function cannot require any additional arguments when using this function, and if you use it to modify a Timeline asset present in the Asset Browser, then all instances that use this timeline will be affected, and the change will last until the end of the game (calling game_restart() will not reset the change either).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_moment_add_script.htm"
    },
    "timeline_moment_clear": {
      "name": "timeline_moment_clear",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the time line to clear."
        },
        {
          "parameter": "step",
          "description": "The moment to clear."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\ntimeline_moment_clear(global.tl, room_speed * 30);\n```\nThe above code will clear the specified moment of the time line indexed by the variable \"global.tl\".\n",
      "description": "With this function you can clear a specific moment of any previously defined time line of all codes and actions.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_moment_clear.htm"
    },
    "timeline_size": {
      "name": "timeline_size",
      "parameters": [
        {
          "parameter": "ind",
          "description": "The index of the timeline get the information from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif timeline_size(global.tl) == 0\n    {\n        timeline_moment_add_script(global.tl, room_speed + irandom(room_speed), spawn_enemy);\n    }\n```\nThe above code check the given timeline size, and if it returns 0 (ie: the timeline has no active moments) it will add a script function to be used at a random moment within the timeline indexed in the global variable \"tl\".\n",
      "description": "With this function you can get the total number of active moments for a timeline (an \"active\" moment is one which has code or DnD™ added to it). This can be handy when creating dynamic timelines using the `timeline_moment_add_script()` and `timeline_moment_clear()` functions, as you can check to see if a given timeline has the correct number of active moments or none at all.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_size.htm"
    },
    "typeof": {
      "name": "typeof",
      "parameters": [
        {
          "parameter": "variable",
          "description": "The variable to get the data type of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _str = typeof(global.ExtensionInput);\n    show_debug_message(\" \n```**global.ExtensionInput is a \" + _str);**\nThe above code gets the data type held by the given global variable and returns the string to a local variable which is then used to output a message to the console.\n",
      "description": "This function returns the data type of any given variable as a string. The possible return values are listed in the table below:",
      "returns": "String (see table, above)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/typeof.htm"
    },
    "url_get_domain": {
      "name": "url_get_domain",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ndom_name=url_get_domain();\n```\nThis will store the domain of your game in the variable \"dom_name\".\n",
      "description": "You can use this to get the domain where your HTML5 game is being played.",
      "returns": "string",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/url_get_domain.htm"
    },
    "url_open": {
      "name": "url_open",
      "parameters": [
        {
          "parameter": "url",
          "description": "The URL (website address) to link to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nurl_open(\"http://yoyogames.com\");\n```\nThis would open the YoYo Games homepage in the current window.\n",
      "description": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/url_open.htm"
    },
    "url_open_ext": {
      "name": "url_open_ext",
      "parameters": [
        {
          "parameter": "url",
          "description": "The URL (website address) to link to."
        },
        {
          "parameter": "target",
          "description": "This is the target area to open the URL in."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nurl_open_ext(\"http://yoyogames.com\", \"_blank\");\n```\nThis would open the YoYo Games homepage in a new window.\n",
      "description": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The \"target\" parameter that you specify is the same as the standard JavaScript \"name\" value when you use the `open()` method, and you should be aware that all but \"**_self**\" may result in the browser blocking, or asking the user if they wish to allow it.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/url_open_ext.htm"
    },
    "url_open_full": {
      "name": "url_open_full",
      "parameters": [
        {
          "parameter": "url",
          "description": "The URL (website address) to link to."
        },
        {
          "parameter": "target",
          "description": "This is the target area to open the URL in (see description)."
        },
        {
          "parameter": "options",
          "description": "Standard browser options (see description)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nurl_open_full(\"http://yoyogames.com\", \"_blank\", \"resizable=0, height=200, scrollbars=0\");\n```\nThis would open the YoYo Games homepage in a new window that can't be resized, has a height of 200 pixels and no scrollbars.\n",
      "description": "This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The \"target\" parameter that you specify is the same as the standard JavaScript \"name\" value when you use the `open()` method (be aware that all but \"**_self**\" may result in the browser blocking, or asking the user if they wish to allow it) and the \"options\" is the same as the JavaScript \"specs\" parameter for controlling what properties the new window/tab should display (not all browsers may support all features).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/url_open_full.htm"
    },
    "uwp_check_privilege": {
      "name": "uwp_check_privilege",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The User ID pointer to check."
        },
        {
          "parameter": "privilege",
          "description": "The privilege constant to check (see description, above)."
        },
        {
          "parameter": "attempt_resolution",
          "description": "Enable attempting a resolution if set to `true`, or ignore if set to `false`."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar user_one = xboxlive_get_user(0);\n    if (xboxlive_user_is_signed_in(user_one))\n    {\n        uwp_check_privilege(user_one, xboxlive_privilege_multiplayer_sessions, true);\n    }\n```\nThe above checks to see if the user is signed in and if they are it checks the multiplayer sessions permission.\n",
      "description": "With this function you can check that a given user has a chosen privilege. The function will return true or false in the System Asynchronous Event depending on whether the privilege is enabled or not, and if you set the attempt_resolution argument to true and the privilege isn't enabled, it will also open a system dialog (suspending the game) to prompt the user to upgrade the account or whatever is required to get the privilege. If the user then enables the required option, the function will return true.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm"
    },
    "uwp_is_constrained": {
      "name": "uwp_is_constrained",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif xboxliveis_constrained()\n    {\n        if !instance_exists(obj_PauseMenu)\n        {\n            instance_create(0,0,obj_PauseMenu);\n        }\n    }\n```\nThe above code checks to see if the app is constrained and if it is it creates an instance of an object (used for pausing the game).\n",
      "description": "This function will return `true` if the game is running in a resource constrained mode or `false` if running normally. Resource constrained mode can be activated when the game doesn't have focus, and in this mode the game has reduced GPU resources. The response to this should normally be to pause the game (as the user no longer has control). Also, disabling any particularly taxing effects may be a good idea if slowdown is observed in this mode. Note that unlike the `uwp_is_suspending()` function, this function will return `true` continuously as long as the game is in constrained mode (and not just once when it first happens).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_is_constrained.htm"
    },
    "uwp_is_suspending": {
      "name": "uwp_is_suspending",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif uwp_is_suspending()\n    {\n        scr_Save_Game_Data();\n        uwp_suspend();\n    }\n```\nThe above code checks to see if the app is going into suspension and if it is it calls a script to save the game data before suspending the game.\n",
      "description": "This function will return `true` for a single frame (and `false` otherwise) in a similar manner to `os_is_paused()`. The game then has one second to save the game state before it is potentially terminated by the system. Once the game has finished saving data it should call `uwp_suspend()` to suspend cleanly. The game should probably also enter a pause state so that if it is resumed by the system (if it hasn't been fully terminated) the player is not thrown straight back into a gameplay situation.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_is_suspending.htm"
    },
    "uwp_license_trial_time_remaining": {
      "name": "uwp_license_trial_time_remaining",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif uwp_license_trial_version()\n    {\n        var secs = uwp_license_trial_time_remaining() mod 60;\n        var mins = uwp_license_trial_time_remaining() div 60;\n        var hours = mins div 60;\n        if secs < 10 secs = \"0\" + string(secs) else secs = string(secs);\n        if mins > 60 mins -= (hours * 60);\n        if mins < 10 mins = \"0\" + string(mins) else mins = string(mins);\n        if hours > 9 hours = \"9\" else hours = string(hours);\n        time_string = hours + \":\" + mins + \":\" + secs;\n    }\n```\nThe above code checks to see if the game is being run with a trial licence and if it is it creates a string with the time until the licence expires.\n",
      "description": "This function will return the approximate number of seconds until a time-based trial expires. The value returned by this function is meaningless if the trial is not time-based or if the game is not running in trial mode.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_license_trial_time_remaining.htm"
    },
    "uwp_license_trial_user": {
      "name": "uwp_license_trial_user",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check_pressed(0, gp_start)\n    {\n        if uwp_license_trial_version()\n        {\n            var _uid = uwp_license_trial_user();\n            uwp_show_help(_uid);\n        }\n    }\n```\nThe above code checks to see if a button is pressed and then checks the app to see if it is running with a trial licence. If it is, then it gets the User ID for licence and opens the help file for that user.\n",
      "description": "This function will return the User ID pointer whose trial license is currently being used, or it will return `pointer_null` if the user is not currently active or if the game is not currently in trial mode.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_license_trial_user.htm"
    },
    "uwp_license_trial_version": {
      "name": "uwp_license_trial_version",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif uwp_license_trial_version()\n    {\n        global.LevelCap = 10;\n    }\n```\nThe above code checks to see if the app is under a trial licence and, if so, it sets a global variable.\n",
      "description": "This function can be used to check whether the game is under a trial licence or not. If it is the function will return `true`, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_license_trial_version.htm"
    },
    "uwp_show_help": {
      "name": "uwp_show_help",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The User ID pointer to open the helpfile for."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check_pressed(0, gp_start)\n    {\n        if uwp_license_trial_version()\n        {\n            var _uid = uwp_license_trial_user;\n            uwp_show_help(_uid);\n        }\n    }\n```\nThe above code checks to see if a button is pressed and then checks the app to see if it is running with a trial licence. If it is, then it gets the User ID for licence and opens the help file for that user.\n",
      "description": "This function launches the Xbox One help app which will in-turn display your game's help file (which is an HTML format file that you have previously uploaded to the XBox Developer Portal). Note that a user ID is specified when calling this function so that the user's locale information can be used when displaying it. You can retrieve the user ID with the functions `xboxlive_get_user()`, `xboxlive_get_activating_user()`, or `uwp_license_trial_user()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_show_help.htm"
    },
    "uwp_suspend": {
      "name": "uwp_suspend",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif uwp_is_suspending()\n    {\n        scr_Save_Game_Data();\n        uwp_suspend();\n    }\n```\nThe above code checks to see if the app is going into suspension and if it is it calls a script to save the game data before suspending the game.\n",
      "description": "This function indicates to the system that the app has finished saving data following detection of a suspension request. Calling this function is a requirement for Xbox One submission, and it should always be used in conjunction with the function `uwp_is_suspending()`, as shown in the example below.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_suspend.htm"
    },
    "uwp_was_closed_by_user": {
      "name": "uwp_was_closed_by_user",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif uwp_was_closed_by_user()\n    {\n        global.GameLoaded = false;\n    }\n```\nThe above code checks to see if the app has previously been terminated by the user, and if so, it sets a global variable.\n",
      "description": "With this function you can find out if the game was previously shut down by the user while playing (i.e. it, was terminated correctly and not by the system). If it has been then the function will return `true`, otherwise it will return `false`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_was_closed_by_user.htm"
    },
    "uwp_was_terminated": {
      "name": "uwp_was_terminated",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif xboxlivewas_terminated()\n    {\n        buffer_load(\"Player_Save.sav\");\n        global.GameLoaded = true;\n    }\n```\nThe above code checks to see if the app has previously been terminated by the system, and if so, it loads a buffer and sets a global variable.\n",
      "description": "With this function you can find out if the game was previously shut down by the system (i.e. it's not the first run of the game). If it has been then the function will return `true`, otherwise it will return `false`. An example of use would be to check it and see if the game was previously terminated by the system, and then (if it returns `true`) to load the previous stage that the player was at in the game. If targeting the XBox One then the required behavior of games if this is detected will be different between the different versions of the certification docs, so it's worth checking the latest version to see what the game *should* do.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_was_terminated.htm"
    },
    "variable_global_exists": {
      "name": "variable_global_exists",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name of the global variable to check for (as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !variable_global_exists(\"enemy_num\"))\n    {\n        global.enemy_num = instance_number(obj_Enemey_Parent);\n    }\n```\nThe above code will check to see if the global variable called \"enemy_num\" exists and if it does not it is created and set a value.\n",
      "description": "With this function you can check whether a global scope variable exists or not. You supply the global variable name to check for *as a string* (see example code below) and the function will return `true` if a global variable with the given name exists or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_global_exists.htm"
    },
    "variable_global_get": {
      "name": "variable_global_get",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name of the global variable to get (as a string)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif variable_global_exists(\"enemy_num\")\n    {\n        show_debug_message(\"enemy_num = \" + string(variable_global_get(\"enemy_num\"));)\n    }\n```\nThe above code will check to see if a global variable exists and if it does then it is output to the console.\n",
      "description": "With this function you can get the value from a given named global variable. You supply the name of the global variable to get the value of *as a string* (see example code below) and the function will return the value held by the global variable or undefined if the variable does not exist.",
      "returns": "Value (any data type) or \n````undefined````\n (if the named variable does not exist)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_global_get.htm"
    },
    "variable_global_set": {
      "name": "variable_global_set",
      "parameters": [
        {
          "parameter": "name",
          "description": "The name of the global variable to set (as a string)"
        },
        {
          "parameter": "val",
          "description": "The value to set the global variable to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !variable_global_exists(\"enemy_num\")\n    {\n        variable_global_set(\"enemy_num\", 0);\n    }\n```\nThe above code will check to see if a global variable exists and if it does not then it is created and set to 0.\n",
      "description": "With this function you can set the value of a given global variable. You supply the name of the global variable to set the value of *as a string* (see example code below), and then the value to set (can be any valid  [data type](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Data_Types.htm)). If the global variable does not exist already in the game it will be created and then assigned the value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_global_set.htm"
    },
    "variable_instance_exists": {
      "name": "variable_instance_exists",
      "parameters": [
        {
          "parameter": "instance_id",
          "description": "The unique ID value of the instance to check"
        },
        {
          "parameter": "name",
          "description": "The name of the variable to check for (as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !variable_instance_exists(id, \"shields\"))\n    {\n        shields = 0;\n    }\n```\nThe above code will check to see if the variable called \"shields\" exists in the instance running the code and if it does not then it is created and initialised to 0.\n",
      "description": "With this function you can check whether an instance scope variable exists or not. You supply the unique instance ID value (which can be found from the  [Instance Properties](https://manual.yoyogames.com/The_Asset_Editors/Room_Properties/Layer_Properties.htm) in the room editor, or is returned when you call the function `instance_create_layer()`) as well as the variable name to check for *as a string* (see example code below). The function will return `true` if a variable with the given name exists for the instance and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_exists.htm"
    },
    "variable_instance_get": {
      "name": "variable_instance_get",
      "parameters": [
        {
          "parameter": "instance_id",
          "description": "The unique ID value of the instance to use"
        },
        {
          "parameter": "name",
          "description": "The name of the variable to get (as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif variable_instance_exists(id, \"shields\")\n    {\n        var ss = variable_instance_get(id, \"shields\");\n    }\n    else\n    {\n        var ss = -1;\n    }\n```\nThe above code will check to see if a variable exists and if it does then the value it holds is retrieved and stored in a local variable. If it does not exist, the local variable is set to -1.\n",
      "description": "With this function you can get the value from a given named variable. You supply the unique instance ID value (which can be found from the  [Instance Properties](https://manual.yoyogames.com/The_Asset_Editors/Room_Properties/Layer_Properties.htm) in the room editor, or is returned when you call the function `instance_create_layer()`) as well as the name of the variable to get the value of *as a string* (see example code below). The function will return the value held by the variable, or undefined if the variable does not exist.",
      "returns": "Value (any data type) or \n````undefined````\n (if the named variable does not exist)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_get.htm"
    },
    "variable_instance_get_names": {
      "name": "variable_instance_get_names",
      "parameters": [
        {
          "parameter": "instance_id/global",
          "description": "The unique ID value of the instance to check or the keyword `global`"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str = \"\";\n    var array = variable_instance_get_names(id);\n    show_debug_message(\"Variables for \" + object_get_name(object_index) + string(id));\n    for (var i = 0; i < array_length(array); i++;)\n    {\n        str = array[i] + \":\" + string(variable_instance_get(id, array[i]));\n        show_debug_message(str);\n    }\n```\nThe above code will retrieve an array of all instance scope variables for the instance running the code block and then display these along with their values in the debug output.\n",
      "description": "With this function you can retrieve an array populated with the **instance** variable names for an instance, or the **global** variables for a game. When you pass in an instance ID value, each entry in the array will be a string of the variable name that corresponds to an  [instance scope](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm) variable that has been created in the instance. However if you pass in the keyword `global`, each entry in the array will be a string of the variable name that corresponds to an  [global scope](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm) variable.",
      "returns": "Array (each entry is a string)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_get_names.htm"
    },
    "variable_instance_names_count": {
      "name": "variable_instance_names_count",
      "parameters": [
        {
          "parameter": "instance_id",
          "description": "The unique ID value of the instance to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _num = variable_instance_names_count(myinst); show_debug_message(\"Instance Variables = \" + string(_num));\n```\nThe above code will retrieve the number of variables in the given instance and show a debug message in the console output with that value.\n",
      "description": "With this function you can find the total number number of variables defined for an instance. You supply the instance ID to check, and the function will return an integer value for the number of variables encountered, or (if no instance of the given\n    ID exists) -1.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_names_count.htm"
    },
    "variable_instance_set": {
      "name": "variable_instance_set",
      "parameters": [
        {
          "parameter": "instance_id",
          "description": "The unique ID value of the instance to use"
        },
        {
          "parameter": "name",
          "description": "The name of the variable to set (as a string)"
        },
        {
          "parameter": "val",
          "description": "The value to set the variable to"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif !variable_instance_exists(id, \"shields\")\n    {\n        variable_instance_set(id, \"shields\", 0);\n    }\n```\nThe above code will check to see if an instance variable exists in the calling instance and if it does not then it is created and set to 0.\n",
      "description": "With this function you can set the value of a given variable in an instance. You supply the unique instance ID value (which can be found from the  [Instance Properties](https://manual.yoyogames.com/The_Asset_Editors/Room_Properties/Layer_Properties.htm) in the room editor, or is returned when you call the function `instance_create_layer()`) as well as the name of the variable to set the value of *as a string* (see example code below), and then finally the value to set (can be any valid  [data type](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Data_Types.htm)). If the variable does not exist already in the instance it will be created and then assigned the value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_instance_set.htm"
    },
    "variable_struct_exists": {
      "name": "variable_struct_exists",
      "parameters": [
        {
          "parameter": "struct",
          "description": "The struct reference to check"
        },
        {
          "parameter": "name",
          "description": "The name of the struct variable to check for (as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !variable_struct_exists(mystruct, \"shields\"))\n    {\n        mystruct.shields = 0;\n    }\n```\nThe above code will check to see if the variable called \"shields\" exists in the given struct and if it does not then it is created and initialised to 0.\n",
      "description": "With this function you can check whether a variable exists within the given struct or not. You supply the struct reference to use as well as the variable name to check for *as a string* (see example code below). The function will return `true` if a variable with the given name exists for the struct and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_exists.htm"
    },
    "variable_struct_get": {
      "name": "variable_struct_get",
      "parameters": [
        {
          "parameter": "struct",
          "description": "The struct reference to use"
        },
        {
          "parameter": "name",
          "description": "The name of the variable to get (as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif variable_struct_exists(mystruct, \"shields\")\n    {\n        var ss = variable_struct_get(mystruct, \"shields\");\n    }\n    else\n    {\n        var ss = -1;\n    }\n```\nThe above code will check to see if a variable exists in the given struct and if it does then the value it holds is retrieved and stored in a local variable. If it does not exist, the local variable is set to -1.\n",
      "description": "With this function you can get the value from a given named variable within a struct. You supply the struct reference as well as the name of the variable to get the value of *as a string* (see example code below). The function will return the value held by the variable or `undefined` if the named variable does not exist.",
      "returns": "```\nValue (any data type) or \n````undefined`",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_get.htm"
    },
    "variable_struct_get_names": {
      "name": "variable_struct_get_names",
      "parameters": [
        {
          "parameter": "struct",
          "description": "The struct reference to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar str = \"\";\n    var array = variable_struct_get_names(mystruct);\n    show_debug_message(\"Variables for struct: \" + string(array));\n    for (var i = 0; i < array_length(array); i++;)\n    {\n        str = array[i] + \":\" + string(variable_struct_get(mystruct, array[i]));\n        show_debug_message(str);\n    }\n```\nThe above code will retrieve an array of the variable names for the given struct and then display these along with their values in the debug output.\n",
      "description": "With this function you can retrieve an array populated with the variable names from a struct. You pass in the struct reference to check, and each entry in the array will be a **string** of the variable names that the struct contains.",
      "returns": "Array (each entry is a string)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_get_names.htm"
    },
    "variable_struct_names_count": {
      "name": "variable_struct_names_count",
      "parameters": [
        {
          "parameter": "struct_id",
          "description": "The unique ID value of the struct to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _num = variable_struct_names_count(mystruct); show_debug_message(\"Struct Variables = \" + string(_num));\n```\nThe above code will retrieve the number of variables in the given struct and show a debug message in the console output with this value.\n",
      "description": "With this function you can find the total number number of variables defined for a struct. You supply the struct ID to check, and the function will return an integer value for the number of variables encountered, or (if no struct of the given ID exists)\n    -1.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_names_count.htm"
    },
    "variable_struct_remove": {
      "name": "variable_struct_remove",
      "parameters": [
        {
          "parameter": "struct",
          "description": "The struct reference to remove the variable from"
        },
        {
          "parameter": "name",
          "description": "The name of the variable to remove (as a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif variable_struct_exists(mystruct, \"shields\")\n    {\n        variable_struct_remove(mystruct, \"shields\");\n    }\n```\nThe above code will check to see if the given variable exists in the given struct and if it does then it is removed.\n",
      "description": "With this function you can remove a variable from a struct. You supply the struct ID to remove the variable from and the string name of the variable to be removed.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_remove.htm"
    },
    "variable_struct_set": {
      "name": "variable_struct_set",
      "parameters": [
        {
          "parameter": "struct",
          "description": "The struct reference to set"
        },
        {
          "parameter": "name",
          "description": "The name of the variable to set (as a string)"
        },
        {
          "parameter": "val",
          "description": "The value to set the variable to"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif !variable_struct_exists(mystruct, \"shields\")\n    {\n        variable_struct_set(mystruct, \"shields\", 0);\n    }\n```\nThe above code will check to see if the given variable exists in the given struct and if it does not then it is created and set to 0.\n",
      "description": "With this function you can set the value of a given variable in a struct. You supply the struct reference as well as the name of the variable to set the value of *as a string* (see example code below), and then finally the value to set (can be any valid  [data type](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Data_Types.htm)). If the variable does not exist already in the struct it will be created and then assigned the value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/variable_struct_set.htm"
    },
    "vertex_argb": {
      "name": "vertex_argb",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "argb",
          "description": "The ARGB value to set."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvertex_argb(buff, $FFFFFFFF);\n```\nThe above code will set the ARGB values of the vertex being defined to white.\n",
      "description": "This function will set the ARGB (tooltip) values for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the red, green, blue and alpha values\n    that you wish to use as a single 32-bit unsigned integer - alpha sample in the highest 8 bits, followed by the red sample, green sample and finally the blue sample in the lowest 8 bits. You can use hex notation ($AARRGGBB) a real number or use any\n    of the `make_colour_*()` functions to define the colour value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_argb.htm"
    },
    "vertex_begin": {
      "name": "vertex_begin",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to be written to."
        },
        {
          "parameter": "format",
          "description": "The vertex format to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_position();\n     vertex_format_add_colour();\n     vertex_format_add_textcoord();\n     v_format = vertex_format_end(); v_buff = vertex_create_buffer(); vertex_begin(v_buff, v_format);\n```\nThe above code will define a new vertex format, create a new buffer and start the definition process of a new primitive.\n",
      "description": "With this function you begin the definition of a custom primitive. You assign a buffer to write the primitive to, and the vertex format to use (previously defined using the vertex format functions). You would then define the necessary points for each\n    vertex of the primitive before calling `vertex_end()` to finalise the primitive creation.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_begin.htm"
    },
    "vertex_colour": {
      "name": "vertex_colour",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "colour",
          "description": "The colour for this vertex (can be a constant or a hex value)."
        },
        {
          "parameter": "alpha",
          "description": "The alpha value for the vertex (from 0 to 1)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvertex_colour(b, c_white, 1);\n```\nThe above code will set the vertex being defined to be white with an alpha value of 1.\n",
      "description": "If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a  [colour constant](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm),\n    or a hex value (using the standard GameMaker Studio 2 format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_colour.htm"
    },
    "vertex_create_buffer": {
      "name": "vertex_create_buffer",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nv_buff = vertex_create_buffer();\n```\nThe above code will create a new a new vertex buffer and store its handle in the variable \"v_buff\".\n",
      "description": "With this function you can create a new vertex buffer. This is a special *grow* buffer created by GameMaker Studio 2 which is pre-formatted for use when building primitives (for use with shaders, for example). The function will return a\n    \"Pointer\" (index) for the buffer which should then be used in all further calls to it.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer.htm"
    },
    "vertex_create_buffer_ext": {
      "name": "vertex_create_buffer_ext",
      "parameters": [
        {
          "parameter": "size",
          "description": "The initial size of the buffer (in bytes)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nv_buff = vertex_create_buffer_ext(1024 * 1024);\n```\nThe above code will create a new vertex buffer, initially 1MB in size, and store its handle in the variable \"v_buff\".\n",
      "description": "As with the function `vertex_create_buffer()`, this function will create a new vertex buffer. This is a special *grow* buffer created by GameMaker Studio 2 which is pre-formatted for use when\n    building primitives for use with shaders. You can specify an initial starting size for the buffer (in bytes) and it will return a \"handle\" (index) for the buffer which should then be used in all further calls to the buffer.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer_ext.htm"
    },
    "vertex_create_buffer_from_buffer": {
      "name": "vertex_create_buffer_from_buffer",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to create the vertex buffer from."
        },
        {
          "parameter": "format",
          "description": "The primitive vertex format to use."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_position_3d();\n     vertex_format_add_colour();\n     vertex_format_add_textcoord();\n     var my_format = vertex_format_end(); v_buff = vertex_create_buffer_from_buffer(global.modelBuff, myFormat);\n```\nThe above code will create a new vertex format then create a new vertex buffer from a previously created regular buffer, applying the custom vertex format to it.\n",
      "description": "As with the function `vertex_create_buffer()`, this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer\n    created is a special *grow* buffer which is pre-formatted with the vertex format for building primitives for use with (for example) shaders. This function requires that you supply the pointer to a previously created regular buffer, and a vertex\n    format that should be applied to the copied data.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer_from_buffer.htm"
    },
    "vertex_create_buffer_from_buffer_ext": {
      "name": "vertex_create_buffer_from_buffer_ext",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to create the vertex buffer from."
        },
        {
          "parameter": "format",
          "description": "The primitive vertex format to use."
        },
        {
          "parameter": "src_offset",
          "description": "The offset within the the source buffer to copy from."
        },
        {
          "parameter": "vert_num",
          "description": "The number of vertices the buffer should have."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_position_3d();\n     vertex_format_add_colour();\n     vertex_format_add_textcoord();\n     var my_format = vertex_format_end(); v_buff = vertex_create_buffer_from_buffer(global.modelBuff, myFormat, 0, 512);\n```\nThe above code will create a new vertex format then create a new vertex buffer from a previously created regular buffer, applying the custom vertex format to it with 0 offset. The function tells the new vertex buffer that it should expect 512 vertices.\n",
      "description": "As with the function `vertex_create_buffer()`, this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer\n    is pre-formatted with the vertex format for building primitives for use with (for example) shaders, and you can also supply an offset within the source buffer to copy from and the number of vertices that the final buffer should have. Note that if\n    the number of vertices does not match those being copied you may get corrupted vertex data.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_create_buffer_from_buffer_ext.htm"
    },
    "vertex_delete_buffer": {
      "name": "vertex_delete_buffer",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to be removed."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvertex_delete_buffer(v_buff);\n```\nThe above code will delete from memory the buffer indexed in the variable \"v_buff\".\n",
      "description": "This function can be used to remove a previously created vertex buffer (see `vertex_create_buffer()`) from system memory. This will also remove all vertex data for any custom primitives that it contained.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_delete_buffer.htm"
    },
    "vertex_end": {
      "name": "vertex_end",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to end writing to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvertex_end(buff);\n```\nThe above code will end the defining of a custom primitive.\n",
      "description": "With this function you end the building of the custom primitive. Once you call this command the primitive can be used in the `vertex_submit()` function for use in a shader or you can freeze the buffer (making the\n    vertex buffer used read-only and much faster) using `vertex_freeze()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_end.htm"
    },
    "vertex_float1": {
      "name": "vertex_float1",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "float",
          "description": "The input value."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvertex_float1(buff, 0.05);\n```\nThe above code will add a floating point value to the vertex data being defined.\n",
      "description": "This function will add a floating point value to the vertex data. The vertex must have been formatted correctly to accept this using the `vertex_format_add_custom()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float1.htm"
    },
    "vertex_float2": {
      "name": "vertex_float2",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "float",
          "description": "The first input value."
        },
        {
          "parameter": "float",
          "description": "The second input value."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvertex_float2(buff, 0.05, 0.01);\n```\nThe above code will add two floating point values to the vertex data being defined.\n",
      "description": "This function will add two floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the `vertex_format_add_custom()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float2.htm"
    },
    "vertex_float3": {
      "name": "vertex_float3",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "float",
          "description": "The first input value."
        },
        {
          "parameter": "float",
          "description": "The second input value."
        },
        {
          "parameter": "float",
          "description": "The third input value."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvertex_float3(buff, 0.05, 0.01, room_width / x);\n```\nThe above code will add three floating point values to the vertex data being defined.\n",
      "description": "This function will add three floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the `vertex_format_add_custom()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float3.htm"
    },
    "vertex_float4": {
      "name": "vertex_float4",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "float",
          "description": "The first input value."
        },
        {
          "parameter": "float",
          "description": "The second input value."
        },
        {
          "parameter": "float",
          "description": "The third input value."
        },
        {
          "parameter": "float",
          "description": "The fourth input value."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvertex_float4(buff, 0.05, 0.01, room_width / x, room_height / y);\n```\nThe above code will add four floating point values to the vertex data being defined.\n",
      "description": "This function will add four floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the `vertex_format_add_custom()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_float4.htm"
    },
    "vertex_format_add_colour": {
      "name": "vertex_format_add_colour",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_colour();\n     vertex_format_add_position();\n     my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just colour and position values and then store the format id in the variable \"my_format\".\n",
      "description": "Tell GameMaker Studio 2 to accept colour data as part of the new vertex format being created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"
    },
    "vertex_format_add_custom": {
      "name": "vertex_format_add_custom",
      "parameters": [
        {
          "parameter": "type",
          "description": "The data type that this custom vertex data will hold (see the *type constants* listed below)."
        },
        {
          "parameter": "usage",
          "description": "The use that the data will get(see the *usage constants* listed below)."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvertex_format_begin();\n    vertex_format_add_textcoord();\n    vertex_format_add_custom(vertex_type_float3, vertex_usage_position);\n    my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just texture and 3 custom floating point values for position. It is then stores the format id in the variable \"my_format\".\n",
      "description": "This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm"
    },
    "vertex_format_add_normal": {
      "name": "vertex_format_add_normal",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_textcoord();\n     vertex_format_add_normal();\n     my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just texture and surface normal values and then store the format id in the variable \"my_format\".\n",
      "description": "Tell GameMaker Studio 2 to accept surface normal data (nx, ny and nz) as part of the new vertex format being created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_normal.htm"
    },
    "vertex_format_add_position": {
      "name": "vertex_format_add_position",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_colour();\n     vertex_format_add_position();\n     my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just colour and position values and then store the format id in the variable \"my_format\".\n",
      "description": "Tell GameMaker Studio 2 to accept 2D positional data (x and y) as part of the new vertex format being created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm"
    },
    "vertex_format_add_position_3d": {
      "name": "vertex_format_add_position_3d",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_colour();\n     vertex_format_add_position_3d();\n     my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just colour and position values and then store the format id in the variable \"my_format\".\n",
      "description": "Tell GameMaker Studio 2 to accept 3D positional data (x, y and z) as part of the new vertex format being created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm"
    },
    "vertex_format_add_texcoord": {
      "name": "vertex_format_add_texcoord",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin();\n    vertex_format_add_texcoord();\n    vertex_format_add_position_3d();\n    my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just texture and position values and then store the format id in the variable \"my_format\".\n",
      "description": "Tell GameMaker Studio 2 to accept texture position data (u and v) as part of the new vertex format being created.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"
    },
    "vertex_format_begin": {
      "name": "vertex_format_begin",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_colour();\n     vertex_format_add_position();\n     my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just colour and position values and then store the format id in the variable \"my_format\".\n",
      "description": "Before you can define your new vertex format you must tell GameMaker Studio 2 that you're doing so using this function. You must call this first, then define the format values using the appropriate functions, and finally call `vertex_format_end()`    to finish the definition and return the new format \"handle\".",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_begin.htm"
    },
    "vertex_format_delete": {
      "name": "vertex_format_delete",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_delete(myFormat);\n```\nThe above code will remove the vertex format created in the variable \"myFormat\" from memory.\n",
      "description": "This function must be called whenever you are finished using any created vector formats. You provide the format ID value (as returned by the function `vector_format_end()`), and this function will free the\n    memory associated with it. Note that if you try to use this format again after calling this function, you will get an error.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"
    },
    "vertex_format_end": {
      "name": "vertex_format_end",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nvertex_format_begin(); vertex_format_add_colour();\n     vertex_format_add_position();\n     my_format = vertex_format_end();\n```\nThe above code will create a new vertex format with just colour and position values and then store the format id in the variable \"my_format\".\n",
      "description": "This function must be called after defining any new vertex format. It returns the new format \"handle\" (index) which must be used in all further vertex functions that refer to this new format.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_end.htm"
    },
    "vertex_freeze": {
      "name": "vertex_freeze",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The vertex buffer to freeze."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\n// Create event\n    vertex_freeze(vbuff);\n```\nThe above code will freeze the given vertex buffer in the Create event, so it can be used as a \"static\" buffer in other events for faster access.\n",
      "description": "This function can be used to \"freeze\" a vertex buffer. This buffer becomes **read-only**, meaning that should you need to change it, you would have to delete the whole buffer and re-create it. A frozen buffer can be submitted to the shader faster than a normal, dynamic buffer and is recommended for those effects that require an unchanging custom primitive for the duration of a level or the game.",
      "returns": "Real```\n (0 for success, -1 for failure)\n```",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_freeze.htm"
    },
    "vertex_get_buffer_size": {
      "name": "vertex_get_buffer_size",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to get the size of."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nbufferBytes = vertex_get_buffer_size(buff);\n```\nThe above code will get the number of bytes used by the vertex buffer given and store the value in the variable \"bufferBytes\".\n",
      "description": "With this function you can get the size of the given vertex buffer in bytes.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_get_buffer_size.htm"
    },
    "vertex_get_number": {
      "name": "vertex_get_number",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The vertex buffer to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nv_num = vertex_get_number(v_buffer);\n```\nThe above code will store the number of vertices stored in the given vertex buffer to a variable.\n",
      "description": "With this function you can find out the number of individual vertices defined in any given vertex buffer.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_get_number.htm"
    },
    "vertex_normal": {
      "name": "vertex_normal",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "nx",
          "description": "The x component of the surface normal."
        },
        {
          "parameter": "ny",
          "description": "The y component of the surface normal."
        },
        {
          "parameter": "nz",
          "description": "The z component of the surface normal."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvertex_normal(buff, 0, 1, 1);\n```\nThe above code will set the surface normal of the vertex being defined.\n",
      "description": "This function will add surface normal data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z component parts of the normal.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_normal.htm"
    },
    "vertex_position": {
      "name": "vertex_position",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "x",
          "description": "The x position."
        },
        {
          "parameter": "y",
          "description": "The y position."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvertex_position(buff, x - 100, y - 125);\n```\nThe above code will set the position of the vertex being defined.\n",
      "description": "This function will add 2D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x and y position for drawing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_position.htm"
    },
    "vertex_position_3d": {
      "name": "vertex_position_3d",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "x",
          "description": "The x position."
        },
        {
          "parameter": "y",
          "description": "The y position."
        },
        {
          "parameter": "z",
          "description": "The z position."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvertex_position_3d(buff, x - 100, y - 125, 0);\n```\nThe above code will set the position of the vertex being defined.\n",
      "description": "This function will add 3D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z position for drawing.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_position_3d.htm"
    },
    "vertex_submit": {
      "name": "vertex_submit",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to use."
        },
        {
          "parameter": "primitive",
          "description": "The primitive base type."
        },
        {
          "parameter": "texture",
          "description": "The texture to use (or -1 for no texture)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nshader_set(shader_prim); vertex_submit(buff, pr_trianglelist, sprite_get_texture(sprite_index)); shader_reset();\n  \n```\nThe above code will submit the vertex buffer indexed in the variable \"buff\" for drawing with the shader \"shader_prim\", using a triangle list as the base primitive and the texture of the sprite for the instance running the code.\n",
      "description": "You can use this function to submit the contents of a vertex buffer to the graphics pipeline for use with a shader. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The\n    base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm"
    },
    "vertex_texcoord": {
      "name": "vertex_texcoord",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "u",
          "description": "The first texture coordinate to use (0 - 1)."
        },
        {
          "parameter": "v",
          "description": "The second texture coordinate to use (0 - 1)."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvertex_texcoord(buff, 0, 0);\n```\nThe above code will set the UV values of the vertex being defined.\n",
      "description": "This function will set the texture coordinates to use for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the UV position within the texture to use.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_texcoord.htm"
    },
    "vertex_ubyte4": {
      "name": "vertex_ubyte4",
      "parameters": [
        {
          "parameter": "buffer",
          "description": "The buffer to write the information to."
        },
        {
          "parameter": "byte",
          "description": "The first input value."
        },
        {
          "parameter": "byte",
          "description": "The second input value."
        },
        {
          "parameter": "byte",
          "description": "The third input value."
        },
        {
          "parameter": "byte",
          "description": "The fourth input value."
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvertex_ubyte4(buff, irandom(255), irandom(255), irandom(255), 127);\n```\nThe above code will add four values to the vertex data being defined.\n",
      "description": "This function will add four unsigned byte values (0 - 255) to the vertex data. The vertex must have been formatted correctly to accept this using the `vertex_format_add_custom()` function.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_ubyte4.htm"
    },
    "view_get_camera": {
      "name": "view_get_camera",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar cam = view_get_camera(0); var cw = camera_get_view_width(cam); var ch = camera_get_view_height(cam); camera_set_view_pos(cam, mouse_x - (cw / 2), mouse_y - (ch / 2));\n```\nThe above code will retrieve the camera ID for the camera assigned to view port[0] and then change its position.\n",
      "description": "This function can be used to retrieve the unique camera ID value for the camera assigned to the given view port (from 0 - 7). If no camera is assigned, the function will return -1.",
      "returns": "Camera index (Real)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_camera.htm"
    },
    "view_get_hport": {
      "name": "view_get_hport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_get_hport(0) != (display_get_height () / 2)     {\n         view_set_hport(0, display_get_height() / 2);     }\n  \n```\nThe above code will check the height of the view port[0] and if it is not half of the display height it is set to that value.\n",
      "description": "This function can be used to retrieve the height of the given view port.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_hport.htm"
    },
    "view_get_surface_id": {
      "name": "view_get_surface_id",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_get_surface_id(0) == -1     {\n         view_set_surface_id(0, global.vSurf);     }\n  \n```\nThe above code will check to see if a surface has been assigned to the view port[0] and if it has not then one is assigned.\n",
      "description": "This function can be used to retrieve the unique ID value for the surface assigned to the given view port (will return -1 if no surface has been assigned).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_surface_id.htm"
    },
    "view_get_visible": {
      "name": "view_get_visible",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !view_get_visible(0)     {     view_set_visible(0, true);     }\n  \n```\nThe above code will check to see if the view port[0] is visible and if it is not it is set to visible.\n",
      "description": "This function can be used to check the visibility of the given view port. The function will return `true` if it is visible and `false` if it is not.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_visible.htm"
    },
    "view_get_wport": {
      "name": "view_get_wport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_get_wport(0) != (display_get_width () / 2)     {\n         view_set_wport(0, display_get_width() / 2);     }\n  \n```\nThe above code will check the width of the view port[0] and if it is not half of the display width it is set to that value.\n",
      "description": "This function can be used to retrieve the width of the given view port.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_wport.htm"
    },
    "view_get_xport": {
      "name": "view_get_xport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_get_xport(0) != (display_get_width() / 2) - (view_wport[0] / 2)     {\n         view_set_xport(0, (display_get_width() / 2) - (view_wport[0] / 2));     }\n  \n```\nThe above code will check the x position of the view port[0] and if it is not where it is required to be it is set to that position.\n",
      "description": "This function can be used to retrieve the x position of the given view port.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_xport.htm"
    },
    "view_get_yport": {
      "name": "view_get_yport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif view_get_yport(0) != (display_get_height() / 2) - (view_hport[0] / 2)     {\n         view_set_yport(0, (display_get_height() / 2) - (view_hport[0] / 2));     }\n  \n```\nThe above code will check the y position of the view port[0] and if it is not where it is required to be it is set to that position.\n",
      "description": "This function can be used to retrieve the y position of the given view port.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_get_yport.htm"
    },
    "view_set_camera": {
      "name": "view_set_camera",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        },
        {
          "parameter": "camera_id",
          "description": "The unique camera ID value returned when you created the camera"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar cam = camera_create_view(0, 0, 640, 480, 0, obj_Player, 5, 5, -1, -1); view_set_camera(0, cam);\n```\nThe above code will create a new camera and then assign it view port[0].\n",
      "description": "This function will set a camera to a specific view port. You give the view port to set (from 0 to 7), and supply the unique camera ID value (as returned by the `camera_create()` functions or when you use `view_get_camera()`).\n    If you give a value of -1 as the camera ID then you are removing a camera from the view port and note that if that view port is enabled and visible you may get some unpredictable results.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_camera.htm"
    },
    "view_set_hport": {
      "name": "view_set_hport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        },
        {
          "parameter": "h",
          "description": "The new height (in pixels)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif view_get_hport(0) != (display_get_height () / 2)\n    {\n        view_set_hport(0, display_get_height() / 2);\n    }\n```\nThe above code will check the height of the view port[0] and if it is not half of the display height it is set to that value.\n",
      "description": "This function can be used to set the height of the given view port. You give the view port index (from 0 to 7) and the new height to use.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_hport.htm"
    },
    "view_set_surface_id": {
      "name": "view_set_surface_id",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif view_get_surface_id(0) == -1\n    {\n        view_set_surface_id(0, global.vSurf);\n    }\n```\nThe above code will check to see if a surface has been assigned to the view port[0] and if it has not then one is assigned.\n",
      "description": "With this variable you can set the contents of a view port to draw to a surface. When working with surfaces, it is often required to capture the *whole* visible region of the screen to the surface, and so you would assign it to a view port using this function. This means that everything that is shown in the chosen view port will now be drawn to the assigned surface and the contents of that view port will no longer be displayed, meaning that you will need to either:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_surface_id.htm"
    },
    "view_set_visible": {
      "name": "view_set_visible",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        },
        {
          "parameter": "visible",
          "description": "Visibility toggle (`true` is visible and `false` is invisible)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif !view_get_visible(0)     {     view_set_visible(0, true);     }\n  \n```\nThe above code will check to see if the view port[0] is visible and if it is not it is set to visible.\n",
      "description": "This function can be used to set the visibility of the given view port. The function takes the view port index (from 0 to 7) and a boolean `true` if it is visible and `false` if it is not.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_visible.htm"
    },
    "view_set_wport": {
      "name": "view_set_wport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        },
        {
          "parameter": "w",
          "description": "The new width (in pixels)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif view_get_wport(0) != (display_get_width () / 2)\n    {\n        view_set_wport(0, display_get_width() / 2);\n    }\n```\nThe above code will check the width of the view port[0] and if it is not half of the display width it is set to that value.\n",
      "description": "This function can be used to set the width of the given view port. You give the view port index (from 0 to 7) and the new width to use.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_wport.htm"
    },
    "view_set_xport": {
      "name": "view_set_xport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        },
        {
          "parameter": "x",
          "description": "The new x position"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif view_get_xport(0) != (display_get_width() / 2) - (view_wport[0] / 2)     {\n         view_set_xport(0, (display_get_width() / 2) - (view_wport[0] / 2));     }\n  \n```\nThe above code will check the x position of the view port[0] and if it is not where it is required to be it is set to that position.\n",
      "description": "This function can be used to set the x position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_xport.htm"
    },
    "view_set_yport": {
      "name": "view_set_yport",
      "parameters": [
        {
          "parameter": "view_port",
          "description": "The view port to target (0 - 7)"
        },
        {
          "parameter": "y",
          "description": "The new y position"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif view_get_yport(0) != (display_get_height() / 2) - (view_hport[0] / 2)     {\n         view_set_yport(0, (display_get_height() / 2) - (view_hport[0] / 2));     }\n  \n```\nThe above code will check the y position of the view port[0] and if it is not where it is required to be it is set to that position.\n",
      "description": "This function can be used to set the y position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_set_yport.htm"
    },
    "virtual_key_add": {
      "name": "virtual_key_add",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate (left side) of the virtual key *on the screen*"
        },
        {
          "parameter": "y",
          "description": "The y coordinate (top side) of the virtual key *on the screen*"
        },
        {
          "parameter": "w",
          "description": "The width of the virtual key"
        },
        {
          "parameter": "h",
          "description": "The height of the virtual key"
        },
        {
          "parameter": "keycode",
          "description": "Which keyboard key event should be triggered by touching this area"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nglobal.Left = virtual_key_add(32, 32, 64, 64, vk_left);\n```\nThe above code creates a virtual key 64x64 pixels square, positioned on the screen at (32, 32) which will trigger the vk_left event when touched and assigns the index of this virtual key to a global variable.\n",
      "description": "This function enables you to map \"touches\" of a screen area to keyboard events. This means that once you have assigned an area to a virtual key, all touches on that area will trigger the keyboard event corresponding to the key you have mapped\n    to the area. You can assign each virtual key you define to a variable too, which can then be used in the further virtual key functions to show, hide and delete them. These keys are assigned on a *per room* basis and will be automatically removed\n    by GameMaker Studio 2 when changing rooms.",
      "returns": "index of virtual key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_add.htm"
    },
    "virtual_key_delete": {
      "name": "virtual_key_delete",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the virtual key to delete."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvirtual_key_delete(global.Left);\n```\nThe above code deletes the virtual key indexed in the global variable \"global.Left\".\n",
      "description": "If your game has different rooms or instances to control menus and game-play and other things, then it is probable that you will need to change the position and key maps of your virtual keys at some point. For that you can use this function to delete\n    the old ones before creating the new ones (if necessary). The function requires that you supply the ID of the virtual key to delete - as returned by virtual_key_add().",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_delete.htm"
    },
    "virtual_key_hide": {
      "name": "virtual_key_hide",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the virtual key to hide."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif global.Debug\n    {\n        virtual_key_show(global.Left);\n    }\n    else\n    {\n        virtual_key_hide(global.Left);\n    }\n```\nThe above code checks the global variable \"global.Debug\" and if it tests true then the virtual key indexed in the variable \"global.Left\" will be drawn on the screen, and if it is false then the key will be hidden.\n",
      "description": "Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly and for that you would call the function `virtual_key_show()`. However, you may need to toggle this view on and off, so you can also hide the virtual key with this function, using the index of the virtual key that you want to hide (previously created and stored using `virtual_key_add()`). Once you are happy with things it is recommended that you create and place your own graphic in its area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_hide.htm"
    },
    "virtual_key_show": {
      "name": "virtual_key_show",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index of the virtual key to show."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif global.Debug\n    {\n        virtual_key_show(global.Left);\n    }\n    else\n    {\n        virtual_key_hide(global.Left);\n    }\n```\nThe above code checks the global variable \"global.Debug\" and if it tests true then the virtual key indexed in the variable \"global.Left\" will be drawn on the screen, and if it is false then the key will be hidden.\n",
      "description": "Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly. For that you would call this function, using the index of the virtual key that you want to see (previously created and stored using `virtual_key_add()`) which will draw a coloured rectangle to represent the key on the screen. Once you are happy with things it is recommended that you create and place your own graphic in its area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/virtual_key_show.htm"
    },
    "weak_ref_alive": {
      "name": "weak_ref_alive",
      "parameters": [
        {
          "parameter": "weak_ref",
          "description": "The weak reference to the struct you want to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif weak_ref_alive(inventory_ref)\n    {\n        inventory = -1;\n    }\n```\nThe above code checks a weak reference to a struct and if it is still alive the variable referencing it is set to -1, de-referencing the struct and enabling it to be garbage collected.\n",
      "description": "With this function you can check the weak reference (tooltip) to a struct to see if it is still \"alive\" or not. You supply the weak reference to check (as returned by the function weak_ref_create()), and the function will return true if the struct is still being referenced somewhere or false if it's not and has been garbage collected. Note that if you supply a value that is not a weak reference, the function will return undefined.",
      "returns": "Boolean (or undefined)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_alive.htm"
    },
    "weak_ref_any_alive": {
      "name": "weak_ref_any_alive",
      "parameters": [
        {
          "parameter": "weak_ref",
          "description": "The weak reference to the struct you want to check."
        },
        {
          "parameter": "[index]",
          "description": "OPTIONAL! The index into the array to start checking from"
        },
        {
          "parameter": "[length]",
          "description": "OPTIONAL! The number of positions from the given index to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif weak_ref_any_alive(inventory_ref_array)\n    {\n        instance_destroy(obj_Inventory_Control);\n    }\n```\nThe above code checks an array of weak references and if any are still alive then an instance is destroyed.\n",
      "description": "With this function you can check the weak reference (tooltip) to various structs to see if it they are still \"alive\" or not. You supply an array of weak references to check (each weak reference should have been created using the function weak_ref_create()), and the function will return true if **any **of the structs are still being referenced somewhere or false if they are not and have been garbage collected. Note that if you supply an array where any of the values are not a weak references, the function will return undefined.",
      "returns": "Boolean (or undefined)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_any_alive.htm"
    },
    "weak_ref_create": {
      "name": "weak_ref_create",
      "parameters": [
        {
          "parameter": "struct_to_track",
          "description": "The struct that you want to create a weak reference for"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\ninventory_ref = weak_ref_create(inventory);\n```\nThe above code creates a weak reference to a struct and stores it in an instance variable for later use.\n",
      "description": "With this function you can create a weak reference (tooltip) to a struct which can then be used to check if the struct is still \"alive\" (referenced) or not in the game. You supply the reference to the struct you want to track, and the function will return another struct which is a weak reference to that struct. Note that you can check whether a reference is \"strong\" or \"weak\" by using the function  [instanceof()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Variable_Functions/instanceof.htm), as a strong reference will return either \"struct\" or the name of the constructor function that created the struct, or \"weakref\" if it's a weak reference. Also note that the weak reference struct will have a variable \"ref\" which can be accessed to get the strong reference to the struct in question, unless it has been garbage collected, in which case it will return undefined.",
      "returns": "Struct",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Garbage_Collection/weak_ref_create.htm"
    },
    "window_center": {
      "name": "window_center",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !window_get_fullscreen()\n    {\n        window_center();\n    }\n```\nThe above code will center the game window within the display if it is not in full screen mode.\n",
      "description": "With this function you can center the game window in the display when the target module is Windows, Ubuntu (Linux) or macOS, or you can center it in the browser if the target module is HTML5. This function has no effect on any other device.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_center.htm"
    },
    "window_device": {
      "name": "window_device",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\ngfx_pointer = window_device();\n```\nThe above code will store the d3d device pointer in a variable.\n",
      "description": "This function will return the current d3d device *pointer*, which you can then (for example) pass through to a DLL or Dylib on Windows and macOS.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_device.htm"
    },
    "window_get_caption": {
      "name": "window_get_caption",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif window_get_caption() != \"\"\n    {\n        window_set_caption(\"\");\n    }\n```\nThe above code will check the windows caption to see if it has text or not, and if it does it sets it to an empty string so as no caption is displayed.\n",
      "description": "This function returns the caption of the window (this is the text that appears on the top of the window, beside its icon) and by default this shows the caption of the room you're currently in.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_caption.htm"
    },
    "window_get_colour": {
      "name": "window_get_colour",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif window_get_colour() != c_black\n    {\n        window_set_colour(c_black);\n    }\n```\nThe above code will check the window colour to see if it is set as black or not, and if it is not it sets it to black.\n",
      "description": "This function returns the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_colour.htm"
    },
    "window_get_cursor": {
      "name": "window_get_cursor",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        if window_get_cursor() != cr_drag window_set_cursor(cr_drag);\n    }\n```\nThe above code will change the window cursor to the standard windows drag cursor if the left mouse button has been pressed and it has not already been changed previously.\n",
      "description": "With this function you can get the current cursor being used in the game window, with the return value being any one of the constants listed below (to set the current cursor being used you can use the function `window_set_cursor()` which also takes these constants):",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_cursor.htm"
    },
    "window_get_fullscreen": {
      "name": "window_get_fullscreen",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif window_get_fullscreen()\n    {\n        draw_text(32, 32, \"Fullscreen is ON\");\n    }\n    else\n    {\n        draw_text(32, 32, \"Fullscreen is OFF\");\n    }\n```\nThe above code will check to see if the window is in full screen mode or not and draw a text message depending on the returned value.\n",
      "description": "This function returns whether the game window is in fullscreen mode (`true`) or not (`false`).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_fullscreen.htm"
    },
    "window_get_height": {
      "name": "window_get_height",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nhh = window_get_height();\n```\nThe above code will store the current window height in the variable \"hh\".\n",
      "description": "With this function you can get the current height (in pixels) of the game window.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_height.htm"
    },
    "window_get_visible_rects": {
      "name": "window_get_visible_rects",
      "parameters": [
        {
          "parameter": "x1",
          "description": "The left edge of the rectangle to check"
        },
        {
          "parameter": "y1",
          "description": "The top edge of the rectangle to check."
        },
        {
          "parameter": "x2",
          "description": "The right edge of the rectangle to check"
        },
        {
          "parameter": "y2",
          "description": "The bottom edge of the rectangle to check."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar wx = window_get_x(); var wy = window_get_y(); var ww = window_get_width(); var wh = window_get_height(); display_data = window_get_visible_rects(wx, wy, wx + ww, wy + wh); display_num = array_length(display_data) / 8;\n```\nThe above code will generate a 1D array held in the variable `display_data` containing the information about the displays, as well as create the variable `display_num` to hold the number of active displays found.\n",
      "description": "With this function you can find the overlapping region of the rectangle defined by (x1,y1) to (x2,y2) on each of the attached displays. The function will return an array with 8 values per display (ie: if you have two displays, the array will have a\n    length of 16 indices), where the values [0 ... 3] correspond to the overlapx1, overlapy1, overlapx2, overlapy2 - defining the region of overlap on this display and will be set to 0,0,0,0 if no overlap - and the values [4 ... 7] corresponds to the\n    monitorx1, monitory1, monitorx2, monitory2 - the coordinates of the display in the virtual display space. This can be used to test whether a saved window position is going to be visible or not (the user may have disconnected an external monitor or\n    moved the window off screen which left the window position that was saved as not being valid), for example.",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_visible_rects.htm"
    },
    "window_get_width": {
      "name": "window_get_width",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nww = window_get_width();\n```\nThe above code will store the current window width in the variable \"ww\".\n",
      "description": "With this function you can get the current width (in pixels) of the game window.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_width.htm"
    },
    "window_get_x": {
      "name": "window_get_x",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nwx = window_get_x();\n```\nThe above code stores the current x axis window position in the variable \"wx\".\n",
      "description": "With this function you can get the x position (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_x.htm"
    },
    "window_get_y": {
      "name": "window_get_y",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nwy = window_get_y();\n```\nThe above code stores the current y axis window position in the variable \"wy\".\n",
      "description": "With this function you can get the y position (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_get_y.htm"
    },
    "window_handle": {
      "name": "window_handle",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nwin_id = windows_handle();\n```\nThe above code will store the game window id in a variable.\n",
      "description": "With this function you can get the internal Windows id value (the HWND, a *pointer*). This function is really only useful for extension writers who need the `window handle` to call Windows API's in DLL code (the returned pointer should\n    be cast into a string and then in the C++ just cast it to an HWND). The table below shows the platforms supported along with what they return:",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_handle.htm"
    },
    "window_has_focus": {
      "name": "window_has_focus",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !window_has_focus()\n    {\n        PauseGame();\n    }\n```\nThe above code will check to see if the game window is in focus or not, and if the function returns `false` a function will be called.\n",
      "description": "With this function you can poll the window (or tab) state and if it loses focus the function will return `false` otherwise it will return `true`. In most cases you can simply use the `os_is_paused()` function to test this, but in some very specific cases (for example games on Chrome Apps) that function will not trigger, in which case you should use this function instead.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_has_focus.htm"
    },
    "window_mouse_get_x": {
      "name": "window_mouse_get_x",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nwx = window_mouse_get_x();\n```\nThe above code stores the current x axis window position of the mouse in the variable \"wx\".\n",
      "description": "With this function you can get the x position of the mouse cursor (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_mouse_get_x.htm"
    },
    "window_mouse_get_y": {
      "name": "window_mouse_get_y",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nwy = window_mouse_get_y();\n```\nThe above code stores the current y axis window position of the mouse in the variable \"wy\".\n",
      "description": "With this function you can get the y position of the mouse cursor (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_mouse_get_y.htm"
    },
    "window_mouse_set": {
      "name": "window_mouse_set",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate in the window."
        },
        {
          "parameter": "y",
          "description": "The y coordinate in the window."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwindow_mouse_set(window_get_width() / 2, window_get_height() / 2);\n```\nThe above code would center the mouse in the game window.\n",
      "description": "With this function you can change or set the position of the mouse within the game window which can be useful for FPS games, for example. The function will only work while the game is in focus and using alt + tab will unlock the mouse.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_mouse_set.htm"
    },
    "window_set_caption": {
      "name": "window_set_caption",
      "parameters": [
        {
          "parameter": "caption",
          "description": "The new caption."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif window_get_caption() != \"\"\n    {\n        window_set_caption(\"\");\n    }\n```\nThe above code will check the windows caption to see if it has text or not, and if it does it sets it to an empty string so as no caption is displayed.\n",
      "description": "With this function you can change or set the windows caption for the room that you are currently in. This caption appears at the top of the window, beside the game icon, when the game is not in full screen mode.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_caption.htm"
    },
    "window_set_colour": {
      "name": "window_set_colour",
      "parameters": [
        {
          "parameter": "colour",
          "description": "The colour to set the region."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif window_get_colour() != c_black\n    {\n        window_set_colour(c_black);\n    }\n```\nThe above code will check the window colour to see if it is set as black or not, and if it is not it sets it to black.\n",
      "description": "This function can set the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_colour.htm"
    },
    "window_set_cursor": {
      "name": "window_set_cursor",
      "parameters": [
        {
          "parameter": "cursor",
          "description": "The cursor to set for the game window."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        window_set_cursor(cr_drag);\n    }\n```\nThe above code will change the window cursor to the standard windows drag cursor if the left mouse button has been pressed.\n",
      "description": "With this function you can set the cursor for the game window to any one of the constants listed below (to find the current cursor being used you can use the function `window_get_cursor()` which will also return one of these constants):",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_cursor.htm"
    },
    "window_set_fullscreen": {
      "name": "window_set_fullscreen",
      "parameters": [
        {
          "parameter": "full",
          "description": "Whether to set the screen to fullscreen (true) or not (false)."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        if window_get_fullscreen()\n        {\n            window_set_fullscreen(false);\n        }\n        else\n        {\n            window_set_fullscreen(true);\n        }\n    }\n```\nThe above code checks for a mouse button press and then sets the window to fullscreen if it is not already, or sets it to windowed if it is already.\n",
      "description": "With this function you can set the game window to be full screen (`true`) or not (`false`). Please note that for the **macOS** target, you *must* have unchecked the \"Start In Fullscreen\" option and checked the \"Allow the player to resize the game window\" option in the  [Game Options](https://manual.yoyogames.com/Settings/Game_Options.htm), otherwise this function will fail. Also note that this function will *not* work on HTML5 unless it's added in as a \"clickable\" callback (see  [here](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/clickable_add.htm) for more details).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_fullscreen.htm"
    },
    "window_set_max_height": {
      "name": "window_set_max_height",
      "parameters": [
        {
          "parameter": "height",
          "description": "The maximum height in pixels for the game window."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nwindow_set_min_width(640); window_set_min_height(480);\n     window_set_max_width(1280);\n     window_set_max_height(960);\n  \n```\nThe above code will set the minimum and maximum width and height for the game window.\n",
      "description": "This function can be used to set a maximum window height for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function\n    you can limit the maximum height to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_max_height.htm"
    },
    "window_set_max_width": {
      "name": "window_set_max_width",
      "parameters": [
        {
          "parameter": "width",
          "description": "The maximum width in pixels for the game window."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nwindow_set_min_width(640); window_set_min_height(480);\n     window_set_max_width(1280);\n     window_set_max_height(960);\n  \n```\nThe above code will set the minimum and maximum width and height for the game window.\n",
      "description": "This function can be used to set a maximum window width for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function\n    you can limit the maximum width to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_max_width.htm"
    },
    "window_set_min_height": {
      "name": "window_set_min_height",
      "parameters": [
        {
          "parameter": "height",
          "description": "The minimum height in pixels for the game window."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nwindow_set_min_width(640); window_set_min_height(480);\n     window_set_max_width(1280);\n     window_set_max_height(960);\n  \n```\nThe above code will set the minimum and maximum width and height for the game window.\n",
      "description": "This function can be used to set a minimum window height for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function\n    you can limit the minimum height to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_min_height.htm"
    },
    "window_set_min_width": {
      "name": "window_set_min_width",
      "parameters": [
        {
          "parameter": "width",
          "description": "The minimum width in pixels for the game window."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nwindow_set_min_width(640); window_set_min_height(480);\n     window_set_max_width(1280);\n     window_set_max_height(960);\n  \n```\nThe above code will set the minimum and maximum width and height for the game window.\n",
      "description": "This function can be used to set a minimum window width for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function\n    you can limit the minimum width to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_min_width.htm"
    },
    "window_set_position": {
      "name": "window_set_position",
      "parameters": [
        {
          "parameter": "x",
          "description": "The x coordinate of where to position the window."
        },
        {
          "parameter": "y",
          "description": "The y coordinate of where to position the window."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nwindow_set_position(0, 0);\n```\nThe above code will position the game window in the upper left corner of the browser or display (depending on the target module being used).\n",
      "description": "With this function you can set the game window to a specific position within the display (on macOS, Linux(Ubuntu) and Windows) or within the browser (HTML5).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_position.htm"
    },
    "window_set_rectangle": {
      "name": "window_set_rectangle",
      "parameters": [
        {
          "parameter": "x",
          "description": "The new x coordinate of the window."
        },
        {
          "parameter": "y",
          "description": "The new y coordinate of the window."
        },
        {
          "parameter": "w",
          "description": "The new width of the window."
        },
        {
          "parameter": "h",
          "description": "The new height of the window."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nwindow_set_rectangle(0, 0, display_get_width(), display_get_height());\n```\nThe above code will set the game window to occupy the whole display area (either the browser or the screen, depending on the target platform).\n",
      "description": "With this function you can set the position of the game window within the browser (HTML5) or display (Windows, Ubuntu (Linux) or macOS) *and* set the scale of the window too. For more information on window position and window size, see `window_set_position()`    and `window_set_size()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_rectangle.htm"
    },
    "window_set_size": {
      "name": "window_set_size",
      "parameters": [
        {
          "parameter": "w",
          "description": "The new width of the window."
        },
        {
          "parameter": "h",
          "description": "The new height of the window."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        global.scale += 1;\n        window_set_size(200 * global.scale, 150 * global.scale);\n    }\n```\nThe above code will change the size of the window based on the value of the variable \"global.scale\" when the mouse button is pressed.\n",
      "description": "With this function you can change the size of the game window. If you use this function to change the size of the game window, the contents of the window will be scaled to fit with a 1:1 ratio to the background canvas which will keep the image crisp and clear (although scaled if the window is other than the room or view size). For example, if you have a 200 x 150 pixel window, and the player stretches the window by dragging the borders, the final window size may be 400 x 300 pixels, but the drawing canvas is STILL 200 x 150, which gives a blurred image as the pixel ratio is now 1:2. However, if you use this function to set the window size, the 1:1 ratio is maintained, even though the image is scaled to fit the new window size.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_set_size.htm"
    },
    "window_view_mouse_get_x": {
      "name": "window_view_mouse_get_x",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the view to compare the mouse position to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        var xx, yy;\n        xx = window_view_mouse_get_x(0);\n        yy = window_view_mouse_get_y(0);\n    \n        if xx > 0 && xx < 32 && yy > 0 && yy < 32\n        {\n            b_press[0] = true;\n        }\n    }\n  \n```\nThe above code will check for a mouse button being pressed, and if it is it then gets the mouse position relative to the view[0] and compares it to see if a variable should be set to true.\n",
      "description": "This function will return the mouse x position relative to the view selected.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_view_mouse_get_x.htm"
    },
    "window_view_mouse_get_y": {
      "name": "window_view_mouse_get_y",
      "parameters": [
        {
          "parameter": "id",
          "description": "The id of the view to compare the mouse position to."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif mouse_check_button_pressed(mb_left)\n    {\n        var xx, yy;\n        xx = window_view_mouse_get_x(0);\n        yy = window_view_mouse_get_y(0);\n    \n        if xx > 0 && xx < 32 && yy > 0 && yy < 32\n        {\n            b_press[0] = true;\n        }\n    }\n  \n```\nThe above code will check for a mouse button being pressed, and if it is it then gets the mouse position relative to the view[0] and compares it to see if a variable should be set to true.\n",
      "description": "This function will return the mouse y position relative to the view selected.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_view_mouse_get_y.htm"
    },
    "window_views_mouse_get_x": {
      "name": "window_views_mouse_get_x",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmyx = window_views_mouse_get_x();\n```\nThis would set myx to the x coordinate of the mouse in the window relative to all active views.\n",
      "description": "This function returns the x-coordinate of the mouse with respect to all the active views and returns the same value `mouse_x`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_views_mouse_get_x.htm"
    },
    "window_views_mouse_get_y": {
      "name": "window_views_mouse_get_y",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nmyy = window_views_mouse_get_y();\n```\nThis would set myy to the y coordinate of the mouse in the window relative to all active views.\n",
      "description": "This function returns the y-coordinate of the mouse with respect to all the active views and returns the same value `mouse_y`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_WIndow/window_views_mouse_get_y.htm"
    },
    "xboxlive_achievement_load_friends": {
      "name": "xboxlive_achievement_load_friends",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "The following code would probably be called after the player has logged into their game account to get a list of all that users friends:\n```\nxboxlive_achievement_load_friends();\n```\nThis will send off a request for the information on the users friends and generate an asynchronous callback with the special `async_load` DS map containing the following data:\n```\nvar ident = ds_map_find_value(async_load, \"id\");\n    if ident == xboxlive_achievement_friends_info\n    {\n        var numfriends = ds_map_find_value(async_load, \"numfriends\");\n        global.numfriends = numfriends;\n        for(var i=0; i < numfriends; i++;)\n        {\n            global.friendname[i] = ds_map_find_value(async_load, \"Friend\" + string(i));\n            global.friendid[i] = ds_map_find_value(async_load, \"Friendid\" + string(i));\n        }\n    }\n```\nThe above code checks the returned `DS Map` in the **Social Asynchronous Event** and if its \"id\" matches the constant being checked, it then loops through the map storing all the different values in a number of arrays.\n",
      "description": "This function will send a request to the server for information on all the logged in users friends and will trigger a callback  [Social Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Social.htm) which contains the `async_load` map populated with the relevant key/value pairs. The *id* key of this `DS Map` is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the **constant** `xboxlive_achievement_friends_info` as well as a number of other key/value pairs for each friend. The exact contents of the map are shown below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_friends.htm"
    },
    "xboxlive_achievement_load_leaderboard": {
      "name": "xboxlive_achievement_load_leaderboard",
      "parameters": [
        {
          "parameter": "ident",
          "description": "The unique ID of the leaderboard as shown on the developer dashboard."
        },
        {
          "parameter": "minindex",
          "description": "The starting index value to get the leaderboard data from."
        },
        {
          "parameter": "maxindex",
          "description": "The maximum index value to get the leaderboard data from."
        },
        {
          "parameter": "filter",
          "description": "Whether to filter the results to those that are on your friends list or to all players (see the **Description** above)"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "The following code would probably be called after the player has logged into their game account to get a list of all friends leaderboard positions for the game:\n```\nxboxlive_achievement_load_leaderboard(\"CgkIs9_51u0PEAIQBw\", 1, 100, xboxlive_achievement_filter_friends_only);\n```\nThis will send off a request for the information on the given leaderboard and generate an asynchronous callback with the special `async_load` DS map containing the following data:\n```\nvar ident = ds_map_find_value(async_load, \"id\");\n    if ident == xboxlive_achievement_leaderboard_info\n    {\n        var lbid = ds_map_find_value(async_load,\"leaderboardid\");\n        if lbid == \"CgkIs9_51u0PEAIQBw\" || lbid == \"leaderboard1id\"\n        {\n            global.numentries = ds_map_find_value(async_load,\"numentries\");\n            for(var i = 0; i < numentries; i++;)\n            {\n                global.playername[i] = ds_map_find_value(async_load, \"Player\" + string(i));\n                global.playerid[i] = ds_map_find_value(async_load, \"Playerid\" + string(i));\n                global.playerrank[i] = ds_map_find_value(async_load, \"Rank\" + string(i));\n                global.playerscore[i] = ds_map_find_value(async_load, \"Score\" + string(i));\n            }\n        }\n    }\n```\nThe above code checks the returned `DS Map` in the **Social Asynchronous Event** and if its \"id\" matches the constant being checked, it then checks to make sure that the leaderboard being sent matches the original function call before looping through the map and storing all the different values in a number of arrays.\n",
      "description": "This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument of the function. It will trigger a callback  [Social Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Social.htm) which contains the `async_load` map populated with the relevant key/value pairs. The *id* key of this `DS Map` is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the **constant** `xboxlive_achievement_leaderboard_info` as well as a number of other key/value pairs for each player. The exact contents of the map are shown below:",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm"
    },
    "xboxlive_achievement_show_achievements": {
      "name": "xboxlive_achievement_show_achievements",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif achievements_enabled\n    {\n        global.Pause = true;\n        instance_create_layer(0, 0, \"Controllers\", obj_Pause);\n        xboxlive_achievement_show_achievements();\n    }\n```\nThe above code checks a custom variable to see if achievements are enabled, and if so it sets a global variable and creates a controller \"pause\" instance before calling the function to show the achievements on screen.\n",
      "description": "This function will open the achievements page for the chosen platform. Please note that this is an *asynchronous function*, ie: your game will continue to run in the background while the achievements page is being shown. As such, you should be careful where you use this and make sure to pause the game or only permit it to be shown in areas of your game where it will not interfere with the game-play.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_show_achievements.htm"
    },
    "xboxlive_achievements_set_progress": {
      "name": "xboxlive_achievements_set_progress",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID of the user to set the achievement for"
        },
        {
          "parameter": "achievement",
          "description": "The achievement to set (a string)"
        },
        {
          "parameter": "progress",
          "description": "The progress value to set (from 0 to 100)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "The following is an extended example of how this function can be used. To start with you'd call it in some event like **Room Start** or **Create**:\n```\nxboxlive_stats_get_social_leaderboard(user_id, \"GlobalTime\", 20, 1, false, false);\n```\nThe above code would be called to get a list of all global leaderboard positions for the game, and will generate a Social Asynchronous Event call back which we would deal with in the following way:\n```\nvar _progress = (global.Level / global.LevelMax) * 100; xboxlive_achievements_set_progress(user_id, \"Game_Completed\", _progress);\n```\nThe above code creates a percentage value based on some global variables and then uses it to set the achievement progress for the \"Game_Completed\" achievement.\n",
      "description": "This function can be used to update the progress of an achievement. You supply the user ID as returned, for example, by the function `xboxlive_get_user()`, and then the achievement string\n    (this is the achievement id as assigned in the XDP/Windows Dev Center when it was created). Finally you set the progress value to to a value from 0 to 100. Note that the achievement system will refuse updates that are lower than the current progress\n    value.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievements_set_progress.htm"
    },
    "xboxlive_agegroup_for_user": {
      "name": "xboxlive_agegroup_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _age = xboxlive_agegroup_for_user(xboxlive_get_activating_user());\n    if _age != xboxlive_agegroup_adult\n    {\n        global.ContentControl = true;\n    }\n    else global.ContentControl = false;\n```\nThe above code checks the age group of the activating user and sets a global variable to `true` or `false` depending on the returned constant.\n",
      "description": "This function will return one of four constants (shown below) to indicate the age-range assigned to the specified user ID pointer.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm"
    },
    "xboxlive_gamedisplayname_for_user": {
      "name": "xboxlive_gamedisplayname_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        user_id[i] = xboxlive_get_user(i);\n        user_name[i] = xboxlive_gamedisplayname_for_user(user_id[i]);\n    }\n```\nThe above code gets the user ID pointer for each available user account and then stores the pointer along with the display name in two arrays.\n",
      "description": "With this function you can retrieve the display name - as a string - from the user ID pointer given. Note that if the user is local then the returned value is simply a string of the their display name, but if it is a remote user then the string will be their gamertag which can then be used, for example, for muting/unmuting in voice chat.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_gamedisplayname_for_user.htm"
    },
    "xboxlive_gamerscore_for_user": {
      "name": "xboxlive_gamerscore_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _a = 0;\n    var _num = xboxlive_get_user_count();\n    for (var i = 0; i < _num; ++i;)\n    {\n        var _uid = xboxlive_get_user(i);\n        if _uid != pointer_null\n        {\n            global.UserName[_a] = xboxlive_gamedisplayname_for_user(_uid);\n            global.UserScore[_a] = xboxlive_gamerscore_for_user(_uid);\n            global.UserRep[_a] = xboxlive_reputation_for_user(_uid);\n            global.UserAvatar[_a] = xboxlive_sprite_add_from_gamerpicture(_uid, 256, 0, 0);\n            ++a;\n        }\n    }\n```\nThe above code loops through the logged in users and stores their gamer data in various global arrays.\n",
      "description": "This function will return the XBox Live gamerscore for the given user ID pointer.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_gamerscore_for_user.htm"
    },
    "xboxlive_gamertag_for_user": {
      "name": "xboxlive_gamertag_for_user",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !xboxlive_user_is_signed_in()\n    {\n        if !xboxlive_user_is_signing_in()\n        {\n            xboxlive_show_account_picker();\n        }\n    }\n    else\n    {\n        global.GamerTag = xboxlive_gamertag_for_user();\n    }\n```\nThe above code checks to see if a user is signed-in to XBox Live and if they are signed-in, the code will get the gamertag for the user and store it in a global variable for future use. If they are not signed-in then the code checks to see if they are in the process of signing-in, in which case nothing further will happen, and if they are not, then it will open the account picker, prompting them to sign-in.\n",
      "description": "This function will get the Gamer Tag for the currently signed-in user. Note that this function is *only valid if a user is signed in* and as such you should do a check for this using the function `xboxlive_user_is_signed_in()` before requesting the Gamer Tag. If you call this function when no user is signed in you will get an empty string\"\" returned.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_gamertag_for_user.htm"
    },
    "xboxlive_generate_player_session_id": {
      "name": "xboxlive_generate_player_session_id",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !xboxlive_user_is_signed_in()\n    {\n        if !xboxlive_user_is_signing_in()\n        {\n            xboxlive_show_account_picker();\n        }\n    }\n    else\n    {\n        global.GamerTag = xboxlive_gamertag_for_user();\n    }\n```\nThe above code checks to see if a user is signed-in to XBox Live and if they are signed-in, the code will get the gamertag for the user and store it in a global variable for future use. If they are not signed-in then the code checks to see if they are in the process of signing-in, in which case nothing further will happen, and if they are not, then it will open the account picker, prompting them to sign-in.\n",
      "description": "This function will generate a unique string (containing a GUID) for the current player session. This can then be used with the function `xboxlive_fire_event()`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_generate_player_session_id.htm"
    },
    "xboxlive_get_activating_user": {
      "name": "xboxlive_get_activating_user",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nglobal.activUser = xboxlive_get_activating_user();\n```\nThe above stores the activating user ID pointer in a global variable\n",
      "description": "With this function you can retrieve the user ID pointer for the user that launched the game from the console.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_activating_user.htm"
    },
    "xboxlive_get_savedata_user": {
      "name": "xboxlive_get_savedata_user",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif (xboxlive_get_savedata_user() != user_id[0])\n    {\n        xboxlive_set_savedata_user(user_id[0]);\n    }\n```\nThe above code checks to see if a user is currently assigned as the save target, and if they are not then they are assigned.\n",
      "description": "This function returns the user ID pointer currently associated with file saving (or the constant `pointer_null` if no user ID is currently being used). See `xboxlive_set_savedata_user()` for further details.",
      "returns": "Pointer or pointer_null",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_savedata_user.htm"
    },
    "xboxlive_get_stats_for_user": {
      "name": "xboxlive_get_stats_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer."
        },
        {
          "parameter": "serviceconfig_id",
          "description": "The service config file ID"
        },
        {
          "parameter": "statname1 (2, 3, etc...)",
          "description": "The stat names to retrieve the information for."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": true,
      "example": "```\nvar _uid = xboxlive_get_user(0); var _configid = \"00000000-0000-0000-0000-000000000000\"; xboxlive_get_stats_for_user(xbuser, _configid, \"GameProgress\", \"CurrentMode\");\n```\nThe above code gets the user ID and then uses that to request information about specific stats for that user.\n",
      "description": "This function can be used to retrieve data about specific stats from the Xbox Live servers. You supply the user ID as returned by the function `xboxlive_get_user()`, then your games Service\n    Configuration ID (as shown on the XDP console), and finally the stats required. You can request up to a maximum of 14 stats, but this does not guarantee that you will get 14 stat results, as there is a limit to the total length of the request and\n    therefore the maximum stat count depends on the length of the names of the stats themselves.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_get_stats_for_user.htm"
    },
    "xboxlive_get_user": {
      "name": "xboxlive_get_user",
      "parameters": [
        {
          "parameter": "index",
          "description": "The index (an integer) to get the User ID from."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        user_id[i] = xboxlive_get_user(i);\n    }\n```\nThe above loops through all the signed in users and stores their unique ID pointer in an array.\n",
      "description": "With this function you can retrieve the user ID pointer for the indexed user. If the user does not exist, the function will return the constant `pointer_null` instead. You can find the number of users currently logged in with the function `xboxlive_get_user_count()`.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_user.htm"
    },
    "xboxlive_get_user_count": {
      "name": "xboxlive_get_user_count",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        user_id[i] = xboxlive_get_user(i);\n    }\n```\nThe above loops through all the signed in users and stores their unique ID pointer in an array.\n",
      "description": "With this function you can find the total number of users currently signed in to the XBox system. The return value will be an integer value, from 0 - N, where N is the number of signed in users -1.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_user_count.htm"
    },
    "xboxlive_matchmaking_create": {
      "name": "xboxlive_matchmaking_create",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to use"
        },
        {
          "parameter": "visibility",
          "description": "One of the constants listed above"
        },
        {
          "parameter": "template",
          "description": "The name of the session template"
        },
        {
          "parameter": "hopper",
          "description": "The name of the matchmaking hopper"
        },
        {
          "parameter": "sdatemplate",
          "description": "The name of the secure device association template"
        },
        {
          "parameter": "matchattributes",
          "description": "[OPTIONAL]"
        }
      ],
      "requiredParameters": 5,
      "isVariadic": false,
      "example": "```\nvar userID = xboxlive_user_for_pad(global.PadIndex); result = xboxlive_matchmaking_create(userID, xboxlive_match_visibility_usetemplate, \"MatchTicketSession\", \"MatchTicketHopper\", \"PeerServerTraffic\");\n```\nThe above will retrieve the user ID for the user on the given gamepad and then initialise a matchmaking session for them.\n",
      "description": "This function will create a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular game\n    pad by calling the `xboxlive_user_for_pad()` function and visibility will be one of the following constants:",
      "returns": "Request ID (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm"
    },
    "xboxlive_matchmaking_find": {
      "name": "xboxlive_matchmaking_find",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to use"
        },
        {
          "parameter": "template",
          "description": "The name of the session template"
        },
        {
          "parameter": "hopper",
          "description": "The name of the matchmaking hopper"
        },
        {
          "parameter": "sdatemplate",
          "description": "The name of the secure device association template"
        },
        {
          "parameter": "matchattributes",
          "description": "[OPTIONAL]"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar userID = xboxone_user_for_pad(global.PadIndex); result = xboxone_matchmaking_find(userID, \"MatchTicketSession\", \"MatchTicketHopper\", \"PeerServerTraffic\");\n```\nThe above will retrieve the user ID for the user on the given gamepad and then try to find a matchmaking session for them.\n",
      "description": "This function will search for a multi-player session using the Session Template, matchmaking hopper and Secure Device Association template, which you should have created beforehand in the XDP dashboard. The user ID you can retrieve for a particular\n    game pad by calling the `xboxlive_user_for_pad()` function. The function will return a unique Request ID value, which can then be used to identify the correct  [Social Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Social.htm)    for this function. This event will be triggered when the session has been created and will contain a DS Map in the variable `async_load` with the following\n    key/value pairs:",
      "returns": "Request ID (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_find.htm"
    },
    "xboxlive_matchmaking_join_invite": {
      "name": "xboxlive_matchmaking_join_invite",
      "parameters": [
        {
          "parameter": "user_who_received_invite",
          "description": "The local user ID pointer."
        },
        {
          "parameter": "invitation_id",
          "description": "The invitation ID."
        },
        {
          "parameter": "invitation_host",
          "description": "The invitation host ID."
        },
        {
          "parameter": "sda_template_name",
          "description": "The session template name."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar userID = xboxlive_user_for_pad(global.PadIndex); xboxlive_matchmaking_join_invite(userID, global.InviteID, global.InviteHost, global.SessionTemplate);\n```\nThe above gets the user ID for the given gamepad and then attaempt to join the session that they have been invited to.\n",
      "description": "This function can be called to process a join invitation once you have successfully called `xboxlive_matchmaking_start()`. You supply the local UserID and the the invitation values (ID and host ID)\n    which were returned when the invitation was received, along with the name of the Session Template that you created (a string). It will then join the user to the session they've been invited to, and you will receive Social Asynchronous Events as\n    if you had called `xboxlive_matchmaking_find()`.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_join_invite.htm"
    },
    "xboxlive_matchmaking_join_session": {
      "name": "xboxlive_matchmaking_join_session",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The User ID pointer to use"
        },
        {
          "parameter": "session_handle",
          "description": "The \"correlation id\" to use for the session ID (see description, above)"
        },
        {
          "parameter": "sdatemplate",
          "description": "The name of the secure device association template to use"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nRequest_ID = xboxlive_matchmaking_join_session(global.UserID, global.SessionID, \"PeerServerTraffic\");\n```\nThe above will send a request to join the given multiplayer session, storing the request ID value in a variable so it can be checked in the asynchronous event.\n",
      "description": "This function permits you to join a specific session via a session handle. This is similar to joining a session invite but is useful when you have your own server performing the matchmaking rather than relying on xbox live matchmaking.",
      "returns": "Request ID (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_join_session.htm"
    },
    "xboxlive_matchmaking_send_invites": {
      "name": "xboxlive_matchmaking_send_invites",
      "parameters": [
        {
          "parameter": "from_user",
          "description": "The local user ID for controlling the dialogue."
        },
        {
          "parameter": "session_to_invite_into",
          "description": "The unique session ID for the session to join."
        },
        {
          "parameter": "text_to_add_to_invite",
          "description": "A short text to add to the invitation."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check_pressed(0, gp_face1)\n    {\n        var _uid = xboxlive_user_for_pad(0);\n        xboxlive_matchmaking_send_invites(_uid, global.session_ID, \"Come and join my game!\");\n    }\n```\nThe above code checks for a gamepad button press and if one is detected then the Xbox Live dialog for session invites will be opened.\n",
      "description": "This function brings up the Xbox Live system dialog to allow a user to send invitations to their game. You specify the local user who should control the dialog (and who's friends list will be used by the dialog), the unique session ID value for the session they want to invite people to, and some default text to show in the dialog. You get the session ID from the `async_load` DS map generated by the function  [xboxlive_matchmaking_create()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm).",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_send_invites.htm"
    },
    "xboxlive_matchmaking_session_get_users": {
      "name": "xboxlive_matchmaking_session_get_users",
      "parameters": [
        {
          "parameter": "session_id",
          "description": "The session ID pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar session_map = xboxlive_matchmaking_session_get_users(global.SessionID);\n    if (session_map != -1)\n    {\n        for (var i = 0; i < session_map[? \"num_results\"]; i++)\n        {\n            if (session_map[? \"userIsOwner\" + string(i)] == 1)\n            {\n                global.OwnerID = session_map[? \"userId\" + string(i)];\n            }\n        }\n    }\n```\nThe above will retrieve the user data for all users participating in the matchmaking session and set a global variable to the ID of the session owner.\n",
      "description": "This function will create and populate a DS map with the details of the users in the specified session, or -1 if there is an error. You can get the session ID pointer from the `async_load` DS map that is returned in the  [Asynchronous Social Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Social.htm) when you created or found a session (see `xboxlive_matchmaking_create()` for more details). The returned DS map will have the following key/value pairs:",
      "returns": "Request ID (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_session_get_users.htm"
    },
    "xboxlive_matchmaking_session_leave": {
      "name": "xboxlive_matchmaking_session_leave",
      "parameters": [
        {
          "parameter": "session_id",
          "description": "The Session ID pointer of the session to leave."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif gamepad_button_check_pressed(0, gp_start)\n    {\n        xboxlive_matchmaking_session_leave(global.SessionID);\n    }\n```\nThe above code checks for a gamepad button press and if one is detected then the user will logged out of the given matchmaking session.\n",
      "description": "This function causes the user who created or found the specified session to leave it. You can get the session ID pointer from the `async_load` DS map that is returned in the  [Asynchronous Social Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Social.htm) when you created or found a session (see `xboxlive_matchmaking_create()` for more details).",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_session_leave.htm"
    },
    "xboxlive_matchmaking_set_joinable_session": {
      "name": "xboxlive_matchmaking_set_joinable_session",
      "parameters": [
        {
          "parameter": "local_user",
          "description": "The local user ID pointer."
        },
        {
          "parameter": "session_that_is_joinable",
          "description": "The session ID to make joinable, or -1."
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (global.session_ID != -1)\n    {\n        xboxlive_matchmaking_set_joinable_session(xboxlive_user_for_pad(0), global.session_ID);\n    }\n```\nThe above code checks for a valid session ID value, and if one is detected it sets the session to be joinable.\n",
      "description": "This function sets a (previously created) session to be available for other users to join through the system UI. A user only has one joinable session at once, and when they leave the session (or the session ends) this will be cleared, however you can clear it manually by passing -1 in for the session argument.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_set_joinable_session.htm"
    },
    "xboxlive_matchmaking_start": {
      "name": "xboxlive_matchmaking_start",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.UserID = xboxlive_user_for_pad(global.PadIndex); xboxlive_matchmaking_start(global.UserID);\n  \n```\nThe above code gets the user ID for the given pad index and then initialises multiplayer capabilities.\n",
      "description": "This function must be called before you can start any multi-player session for the user. It takes the User ID pointer, which you can retrieve for a particular game pad by calling the `xboxlive_user_for_pad()`    function, and will initialise the multi-player API.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_start.htm"
    },
    "xboxlive_matchmaking_stop": {
      "name": "xboxlive_matchmaking_stop",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to use"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif !xboxlive_user_is_signed_in(user_id[0])\n    {\n        xboxlive_matchmaking_stop(user_id[0]);\n    }\n```\nThe above code will end the matchmaking session for the given user.\n",
      "description": "This function can be used to end a matchmaking session for the given user.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_stop.htm"
    },
    "xboxlive_pad_count_for_user": {
      "name": "xboxlive_pad_count_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nglobal.slots[0] = xboxlive_pad_count_for_user(user_id[0])\n```\nThe above code stores the number of pads associated with the given user ID pointer.\n",
      "description": "With this function you can find out how many pad \"slots\" are active for the current user (see `xboxlive_pad_for_user()` for further details).",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_pad_count_for_user.htm"
    },
    "xboxlive_pad_for_user": {
      "name": "xboxlive_pad_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The User ID (a pointer) to check"
        },
        {
          "parameter": "user_id",
          "description": "The index (an integer) of the gamepad slot to check"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (xboxlive_pad_for_user(user_id, 0) == -1)\n    {\n        for(var i = 0; i < gamepad_get_device_count(); i++;)\n        {\n            var u_id = xboxlive_user_for_pad(i);\n            if (u_id == -1)\n            {\n                async_ID = xboxlive_pad_for_user(i, u_id);\n            }\n        }\n    }\n```\nThe above code checks the slot 0 for the given User ID pointer to see if any gamepads have been assigned, and if not then one is assigned.\n",
      "description": "Xbox users can have various pads assigned to their user ID, with each one filling a \"slot\". These slots are numbered from 0, and can hold any pad index, so slot 0 could be assigned to pad 3 and slot 1 could be assigned to pad 2. This function can be used to get the pad that is assigned to any given slot, and is particularly useful should a user leave a gamepad without input for a certain length of time as it will switch itself off, so you can check any given User ID using this function to make sure that they have an active gamepad, and if they do not then react accordingly by (for example) pausing your game. If the pad its active, it's index value will be returned, but if not then the function will return -1.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_pad_for_user.htm"
    },
    "xboxlive_read_player_leaderboard": {
      "name": "xboxlive_read_player_leaderboard",
      "parameters": [
        {
          "parameter": "leaderboard_name",
          "description": "The name of the leaderboard to read, as set up on XDP."
        },
        {
          "parameter": "user_name",
          "description": "The name of the user to read from."
        },
        {
          "parameter": "num_items",
          "description": "The number of items to retrieve."
        },
        {
          "parameter": "friend_filter",
          "description": "One of the filter constants (see the description, above)."
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar _user = xboxlive_user_for_pad(0);\n    var _uid = xboxlive_user_id_for_user(_user);\n    xboxlive_read_player_leaderboard(\"MyLeaderboard\", _uid, 10, achievement_filter_all_players);\n```\nThe above code gets the user ID and then uses that to request all the player data for the first 10 places of the given leaderboard.\n",
      "description": "The function will return leaderboard information for the given user name. The leaderboard must have been created previously on the XDP dashboard for your game, and callin the function will trigger a callback  [Social Asynchronous Event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Social.htm) which contains the `async_load` map populated with the relevant key/value pairs. The \"id\" key of this DS map is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and IT will be paired with the constant `achievement_leaderboard_info` as well as a number of other key/value pairs. The exact contents of the map are shown below:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm"
    },
    "xboxlive_reputation_for_user": {
      "name": "xboxlive_reputation_for_user",
      "parameters": [
        {
          "parameter": "requesting_user_id",
          "description": "The user ID (a pointer) of the user to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _a = 0;\n    var _num = xboxlive_get_user_count();\n    for (var i = 0; i < _num; ++i;)\n    {\n        var _uid = xboxlive_get_user(i);\n        if _uid != pointer_null\n        {\n            global.UserName[_a] = xboxlive_gamedisplayname_for_user(_uid);\n            global.UserScore[_a] = xboxlive_gamerscore_for_user(_uid);\n            global.UserRep[_a] = xboxlive_reputation_for_user(_uid);\n            global.UserAvatar[_a] = xboxlive_sprite_add_from_gamerpicture(_uid, 256, 0, 0);\n            ++a;\n        }\n    }\n```\nThe above code loops through the logged in users and stores their gamer data in various global arrays.\n",
      "description": "With this function you can retrieve the XBox Live reputation score for the given user ID pointer.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_reputation_for_user.htm"
    },
    "xboxlive_set_rich_presence": {
      "name": "xboxlive_set_rich_presence",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        },
        {
          "parameter": "is_user_active",
          "description": "Flag the user as active or not."
        },
        {
          "parameter": "rich_presence_string",
          "description": "The rich presence string ID to use (as defined in the Partner Center - max 50 characters)"
        },
        {
          "parameter": "service_config_id",
          "description": "[OPTIONAL] This is the config_id string for the game."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar pad_uid = xboxlive_user_for_pad(0); xboxlive_set_rich_presence(pad_uid, true, \"Playing_Challenge\");\n```\nThe above code gets the user ID pointer for the user assigned to the gamepad [0] slot, and then sets the rich presence string for that user.\n",
      "description": "This function will set the rich presence string for the given user. A Rich Presence string shows a user's in-game activity after the name of the game that the user is playing, separated by a hyphen. This string is displayed under a player's\n    Gamertag in the \"Friends & Clubs\" list as well as in the player's Xbox Live user profile.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_set_rich_presence.htm"
    },
    "xboxlive_set_savedata_user": {
      "name": "xboxlive_set_savedata_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to set for saving, or `pointer_null`"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif (xboxlive_get_savedata_user() != user_id[0])\n    {\n        xboxlive_set_savedata_user(user_id[0]);\n    }\n```\nThe above code checks to see if a user is currently assigned as the save target, and if they are not then they are assigned.\n",
      "description": "This function specifies that future file operations which operate in the save game area (i.e. all file writes, and reads from files that aren't in the bundle area) will be associated with the specified user ID pointer. This can be called as often as necessary to redirect save data to the appropriate user, or you can use the constant `pointer_null` to save to the generic machine storage area.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_set_savedata_user.htm"
    },
    "xboxlive_show_account_picker": {
      "name": "xboxlive_show_account_picker",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !xboxlive_user_is_signed_in()\n    {\n        if !xboxlive_user_is_signing_in()\n        {\n            xboxlive_show_account_picker();\n        }\n    }\n    else\n    {\n        global.GamerTag = xboxlive_gamertag_for_user();\n    }\n```\nThe above code checks to see if a user is signed-in to XBox Live and if they are signed-in, the code will get the gamertag for the user and store it in a global variable for future use. If they are not signed-in then the code checks to see if they are in the process of signing-in, in which case nothing further will happen, and if they are not, then it will open the account picker, prompting them to sign-in.\n",
      "description": "The function will open the XBox Account Picker screen so that the user can sign-in if they are not already signed in (if they are then the function will do nothing). Note that this function is only applicable when using the UWP build on PC and not Xbox, as to launch a game on Xbox the user has to have signed in already.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_show_account_picker.htm"
    },
    "xboxlive_show_profile_card_for_user": {
      "name": "xboxlive_show_profile_card_for_user",
      "parameters": [
        {
          "parameter": "requesting_user_id",
          "description": "The user ID (a pointer) of the requesting user"
        },
        {
          "parameter": "target_user_id",
          "description": "The user ID (a pointer) of the user to get the profile card of"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (gamepad(0, gp_start))\n    {\n        xboxlive_show_profile_card_for_user(user[0], user[1]);\n    }\n```\nThe above code checks for a gamepad button press and if one is detected it shows the profile card for the given user.\n",
      "description": "With this function you can request that the XBox shows the profile card for the target user ID pointer. The function requires both the user ID pointer for the user that is *requesting* the information as well as the user ID pointer of the user to *target* and get the profile card of.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_show_profile_card_for_user.htm"
    },
    "xboxlive_sponsor_for_user": {
      "name": "xboxlive_sponsor_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _uid = xboxlive_user_for_pad(0); sponsor = xboxlive_sponsor_for_user(_uid);\n```\nThe above code gets the user ID pointer for the user assigned to the gamepad [0] slot, and then uses that ID to retrieve the users sponsor ID.\n",
      "description": "This function retrieves the ID of the given users sponsor.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_sponsor_for_user.htm"
    },
    "xboxlive_sprite_add_from_gamerpicture": {
      "name": "xboxlive_sprite_add_from_gamerpicture",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to get the gamer picture for"
        },
        {
          "parameter": "imagesize",
          "description": "Size in pixels of the sprite to be returned"
        },
        {
          "parameter": "xorig",
          "description": "Indicate the x position of the origin in the sprite"
        },
        {
          "parameter": "yorig",
          "description": "Indicate the y position of the origin in the sprite"
        }
      ],
      "requiredParameters": 4,
      "isVariadic": false,
      "example": "```\nvar _a = 0;\n    var _num = xboxlive_get_user_count();\n    for (var i = 0; i < _num; ++i;)\n    {\n        var _uid = xboxlive_get_user(i);\n        if _uid != pointer_null\n        {\n            global.UserName[_a] = xboxlive_gamedisplayname_for_user(_uid);\n            global.UserScore[_a] = xboxlive_gamerscore_for_user(_uid);\n            global.UserRep[_a] = xboxlive_reputation_for_user(_uid);\n            global.UserAvatar[_a] = xboxlive_sprite_add_from_gamerpicture(_uid, 256, 0, 0);\n            ++a;\n        }\n    }\n```\nThe above code loops through the logged in users and stores their gamer data in various global arrays.\n",
      "description": "With this function you can get the gamer picture for a given user ID pointer. The function works asynchronously, and will trigger an  [Image Loaded](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Image_Loaded.htm) asynchronous event to inform you that the function is finished (like with HTML5/URL calls to `sprite_add()`). The Asynchronous Image Loaded event will have a DS map stored in the built in variable `async_load`. The map contains the following information:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_sprite_add_from_gamerpicture.htm"
    },
    "xboxlive_stats_add_user": {
      "name": "xboxlive_stats_add_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to add"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        user_id[i] = xboxlive_get_user(i);\n        xboxlive_stats_add_user(user_id[i]);\n    }\n```\nThe above code will get the number of user accounts available then loop through them and assign the account ID to an array, as well as register the user with the stats manager.\n",
      "description": "This function can be used to add a given user ID pointer to the statistics manager. This must be done before using any of the other stats functions to automatically sync the game with the XBox Live server and retrieve the latest values. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, and the function will will return -1 if there was an error or if the user ID is invalid, or any other value if the function was successfully called.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_add_user.htm"
    },
    "xboxlive_stats_delete_stat": {
      "name": "xboxlive_stats_delete_stat",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to delete the stat of"
        },
        {
          "parameter": "stat",
          "description": "The statistic to delete (a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < xboxlive_get_user_count(); i++;)\n    {\n        user_id[i] = xboxlive_get_user(i);\n        xboxlive_stats_delete_stat(user_id[i], \"HighScore\");\n    }\n```\nThe above code loops through the connected users and deletes the specified stat from the stat manager for each one.\n",
      "description": "This function can be used to delete a stat from the stat manager for the given user ID. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, then the stat string to delete. This clears the stat value and removed it from the stat manager, meaning it will no longer be returned by the functions `xboxlive_stats_get_stat_names()` or `xboxlive_stats_get_stat()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_delete_stat.htm"
    },
    "xboxlive_stats_flush_user": {
      "name": "xboxlive_stats_flush_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to use"
        },
        {
          "parameter": "priority",
          "description": "The prority value (0 or 1)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < array_length(user_id); ++i;)\n    {\n        xboxlive_stats_flush_user(user_id[i], 0);\n    }\n```\nThe above code loops through the stored user account IDs and then flushes the stat manager data for each user.\n",
      "description": "This function can be used to flush the stats data for a given user from the statistics manager, to the live server, ensuring that the server is up to date with the current values. According to XBox documentation, developers should be careful not to call this too often as the XBox will rate-limit the requests, and the XBox OS will also automatically flush stats approximately every 5 minutes automatically anyway.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_flush_user.htm"
    },
    "xboxlive_stats_get_leaderboard": {
      "name": "xboxlive_stats_get_leaderboard",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID of the user to get the leaderboard for"
        },
        {
          "parameter": "stat",
          "description": "The stat (as string) to create the global leaderboard from"
        },
        {
          "parameter": "num_entries",
          "description": "The number of entries from the global leaderboard to retrieve"
        },
        {
          "parameter": "start_rank",
          "description": "The rank in the leaderboard to start from (use 0 if the \"start_at_user\" argument is set to `true`)"
        },
        {
          "parameter": "start_at_user",
          "description": "Set to `true` to start at the user ID rank, `false` otherwise (set to `false` if the \"start_rank\" argument is anything other than 0)"
        },
        {
          "parameter": "ascending",
          "description": "Set to `true` for ascending order and `false` for descending order"
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "The following is an extended example of how this function can be used. To start with you'd call it in some event like **Room Start** or **Create**:\n```\nxboxlive_stats_get_leaderboard(user_id, \"GlobalTime\", 20, 1, false, true);\n```\nThe above code would be called to get a list of all social leaderboard positions for the game, and will generate a Social Asynchronous Event call back which we would deal with in the following way:\n```\nif (async_load[? \"id\"] == achievement_stat_event)\n    {\n        if (async_load[? \"event\"] == \"GetLeaderboardComplete\")\n        {\n            global.numentries = async_load[? \"numentries\"];\n            for(var i = 0; i < numentries; i++;)\n            {\n                global.playername[i] = async_load[? \"Player\" + string(i)];\n                global.playerid[i] = async_load[? \"Playerid\" + string(i)];\n                global.playerrank[i] = async_load[? \"Rank\" + string(i)];\n                global.playerscore[i] = async_load[? \"Score\" + string(i)];\n            }\n        }\n    }\n```\nThe above code checks the returned DS map in the Social Asynchronous Event and if its \"id\" matches the constant being checked, it then checks to see if the event has been triggered by returned leaderboard data before looping through the map and storing all the different values in a number of global arrays.\n",
      "description": "This function can be used to retrieve a global leaderboard of ranks for a given statistic. You supply the user ID (as returned, for example, by the function `xboxlive_get_user()`), the stat string (as defined when you registered it as a \"Featured Stat\"), and then you specify a number of details about what leaderboard information you want to retrieve. Note that you can only retrieve a global leaderboard for int or real stats, but *not* for string stats.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_leaderboard.htm"
    },
    "xboxlive_stats_get_social_leaderboard": {
      "name": "xboxlive_stats_get_social_leaderboard",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID of the user to get the leaderboard for"
        },
        {
          "parameter": "stat",
          "description": "The stat (as string) to create the global leaderboard from"
        },
        {
          "parameter": "num_entries",
          "description": "The number of entries from the global leaderboard to retrieve"
        },
        {
          "parameter": "start_rank",
          "description": "The rank in the leaderboard to start from (use 0 if the \"start_at_user\" argument is set to `true`)"
        },
        {
          "parameter": "start_at_user",
          "description": "Set to `true` to start at the user ID rank, `false` otherwise (set to `false` if the \"start_rank\" argument is anything other than 0)"
        },
        {
          "parameter": "favourites_only",
          "description": "Set to `true` to show only friends that are marked as \"favourites\" or `false` otherwise"
        }
      ],
      "requiredParameters": 6,
      "isVariadic": false,
      "example": "The following is an extended example of how this function can be used. To start with you'd call it in some event like **Room Start** or **Create**:\n```\nxboxlive_stats_get_social_leaderboard(user_id, \"GlobalTime\", 20, 1, false, false);\n```\nThe above code would be called to get a list of all global leaderboard positions for the game, and will generate a Social Asynchronous Event call back which we would deal with in the following way:\n```\nif (async_load[? \"id\"] == achievement_stat_event)\n    {\n        if (async_load[? \"event\"] == \"GetLeaderboardComplete\")\n        {\n            global.numentries = async_load[? \"numentries\"];\n            for(var i = 0; i < numentries; i++;)\n            {\n                global.playername[i] = async_load[? \"Player\" + string(i)];\n                global.playerid[i] = async_load[? \"Playerid\" + string(i)];\n                global.playerrank[i] = async_load[? \"Rank\" + string(i)];\n                global.playerscore[i] = async_load[? \"Score\" + string(i]);\n            }\n        }\n    }\n```\nThe above code checks the returned DS map in the Social Asynchronous Event and if its \"id\" matches the constant being checked, it then checks to see if the event has been triggered by returned leaderboard data before looping through the map and storing all the different values in a number of global arrays.\n",
      "description": "This function can be used to retrieve a social leaderboard of ranks for a given statistic. You supply the user ID (as returned, for example, by the function `xboxlive_get_user()`), the stat string (as defined when you created it using the xboxlive_stats_set_stat_* functions), and then you specify a number of details about what leaderboard information you want to retrieve. Note that you can only retrieve a social leaderboard for int or real stats, but not for string stats, and that if you flag the \"favourites_only\" argument as true, then the results will only contain data for those friends that are marked by the user as \"favourites\".",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_social_leaderboard.htm"
    },
    "xboxlive_stats_get_stat": {
      "name": "xboxlive_stats_get_stat",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to get the stat names of"
        },
        {
          "parameter": "stat",
          "description": "The statistic to set (a string)"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nif (game_over == true)\n    {\n        if (xboxlive_stats_get_stat(p_user_id, \"PercentDone\") < 100)\n        {\n            var _val = (global.LevelsFinished / global.LevelsTotal) * 100;\n            xboxlive_stats_set_stat_real(p_user_id, \"PercentDone\", _val);\n        }\n    }\n```\nThe above code checks a variable and if it's `true`, then it will check the value of the \"PercentDone\" stat. If this value is less than 100, a value is then generated and the stat set to that value.\n",
      "description": "This function can be used to retrieve a single stat value from the stat manager for a given user. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, and then the stat string as defined when you created it using the one of the `xboxlive_stats_set_stat_*` functions. The return value can be either a string or a real (depending on the stat being checked) or the GML constant `undefined` if the stat does not exist or there has been an error.",
      "returns": "Real, string or undefined",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_stat.htm"
    },
    "xboxlive_stats_get_stat_names": {
      "name": "xboxlive_stats_get_stat_names",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to get the stat names of"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _stat_str = xboxlive_stats_get_stat_names(user_id);\n    for (var i = 0; i < array_length(_stat_str); ++i;)\n    {\n        xboxlive_stats_delete_stat(user_id, _stat_str[i]);\n    }\n```\nThe above code retrieves all the defined stats for the user ID pointer stored in the given variable, and then loops through the array and deletes the specified stat from the stat manager.\n",
      "description": "This function can be used to retrieve all the defined stats from the stat manager for a given user. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, and the function will return an array of strings containing the statistics for the user. If an error occurs or the user has no stats the array will still be returned but will have an element count of 0.",
      "returns": "Array",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_get_stat_names.htm"
    },
    "xboxlive_stats_remove_user": {
      "name": "xboxlive_stats_remove_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID (a pointer) to remove"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        user_id[i] = xboxlive_get_user(i);\n        xboxlive_stats_remove_user(user_id[i]);\n    }\n```\nThe above code loop through the stored user account IDs and remove (unregister) each user from the stats manager.\n",
      "description": "This function can be used to remove (unregister) a given user from the statistics manager, performing a flush of the stat data to the live server. According to the XBox documentation the game does not have to remove the user from the stats manager, as the XBox OS will periodically flush the stats anyway. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, and the function will will return -1 if there was an error or if the user ID is invalid, or any other value if the function was successfully called.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_remove_user.htm"
    },
    "xboxlive_stats_set_stat_int": {
      "name": "xboxlive_stats_set_stat_int",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to set the stat for"
        },
        {
          "parameter": "stat",
          "description": "The statistic to set (a string)"
        },
        {
          "parameter": "value",
          "description": "The value to set the stat to (an integer)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar _val = xboxlive_stats_get_stat(p_user_id, \"GamesPlayed\"); xboxlive_stats_set_stat_int(p_user_id, \"GamesPlayed\", ++_val);\n```\nThe above code retrieves the value for the stat \"GamesPlayed\", then sets the same stat to that value plus 1.\n",
      "description": "This function can be used to set the value of a stat for the given user ID. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, then the stat string\n    to set (**if the stat string does not already exist then a new stat will be created and set to the given value**) and a value (an integer) to set the stat to. Note that the stat name must be alphanumeric only, with no symbols or spaces.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_set_stat_int.htm"
    },
    "xboxlive_stats_set_stat_real": {
      "name": "xboxlive_stats_set_stat_real",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to set the stat for"
        },
        {
          "parameter": "stat",
          "description": "The statistic to set (a string)"
        },
        {
          "parameter": "value",
          "description": "The value to set the stat to (a real)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nif (game_over == true)\n    {\n        if (xboxlive_stats_get_stat(p_user_id, \"PercentDone\") < 100)\n        {\n            var _val = (global.LevelsFinished / global.LevelsTotal) * 100;\n            xboxlive_stats_set_stat_real(p_user_id, \"PercentDone\", _val);\n        }\n    }\n```\nThe above code checks a variable and if it's `true`, then it will check the value of the \"PercentDone\" stat. If this value is less than 100, a value is then generated and the stat set to that value.\n",
      "description": "This function can be used to set the value of a stat for the given user ID. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, then the stat string to set (**if the stat string does not already exist then a new stat will be created and set to the given value**) and a value (a real) to set the stat to. Note that the stat name must be alphanumeric only, with no symbols or spaces.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_set_stat_real.htm"
    },
    "xboxlive_stats_set_stat_string": {
      "name": "xboxlive_stats_set_stat_string",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The user ID pointer to set the stat for"
        },
        {
          "parameter": "stat",
          "description": "The statistic to set (a string)"
        },
        {
          "parameter": "value",
          "description": "The value to set the stat to (a string)"
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nxboxlive_stats_set_stat_string(p_user_id, \"LevelName\", global.LevelName);\n```\nThe above code sets the stat \"LevelName\" to the string stored in the given global variable. \n",
      "description": "This function can be used to set a stat to a string for the given user ID. You supply the user ID as returned by (for example) the function `xboxlive_get_user()`, then the stat string\n    to set (**if the stat string does not already exist then a new stat will be created and set to the given value**) and then the string to set the stat to. Note that the stat name must be alphanumeric only, with no symbols or spaces, but the string\n    value you are setting can have spaces and special characters.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_set_stat_string.htm"
    },
    "xboxlive_stats_setup": {
      "name": "xboxlive_stats_setup",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        },
        {
          "parameter": "service_config_id",
          "description": "This is the config_id string for the game."
        },
        {
          "parameter": "title_id",
          "description": "The unique ID for your game on the Xbox Dev Center."
        }
      ],
      "requiredParameters": 3,
      "isVariadic": false,
      "example": "```\nvar user = xboxlive_get_user(0); xboxlive_stats_setup(user, \"4d61a1aa-61ac-4541-badd-31f91244fea6\", $1244FEA6);\n```\nThe above code initialises the stats system for the given user ID.\n",
      "description": "This function needs to be called before you can use any of the other Xbox Live stat functions, and simply initialises the required libraries on the system. The \"user_id\" argument is the raw user ID as returned by the function `xboxlive_get_user()`,\n    while the \"service_config\" and \"title_id\" is the unique ID for your game on the Xbox Live Dev Center.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_stats_setup.htm"
    },
    "xboxlive_user_for_pad": {
      "name": "xboxlive_user_for_pad",
      "parameters": [
        {
          "parameter": "pad_index",
          "description": "The index (an integer) of the gamepad slot to check"
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nfor(var i = 0; i < 11; ++i;)\n    {\n        var u_id = xboxlive_user_for_pad(i);\n        if u_id != pointer_null\n        {\n            pad_name[i] = xboxlive_gamedisplayname_for_user(u_id);\n        }\n        else\n        {\n            pad_name[i] = \"Press Play\";\n        }\n    }\n```\nThe above code loops through all available pad slots and checks to see if there is a user ID pointer associated with it. If there is, an array is set with the user display name, otherwise the array is set to some default text.\n",
      "description": "This function will return the User ID pointer associated with the given gamepad index value, or `pointer_null` if no user is associated with it. Note that this function should only be used with gamepad indices, and **not** with `xboxlive_get_user_count()`.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_for_pad.htm"
    },
    "xboxlive_user_id_for_user": {
      "name": "xboxlive_user_id_for_user",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nvar _uid = xboxlive_user_for_pad(0); uid_string = xboxlive_user_id_for_user(_uid);\n```\nThe above code gets the user ID pointer for the user assigned to the gamepad [0] slot, and then saves that user ID as a string to an instance variable.\n",
      "description": "This function converts the User ID pointer into a string.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_id_for_user.htm"
    },
    "xboxlive_user_is_active": {
      "name": "xboxlive_user_is_active",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.PlayerNum = 0;\n    global.Player_ID = array_create();\n    for(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        var _uid = xboxlive_get_user(i);\n        if xboxlive_user_is_active(_uid)\n        {\n            global.Player_ID[global.PlayerNum++] = _uid;\n        }\n    }\n```\nThe above code loops through the user accounts and then checks to see if any of them are active. If they are, their user ID is added into a global array.\n",
      "description": "With this function you can check whether the given user ID is in the list of users currently using the console, and the function will return `true` if they are, or `false` otherwise. You can get a User ID pointer with the function  [xboxlive_get_user()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_get_user.htm)`.`",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_active.htm"
    },
    "xboxlive_user_is_guest": {
      "name": "xboxlive_user_is_guest",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nif xboxlive_user_is_guest(user_id[0])\n    {\n        global.user_name[0] = \"GUEST\";\n    }\n    else\n    {\n        global.user_name[0] = xboxlive_gamedisplayname_for_user(user_id[0]);\n    }\n```\nThe above stores the activating user ID pointer in a global variable.\n",
      "description": "This function will return `true` if the given user ID pointer is a guest user and `false` if they are not. You can get a User ID pointer with the function `xboxlive_get_user()`.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_guest.htm"
    },
    "xboxlive_user_is_remote": {
      "name": "xboxlive_user_is_remote",
      "parameters": [
        {
          "parameter": "user_id",
          "description": "The ID pointer of the user to check."
        }
      ],
      "requiredParameters": 1,
      "isVariadic": false,
      "example": "```\nglobal.PlayerNum = 0;\n    global.Player_ID = array_create();\n    for(var i = 0; i < xboxlive_get_user_count(); ++i;)\n    {\n        var _uid = xboxlive_get_user(i);\n        if xboxlive_user_is_active(_uid)\n        {\n            if !xboxlive_user_is_remote(_uid)\n            {\n                global.Remote_Player_ID[global.PlayerNum++] = _uid;\n            }\n        }\n    }\n```\nThe above code loops through the user accounts and then checks to see if any of them are active. If they are, their user ID is added into a global array, only if they are not remote users.\n",
      "description": "This function will check the given user ID and return `true` if the player is a remote player, or `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_remote.htm"
    },
    "xboxlive_user_is_signed_in": {
      "name": "xboxlive_user_is_signed_in",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !xboxlive_user_is_signed_in()\n    {\n        if !xboxlive_user_is_signing_in()\n        {\n            xboxlive_show_account_picker();\n        }\n    }\n    else\n    {\n        global.GamerTag = xboxlive_gamertag_for_user();\n    }\n```\nThe above code checks to see if a user is signed-in to XBox Live and if they are signed-in, the code will get the gamertag for the user and store it in a global variable for future use. If they are not signed-in then the code checks to see if they are in the process of signing-in, in which case nothing further will happen, and if they are not, then it will open the account picker, prompting them to sign-in.\n",
      "description": "The function will check to see if a user is signed-in and return `true` if there is and `false` otherwise. If no user is signed in then you can call the function `xboxlive_show_account_picker()` to open the account picker and prompt them to sign-in.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_signed_in.htm"
    },
    "xboxlive_user_is_signing_in": {
      "name": "xboxlive_user_is_signing_in",
      "parameters": [],
      "requiredParameters": 0,
      "isVariadic": false,
      "example": "```\nif !xboxlive_user_is_signed_in()\n    {\n        if !xboxlive_user_is_signing_in()\n        {\n            xboxlive_show_account_picker();\n        }\n    }\n    else\n    {\n        global.GamerTag = xboxlive_gamertag_for_user();\n    }\n```\nThe above code checks to see if a user is signed-in to XBox Live and if they are signed-in, the code will get the gamertag for the user and store it in a global variable for future use. If they are not signed-in then the code checks to see if they are in the process of signing-in, in which case nothing further will happen, and if they are not, then it will open the account picker, prompting them to sign-in.\n",
      "description": "The function will check to see if a user is in the process of signing-in and return `true` if that is the case and `false` otherwise.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_user_is_signing_in.htm"
    },
    "zip_unzip": {
      "name": "zip_unzip",
      "parameters": [
        {
          "parameter": "zip_file",
          "description": "The zip file to open"
        },
        {
          "parameter": "target_directory",
          "description": "The target directory to extract the files to"
        }
      ],
      "requiredParameters": 2,
      "isVariadic": false,
      "example": "```\nvar num = zip_unzip(\"/downloads/level_data.zip\", working_directory + \"extracted/\");\n    if num <= 0\n    {\n        show_debug_message(\"Extraction Failed!\");\n    }\n```\nThe above code will open the zip file stored in the directory \"downloads\" and extract its contents to the directory \"extracted\" (creating that directory if it doesn't already exist) and then check to see that the extraction has been correct, showing a debug message should it fail.\n",
      "description": "This function will open a stored zip file and extract its contents to the given directory. Note that if you do not supply a full path to the ZIP directory then the current drive *root* will be used, and if you want to place it in a relative path to the game bundle working directory then you should use the `working_directory` variable as part of the path (relative paths using \".\" or \"..\" will not work as expected so should be avoided). Note too that the zip must be either part of the game bundle (ie: an  [Included File](https://manual.yoyogames.com/Settings/Included_Files.htm)) or have been downloaded to the storage area using  [http_get_file()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asynchronous_Functions/HTTP/http_get_file.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/zip_unzip.htm"
    }
  },
  "variables": {
    "alarm": {
      "name": "alarm",
      "example": "```\nif canshoot\n    {\n        if keyboard_check_pressed(vk_space)\n        {\n            canshoot = false;\n            alarm[0] = room_speed;\n            instance_create_layer(x, y, \"Bullets\", obj_Bullet);\n        }\n    }\n```\nThe above code checks a variable and then if it is true, checks for a key press and if that is true it finally sets the variable to false, sets an alarm (where it will be set to true again) and creates an instance.\n",
      "description": "This 1 dimension  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) is used to get the current value for any alarms that the instance may have, or it can be used to set those alarms. There are twelve alarms built into each instance of an object, and each one has its own  [event](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Object_Events.htm) that will run when this variable reaches 0.",
      "returns": "Integer (-1 if the alarm isn't running)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/alarm.htm"
    },
    "application_surface": {
      "name": "application_surface",
      "example": "```\nsurface_resize(application_surface, display_get_gui_width(), display_get_gui_height())\n```\nThe above code will resize the application surface to have a 1:1 ratio with the GUI layer.\n",
      "description": "This global scope, built-in variable can be used to access the application surface using any of the surface functions. This surface is permanently available and is where the bulk of drawing is done by GameMaker Studio 2.",
      "returns": "Pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Surfaces/application_surface.htm"
    },
    "bbox_bottom": {
      "name": "bbox_bottom",
      "example": "```\nif bbox_bottom > room_height\n    {\n        y = room_height - sprite_yoffset;\n    }\n```\nThe above code checks to see if the bounding box of the instance is outside the room and if it is it sets the instance to a new position.\n",
      "description": "This **read only** variable returns the y position (within the room) of the bottom of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the  [sprite_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm) or by the  [mask_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/mask_index.htm)). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance Y position.",
      "returns": "Real (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_bottom.htm"
    },
    "bbox_left": {
      "name": "bbox_left",
      "example": "```\nif bbox_left < 0\n    {\n        x = sprite_xoffset;\n    }\n```\nThe above code checks to see if the bounding box of the instance is outside the room and if it is it sets the instance to a new position.\n",
      "description": "This **read only** variable returns the position (along the x-axis) within the room of the left hand bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the  [sprite_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm) or by the  [mask_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/mask_index.htm)). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance X position.",
      "returns": "Real (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_left.htm"
    },
    "bbox_right": {
      "name": "bbox_right",
      "example": "```\nif bbox_right > room_width\n    {\n        x = room_width - sprite_xoffset;\n    }\n```\nThe above code checks to see if the bounding box of the instance is outside the room and if it is it sets the instance to a new position.\n",
      "description": "This **read only** variable returns the position within the room (along the x-axis) of the right hand side of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the  [sprite_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm) or by the  [mask_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/mask_index.htm)). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance X position.",
      "returns": "Real (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_right.htm"
    },
    "bbox_top": {
      "name": "bbox_top",
      "example": "```\nif bbox_top < 0\n    {\n        y = sprite_yoffset;\n    }\n```\nThe above code checks to see if the bounding box of the instance is outside the room and if it is it sets the instance to a new position.\n",
      "description": "This **read only** variable returns the position within the room (along the y-axis) of the top of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the  [sprite_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm) or by the  [mask_index](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/mask_index.htm)). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance Y position.",
      "returns": "Real (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/bbox_top.htm"
    },
    "browser_height": {
      "name": "browser_height",
      "example": "```\nif (browser_height > window_get_height()) || (browser_width > window_get_width())\n    {\n        var xx, yy;\n        if (browser_width > window_get_width())\n        {\n            xx = (browser_width - window_get_width()) / 2;\n        }\n        else\n        {\n            xx = 0;\n        }\n        if (browser_height > window_get_height())\n        {\n            yy = (browser_height - window_get_height()) / 2;\n        }\n        else\n        {\n            yy = 0;\n        }\n        window_set_position(xx, yy);\n    }\n```\nThe above code checks the width and height of the browser to see if either is larger than the current window width and height. If either of them are, it then calculates a new position for the game window within the browser.\n",
      "description": "This variable holds the height (in pixels) of the browser the game is being run in. If no browser is present then the window size is returned. the following image illustrates how this variable relates to the rest of the positioning functions available through the  [Window Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/The_Game_Window.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/browser_height.htm"
    },
    "browser_width": {
      "name": "browser_width",
      "example": "```\nif (browser_height > window_get_height()) || (browser_width > window_get_width())\n    {\n        var xx, yy;\n        if (browser_width > window_get_width())\n        {\n            xx = (browser_width - window_get_width()) / 2;\n        }\n        else\n        {\n            xx = 0;\n        }\n        if (browser_height > window_get_height())\n        {\n            yy = (browser_height - window_get_height()) / 2;\n        }\n        else\n        {\n            yy = 0;\n        }\n        window_set_position(xx, yy);\n    }\n```\nThe above code checks the width and height of the browser to see if either is larger than the current window width and height. If either of them are, it then calculates a new position for the game window within the browser.\n",
      "description": "This variable holds the width (in pixels) of the browser the game is being run in. If no browser is present then the window size is returned. the following image illustrates how this variable relates to the rest of the positioning functions available through the  [Window Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/The_Game_Window.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/browser_width.htm"
    },
    "current_day": {
      "name": "current_day",
      "example": "```\ndraw_text(32, 32, \"Today is \" + string(current_day) + \"/\" + string (current_month) + \"/\" + string(current_year) +\".\");\n```\nThe above code will draw the day, month and year.\n",
      "description": "This **read only** variable will return the day as a value from 1 to 31, depending on the month.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_day.htm"
    },
    "current_hour": {
      "name": "current_hour",
      "example": "```\ndraw_text(32, 32, \"The time is \" + string(current_hour) + \":\" + string(current_minute) + \".\" + string(current_second));\n```\nThe above code would draw the current international time on the screen.\n",
      "description": "This **read only** variable will return the hour that corresponds to the current moment based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function `date_set_timezone()`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_hour.htm"
    },
    "current_minute": {
      "name": "current_minute",
      "example": "```\ndraw_text(32, 32, \"The time is \" + string(current_hour) + \":\" + string(current_minute) + \".\" + string(current_second));\n```\nThe above code would draw the current international time on the screen.\n",
      "description": "This **read only** variable will return the minutes that correspond to the current moment.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_minute.htm"
    },
    "current_month": {
      "name": "current_month",
      "example": "```\ndraw_text((32, 32, \"Today is \" + string(current_day) + \"/\" + string (current_month) + \"/\" + string(current_year) +\".\");\n```\nThe above code will draw the day, month and year.\n",
      "description": "This **read only** variable returns the current month as a numeric value where 1 is January and 12 is December.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_month.htm"
    },
    "current_second": {
      "name": "current_second",
      "example": "```\ndraw_text(32, 32, \"The time is \" + string(current_hour) + \":\" + string(current_minute) + \".\" + string(current_second));\n```\nThe above code would draw the current international time on the screen.\n",
      "description": "This **read only** variable will return the seconds that correspond to the current moment.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_second.htm"
    },
    "current_time": {
      "name": "current_time",
      "example": "```\nif (current_time > 600000)\n    {\n        msg = show_question_async(\"Would you like to rate?\");\n    }\n```\nThe above code checks to see if more than 10 minutes have passed before asking the user a question.\n",
      "description": "This **read only** variable will return the number of milliseconds that have passed since the game was started.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_time.htm"
    },
    "current_weekday": {
      "name": "current_weekday",
      "example": "```\nvar day;\n    switch(current_weekday)\n    {\n        case 0: day = \"Sunday\"; break;\n        case 1: day = \"Monday\"; break;\n        case 2: day = \"Tuesday\"; break;\n        case 3: day = \"Wednesday\"; break;\n        case 4: day = \"Thursday\"; break;\n        case 5: day = \"Friday\"; break;\n        case 6: day = \"Saturday\"; break;\n    }\n    draw_text(32, 32, \"Today is \" + day +\".\");\n```\nThe above code uses the `current_weekday` value to set a variable with the correct day in text, then draws that for the user to see.\n",
      "description": "This **read only** variable will return the weekday as a value, where Sunday is 0 and Saturday is 6.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_weekday.htm"
    },
    "current_year": {
      "name": "current_year",
      "example": "```\ndraw_text((32, 32, \"Today is \" + string(current_day) + \"/\" + string (current_month) + \"/\" + string(current_year) +\".\");\n```\nThe above code will draw the day, month and year.\n",
      "description": "This **read only** variable will return the current year.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/current_year.htm"
    },
    "debug_mode": {
      "name": "debug_mode",
      "example": "```\nif debug_mode\n    {\n        ini_open(\"Cheats.ini\");\n    }\n    else\n    {\n        ini_open(\"Game.ini\");\n    }\n```\nThe above code opens a different ini file depending on the value of the read-only variable `debug_mode`.\n",
      "description": "This **read only** variable returns `true` when the game is being played in debug mode and `false` when being played as normal.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/debug_mode.htm"
    },
    "delta_time": {
      "name": "delta_time",
      "example": "```\nvar _dt = delta_time / 1000000;\n    speed = spd * _dt;\n```\nThe above code will set the speed of the instance using delta-time to correct for lag. The variable \"_dt\" would be used to hold the previously calculated delta time value so that the ratio can be used to multiply the base speed value (held in the variable \"spd\") and so get a consistent speed for the instance.\n",
      "description": "The purpose of delta timing is to eliminate the effects of the lag or slowness of computers that try to handle complex graphics or a lot of code. It is a value that can be added on to the speed of objects so that they will eventually move at the same speed, regardless of lag. This is achieved in GameMaker Studio 2 by using the **read only** variable `delta_time` every step as it measures the time that has passed between one step and the next in microseconds (1microsecond is 1,000,000th of a second). Therefore the variable `delta_time` can be used to calculate how much faster (for example) a game character has to move to make up for a lag spike in the game.",
      "returns": "Real (integer)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/delta_time.htm"
    },
    "depth": {
      "name": "depth",
      "example": "```\nif y != yprevious\n    {\n        depth = -y;\n    }\n```\nThe above code will check to see if the y position has changed and if it has then the depth will also be set to correspond to it.\n",
      "description": "When you create an object you can assign it an initial *depth* which defines how the instances of that object will be drawn in the room when the game is being played and this variable can be used to get and to change that depth value while the game is running. You would normally not need to use this variable as you should be setting instances to be added to discreet  [layers](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/layer.htm), which in turn are set to a specific depth, but it may be that you want to change the depth of an instance using this value, in which case a \"temporary layer\" will be created specifically for the instance at the given depth. Note that when no instances are on the same depth then this temporary layer will be removed from memory (unlike regular layers which will remain even if they have nothing on them).",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/depth.htm"
    },
    "device_is_keypad_open": {
      "name": "device_is_keypad_open",
      "example": "```\nif device_is_keypad_open()\n    {\n         global.Setting = 2;\n    }\n    else\n    {\n         global.Setting = 1;\n    }\n```\nThe above code checks for a keypad then changes a global variable depending on the returned value.\n",
      "description": "This does a check of the device for a keypad and if one is available it returns `true` otherwise it returns `false`. Please note that this function is mainly for use with Android devices",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/device_is_keypad_open.htm"
    },
    "direction": {
      "name": "direction",
      "example": "```\nif keyboard_check(vk_left) direction += 5; if keyboard_check(vk_right) direction -= 5;\n```\nThe above code will change the direction of movement of the instance based on which key (left or right) is pressed.\n",
      "description": "All instances in GameMaker Studio 2 have certain \"built in\" properties that you can use and set to govern how they look and behave. `Direction` is one of those properties and can be used to set the direction of movement of the\n    instance when the instance has a `speed` other than 0. Note that directions in GameMaker Studio 2 are usually calculated as 0° being right, 90° being up, 180° being left and 270° being down, and that the gravity and\n    gravity_direction variables can modify the direction value when they are used in your games.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/direction.htm"
    },
    "event_action (deprecated)": {
      "name": "event_action (deprecated)",
      "example": "```\nnum = event_action;\n```\nThe above code stores the current action number in the variable \"num\".\n",
      "description": "This **read-only** variable returned the index of the action currently being executed, starting at 0 on previous versions of GameMaker. However, this is **now an obsolete variable **in GameMaker Studio 2.\n    It has been left in for legacy support only, and will **always return 0** as all actions are concatenated together to improve execution speed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_action.htm"
    },
    "event_data": {
      "name": "event_data",
      "example": "```\nisFlick = event_data[?\"isflick\"];\n    \n    if (isFlick)\n    {\n        flickVelX = event_data[?\"diffX\"];\n        flickVelY = event_data[?\"diffY\"];\n    }\n    else\n    {\n        flickVelX = 0;\n        flickVelY = 0;\n    }\n  \n```\nThe above code is taken from the **Drag End** gesture event and checks to see if the vent is a \"flick\" event, and if it is it extracts the required data from the `event_data` DS map and uses it to set some variables. If a \"flick\" event is not detected, then the same variables are set to 0.\n",
      "description": "This variable is **global** in scope and is used to hold a  [DS Map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) when used in the appropriate event (e.g.  [Gesture Events](https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Gesture_Events.htm) and  [Broadcast Messages](https://manual.yoyogames.com/The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm)), and -1 at all other times. The actual contents of the DS map will depend on the type of event that triggered it, so refer to the individual sections for those events.",
      "returns": "Real (integer value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Gesture_Input/event_data.htm"
    },
    "event_number": {
      "name": "event_number",
      "example": "```\nswitch (event_number)\n    {\n        case ev_step_normal: show_debug_message(\"Step event!\"); break;\n        case ev_game_start: show_debug_message(\"Game Start\"\"); break;\n        case ev_room_start: show_debug_message(\"Room Start!\"); break;\n    }\n```\nThe above code could be called form a script and used to show debug messages informing you which event is being currently triggered.\n",
      "description": "This **read-only** variable returns the number of the event currently being called, where the number is actually referring to the \"sub event\" of the event, ie: for the step event the event number could be any one of the constants **ev_step_normal**, **ev_step_begin**, or **ev_step_end**. For a full list of constants that are available for the specific sub-events see `event_perform()`, and if you should need to know the main event itself, you should be checking the `event_type`.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_number.htm"
    },
    "event_object": {
      "name": "event_object",
      "example": "```\nglobal.obj = event_object;\n```\nThe above code stores the object index of the instance performing the event in a global variable.\n",
      "description": "This **read-only** variable returns object index of the instance which is running the event being checked.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_object.htm"
    },
    "event_type": {
      "name": "event_type",
      "example": "```\nshow_debug_message(\"Current Event = \" + string(event_type));\n```\nThe above code will show a debug message with the event type currently being performed.\n",
      "description": "This **read-only** variable returns the type of event currently being executed, which can be one of the following constants:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_type.htm"
    },
    "font_texture_page_size": {
      "name": "font_texture_page_size",
      "example": "```\nfont_texture_page_size = 512; newfont = font_add(\"Arial\", 24, true, true, 32, 128);\n```\nThe above code sets the font cache texture page to a maximum size of 512px and then adds a new font to the game.\n",
      "description": "This **built-in variable** can be used to either get or set the texture page size when using the function `font_add()`. On adding a font using that function, GameMaker Studio 2 will\n    create a texture page cache of the required glyphs up to the size defined by this variable. The process is as follows:",
      "returns": "Real (maximum width/height in pixels)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Fonts/font_texture_page_size.htm"
    },
    "fps": {
      "name": "fps",
      "example": "```\nif debug_mode\n    {\n        draw_text(32, 32, \"FPS = \" + string(fps));\n    }\n```\nThe above code will check to see if the game is in debug mode and if it is it will display the current fps on the screen.\n",
      "description": "In GameMaker Studio 2 there are two main ways that can be used to tell the speed at which your game runs. The `game speed` (as specified in the Game Options) and the `fps` (frames per second). These values are often confused, but basically one is the number of game steps that GameMaker Studio 2 is supposed to be completing in a second, while the other (the fps) is the number of CPU steps that GameMaker Studio 2 is actually completing in a second *up to a maximum value of the room speed itself*. To get the true fps, ie. the actual number of cpu steps per game step, use the `fps_real` variable.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/fps.htm"
    },
    "fps_real": {
      "name": "fps_real",
      "example": "```\nif debug_mode\n    {\n        draw_text(32, 32, \"FPS = \" + string(fps_real));\n    }\n```\nThe above code will check to see if the game is in debug mode and if it is it will display the current real fps on the screen.\n",
      "description": "In GameMaker Studio 2 there are two main ways that can be used to tell the speed at which your game runs. The `game speed` (as specified in the Game Options) and the `fps` (frames per second). These values are often confused, but basically one is the number of game steps that GameMaker Studio 2 is supposed to be completing in a second (game speed), while the other is the number of CPU steps that GameMaker Studio 2 is actually completing in a second (the real fps), and this value is generally much higher than the game speed, but will drop as your game gets more complex and uses more processing power to maintain the set room speed.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Debugging/fps_real.htm"
    },
    "friction": {
      "name": "friction",
      "example": "```\nif abs(speed) > 0\n    {\n        friction = 0.05;\n    }\n    else\n    {\n        friction = 0;\n    }\n```\nThe above code will only apply friction if the instance's absolute (tooltip) speed is above 0.\n",
      "description": "`Friction` is one of the \"built in\" properties that instances can have and can be used to slow the instance down over time when the `speed` is other than zero. It works simply by subtracting an amount from the speed every step until the object has a speed of 0, so if the friction is set to, for example, 0.1 and the speed of the instance is 1 (1 pixel per step), it will slow down and stop after 10 steps have passed. Note too that the friction is applied to positive and negative speeds equally with the net result always being that the object has a speed of 0 after a given time.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/friction.htm"
    },
    "game_display_name": {
      "name": "game_display_name",
      "example": "```\nvar name = game_display_name; var ver = string(GM_version); draw_text(32, 32, name + \":\" + ver);\n```\nThe above code gets the display name and the version number of the game and draws them.\n",
      "description": "This **read only** variable returns the display name of your game for the target platform, as set in the  [Game Options](https://manual.yoyogames.com/Settings/Game_Options.htm).",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_display_name.htm"
    },
    "game_id": {
      "name": "game_id",
      "example": "```\nini_open(\"Score.ini\"); ini_write_real(\"Scores\",\"0\",score + game_id); ini_close();\n  \n```\nThe above code performs a very basic encryption on the score by adding the game_id to it before saving. On reading it back into the game you would deduct the game_id to get the correct value again.\n",
      "description": "This **read only** variable returns the unique identifier for the game you have created. You can use this if you need a unique file name, or anything else that needs something to identify your game only. This can be set in the  [Game Options](https://manual.yoyogames.com/Settings/Game_Options.htm).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_id.htm"
    },
    "game_project_name": {
      "name": "game_project_name",
      "example": "```\nvar file = game_project_name + \".ini\"; ini_open(file);\n     ini_write_real(\"Scores\", \"Highscore\", score); ini_close();\n  \n```\nThe above code gets the project name and uses this to open (or create) an ini file which is then written to.\n",
      "description": "This **read only** variable returns the display name of your game for the target platform in a \"save-friendly\" format for the target platform. If the display name contains any characters that are not permitted for a file name, they will\n    be replaced automatically with \"_\". The display name can be set in the  [Game Options](https://manual.yoyogames.com/Settings/Game_Options.htm). Note that since there are no restrictions on file names for HTML5, this string will probably be the same\n    as that returned by `game_display_name`.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_project_name.htm"
    },
    "game_save_id": {
      "name": "game_save_id",
      "example": "```\nsave_dir = game_save_id;\n```\nThis will store the directory for saving files to a variable for future use.\n",
      "description": "This **read-only** variable will return the full path ID of the directory that is used by your game to save files to. This directory may or may not be visible to other applications, depending on the platform, and on the HTML5 target it will return\n    an empty string.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_save_id.htm"
    },
    "gravity": {
      "name": "gravity",
      "example": "```\nif !place_meeting(x, y + 1, obj_Ground)\n    {\n        gravity = 0.01;\n    }\n    else\n    {\n        gravity = 0;\n    }\n```\nThe above code will only apply gravity if the instance does not find any instances of \"obj_Ground\" beneath it.\n",
      "description": "`gravity` is one of the \"built in\" variables all instances have and, when set, will apply a constant force in the `gravity_direction` of the instance, influencing both the instance  [speed](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm)` `and  [direction](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/direction.htm). Note that gravity is a cumulative force and will accelerate the object if you choose not to cap the final speed, and it's usual that you'd set this variable to small decimal values like 0.01. If you set the gravity to 0, then no gravity will be applied to the instance (this is the default value).",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/gravity.htm"
    },
    "gravity_direction": {
      "name": "gravity_direction",
      "example": "```\nif place_meeting(x, y, obj_switch)\n    {\n        gravity_direction += 180;\n    }\n```\nThe above code will change the gravity_direction if the player object meets an instance of \"obj_switch\".\n",
      "description": "`gravity_direction` is one of the \"built in\" properties all instances have and can be used to set the direction of movement when the instances `gravity` is greater than 0. Note that directions in GameMaker Studio 2 are usually calculated as 0° being right, 90° being up, 180° being left and 270° being down.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/gravity_direction.htm"
    },
    "hspeed": {
      "name": "hspeed",
      "example": "```\nif keyboard_check(vk_left) hspeed = -5; if keyboard_check(vk_right) hspeed = 5;\n```\nThe above code will change the horizontal speed depending on which keys are pressed.\n",
      "description": "`hspeed` is one of the \"built in\" properties that all instances have and defines the horizontal movement speed (along the x-axis) of the instance in pixels per step. So, an `hspeed` of 3 means 3 pixels of movement to the right\n    (+x) every step, and an `hspeed` of -3 would mean 3 pixels of movement to the left (-x) every step.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/hspeed.htm"
    },
    "id": {
      "name": "id",
      "example": "```\nfor(var i = 0; i < instance_count; i++;)\n    {\n        if instance_id[i] != id\n        {\n            instance_id[i].scr += 5;\n        }\n    }\n```\nThe above code adds 5 to the \"scr\" variable for every active instance in the room except the one running the code. It does this by looping through ALL the active instances (using the \"instance_id\" array to return each active instances ID) and comparing them against the built in \"id\" variable, which is the ID of the original instance running the code.\n",
      "description": "This **read-only** variable holds the unique identifying number for the instance. Every instance that you create - whether through code or by adding them to a room in the Room Editor - is given a number that is used internally to identify this instance and the variable id is what you can use to reference it. The id is also returned (and can be stored in a variable) when an instance is created using  [instance_create_layer()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_create_layer.htm) or  [instance_create_depth()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_create_depth.htm), as well as other instance functions.",
      "returns": "Real (integer - instance ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm"
    },
    "image_alpha": {
      "name": "image_alpha",
      "example": "```\nimage_alpha = clamp(image_alpha - 0.01, 0, 1);\n```\nThe above code will slowly reduce the image_alpha until it reaches 0.\n",
      "description": "This variable is used to get or to set the alpha value for the sprite. Alpha is always calculated as a value between 0 and 1 where 0 is completely transparent and 1 is completely opaque. Please note that for changes in this variable to be visible, the\n    instance should have either *no* draw event (and so GameMaker Studio 2 will default draw the sprite) or be drawn using one of the extended drawing functions like \n    `draw_self()` or `draw_sprite_ext()`.",
      "returns": "Real (between 0 and 1 - single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_alpha.htm"
    },
    "image_angle": {
      "name": "image_angle",
      "example": "```\nimage_angle = point_direction(x, y, mouse_x, mouse_y);\n```\nThe above code will rotate the sprite of the instance to always point at the mouse position.\n",
      "description": "This value sets the angle (rotation) of the sprite and is measured in degrees, with the right being 0º, up being 90º, left being 180º and down being 270º. Set this variable to 0 to reset the sprite to be drawn as was defined in the sprite editor. Please\n    note that for changes in this variable to be visible, the instance should have either *no* draw event (and so GameMaker Studio 2 will default draw the sprite) or be drawn using one of the extended drawing functions like `draw_self()` or\n    `draw_sprite_ext()`.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_angle.htm"
    },
    "image_blend": {
      "name": "image_blend",
      "example": "```\nimage_blend = make_colour_hsv(255, 255, random(255));\n```\nThe above code will set the image_blend of the sprite defined for the instance to a random colour.\n",
      "description": "This variable controls the \"tinting\" of the instance sprite and the default value is -1 (but can also be `c_white`). Any other value (including internal colour constants like `c_red`, or `c_aqua`) will blend the specified\n    colour with the original sprite. Please note that for changes in this variable to be visible, the instance should have either *no* draw event (and so GameMaker Studio 2 will default draw the sprite) or be drawn using one of the extended drawing\n    functions like `draw_self()` or `draw_sprite_ext()`.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_blend.htm"
    },
    "image_index": {
      "name": "image_index",
      "example": "```\nif (image_speed > 0)\n    {\n        if (image_index >= image_number - 1) instance_destroy();\n    }\n```\nThe above code checks to see if the sprite is animating, and if it is then it checks to see if the current image_index is at the last frame and in that case destroys the instance.\n",
      "description": "A sprite is made up of one or more *sub-images* which can make the sprite appear animated as they switch from one to the other, or can they can be switched between in code to give different \"states\", much like a button has in windows. If the sprite is animated, then you can get the current frame of the animation by checking the `image_index` variable, or if you want to change the state of a static sprite, you can select a new sub-image by setting this variable to the desired sub-image of the sprite. Please note that for changes in this variable to be visible, the instance should have either *no* draw event (and so GameMaker Studio 2 will default draw the sprite) or be drawn using one of the drawing functions like `draw_self()` or `draw_sprite_ext()` (by supplying the image_index into the appropriate argument).",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_index.htm"
    },
    "image_number": {
      "name": "image_number",
      "example": "```\nif image_speed > 0\n    {\n        if image_index > image_number - 1 instance_destroy();\n    }\n```\nThe above code checks to see if the sprite is animating, and if it is it then checks to see if the current image_index is greater than the number of sub-images and if it is it destroys the instance.\n",
      "description": "This **read only** variable can be used to get the number of sub-images in a sprite that has been assigned to an instance (if you need the number of sub-images for a sprite other than the one assigned to the instance you should use `sprite_get_number()`). Please note that when there is (for example) 1 sub-image this variable will return \"1\" but the image_index of that sub-image is 0.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_number.htm"
    },
    "image_speed": {
      "name": "image_speed",
      "example": "```\nwith (instance_create_layer(x, y, \"Effects\", obj_Explosion))\n    {\n        image_speed = 0.5;\n    }\n```\nThe above code creates an instance of the object \"obj_Explosion\" and sets its image_speed to 0.5 (effectively halving the running speed).\n",
      "description": "This variable determines the speed in which GameMaker Studio 2 will cycle through the sub-images for the current instance sprite. The speed value given is a *multiplier*, with 1 being the default value, and setting it to 0.5 will half the animation speed - as set in the  [Sprite Editor](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm) or  [Image Editor](https://manual.yoyogames.com/The_Asset_Editors/Image_Editor.htm)- while setting it to 2 will double it. If the sprite used has no sub-images, this variable will have no effect.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_speed.htm"
    },
    "image_xscale": {
      "name": "image_xscale",
      "example": "```\nif image_xscale < 5\n    {\n        image_xscale += 0.2;\n        image_yscale = image_xscale;\n    }\n    else\n    {\n        instance_create_layer(x, y, \"Effects\", obj_Explosion);\n        instance_destroy();\n    }\n```\nThe above code scales the sprite and then once it is scaled to 5 times its original size, a new instance of another object is created and the instance destroyed.\n",
      "description": "This value sets the horizontal scaling applied to the sprite that has been assigned to the current instance. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite), larger values will scale up and negative values will flip the sprite *and* scale it unless the value used is exactly -1 (in which case the sprite is just flipped about its origin with no scaling).",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_xscale.htm"
    },
    "image_yscale": {
      "name": "image_yscale",
      "example": "```\nif image_xscale < 5\n    {\n        image_xscale += 0.2;\n        image_yscale = image_xscale;\n    }\n    else\n    {\n        instance_create_layer(x, y, \"Effects\", obj_Explosion);\n        instance_destroy();\n    }\n```\nThe above code scales the sprite and then once it is scaled to 5 times its original size, a new instance of another object is created and the instance destroyed.\n",
      "description": "This value sets the vertical scaling (along the y-axis) applied to the sprite that has been assigned to the current instance. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the sprite), larger values will scale up and negative values will mirror the sprite *and* scale it unless the value used is exactly -1 (in which case the sprite is just mirrored along the y-axis with no scaling).\n    [image_yscale Example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Sprites/yscale_image.png)\n  ",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_yscale.htm"
    },
    "in_sequence": {
      "name": "in_sequence",
      "example": "```\nif (!in_sequence) {\n         x += move_x;     y += move_y; }\n  \n```\nThe above code checks the in_sequence variable, and if it is false (meaning the instance is not being controlled by a sequence) then it adds `move_x` and `move_y` to the instance's\n    position, making sure that it only moves when it's not in a Sequence.\n",
      "description": "This is a **built-in variable** that is part of the  [instance variables](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/Instance_Variables.htm) created for every object instance in your game. If the instance is being controlled by a sequence,\n    this variable will return true, otherwise it will return false. This is a **read-only** variable and cannot be changed.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/in_sequence.htm"
    },
    "instance_id": {
      "name": "instance_id",
      "example": "```\nfor (var i = 0; i < instance_count; i ++;)\n    {\n        with (instance_id[i]) speed += 0.1;\n    }\n```\nThe above code will loop through all instances within the room and add 0.1 to their speed.\n",
      "description": "This **read only**  [array](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Arrays.htm) holds all the `id` [s](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm) of every *active *instance within the room. This means that if you have used any of the  [Instance Deactivate](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/Deactivating_Instances.htm) functions those instances that have been deactivated will not be included in this array (if you have used a value from this array previously, it will now return the keyword  [noone](https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Instance_Keywords.htm)).",
      "returns": "Real (instance ID value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_id.htm"
    },
    "keyboard_key": {
      "name": "keyboard_key",
      "example": "```\nswitch (keyboard_key)\n    {\n        case vk_numpad1: gun = weapon[0][0]; break;\n        case vk_numpad2: gun = weapon[1][0]; break;\n        case vk_numpad3: gun = weapon[2][0]; break;\n    }\n```\nThe above code uses the value of the `keyboard_key` variable to set a variable to the same value as an array.\n",
      "description": "With this variable you can get the keycode of the key that is currently being pressed and it will return 0 if no key is being pressed when the check is done.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_key.htm"
    },
    "keyboard_lastchar": {
      "name": "keyboard_lastchar",
      "example": "```\nif keyboard_lastkey != -1\n    {\n        str += keyboard_lastchar;\n        keyboard_lastkey = -1;\n    }\n```\nThe above code checks to see if the lastkey variable is greater than -1, and if it is it adds whatever the last key was as a string to the variable \"str\".\n",
      "description": "This variable stores a string of the last key pressed. This variable is *not* read only and you can change it, for example to set it to \"\" (an empty string) if you handled it already.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_lastchar.htm"
    },
    "keyboard_lastkey": {
      "name": "keyboard_lastkey",
      "example": "```\nif (keyboard_lastkey != -1)\n    {\n        str += keyboard_lastchar;\n        keyboard_lastkey = -1;\n    }\n```\nThe above code checks to see if the lastkey variable is not equal to -1, and if it is it adds whatever the last key was as a string to the variable \"str\", then it resets the `keyboard_lastkey` variable to accept further input.\n",
      "description": "This variable refers to the value that `keyboard_key` was in the previous frame, returning the keycode of that key (all standard keycode constants are returned). This variable is *not* read only and you can change it, for example to set it to -1 if you handled it already.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_lastkey.htm"
    },
    "keyboard_string": {
      "name": "keyboard_string",
      "example": "```\nif string_length(keyboard_string) > 15\n    {\n        keyboard_string = string_copy(keyboard_string, 1, 15);\n    }\n```\nThe above code will limit the length of the keyboard string to 15 characters, removing those that are over that limit by copying the first fifteen characters back into the variable.\n",
      "description": "This variable holds a string containing the last (at most) 1024 characters typed on the keyboard. This string will only contain printable characters typed, but it *will* correctly respond to pressing the backspace key by erasing the last character. This variable is *not* read only and you can change it, for example to set it to \"\" (an empty string) if you handled it already, and you can use the  [String Functions](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Strings/Strings.htm) to manipulate it. Note that when using the on-screen  [Virtual Keyboard](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Virtual_Keys_And_Keyboards/Virtual_Keys_And_Keyboards.htm), *only* this variable will be updated with the keyboard input.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/keyboard_string.htm"
    },
    "layer": {
      "name": "layer",
      "example": "```\nlayer = layer_create(-1000);\n```\nThe above code will create a new layer with a depth of -1000 and then set the instance `layer` variable to the returned layer ID, moving the instance from the layer it is currently on to the new layer being created.\n",
      "description": "This **built-in variable** is created for every instance in a room and contains the layer ID value of the layer that the instance is assigned to. This value can then be used in other functions like `layer_get_depth()` or\n    it can be changed to move the instance to another layer, but note that if the layer being assigned does not exist in the current room, then you will get an error that will force your game to close. When assigning a layer, you must supply the unique\n    **layer ID** as returned by the function `layer_get_id()` (when using named room layers), or as returned by the function `layer_create()` (when\n    you create your own layers at run time).",
      "returns": "Real (integer - resource index value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/layer.htm"
    },
    "mask_index": {
      "name": "mask_index",
      "example": "```\nmask_index = spr_Round;\n```\nThe above code sets the mask of the instance to that of the sprite \"spr_Round\".\n",
      "description": "When you define an object in GameMaker Studio 2 you can assign it a mask to be used for collisions rather than the one that corresponds to the defined sprite. This variable can be used to find the sprite_index    of that mask (or it will return -1 if no sprite has been assigned) or to set the mask for an instance to the chosen sprite. Setting the mask index means that you can have, for example, a sprite for the instance with an irregular shape, yet give it\n    a circular collision mask that is gotten from a different sprite.",
      "returns": "Real (integer - resource index value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/mask_index.htm"
    },
    "mouse_button": {
      "name": "mouse_button",
      "example": "```\nif mouse_button = mb_left\n    {\n        x -= 1;\n    }\n```\nThis moves the current instance left if the left mouse button is down.\n",
      "description": "This **read only** variable returns the mouse button that is currently being pressed (currently, as in, this step) and can return any of the special  [mouse constants](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm) except `mb_any`.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_button.htm"
    },
    "mouse_lastbutton": {
      "name": "mouse_lastbutton",
      "example": "```\nif mouse_lastbutton = mb_left\n    {\n        x -= 1;\n    }\n```\nThis moves the current instance left if the last button pressed was the left mouse button.\n",
      "description": "This variable returns the last mouse button that was pressed and can return any of the special  [mouse constants](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/Mouse_Input.htm) except `mb_any` (you may also set this variable to one of the constants).",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_lastbutton.htm"
    },
    "mouse_x": {
      "name": "mouse_x",
      "example": "```\nx = median(64, mouse_x, room_width - 64);\n```\nThe above code will maintain the instance at the mouse x position as long as it is within the limits of 64 pixels from either side of the room.\n",
      "description": "This **read-only** variable returns the current x axis position of the mouse within the room.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_x.htm"
    },
    "mouse_y": {
      "name": "mouse_y",
      "example": "```\ny = median(64, mouse_y, room_height - 64);\n```\nThe above code will maintain the instance at the mouse y position as long as it is within the limits of 64 pixels from the top and bottom of the room.\n",
      "description": "This **read-only** variable returns the current y axis position of the mouse within the room.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_y.htm"
    },
    "object_index": {
      "name": "object_index",
      "example": "```\nobj_name = object_get_name(object_index);\n```\nThe above code will use the `object_index` to find the name of the object that the current instance has been created from.\n",
      "description": "This **read only** variable returns the index of the object that the instance has been created from. This is *not* the same as the object name, which is a string and can be found using `object_get_name()`,\n    as this function returns the index number, which is a unique value that GameMaker Studio 2 assigns to every object at the time of creation.",
      "returns": "Real (integer - resource index value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/object_index.htm"
    },
    "os_browser": {
      "name": "os_browser",
      "example": "```\nif (os_browser == browser_not_a_browser)\n    {\n        global.Config = 0;\n    }\n    else\n    {\n        global.Config = 1;\n    }\n```\nThe above code checks to see if the game is running in a browser or not and sets a global variable to a value depending on the result of the check.\n",
      "description": "This **read-only** variable holds one of various constants (listed below) that GameMaker Studio 2 has to tell you which browser you are currently running the game in (if any). ",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm"
    },
    "os_device": {
      "name": "os_device",
      "example": "```\nif (os_browser = browser_not_a_browser)\n    {\n        switch (os_device)\n        {\n            case device_ios_ipad: global.Config = 2; break;\n            case device_ios_iphone: global.Config = 3; break;\n            case device_ios_iphone_retina: global.Config = 4; break;\n            case device_ios_unknown: global.Config = 5; break;\n        }\n    }\n    else\n    {\n        global.Config = 1;\n    }\n```\nThe above code checks to see if the game is running in a browser or not and sets a global variable to a value depending on the result of the check.\n",
      "description": "This **read-only** variable holds one of various constant values listed below to tell you which device you are currently running the game on. Note this variable is deprecated in favour of the function os_get_info() which returns more accurate information on the device running the game.",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm"
    },
    "os_type": {
      "name": "os_type",
      "example": "```\nswitch (os_type)\n    {\n        case os_windows: global.Config = 0; break;\n        case os_android: global.Config = 1; break;\n        case os_linux: global.Config = 2; break;\n        case os_macosx: global.Config = 3; break;\n        case os_ios: global.Config = 4; break;\n        case os_winphone: global.Config = 5; break;\n    }\n```\nThe above code checks the OS running the game and sets a global variable accordingly.\n",
      "description": "This **read-only** variable holds one of various constant GameMaker Studio 2 has to tell you which operating system the game has been created for. Note that this is *not* necessarily the same as the OS of the device running it, since - for example - your game could be running on an Amazon Fire OS, but will have been built for the Android platform (in which case `os_type` will be `os_android`).",
      "returns": "Constant",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm"
    },
    "os_version": {
      "name": "os_version",
      "example": "```\nif (os_type == os_android) && (os_version > 10)\n    {\n        global.GFX = 1;\n    }\n```\nThe above code checks the os type and version number and they are both correct then the global variable is set to 1.\n",
      "description": "This variable will tell you the version number for the OS that is running your game. For example, if you are running it on Windows 10, `os_version` will be equal to 655360.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_version.htm"
    },
    "part_type_colour_rgb": {
      "name": "part_type_colour_rgb",
      "example": "```\npart_type_rgb(global.Blood_Part, 0, 255, 0, 0, 0, 0);\n```\nThe above code sets each particle emitted of the particle type indexed in the global variable \"Blood_Part\" to be only different shades of red.\n",
      "description": "With this function you can set the mix of red, green and blue colours for all particles created of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based\n    on the given range of parameters. All values must be between 0 and 255.",
      "returns": "N/A",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_colour_rgb.htm"
    },
    "path_endaction": {
      "name": "path_endaction",
      "example": " \n```\nif (path_endaction == path_action_stop)\n    {\n        path_endaction = path_action_reverse;\n    }\n```\nThe above code will check the path end action and if it's set to stop, then the end action will be changed to reverse.\n",
      "description": "This variable can be used to get or to change the reaction of an instance when it reaches the end of the current path. Normally you would set this when you start the path using `path_start()` but you may wish to change this behaviour depending on any number of events in your game. The available values are expressed using the following constants:",
      "returns": "Constant (see description)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_endaction.htm"
    },
    "path_index": {
      "name": "path_index",
      "example": "```\nif (path_index == -1)\n    {\n        path_start(pth_enemy3, 4, path_action_reverse, 0);\n    }\n```\nThe above code checks to see if a path has been assigned to the instance, and if not it starts a new path (assigning it to the `path_index` at the same time).\n",
      "description": "All resources in GameMaker Studio 2 have a unique identifying number, and the `path_index` is a **read-only** variable that holds the index value for a given path resource that has been assigned to an instance using the  [path_start()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm) function. If the instance has no path assigned, the variable will be set to -1.",
      "returns": "integer (Path ID)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"
    },
    "path_orientation": {
      "name": "path_orientation",
      "example": "```\nmypath = path_duplicate(choose(path_1, path_2, path_3, path_4)); path_start(path, 4, path_action_reverse, 0); path_orientation = 90;\n```\nThe above code duplicates a random, pre-made path asset into the variable \"mypath\". This new path is then started and rotated 90°.\n",
      "description": "This variable holds the current orientation of the path that has been assigned to the instance when the function  [path_start()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm) was called. When a path is created, its orientation is the default\n    0 degrees, but you can set this value to anything you wish using this. Remember that in GameMaker Studio 2 (unless you are using physics) the angles are calculated counter-clockwise, so setting the path orientation\n    to 90° would rotate the path to the *left*.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_orientation.htm"
    },
    "path_position": {
      "name": "path_position",
      "example": "```\npath_position = random(1);\n```\nThe above code sets the instance to a random position anywhere on the current path.\n",
      "description": "This function can be used to get or to set the position of an instance along a path. The value is normalised from 0 - 1, so if you set it to, for example, 0.5, the instance will be moved to exactly the middle of the path.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_position.htm"
    },
    "path_positionprevious": {
      "name": "path_positionprevious",
      "example": "```\nvar _x = x + lengthdir_x(16, direction);\n    var _y = y + lengthdir_y(16, direction);\n    if collision_circle(xx, yy, 16, obj_Player, false,true)\n    {\n        path_position = path_positionprevious;\n    }\n```\nThe above code checks an area in front of the instance for a collision with the object \"obj_Player\" and if there is one, it sets the instance back to the previous position it occupied on the current path, as assigned by the function  [path_start()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm).\n",
      "description": "This variable can be used to get or to set the position of an instance along its current path in the previous step, and is a normalised value between 0 and 1 ie: 0 is the start position of the path and 1 would be the end position. It is similar to the `xprevious` and `yprevious` variables in how it works, only it is specific for paths. It can be useful for things like temporarily stopping a path follower if something is in the way (see the example code below).",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_positionprevious.htm"
    },
    "path_scale": {
      "name": "path_scale",
      "example": "```\npath_scale = 1 + random(2);\n```\nThe above code will set the current path's scale to a random size between 1 (its original size) and 3 (3 times its original size).\n",
      "description": "This value can be used to get or to set the scale of the currently assigned path for the instance (as set by the function  [path_start()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm)) with a default value of 1. This is a scalar value, so\n    1 is a scale of 1:1, while setting it to 2, for example, will be double the scale and setting it to 0.5 would be halving the scale.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_scale.htm"
    },
    "path_speed": {
      "name": "path_speed",
      "example": "```\npath_speed = -1 + random(2);\n```\nThe above code will set the instance to travel the path at a random speed between -1 and 1.\n",
      "description": "You can use this function to get or to set the speed of a path after it has been started using the function  [path_start()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/path_start.htm). You can use negative values to signify that the instance should follow\n    the path in reverse.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_speed.htm"
    },
    "persistent": {
      "name": "persistent",
      "example": "```\nif !persistent\n    {\n        persistent = true;\n    }\n```\nThe above code will check the instance to see if persistence is flagged as `false` and if the instance is NOT persistent the persistence flag is set to `true`.\n",
      "description": "This variable can be read to find out if the instance is flagged as `persistent` or not, or it can used to set persistence to `true` (persistent) or `false` (not persistent) for the instance. A persistent instance is one that will be \"carried over\" from room to room, meaning (for example) that it only has to be created once at the start of the game and it will be present in all further rooms. Care should be taken with persistence as it is easy to lose track of persistent instances which can lead to problems later in the development of the game.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/persistent.htm"
    },
    "phy_active": {
      "name": "phy_active",
      "example": "```\nif keyboard_check_pressed(ord\"P\")\n    {\n        global.Pause = !global.Pause\n        with (obj_Parent)\n        {\n            phy_active = !global.Pause;\n        }\n    }\n```\nThe above code will detect a keypress of the letter \"P\" and then toggle the global variable \"Pause\" from `true` to `false` and back again. This variable is then used to set whether physics is active or not in the children instances of the object indexed in the variable \"obj_Parent\".\n",
      "description": "This variable controls whether or not the instance is currently \"active\". Setting it to `false` will prevent the instance from participating in the physics world, and setting it to `true` will have it participating again. Please note that this is not the same as  [deactivating the instance](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Deactivating_Instances/Deactivating_Instances.htm), as the instance is still visible on the screen and can still be changed through code, rather this function just prevents it from participating in the physics simulation",
      "returns": "Boolean (or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_active.htm"
    },
    "phy_angular_damping": {
      "name": "phy_angular_damping",
      "example": "```\nif place_meeting(phy_position_x, phy_position_y, obj_Water)\n    {\n        phy_angular_damping = 10;\n    }\n    else\n    {\n        phy_angular_damping = 3;\n    }\n```\nThe above code will check for a collision between the calling instance and instances of \"obj_Water\" and change the angular damping accordingly.\n",
      "description": "This variable can be used to set the angular damping of the instance, or it can be used to get the current angular damping. The damping is the amount of \"resistance\" to angular rotation that the physics enabled instance has, with a lower value permitting the instance to rotate faster after a collision (for example) and a higher value making it require a more forceful push and rotate slower",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_angular_damping.htm"
    },
    "phy_angular_velocity": {
      "name": "phy_angular_velocity",
      "example": "```\nif abs(phy_angular_velocity) > 0\n    {\n        phy_angular_velocity -= sign(phy_angular_velocity) * 0.01;\n    }\n    else\n    {\n        phy_angular_velocity = 0;\n    }\n```\nThe above code will check the angular velocity of the instance and if it is not 0 it will then add (or subtract) a small amount every step until the value is 0.\n",
      "description": "This variable can be used to set the angular velocity of the instance, or it can be used to get the current angular velocity, in degrees per second and the value used can be either positive (for clockwise rotation) or negative (for anticlockwise rotation). If you set this on an instance that was previously static (ie: it has a density of 0) it will become a kinematic object and begin rotating",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_angular_velocity.htm"
    },
    "phy_bullet": {
      "name": "phy_bullet",
      "example": "```\nwith (instance_create_layer(x, y, \"Bullets\", obj_Shoot))\n    {\n        phy_bullet = true;\n        physics_apply_local_impulse(0, 10, 0, 200);\n    }\n```\nThe above code creates a new instance and then defines it as being a \"bullet\" in the physics world before giving it a massive impulse along the y axis.\n",
      "description": "This variable defines whether or not the instance is extremely fast moving (for example a bullet). The default value is `false` but if set to `true` this tells GameMaker Studio 2 that the instance will be moving at such high speeds that it will require more expensive collision detection to ensure it doesn't pass through other instances undetected",
      "returns": "Boolean (or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_bullet.htm"
    },
    "phy_col_normal_x": {
      "name": "phy_col_normal_x",
      "example": "```\nrepeat(5 + irandom(5))\n    {\n        with (instance_create_layer(x, y, \"Effects\", obj_Debris)\n        {\n            physics_apply_local_impulse(0, 0, other.phy_col_normal_x[0], other.phy_col_normal_y[0]);\n        }\n    }\n```\nThe above code uses the contact normal to set the direction of movement for an instance created in the collision event between two physics enabled instances.\n",
      "description": "This **read-only** variable returns the x component of the collision normal corresponding to the `phy_collision_x` array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct \"push\" direction to resolve collisions",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_col_normal_x.htm"
    },
    "phy_col_normal_y": {
      "name": "phy_col_normal_y",
      "example": "```\nrepeat(5 + irandom(5))\n    {\n        with (instance_create_layer(x, y, \"Effects\", obj_Debris)\n        {\n            physics_apply_local_impulse(0, 0, other.phy_col_normal_x[0], other.phy_col_normal_y[0]);\n        }\n    }\n```\nThe above code uses the contact normal to set the direction of movement for an instance created in the collision event between two physics enabled instances.\n",
      "description": "This **read-only** variable returns the y component of the collision normal corresponding to the `phy_collision_y` array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct \"push\" direction to resolve collisions",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_col_normal_y.htm"
    },
    "phy_collision_points": {
      "name": "phy_collision_points",
      "example": "```\nfor(var i = 0; i < phy_collision_points; i += 1;)\n    {\n        part_particles_create(global.Sname, phy_collision_x[i], phy_collision_x[1], global.Spark, 5);\n    }\n```\nThe above code creates particles at all the defined points of a collision between two physics enabled instances.\n",
      "description": "This **read-only** variable returns the number of points of collision detected between the two objects in the collision",
      "returns": "Real (integer value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_collision_points.htm"
    },
    "phy_collision_x": {
      "name": "phy_collision_x",
      "example": "```\nfor(var i = 0; i < phy_collision_points; i += 1;)\n    {\n        part_particles_create(global.Sname, phy_collision_x[i], phy_collision_y[i], global.Spark, 5);\n    }\n```\nThe above code creates particles at all the defined points of a collision between two physics enabled instances.\n",
      "description": "This **read-only** array returns the x position of all points detected in a collision between two physics enabled instances.",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_collision_x.htm"
    },
    "phy_collision_y": {
      "name": "phy_collision_y",
      "example": "```\nfor(var i = 0; i < phy_collision_points; i += 1;)\n    {\n        part_particles_create(global.Sname, phy_collision_x[i], phy_collision_y[i], global.Spark, 5);\n    }\n```\nThe above code creates particles at all the defined points of a collision between two physics enabled instances.\n",
      "description": "This **read-only** array returns the y position of all points detected in a collision between two physics enabled instances.",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_collision_y.htm"
    },
    "phy_com_x": {
      "name": "phy_com_x",
      "example": "```\nxx = phy_com_x; yy = phy_com_y;\n```\nThe above code sets two variables to the x and y position of the instances center of mass.\n",
      "description": "This **read-only** variable will return the x position of the instance's center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_com_x.htm"
    },
    "phy_com_y": {
      "name": "phy_com_y",
      "example": "```\nxx = phy_com_x; yy = phy_com_y;\n```\nThe above code sets two variables to the x and y position of the instances center of mass.\n",
      "description": "This **read-only** variable will return the y position of the instance's center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_com_y.htm"
    },
    "phy_dynamic": {
      "name": "phy_dynamic",
      "example": "```\nif other.phy_dynamic\n    {\n        with (other)\n        {\n            var dir;\n            dir = point_direction(x, y, other.x, other.y);\n            physics_apply_impulse(x, y, x + lengthdir_x(100, dir), y + lengthdir_y(100, dir));\n        }\n    }\n```\nThe above code creates a new instance and then defines it as being a \"bullet\" in the physics world before giving it a massive impulse along the y axis.\n",
      "description": "A dynamic instance is one that is fully simulated within the physics world and this **read-only** variable will return `true` if the instance being checked is fully simulated or `false` if it is not",
      "returns": "Boolean (or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_dynamic.htm"
    },
    "phy_fixed_rotation": {
      "name": "phy_fixed_rotation",
      "example": "```\nphy_rotation = 0; phy_fixed_rotation = true;\n```\nThe above code will switch the instance to have a fixed rotation, then set the rotation angle.\n",
      "description": "This variable can be used to set whether or not the instance can be affected by rotational forces (default is `false`). If this is set to `true`, no external force (either from coded impulses or forces, or from collisions) will affect\n    the rotation value of the instance and this would have to be set manually using the `phy_rotation` variable",
      "returns": "Boolean (or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_fixed_rotation.htm"
    },
    "phy_inertia": {
      "name": "phy_inertia",
      "example": "```\nphysics_mass_properties(70, -10, -10, phy_inertia);\n```\nThe above code will change the mass and center of mass of the instance while maintaining the inertia value.\n",
      "description": "Inertia is the measure of how hard it is to make something start or stop moving, so the lower the value for this **read-only** variable and the easier it will be to set the instance in motion, while higher values will require more force to start\n    it moving",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_inertia.htm"
    },
    "phy_kinematic": {
      "name": "phy_kinematic",
      "example": "```\nif !phy_kinematic\n    {\n        phy_speed_x = 5;\n    }\n```\nThe above code checks to see if the instance is kinematic and if it is not, it sets the horizontal speed to 5.\n",
      "description": "This **read-only** variable will return `true` if the instance is classed as being a kinematic object, or `false` if it is not. A kinematic instance is one that has infinite mass (a density of 0) but can move. So, to make an instance kinematic, you would first create a static instance and then set one or more of the instance variables related to movement (ie: `phy_speed_x`, `phy_speed_y`, or `phy_angular_velocity`)",
      "returns": "Boolean (or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_kinematic.htm"
    },
    "phy_linear_damping": {
      "name": "phy_linear_damping",
      "example": "```\nif place_meeting(phy_position_x, phy_position_y, obj_Water)\n    {\n        phy_linear_damping = 10;\n    }\n    else\n    {\n        phy_linear_damping = 3;\n    }\n```\nThe above code will check for a collision between the calling instance and instances of \"obj_Water\" and change the linear damping accordingly.\n",
      "description": "This variable can be used to set the linear damping of the instance, or it can be used to get the current linear damping. The damping is the amount of \"resistance\" to forward movement that the physics enabled instance has, with a lower value permitting the instance to move and accelerate faster and a higher value making it require a more forceful push",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_linear_damping.htm"
    },
    "phy_linear_velocity_x": {
      "name": "phy_linear_velocity_x",
      "example": "```\nif (phy_linear_velocity_x != 0)\n    {\n        phy_linear_velocity_x = 0;\n    }\n```\nThe above code will check the x component of the linear velocity vector and if it is anything other than 0 it will set it to 0.\n",
      "description": "This variable can be used to get or change the x component of the instance's linear velocity vector and is defined in pixels per second (for pixels per step, see `phy_speed_x`). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_linear_velocity_x.htm"
    },
    "phy_linear_velocity_y": {
      "name": "phy_linear_velocity_y",
      "example": "```\nif (phy_linear_velocity_y != 0)\n    {\n        phy_linear_velocity_y = 0;\n    }\n```\nThe above code will check the y component of the linear velocity vector and if it is anything other than 0 it will set it to 0.\n",
      "description": "This variable can be used to get or change the y component of the instance's linear velocity vector and is defined in pixels per second (for pixels per step, see `phy_speed_y`). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_linear_velocity_y.htm"
    },
    "phy_mass": {
      "name": "phy_mass",
      "example": "```\nif (phy_mass < other.phy_mass)\n    {\n        instance_destroy();\n    }\n```\nThe above code is from the collision event of the instance with another and it compares the mass of each instance and destroys that which has less mass.\n",
      "description": "This **read-only** variable returns the mass of the instance in *kilograms*. This value is calculated automatically based on the surface area of the assigned fixtures and their density values, but it can be changed using the function  [physics_mass_properties()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/physics_mass_properties.htm)`.`",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_mass.htm"
    },
    "phy_position_x": {
      "name": "phy_position_x",
      "example": "```\nxx = phy_position_x; yy = phy_position_y;\n```\nThe above code stores the instance x and y position in two variables.\n",
      "description": "This variable can be used to get (or to set) the x position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the\n    continuous simulation. This variable is the physics equivalent of the instance variable  [x](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/x.htm).",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_x.htm"
    },
    "phy_position_xprevious": {
      "name": "phy_position_xprevious",
      "example": "```\nxx = phy_position_xprevious; yy = phy_position_yprevious;\n```\nThe above code stores the previous x and y position for the physics enabled instance in two variables.\n",
      "description": "This variable can be used to get (or to set) the previous x position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one.",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_xprevious.htm"
    },
    "phy_position_y": {
      "name": "phy_position_y",
      "example": "```\nxx = phy_position_x; yy = phy_position_y;\n```\nThe above code stores the instance x and y position in two variables.\n",
      "description": "This variable can be used to get (or to set) the y position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the\n    continuous simulation. This variable is the physics equivalent of the instance variable  [y](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/y.htm).",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_y.htm"
    },
    "phy_position_yprevious": {
      "name": "phy_position_yprevious",
      "example": "```\nxx = phy_position_xprevious; yy = phy_position_yprevious;\n```\nThe above code stores the previous x and y position for the physics enabled instance in two variables.\n",
      "description": "This variable can be used to get (or to set) the previous y position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_position_yprevious.htm"
    },
    "phy_rotation": {
      "name": "phy_rotation",
      "example": "```\nif (phy_speed_x > 0) || (phy_speed_y > 0)\n    {\n        phy_rotation += sqrt(sqr(phy_speed_x) + sqr(phy_speed_y)) /10;\n    }\n```\nThe above code checks the linear speed and if either vector is not 0, it then calculates the actual speed and uses that to set the rotation.\n",
      "description": "This variable can be used to get (or to set) the angle of the instances fixture in degrees, similar to setting or getting the `image_angle`. However note that in the physics world rotations are calculated in the *opposite* way to the normal GameMaker Studio 2 game world, meaning that vector functions like `point_direction()`should have their return values modified (simply making positive to negative should resolve this).",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_rotation.htm"
    },
    "phy_sleeping": {
      "name": "phy_sleeping",
      "example": "```\nif phy_sleeping\n    {\n        instance_destroy();\n    }\n```\nThe above code checks to see if the object is being actively simulated or not and if it is not it is destroyed.\n",
      "description": "This **read-only** variable returns whether or not the instance is currently \"sleeping\" (`true`) or not (`false`), A \"sleeping\" instance is one that is not actively engaged in any physical simulation. GameMaker Studio 2 will put objects to sleep to save simulation cycles when an instance is at rest and not in collision with another instance",
      "returns": "Boolean (or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_sleeping.htm"
    },
    "phy_speed": {
      "name": "phy_speed",
      "example": "```\nif phy_speed > 10\n    {\n        phy_linear_damping += 0.01;\n    }\n    else\n    {\n        phy_linear_damping = 2;\n    }\n```\nThe above code checks the speed of the physics enabled instance and then changes the linear damping based on the returned value.\n",
      "description": "This **read-only** variable returns the current speed of the physics enabled instance, defined in pixels per step. Should you need to change this value, you must do so by changing the x and y vectors using the variables `phy_speed_x` and  [phy_speed_y](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed_y.htm)`.`",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed.htm"
    },
    "phy_speed_x": {
      "name": "phy_speed_x",
      "example": "```\nif phy_speed_x != 0\n    {\n        phy_speed_x = 0;\n    }\n```\nThe above code will check the x component of the linear speed vector and if it is anything other than 0 it will set it to 0.\n",
      "description": "This variable can be used to get or change the x component of the instance's linear speed vector and is defined in pixels per step (for pixels per second, see `phy_linear_velocity_x`). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed_x.htm"
    },
    "phy_speed_y": {
      "name": "phy_speed_y",
      "example": "```\nif phy_speed_y != 0\n    {\n        phy_speed_y = 0;\n    }\n```\nThe above code will check the y component of the linear speed vector and if it is anything other than 0 it will set it to 0.\n",
      "description": "This variable can be used to get or change the y component of the instance's linear speed vector and is defined in pixels per step (for pixels per second, see `phy_linear_velocity_y`). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.",
      "returns": "Real (single precision floating point value, or \n````undefined````\n if the instance is not physics enabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Physics_Variables/phy_speed_y.htm"
    },
    "program_directory": {
      "name": "program_directory",
      "example": "```\ndir = program_directory;\n```\nThis will store the directory where the executable is stored in a variable.\n",
      "description": "This will return the directory where the game executable is stored. However this may not always be useful, particularly as some devices run the exe from a *.zip file, so this would return the same no matter where the game is actually running from.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Directories/program_directory.htm"
    },
    "room": {
      "name": "room",
      "example": "```\nif (room == rm_level1)\n    {\n        audio_play_sound(snd_level1, 1, 1);\n    }\n```\nThe above code will check if the current room is the first level, and in that case play that level's music.\n",
      "description": "This variable holds the room index for the current room that your game is running. This is *not* a read only variable, however changing this will not change the index value for the current room, but rather change the room to match the index that you have set the variable to. Care should be taken when doing this as if the index you change the variable to is not valid the game will throw an error and close. In general it is much better practice to use `room_goto()` to change rooms.",
      "returns": "Real (unique index value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room.htm"
    },
    "room_first": {
      "name": "room_first",
      "example": "```\nif lives < 1\n    {\n        room_goto(room_first);\n    }\n```\nThe above code will check the \"lives\" variable and if it is less than 1 go to the first room in the game.\n",
      "description": "This **read only** variable returns the index of the very first room in the game (this is defined by the order in which the rooms appear in the  [Room Manager](https://manual.yoyogames.com/Settings/The_Room_Manager.htm) and *not* by the order in which they were created).",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_first.htm"
    },
    "room_height": {
      "name": "room_height",
      "example": "```\nif bbox_bottom > room_height\n    {\n        y += room_height - bbox_bottom;\n    }\n```\nThe above code checks to see if the current instance's sprite bounding box is greater than the height of the room, and if it is it moves the instance up.\n",
      "description": "This variable holds the height of the current room in pixels. You can change this variable to change the height of the room at any time, and changes will be applied to the bottom of the room, as the origin is considered to be the top left corner. So, for example, if the room is 480px in height and you set it to 640px, the room will be expanded downwards with an extra 180px added to the bottom.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_height.htm"
    },
    "room_last": {
      "name": "room_last",
      "example": "```\nif keyboard_check_pressed(ord(\"Q\"))\n    {\n        room_goto(room_last);\n    }\n```\nThe above code checks to see if a key has been pressed and if so it goes to the last room in the game.\n",
      "description": "This **read only** variable returns the index of the very last room in the game (this is defined by the order in which the rooms appear in the  [Room Manager](https://manual.yoyogames.com/Settings/The_Room_Manager.htm) and *not* by the order in which they were created). Note that this variable will not recognise or take into consideration rooms that have been added dynamically using  [room_add()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_add.htm) or  [room_duplicate()](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_duplicate.htm).",
      "returns": "Index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_last.htm"
    },
    "room_persistent": {
      "name": "room_persistent",
      "example": "```\nif lives < 1\n    {\n        room_persistent = false;\n        room_goto(rm_start);\n    }\n```\nThe above code checks the variable \"lives\" and if it is less than 1, it will set the room persistence to `false` and then change rooms.\n",
      "description": "This variable can be used to get and to set the persistent flag for the current room. If set to `true` the room is considered persistent, in which case each time you leave the room and come back again the state of the instances within that room will have been maintained. However if it is flagged as `false`, each time you return to the room it will be reset to its initial state. You should note that a persistent room uses considerably more memory than a normal room and it is not recommended to have too many of them in your game.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_persistent.htm"
    },
    "room_speed (deprecated)": {
      "name": "room_speed (deprecated)",
      "example": "```\nalarm[0] = room_speed * 10;\n```\nThe above code uses `room_speed` to set an alarm to run for 10 seconds. Using the variable in this way will ensure that the alarm runs for 10 seconds, no matter what speed is set for the room.\n",
      "description": "This variable holds the running speed of **all** rooms (and the game) in game frames per second. Note that this is *NOT* the FPS (frames per second) but rather the number of game steps that GameMaker Studio 2 will try to maintain each\n    second.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_speed.htm"
    },
    "room_width": {
      "name": "room_width",
      "example": "```\nif bbox_right > room_width\n    {\n        x += room_width - bbox_right;\n    }\n```\nThe above code checks to see if the current instance's sprite bounding box is greater than the width of the room, and if it is it moves the instance up.\n",
      "description": "This variable holds the width of the current room in pixels. You can change this variable to change the width of the room at any time.",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/room_width.htm"
    },
    "sequence_instance": {
      "name": "sequence_instance",
      "example": "```\nif (in_sequence) {\n         sequence_instance.speedScale = 2; }\n  \n```\nThe above code checks the in_sequence variable, and if it is true (meaning the instance is being controlled by a sequence) then it will change the speed scale of that\n    Sequence to 2.\n",
      "description": "This is a **built-in variable** that is part of the  [instance variables](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/Instance_Variables.htm) created for every object instance in your game. If the instance is being controlled by a sequence,\n    this variable will hold the  [sequence instance struct](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm) for the Sequence controlling the instance, otherwise it will be `undefined`. This is a **read-only** variable\n    and cannot be changed.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_instance.htm"
    },
    "solid": {
      "name": "solid",
      "example": "```\nif other.solid = true\n    {\n        x = xprevious;\n        y = yprevious;\n    }\n```\nThe above code will check the solid flag of the \"other\" instance in a collision and if it is set to `true` move that instance back to its previous position.\n",
      "description": "An instance can be flagged as *solid* through the object properties in the  [Object Editor](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm), or by changing the value of this built-in variable. If `solid` is set to `true` then, when a collision is detected, the colliding instance is returned automatically to the position it was at in the step previous to the collision (and then any code or actions are run in the collision event). If it is set to `false`, all positioning must be dealt with through the collision event.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/solid.htm"
    },
    "speed": {
      "name": "speed",
      "example": "```\nif keyboard_check(vk_up) speed = 2; if keyboard_check(vk_left) direction += 5; if keyboard_check(vk_right) direction -= 5;\n```\nThe above code will use the arrow keys to set the speed and direction of the instance.\n",
      "description": "All instances in GameMaker Studio 2 have certain \"built in\" properties that you can use and set to govern how they look and behave. `speed` is one of those properties and defines how many pixels the instance will move every step.\n    Unlike `hspeed` and `vspeed`, `speed` has no direction associated with it as this is governed by the `direction` value of the instance, but it\n    can have a negative value, in which case the instance will travel in the opposite direction to that set by the `direction` function (ie: `direction` - 180°). Note that setting the speed and/or the direction,\n    will also modify the values of the hspeed and vspeed variables, and that gravity, gravity_direction    and friction can all modify the value of this variable when they are used in your games.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"
    },
    "sprite_height": {
      "name": "sprite_height",
      "example": "```\nif sprite_height != sprite_get_height(sprite_index)\n    {\n        image_yscale = 1;\n    }\n```\nThe above code checks the height of the sprite assigned to the instance running the code against the height of the sprite resource and if it is not the same, it resets the `image_yscale` to 1,\n",
      "description": "This **read only** variable returns the height of the sprite that has been assigned to the instance. This height is returned in pixels and will be dependent on the `image_yscale`. If you need the un-scaled height you should use `sprite_get_height()`.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_height.htm"
    },
    "sprite_index": {
      "name": "sprite_index",
      "example": "```\nwith (obj_Check)\n    {\n        if !collision_line(x, y, other.x, other.y, obj_Wall, false, true)\n        {\n            sprite_index = spr_spotted;\n        }\n        else\n        {\n            sprite_index = spr_clear;\n        }\n    }\n```\nThe above code will loop through all instances of \"obj_Check\" checking for a collision line between them and the instance running the code. The sprite of those instances will be changed depending on the return value (true or false) for the collision line.\n",
      "description": "This variable returns the index of the current sprite for the instance, or -1 if the instance has no sprite associated with it. You can change it to give the instance a different sprite by giving it the name of a sprite from the resource tree or by using a variable that has an externally loaded sprite indexed in it. Changing the sprite does not change the index of the currently visible frame, so if you change the sprite on frame number 3, the new sprite will be drawn with that frame visible (assuming it has the same number of frames).",
      "returns": "Real (integer - resource index value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm"
    },
    "sprite_prefetch_multi": {
      "name": "sprite_prefetch_multi",
      "example": "```\nspr_a[0] = spr_Player_Aura1; spr_a[1] = spr_Player_Aura2; spr_a[2] = spr_Player_Aura3; spr_a[3] = spr_Player_Aura4; sprite_prefetch_multi(spr_a);\n  \n```\nThe above code creates an array where each element holds a sprite index. This array is then used to place those sprite textures into memory.\n",
      "description": "This function can be used to prefetch (place into texture memory) a number of texture pages that contain the sprites given. You supply an array populated with the sprite indices (as defined when you created the sprite asset) and the texture pages that\n    they are on will be loaded into memory. Note that the function will return `-1` if prefetch is not supported for the chosen resource or the target platform is HTML5, or it will return `0` if\n    all worked correctly.",
      "returns": "Int (-1 or 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_prefetch_multi.htm"
    },
    "sprite_width": {
      "name": "sprite_width",
      "example": "```\nif sprite_width != sprite_get_width(sprite_index)\n    {\n        image_xscale = 1;\n    }\n```\nThe above code checks the width of the sprite assigned to the instance running the code against the width of the sprite resource and if it is not the same, it resets the `image_xscale` to 1,\n",
      "description": "This **read only** variable returns the width of the sprite that has been assigned to the instance. This width is returned in pixels and will be dependent on the `image_xscale`. If you need the un-scaled width you should use `sprite_get_width()`.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_width.htm"
    },
    "sprite_xoffset": {
      "name": "sprite_xoffset",
      "example": "```\nif x - sprite_xoffset < 0\n    {\n        x = sprite_xoffset;\n    }\n```\nThe above code checks to see if the left edge of the sprite of the instance is outside the room and if it is it moves the instance so that the whole sprite is visible.\n",
      "description": "This **read only** variable returns the local xoffset (the x component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This xoffset is returned in pixels and will be dependent on the `image_xscale`, so that (for example) if a square 32x32 sprite is defined as having the x origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled xoffset you should use `sprite_get_xoffset()`.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_xoffset.htm"
    },
    "sprite_yoffset": {
      "name": "sprite_yoffset",
      "example": "```\nif y - sprite_yoffset < 0\n    {\n        y = sprite_yoffset;\n    }\n```\nThe above code checks to see if the top edge of the sprite of the instance is outside the room and if it is it moves the instance so that the whole sprite is visible.\n",
      "description": "This **read only** variable returns the local yoffset (the y component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This yoffset is returned in pixels and will be dependent on the `image_yscale`, so that (for example) if a square 32x32 sprite is defined as having the y origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled yoffset you should use `sprite_get_yoffset()`.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_yoffset.htm"
    },
    "temp_directory": {
      "name": "temp_directory",
      "example": "```\nini_open(temp_directory + \"\\temp_ini.ini\");\n```\nThis will open an ini file in the temporary directory of the game (creating it if it does not already exist).\n",
      "description": "This can be used to return the temporary directory created for your game each time it is run (the root does not contain the final \"\\\"). This directory will hold files and can be accessed while the game is running, but it will be removed (along\n    with all files that it contains) when the game is closed.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Directories/temp_directory.htm"
    },
    "timeline_index": {
      "name": "timeline_index",
      "example": "```\nif timeline_exists(global.tl)\n    {\n        timeline_index = global.tl;\n    }\n```\nThe above code will assign the instance running the code a time line indexed in the variable \"global.tl\" if that time line exists.\n",
      "description": "This variable holds the index of the time line currently associated with the instance. You can set this to a particular time line to use that one, or set it to -1 to stop using a time line for the instance (if no time line is defined for the instance, -1 is returned too). Note that this does *not* start the time line - for that use the variable `timeline_running`.",
      "returns": "Real (integer - resource index value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_index.htm"
    },
    "timeline_loop": {
      "name": "timeline_loop",
      "example": " \n```\nif !timeline_loop\n    {\n        timeline_loop = true;\n    }\n```\nThe above code checks to see of the time line currently assigned to an instance will loop or not and if it doesn't it sets it to true.\n",
      "description": "This variable will return whether the time line is looping (true) or not (false). You can change this variable to switch looping on or off and it works with a negative time line speed (if the time line position goes below 0 it will start again at the last defined moment).",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_loop.htm"
    },
    "timeline_position": {
      "name": "timeline_position",
      "example": "```\nif !timeline_running\n    {\n        timeline_position = 0;\n        timeline_running = true;\n    }\n```\nThe above code will check to see if the instance is running a time line, and if it is not then it resets the assigned time line to start at the first moment and then starts it.\n",
      "description": "This variable holds the current position (moment) a time line is currently at. You can change this value to skip parts of the time line, or to repeat parts or to start the time line again from the beginning.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_position.htm"
    },
    "timeline_running": {
      "name": "timeline_running",
      "example": "```\nif !timeline_running\n    {\n        timeline_position = 0;\n        timeline_running = true;\n    }\n```\nThe above code will check to see if the instance is running a time line, and if it is not then it resets the assigned time line to start at the first moment and then starts it.\n",
      "description": "This variable holds current state of the assigned time line and will return `true` if it is running and false if it is not. You can also set this variable to either `true` or `false` to start and stop the time line at any time. it should be noted that a stopped time line is *not* reset, and so starting it again at a later time will start it from the exact moment that it was stopped at.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_running.htm"
    },
    "timeline_speed": {
      "name": "timeline_speed",
      "example": "```\nif !timeline_running\n    {\n        timeline_running = true;\n        timeline_speed = 0.5;\n    }\n```\nThe above code will check and see if the instance is running its associated time line and if it is not, it will start the time line running at half speed.\n",
      "description": "Normally, in each step the position in the time line is increased by 1, however you can change this amount by setting this variable to a different value. You can use real numbers (like 0.5, or 2.4 for example) and if the value is larger than one, several moments can happen within the same time step (they will all be performed in the same order as defined for the time line, so no actions will be skipped).",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Timelines/timeline_speed.htm"
    },
    "view_camera": {
      "name": "view_camera",
      "example": "```\nif view_camera[0] == -1\n    {\n        view_camera[0] = camera_create_view(0, 0, room_width, room_height);\n    }\n```\nThe above code checks to see if the view port [0] has a camera attached to it and if it doesn't then one is created and set to it.\n",
      "description": "This array holds the unique camera ID assigned to the given view port, and can be set to a new camera or read to get the current camera, returning -1 if no camera is assigned. You can have up to 8 view ports active in a room (array values 0 through 7), and can assign a camera to any of them by simply setting this variable to the camera ID value (as returned by the functions `camera_create()` or `camera_create_view()`). If you have set the camera to a view port through the Room Editor, this variable will hold the camera ID for that port.",
      "returns": "Camera index or -1 if no camera is assigned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_camera.htm"
    },
    "view_current": {
      "name": "view_current",
      "example": "```\nif view_current == 0\n    {\n        var xx = camera_get_view_x(view_camera[0]);\n        var yy = camera_get_view_y(view_camera[0]);\n        draw_text(xx + 32, yy + 32, \"Player 1\");\n    }\n    else\n    {\n        var xx = camera_get_view_x(view_camera[1]);\n        var yy = camera_get_view_y(view_camera[1]);\n        draw_text(xx + 32, yy + 32, \"Player 2\");\n    }\n```\nThe above code checks to see which view is currently being drawn and then draws a different text to each view based on the return value.\n",
      "description": "This **read only** variable is only valid in the **Draw Event** and returns the current view port being rendered. The return value will change during the draw event when you have various views as the draw event is called *once for each view port in succession*. So when (for example) you are using view port[0] and view port[1] in your game room, the draw event for *ALL* instances will be run twice, once for each port, and with this variable you can check to see what view is currently being drawn. In general, this is used to only render specific details to a single port when multiple view ports are visible in the room at the same time. See the example code below.",
      "returns": "Integer (view port index from 0 to 7)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_current.htm"
    },
    "view_enabled": {
      "name": "view_enabled",
      "example": "```\nif !view_enabled\n    {\n        view_visible[0] = true;\n        view_enabled = true;\n    }\n```\nThe above code checks to see if views are enabled for the room, and if they are not, it makes sure that view port[0] is visible and then enables views for the room.\n",
      "description": "This variable controls whether any view ports that are visible within the room are enabled or not. If you have view ports set to visible and then disable this option, the whole room will be drawn to the screen scaled to the window size instead of the different cameras being drawn through the view ports.",
      "returns": "Boolean (\n````true````\n: enabled, \n````false````\n: disabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_enabled.htm"
    },
    "view_hport": {
      "name": "view_hport",
      "example": "```\ncamera_set_view_size(view_camera[0], view_wport[0], view_hport[0]);\n```\nThe above code sets the width and height of the camera view to be the same as the width and height of the view port.\n",
      "description": "This variable can be used to get or to set the height of the specified view port. The height of the view port (or combined view ports if more than one are active) define the height of the game window or background canvas *at the start of the game*,\n    so changing this value after the game has started will have no visible effect on the game window size unless called along with the function `window_set_size()`. If you have a larger or smaller\n    port size than that assigned to the camera, then the camera view will be scaled down - or up - to fit, as illustrated by the image below.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_hport.htm"
    },
    "view_surface_id": {
      "name": "view_surface_id",
      "example": "In this extended example, we will create a surface and assign it to view port[0] so it captures the camera view assigned to that port, then draw that to the screen in the Draw GUI event. To start with we need to initialise our surface variable in the **Create Event** of a controller instance:\n```\nsurf = -1;\n```\nWe set the surface variable to -1, as all surface functions should really be used in the **Draw** events to prevent odd errors or undefined behaviours. So, with that done, we would then have this in the main **Draw** event:\n```\nif !surface_exists(surf)\n        {\n        surf = surface_create(camera_get_view_width(view_camera[0]), camera_get_view_height(view_camera[0]));\n        view_surface_id[0] = surf;\n        }\n```\nSurfaces are *volatile* meaning that they could be removed from memory at any time due to OS memory management and other things, so here we check to see if our surface exists and if it doesn't we create it and assign it to the view 0. With that done, everything that would appear in view 0 will now be drawn to the surface we have created instead. If you do nothing else at this point, when you run your game you will simply get a blank screen as all drawing is being done on the surface, but the surface itself is not being drawn anywhere. Therefore we now need to draw the surface to the screen in the **Draw GUI** event like this:\n```\nif surface_exists(surf)\n        {\n        draw_surface_stretched(surf, 0, 0, display_get_gui_width(), display_get_gui_height());\n        }\n```\nThis code will now draw the surface that we have created from the view camera stretched to fill the entire GUI layer.\n",
      "description": "With this variable you can set the contents of a given view port to draw to a surface, or get the current surface id if one has been assigned to a view port. When working with surfaces, it is often required that you capture the *whole* visible region of the screen to the surface, and so you would assign it to a view port using this variable. This means that everything that is shown in the chosen view will now be drawn to the assigned surface. The view will now *not* be drawn to the screen, meaning that you will need to either:",
      "returns": "Real (surface index or -1 if no surface has been assigned)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_surface_id.htm"
    },
    "view_visible": {
      "name": "view_visible",
      "example": "```\nif !view_visible[0]\n    {\n        view_visible[0] = true;\n    }\n```\nThe above code checks to see if view[0] is visible or not and if it is not, it then sets it to be visible.\n",
      "description": "This variable can be used to find out if a particular view port is currently visible or not. You can also set this variable to effectively turn \"on\" or \"off\" a view by setting the value to `true` (visible) or `false` (invisible). Note that even if you have a view port set to visible, if view ports are not enabled (using the built-in variable `view_enabled` or enabling them in the Room Editor) then they will not be drawn to the screen.",
      "returns": "Boolean (\n````true````\n: enabled, \n````false````\n: disabled)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_visible.htm"
    },
    "view_wport": {
      "name": "view_wport",
      "example": "```\ncamera_set_view_size(view_camera[0], view_wport[0], view_hport[0]);\n```\nThe above code sets the width and height of the camera view to be the same as the width and height of the view port.\n",
      "description": "This variable can be used to get or to set the width of the specified view port. The width of the view port (or combined view ports if more than one are active) define the width of the game window or background canvas *at the start of the game*,\n    so changing this value after the game has started will have no visible effect on the game window size unless called along with the function `window_set_size()`. If you have a larger or smaller\n    port size than that assigned to the camera, then the camera view will be scaled down - or up - to fit, as illustrated by the image below.",
      "returns": "Integer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_wport.htm"
    },
    "view_xport": {
      "name": "view_xport",
      "example": "```\nview_xport[0] = 0; view_yport[0] = 0;\n```\nThe above code resets the position of view port[0] to the (0,0) position (top left hand corner) of the display.\n",
      "description": "With this built in array you can get or set the x position of the given view port. The view port is the area on the screen where the view is drawn, and you can have up to 8 active at any one time (the array is values from 0 to 7 inclusive to give 8\n    ports). Now, the default for GameMaker Studio 2 is that the game window (or background canvas) is the same size as the room, however when you activate view ports and cameras, this behaviour changes and the *total size of the bounding box for all view ports*    is used. So, if you have two different view ports at two different positions, the total area that they cover defines the size of the game window. The following image illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm"
    },
    "view_yport": {
      "name": "view_yport",
      "example": "```\nview_xport[0] = 0; view_yport[0] = 0;\n```\nThe above code resets the position of view port[0] to the (0,0) position (top left hand corner) of the display.\n",
      "description": "With this built in array you can get or set the y position of the given view port. The view port is the area on the screen where the view is drawn, and you can have up to 8 active at any one time (the array is values from 0 to 7 inclusive to give 8\n    ports). Now, the default for GameMaker Studio 2 is that the game window (or background canvas) is the same size as the room, however when you activate view ports and cameras, this behaviour changes and the *total size of the bounding box for all view ports*    is used. So, if you have two different view ports at two different positions, the total area that they cover defines the size of the game window. The following image illustrates this:",
      "returns": "Real",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_yport.htm"
    },
    "vspeed": {
      "name": "vspeed",
      "example": "```\nif keyboard_check(vk_up) vspeed = -5; if keyboard_check(vk_down) vspeed = 5;\n```\nThe above code will change the vertical speed depending on which keys are pressed.\n",
      "description": "`vspeed` is one of the \"built in\" properties that all instances have and defines the vertical movement speed (along the y-axis) of the instance in pixels per step. So, a `vspeed` of 3 means 3 pixels of movement to the bottom\n    (+y) every step, and a `vspeed` of -3 would mean 3 pixels of movement to the top (-y) every step.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/vspeed.htm"
    },
    "webgl_enabled": {
      "name": "webgl_enabled",
      "example": "```\nif webgl_enabled\n    {\n        global.quality = 1;\n    }\n    else global.quality = 0;\n```\nThe above code checks the WebGL flag and then sets the global variable \"quality\" accordingly.\n",
      "description": "This **read-only** variable will return whether WebGL is enabled (`true`) or not (`false`) for your game. It will only work for those games running through a browser (ie: HTML5), and for all other platforms it will return true.",
      "returns": "Boolean",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Web_And_HTML5/webgl_enabled.htm"
    },
    "working_directory": {
      "name": "working_directory",
      "example": "```\nini_open(working_directory + \"temp_ini.ini\");\n```\nThis will open an ini file from the working directory of the game (creating it if it does not already exist). This could be the local storage, or the area where the included files are depending on whether the file being looked for exists in either place.\n",
      "description": "`Working_directory` can actually return two different values depending on what you are using it for. If you are writing a file to disk, `working_directory` points to the area of local storage that is reserved for your game on the target\n    device (in windows this is \"%LOCALAPPDATA%/gamedir/\" where the \"gamedir\" is the directory with the name of your game). However, when reading from disk, `working_directory` can be *either*    the local storage *or* the area where the included files are stored.",
      "returns": "String",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_Directories/working_directory.htm"
    },
    "x": {
      "name": "x",
      "example": "```\nif keyboard_check(vk_left) x += 5; if keyboard_check(vk_right) x -= 5;\n```\nThe above code will use the arrow keys to add or subtract to the x position and so create the illusion of movement.\n",
      "description": "The x value of an instance is the horizontal position in the current room, measured in pixels. This value can be either 0, positive or minus, where 0 is the left hand side of the room and moving right increases x, moving left decreases x (a negative\n    value for x means that the instance has gone outside the left side of the room). You can even give x a real value like 12.345, but as you cannot get .345 of a pixel, the instance may not appear to have moved, although these values will be maintained\n    and used internally by GameMaker Studio 2 and are perfectly valid.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/x.htm"
    },
    "xprevious": {
      "name": "xprevious",
      "example": "```\nif x != xprevious || y != yprevious\n    {\n        moved = true;\n    }\n```\nThe above code checks to see if there is any difference between the `xprevious` and `yprevious` values and the current x and y values. If there is it sets a variable to true.\n",
      "description": "This built-in variable returns the *previous* x position for the instance. This variable will be set just before the start of the **begin step event** but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/xprevious.htm"
    },
    "xstart": {
      "name": "xstart",
      "example": "```\nif place_meeting(x, y, obj_spike)\n    {\n        score -= 100;\n        x = xstart;\n        y = ystart;\n    }\n```\nThe above code will check for a collision with an instance of \"obj_spike\" and if there is one, it deducts 100 from the score and moves the instance back to its starting position.\n",
      "description": "This variable stores the initial x position of the instance when it is first created in the room. This is not a read-only variable and can be set as well as read.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/xstart.htm"
    },
    "y": {
      "name": "y",
      "example": "```\nif keyboard_check(vk_down) y += 5; if keyboard_check(vk_up) y -= 5;\n```\nThe above code will use the arrow keys to add or subtract to the y position and so create the illusion of movement.\n",
      "description": "The y value of an instance is the vertical position in the current room, measured in pixels. This value can be either 0, positive or minus, where 0 is the top of the room and moving down increases y, moving up decreases y (a negative value for y means\n    that the instance has gone outside the top of the room). You can even give y a real value like 12.345, but as you cannot get .345 of a pixel, the instance may not appear to have moved, although these values will be maintained and used internally by\n    GameMaker Studio 2 and are perfectly valid.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/y.htm"
    },
    "yprevious": {
      "name": "yprevious",
      "example": "```\nif x != xprevious || y != yprevious\n    {\n        moved = true;\n    }\n```\nThe above code checks to see if there is any difference between the `xprevious` and `yprevious` values and the current x and y values. If there is it sets a variable to true.\n",
      "description": "This built-in variable returns the *previous* y position for the instance. This variable will be set to the current x position just before the start of the **begin step event** but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/yprevious.htm"
    },
    "ystart": {
      "name": "ystart",
      "example": "```\nif place_meeting(x, y, obj_spike)\n    {\n        score -= 100;\n        x = xstart;\n        y = ystart;\n    }\n```\nThe above code will check for a collision with an instance of \"obj_spike\" and if there is one, it deducts 100 from the score and moves the instance back to its starting position.\n",
      "description": "This variable stores the initial y position of the instance when it is first created in the room. This is not a read-only variable and can be set as well as read.",
      "returns": "Real (single precision floating point value)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/ystart.htm"
    }
  },
  "constants": {
    "*   ---- ev_boundary_view0...7*": {
      "name": "*   ---- ev_boundary_view0...7*",
      "description": "Whether the instance is interesecting with the boundary of the given view (0 to 7)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_broadcast_message*": {
      "name": "*   ---- ev_broadcast_message*",
      "description": "Broadcast Message event used for sprites and sequences",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_outside_view0...7*": {
      "name": "*   ---- ev_outside_view0...7*",
      "description": "Whether the instance is outside the given view (0 to 7)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- 0 ... 11*": {
      "name": "*   ---- 0 ... 11*",
      "description": "The number relevant to which of the 12 alarms you wish to trigger the event of",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- The index of the object to check.*": {
      "name": "*   ---- The index of the object to check.*",
      "description": "obj_enemy for example.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- any key code*": {
      "name": "*   ---- any key code*",
      "description": "vk_space or ord(\"W\") for example.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_animation_end*": {
      "name": "*   ---- ev_animation_end*",
      "description": "If the object's sprite has reached the end of its animation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_animation_event*": {
      "name": "*   ---- ev_animation_event*",
      "description": "Animation event that runs for skeletal animations as assigned in the skeletal animation tool",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_animation_update*": {
      "name": "*   ---- ev_animation_update*",
      "description": "Animation event that runs every step for objects that use skeletal animations",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_boundary*": {
      "name": "*   ---- ev_boundary*",
      "description": "Whether the instance is intersecting the boundary",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_draw_begin*": {
      "name": "*   ---- ev_draw_begin*",
      "description": "The draw begin event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_draw_end*": {
      "name": "*   ---- ev_draw_end*",
      "description": "The draw end event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_draw_post*": {
      "name": "*   ---- ev_draw_post*",
      "description": "The post draw event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_draw_pre*": {
      "name": "*   ---- ev_draw_pre*",
      "description": "The pre draw event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_end_of_path*": {
      "name": "*   ---- ev_end_of_path*",
      "description": "If the object has reached the end of a path it is following",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_game_end*": {
      "name": "*   ---- ev_game_end*",
      "description": "Only triggered at the end of the game",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_game_start*": {
      "name": "*   ---- ev_game_start*",
      "description": "Only triggered at the start of the game",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_double_tap*": {
      "name": "*   ---- ev_gesture_double_tap*",
      "description": "Two quick touches/clicks and releases have been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_drag_end*": {
      "name": "*   ---- ev_gesture_drag_end*",
      "description": "The release of the touch/click from a drag has been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_drag_start*": {
      "name": "*   ---- ev_gesture_drag_start*",
      "description": "The beginning of a drag gesture has been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_dragging*": {
      "name": "*   ---- ev_gesture_dragging*",
      "description": "A touch/click has been held and moved for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_flick*": {
      "name": "*   ---- ev_gesture_flick*",
      "description": "The release of a touch/click from a drag had enough movement for a flick event to be detected for the *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_pinch_end*": {
      "name": "*   ---- ev_gesture_pinch_end*",
      "description": "The release of one (or both) touches for a pinch has been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_pinch_in*": {
      "name": "*   ---- ev_gesture_pinch_in*",
      "description": "The movement between two touches for an *instance* has been detected as inwards",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_pinch_out*": {
      "name": "*   ---- ev_gesture_pinch_out*",
      "description": "The movement between two touches for an *instance* has been detected as outwards",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_pinch_start*": {
      "name": "*   ---- ev_gesture_pinch_start*",
      "description": "Two touches and a straight movement have been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_rotate_end*": {
      "name": "*   ---- ev_gesture_rotate_end*",
      "description": "The release of one (or both) touches for a rotation has been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_rotate_start*": {
      "name": "*   ---- ev_gesture_rotate_start*",
      "description": "The movement between two touches for an *instance* has been detected as a rotation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_rotating*": {
      "name": "*   ---- ev_gesture_rotating*",
      "description": "The movement between two touches for an *instance* has been detected as rotating",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gesture_tap*": {
      "name": "*   ---- ev_gesture_tap*",
      "description": "A single click/touch and release has been detected for an *instance*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_double_tap*": {
      "name": "*   ---- ev_global_gesture_double_tap*",
      "description": "Two quick touches/clicks and releases have been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_drag_end*": {
      "name": "*   ---- ev_global_gesture_drag_end*",
      "description": "The release of the touch/click from a drag has been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_drag_start*": {
      "name": "*   ---- ev_global_gesture_drag_start*",
      "description": "The beginning of a drag gesture has been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_dragging*": {
      "name": "*   ---- ev_global_gesture_dragging*",
      "description": "A touch/click has been held and moved *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_flick*": {
      "name": "*   ---- ev_global_gesture_flick*",
      "description": "The release of a touch/click from a drag had enough movement for a flick event to be detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_pinch_end*": {
      "name": "*   ---- ev_global_gesture_pinch_end*",
      "description": "The release of one (or both) touches for a pinch has been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_pinch_in*": {
      "name": "*   ---- ev_global_gesture_pinch_in*",
      "description": "The movement between two touches *anywhere* in the room has been detected as inwards",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_pinch_out*": {
      "name": "*   ---- ev_global_gesture_pinch_out*",
      "description": "The movement between two touches *anywhere* in the room has been detected as outwards",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_pinch_start*": {
      "name": "*   ---- ev_global_gesture_pinch_start*",
      "description": "Two touches and a straight movement have been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_rotate_end*": {
      "name": "*   ---- ev_global_gesture_rotate_end*",
      "description": "The release of one (or both) touches for a rotation has been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_rotate_start*": {
      "name": "*   ---- ev_global_gesture_rotate_start*",
      "description": "The movement between two touches *anywhere* in the room has been detected as a rotation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_rotating*": {
      "name": "*   ---- ev_global_gesture_rotating*",
      "description": "The movement between two touches *anywhere* in the room has been detected as rotating",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_gesture_tap*": {
      "name": "*   ---- ev_global_gesture_tap*",
      "description": "A single click/touch and release has been detected *anywhere* in the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_left_button*": {
      "name": "*   ---- ev_global_left_button*",
      "description": "Left button held down anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_left_press*": {
      "name": "*   ---- ev_global_left_press*",
      "description": "Left button just pressed anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_left_release*": {
      "name": "*   ---- ev_global_left_release*",
      "description": "Left button just released anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_middle_button*": {
      "name": "*   ---- ev_global_middle_button*",
      "description": "Middle button (or clickable wheel) held down anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_middle_press*": {
      "name": "*   ---- ev_global_middle_press*",
      "description": "Middle button (or clickable wheel) just pressed anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_middle_release*": {
      "name": "*   ---- ev_global_middle_release*",
      "description": "Middle button just released anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_right_button*": {
      "name": "*   ---- ev_global_right_button*",
      "description": "Right button held down anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_right_press*": {
      "name": "*   ---- ev_global_right_press*",
      "description": "Right button just pressed anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_global_right_release*": {
      "name": "*   ---- ev_global_right_release*",
      "description": "Right button just released anywhere",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gui*": {
      "name": "*   ---- ev_gui*",
      "description": "The draw gui event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gui_begin*": {
      "name": "*   ---- ev_gui_begin*",
      "description": "The draw gui begin event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_gui_end*": {
      "name": "*   ---- ev_gui_end*",
      "description": "The draw gui end event.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_left_button*": {
      "name": "*   ---- ev_left_button*",
      "description": "Left button held down on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_left_press*": {
      "name": "*   ---- ev_left_press*",
      "description": "Left button just pressed on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_left_release*": {
      "name": "*   ---- ev_left_release*",
      "description": "Left button just released on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_middle_button*": {
      "name": "*   ---- ev_middle_button*",
      "description": "Middle button (or clickable wheel) held down on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_middle_press*": {
      "name": "*   ---- ev_middle_press*",
      "description": "Middle button (or clickable wheel) just pressed on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_middle_release*": {
      "name": "*   ---- ev_middle_release*",
      "description": "Middle button just released on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_mouse_enter*": {
      "name": "*   ---- ev_mouse_enter*",
      "description": "Mouse just entered object's bounding box",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_mouse_leave*": {
      "name": "*   ---- ev_mouse_leave*",
      "description": "Mouse just left object's bounding box",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_mouse_wheel_down*": {
      "name": "*   ---- ev_mouse_wheel_down*",
      "description": "Mouse wheel scrolled downwards",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_mouse_wheel_up*": {
      "name": "*   ---- ev_mouse_wheel_up*",
      "description": "Mouse wheel scrolled upwards",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_no_button*": {
      "name": "*   ---- ev_no_button*",
      "description": "No buttons held down",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_outside*": {
      "name": "*   ---- ev_outside*",
      "description": "Whether the instance is outside of the room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_right_button*": {
      "name": "*   ---- ev_right_button*",
      "description": "Right button held down on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_right_press*": {
      "name": "*   ---- ev_right_press*",
      "description": "Right button just pressed on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_right_release*": {
      "name": "*   ---- ev_right_release*",
      "description": "Right button just released on object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_room_end*": {
      "name": "*   ---- ev_room_end*",
      "description": "Only triggered at the end of a room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_room_start*": {
      "name": "*   ---- ev_room_start*",
      "description": "Only triggered at the start of a room",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_step_begin*": {
      "name": "*   ---- ev_step_begin*",
      "description": "Begin Step",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_step_end*": {
      "name": "*   ---- ev_step_end*",
      "description": "End Step",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_step_normal*": {
      "name": "*   ---- ev_step_normal*",
      "description": "Step",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "*   ---- ev_user0... ev_user15*": {
      "name": "*   ---- ev_user0... ev_user15*",
      "description": "One of the 16 available user events.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_ASYNC_SAVE_LOAD ": {
      "name": "EVENT_OTHER_ASYNC_SAVE_LOAD ",
      "description": "72",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_AUDIO_PLAYBACK ": {
      "name": "EVENT_OTHER_AUDIO_PLAYBACK ",
      "description": "74",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_AUDIO_RECORDING ": {
      "name": "EVENT_OTHER_AUDIO_RECORDING ",
      "description": "73",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_DIALOG_ASYNC ": {
      "name": "EVENT_OTHER_DIALOG_ASYNC ",
      "description": "63",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_MESSAGE_EVENT ": {
      "name": "EVENT_OTHER_MESSAGE_EVENT ",
      "description": "76",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_PUSH_NOTIFICATION ": {
      "name": "EVENT_OTHER_PUSH_NOTIFICATION ",
      "description": "71",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_SOCIAL ": {
      "name": "EVENT_OTHER_SOCIAL ",
      "description": "70",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_SYSTEM_EVENT ": {
      "name": "EVENT_OTHER_SYSTEM_EVENT ",
      "description": "75",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_ASYNC ": {
      "name": "EVENT_OTHER_WEB_ASYNC ",
      "description": "62",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_CLOUD ": {
      "name": "EVENT_OTHER_WEB_CLOUD ",
      "description": "67",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_IAP ": {
      "name": "EVENT_OTHER_WEB_IAP ",
      "description": "66",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_IMAGE_LOAD ": {
      "name": "EVENT_OTHER_WEB_IMAGE_LOAD ",
      "description": "60",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_NETWORKING ": {
      "name": "EVENT_OTHER_WEB_NETWORKING ",
      "description": "68",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_SOUND_LOAD ": {
      "name": "EVENT_OTHER_WEB_SOUND_LOAD ",
      "description": "61",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "EVENT_OTHER_WEB_STEAM ": {
      "name": "EVENT_OTHER_WEB_STEAM ",
      "description": "69",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events.htm",
      "secondaryDescriptors": null
    },
    "MATRIX_MAX": {
      "name": "MATRIX_MAX",
      "description": "This is not an array index, but rather returns the size of the matrix array in the vertex shader.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "MATRIX_PROJECTION": {
      "name": "MATRIX_PROJECTION",
      "description": "This array index constant holds the index to the current projection matrix. The index returned would be used as an array value when calling the `gm_Matrices` constant within the shader code.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "MATRIX_VIEW": {
      "name": "MATRIX_VIEW",
      "description": "This array index constant holds the index to the current view matrix. The index returned would be used as an array value when calling the `gm_Matrices` constant within the shader code.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "MATRIX_WORLD": {
      "name": "MATRIX_WORLD",
      "description": "This array index constant holds the index to the current world matrix. This can be used for things like lighting if you have light information in world-space. The index returned would be used as an array value when calling the `gm_Matrices`          constant within the shader code.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "MATRIX_WORLD_VIEW": {
      "name": "MATRIX_WORLD_VIEW",
      "description": "This array index constant holds the index to the result of the world and view matrices multiplied together. This is often used for things like fog. The index returned would be used as an array value when calling the `gm_Matrices` constant\n          within the shader code.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "MATRIX_WORLD_VIEW_PROJECTION": {
      "name": "MATRIX_WORLD_VIEW_PROJECTION",
      "description": "This array index constant holds the index to the result of the world, view and projection matrices multiplied together. This is the normal transformation matrix used for vertex positions. The index returned would be used as an array value when\n          calling the `gm_Matrices` constant within the shader code.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "MAX_VS_LIGHTS": {
      "name": "MAX_VS_LIGHTS",
      "description": "The maximum number of point and directional lights available in the shader",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "NaN": {
      "name": "NaN",
      "description": "This constant that can be returned when the compiler cannot evaluate the results of an operation as a number - for example, 0 / 0 cannot be defined as a real number, and is therefore represented by `NaN`",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "`mb_side1`*": {
      "name": "`mb_side1`*",
      "description": "Mouse side button 1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button_released.htm",
      "secondaryDescriptors": null
    },
    "`mb_side2`*": {
      "name": "`mb_side2`*",
      "description": "Mouse side button 2",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Mouse_Input/mouse_check_button_released.htm",
      "secondaryDescriptors": null
    },
    "achievement_filter_all_players": {
      "name": "achievement_filter_all_players",
      "description": "Get all scores.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "achievement_filter_favorites_alt": {
      "name": "achievement_filter_favorites_alt",
      "description": "Get only favorites scores in descending order.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "achievement_filter_favorites_only": {
      "name": "achievement_filter_favorites_only",
      "description": "Get only favorites scores, in ascending order",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "achievement_filter_friends_alt": {
      "name": "achievement_filter_friends_alt",
      "description": "Get only friends scores in descending order.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "achievement_filter_friends_only": {
      "name": "achievement_filter_friends_only",
      "description": "Get only friends scores, in ascending order.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_read_player_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "asset_animationcurve": {
      "name": "asset_animationcurve",
      "description": "The given name refers to an  [Animation Curve](https://manual.yoyogames.com/The_Asset_Editors/Animation_Curves.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_font": {
      "name": "asset_font",
      "description": "The given name refers to a  [font](https://manual.yoyogames.com/The_Asset_Editors/Fonts.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_object": {
      "name": "asset_object",
      "description": "The given name refers to an  [object](https://manual.yoyogames.com/The_Asset_Editors/Objects.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_path": {
      "name": "asset_path",
      "description": "The given name refers to a  [path](https://manual.yoyogames.com/The_Asset_Editors/Paths.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_room": {
      "name": "asset_room",
      "description": "The given name refers to a  [room](https://manual.yoyogames.com/The_Asset_Editors/Rooms.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_script": {
      "name": "asset_script",
      "description": "The given name refers to a  [script](https://manual.yoyogames.com/The_Asset_Editors/Scripts.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_sequence": {
      "name": "asset_sequence",
      "description": "The given name refers to a  [Sequence](https://manual.yoyogames.com/The_Asset_Editors/Sequences.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_shader": {
      "name": "asset_shader",
      "description": "The given name refers to a  [shader](https://manual.yoyogames.com/The_Asset_Editors/Shaders.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_sound": {
      "name": "asset_sound",
      "description": "The given name refers to a  [sound](https://manual.yoyogames.com/The_Asset_Editors/Sounds.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_sprite": {
      "name": "asset_sprite",
      "description": "The given name refers to a  [sprite](https://manual.yoyogames.com/The_Asset_Editors/Sprites.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_tiles": {
      "name": "asset_tiles",
      "description": "The given name refers to a  [tile set](https://manual.yoyogames.com/The_Asset_Editors/Tile_Sets.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_timeline": {
      "name": "asset_timeline",
      "description": "The given name refers to a  [time line](https://manual.yoyogames.com/The_Asset_Editors/Timelines.htm).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "asset_unknown": {
      "name": "asset_unknown",
      "description": "The given name refers to an asset that either does not exist, or is not one of the above listed.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Assets_And_Tags/asset_get_type.htm",
      "secondaryDescriptors": null
    },
    "audio_3D": {
      "name": "audio_3D",
      "description": "3D (5.1) audio.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_buffer_sound.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_exponent_distance": {
      "name": "audio_falloff_exponent_distance",
      "description": "\n            gain = (listener_distance / reference_distance) ^ (-falloff_factor)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_exponent_distance_clamped": {
      "name": "audio_falloff_exponent_distance_clamped",
      "description": "\n            distance = clamp(listener_distance, reference_distance, maximum_distance)\n            gain = (distance / reference_distance) ^ (-falloff_factor)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_inverse_distance": {
      "name": "audio_falloff_inverse_distance",
      "description": "\n            gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance))",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_inverse_distance_clamped": {
      "name": "audio_falloff_inverse_distance_clamped",
      "description": "\n            distance = clamp(listener_distance, reference_distance, maximum_distance)\n            gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_linear_distance": {
      "name": "audio_falloff_linear_distance",
      "description": "\n            distance = min(distance, maximum_distance)\n            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_linear_distance_clamped": {
      "name": "audio_falloff_linear_distance_clamped",
      "description": "\n            distance = clamp(listener_distance, reference_distance, maximum_distance)\n            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_falloff_none": {
      "name": "audio_falloff_none",
      "description": "\n            gain = 1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm",
      "secondaryDescriptors": null
    },
    "audio_mono": {
      "name": "audio_mono",
      "description": "Mono (single channel) audio.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_buffer_sound.htm",
      "secondaryDescriptors": null
    },
    "audio_stereo": {
      "name": "audio_stereo",
      "description": "Stereo (dual channel) audio.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_buffer_sound.htm",
      "secondaryDescriptors": null
    },
    "bboxkind_diamond": {
      "name": "bboxkind_diamond",
      "description": "A diamond collision mask shape",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_collision_mask.htm",
      "secondaryDescriptors": null
    },
    "bboxkind_ellipse": {
      "name": "bboxkind_ellipse",
      "description": "An elliptical collision mask shape",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_collision_mask.htm",
      "secondaryDescriptors": null
    },
    "bboxkind_precise": {
      "name": "bboxkind_precise",
      "description": "A precise collision mask, where the mask will conform to the non-transparent pixels of the sprite, based on the tolerance value given (see below))",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_collision_mask.htm",
      "secondaryDescriptors": null
    },
    "bboxkind_rectangular": {
      "name": "bboxkind_rectangular",
      "description": "A rectangular (non-rotating) rectangle collision mask shape",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_collision_mask.htm",
      "secondaryDescriptors": null
    },
    "bboxmode_automatic": {
      "name": "bboxmode_automatic",
      "description": "**Automatic **- The bounding box will be calculated automatically, based on the tolerance setting for the sprite",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox_mode.htm",
      "secondaryDescriptors": null
    },
    "bboxmode_fullimage": {
      "name": "bboxmode_fullimage",
      "description": "**Full Image** - The bounding box will be set to use the full width and height of the sprite, regardless of the tolerance and \"empty\" pixels",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox_mode.htm",
      "secondaryDescriptors": null
    },
    "bboxmode_manual": {
      "name": "bboxmode_manual",
      "description": "**Manual** - The bounding box is being set manually to user defined values, which requires the use of the function `sprite_set_bbox()`",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_bbox_mode.htm",
      "secondaryDescriptors": null
    },
    "bm_add": {
      "name": "bm_add",
      "description": "Additive blending. Luminosity values of light areas are added.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
      "secondaryDescriptors": {
        "Extended Blend Mode": "(`bm_src_alpha`, `bm_one`)"
      }
    },
    "bm_dest_alpha": {
      "name": "bm_dest_alpha",
      "description": "(Ad, Ad, Ad, Ad)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_dest_colour": {
      "name": "bm_dest_colour",
      "description": "(Rd, Gd, Bd, Ad)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_inv_dest_alpha": {
      "name": "bm_inv_dest_alpha",
      "description": "(1-Ad, 1-Ad, 1-Ad, 1-Ad)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_inv_dest_colour": {
      "name": "bm_inv_dest_colour",
      "description": "(1-Rd, 1-Gd, 1-Bd, 1-Ad)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_inv_src_alpha": {
      "name": "bm_inv_src_alpha",
      "description": "(1-As, 1-As, 1-As, 1-As)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_inv_src_colour": {
      "name": "bm_inv_src_colour",
      "description": "(1-Rs, 1-Gs, 1-Bs, 1-As)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_max": {
      "name": "bm_max",
      "description": "Max blending. Similar to additive blending.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
      "secondaryDescriptors": {
        "Extended Blend Mode": "(`bm_src_alpha`, `bm_inv_src_colour`)"
      }
    },
    "bm_normal": {
      "name": "bm_normal",
      "description": "Normal blending (the default blend mode).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
      "secondaryDescriptors": {
        "Extended Blend Mode": "(`bm_src_alpha`, `bm_inv_src_alpha`)"
      }
    },
    "bm_one": {
      "name": "bm_one",
      "description": "(1, 1, 1, 1)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_src_alpha": {
      "name": "bm_src_alpha",
      "description": "(As, As, As, As)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_src_alpha_sat": {
      "name": "bm_src_alpha_sat",
      "description": "(f, f, f, 1) where f = min(As, 1-Ad)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_src_colour": {
      "name": "bm_src_colour",
      "description": "(Rs, Gs, Bs, As)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "bm_subtract": {
      "name": "bm_subtract",
      "description": "Subtractive blending. Luminosity values of light areas are subtracted.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm",
      "secondaryDescriptors": {
        "Extended Blend Mode": "(`bm_zero`, `bm_inv_src_colour`)"
      }
    },
    "bm_zero": {
      "name": "bm_zero",
      "description": "(0, 0, 0, 0)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_dest.htm",
      "secondaryDescriptors": null
    },
    "browser_chrome": {
      "name": "browser_chrome",
      "description": "Google Chrome",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_firefox": {
      "name": "browser_firefox",
      "description": "Mozilla Firefox",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_ie": {
      "name": "browser_ie",
      "description": "Internet Explorer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_ie_mobile": {
      "name": "browser_ie_mobile",
      "description": "Internet Explorer on a mobile device",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_not_a_browser": {
      "name": "browser_not_a_browser",
      "description": "Game is not being played in a browser",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_opera": {
      "name": "browser_opera",
      "description": "Opera",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_safari": {
      "name": "browser_safari",
      "description": "Safari",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_safari_mobile": {
      "name": "browser_safari_mobile",
      "description": "Safari on a mobile device",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_tizen": {
      "name": "browser_tizen",
      "description": "Tizen mobile device browser",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_unknown": {
      "name": "browser_unknown",
      "description": "Unknown browser",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "browser_windows_store": {
      "name": "browser_windows_store",
      "description": "Windows App",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_browser.htm",
      "secondaryDescriptors": null
    },
    "buffer_bool": {
      "name": "buffer_bool",
      "description": "\n          A boolean value. Can only be either 1 or 0 (`true` or `false`)",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "1"
      }
    },
    "buffer_f16": {
      "name": "buffer_f16",
      "description": "\n          A 16bit floating point number. This can be a positive or negative value within the range of +/- 65504. **(Not currently supported!)**",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "2"
      }
    },
    "buffer_f32": {
      "name": "buffer_f32",
      "description": "\n          A 32bit floating point number. This can be a positive or negative value within the range of +/-16777216.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "4"
      }
    },
    "buffer_f64": {
      "name": "buffer_f64",
      "description": "\n          A 64bit floating point number.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "8"
      }
    },
    "buffer_fast": {
      "name": "buffer_fast",
      "description": "\n          This is a special \"stripped down\" buffer that is extremely fast to read/write to. However it can only be used with `buffer_u8` data types, and must be 1 byte aligned. (Information on **data types** and **byte alignment** can be found further down this page).",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": null
    },
    "buffer_fixed": {
      "name": "buffer_fixed",
      "description": "\n          A buffer of a fixed size in bytes. The size is set when the buffer is created and cannot be changed again.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": null
    },
    "buffer_grow": {
      "name": "buffer_grow",
      "description": "\n          A buffer that will *grow* dynamically as data is added. You create it with an initial size (which should be an approximation of the size of the data expected to be stored), and then it will expand to accept further data that overflows this initial size.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": null
    },
    "buffer_s16": {
      "name": "buffer_s16",
      "description": "\n          A signed, 16bit integer. This can be a positive or negative value from -32,768 to 32,767 (0 is classed as positive).",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "2"
      }
    },
    "buffer_s32": {
      "name": "buffer_s32",
      "description": "\n          A signed, 32bit integer. This can be a positive or negative value from -2,147,483,648 to 2,147,483,647 (0 is classed as positive).",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "4"
      }
    },
    "buffer_s8": {
      "name": "buffer_s8",
      "description": "\n          A signed, 8bit integer. This can be a positive or negative value from -128 to 127 (0 is classed as positive).",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "1"
      }
    },
    "buffer_seek_end": {
      "name": "buffer_seek_end",
      "description": "The end of the buffer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
      "secondaryDescriptors": null
    },
    "buffer_seek_relative": {
      "name": "buffer_seek_relative",
      "description": "A position relative to the current read/write position",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
      "secondaryDescriptors": null
    },
    "buffer_seek_start": {
      "name": "buffer_seek_start",
      "description": "The start of the buffer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm",
      "secondaryDescriptors": null
    },
    "buffer_string": {
      "name": "buffer_string",
      "description": "\n          This is a UTF-8 null terminated (0x00) string. Basically a GameMaker string is dumped in the buffer, and a 0 is put at the end.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "N/A"
      }
    },
    "buffer_text": {
      "name": "buffer_text",
      "description": "A string of any size, without the final null terminating character.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_write.htm",
      "secondaryDescriptors": null
    },
    "buffer_u16": {
      "name": "buffer_u16",
      "description": "\n          An unsigned, 16bit integer. This is a positive value from 0 - 65,535.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "2"
      }
    },
    "buffer_u32": {
      "name": "buffer_u32",
      "description": "\n          An unsigned, 32bit integer. This is a positive value from 0 to 4,294,967,295.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "4"
      }
    },
    "buffer_u64": {
      "name": "buffer_u64",
      "description": "\n          A 64bit unsigned integer value.**(Not currently supported by all buffer functions!)**",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "8"
      }
    },
    "buffer_u8": {
      "name": "buffer_u8",
      "description": "\n          An unsigned, 8bit integer. This is a positive value from 0 to 255.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": {
        "Bytes": "1"
      }
    },
    "buffer_vbuffer": {
      "name": "buffer_vbuffer",
      "description": "This type of buffer is to be used as a vertex buffer only.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Buffers/buffer_create_from_vertex_buffer.htm",
      "secondaryDescriptors": null
    },
    "buffer_wrap": {
      "name": "buffer_wrap",
      "description": "\n          A buffer where the data will *wrap*. When the data being added reaches the limit of the buffer size, the overwrite will be placed back at the start of the buffer, and further writing will continue from that point.",
      "link": "https://manual.yoyogames.com/Additional_Information/Guide_To_Using_Buffers.htm",
      "secondaryDescriptors": null
    },
    "c_aqua": {
      "name": "c_aqua",
      "description": "16776960",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_black": {
      "name": "c_black",
      "description": "0",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_blue": {
      "name": "c_blue",
      "description": "16711680",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_dkgray": {
      "name": "c_dkgray",
      "description": "4210752",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_fuchsia": {
      "name": "c_fuchsia",
      "description": "16711935",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_gray": {
      "name": "c_gray",
      "description": "8421504",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_green": {
      "name": "c_green",
      "description": "32768",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_lime": {
      "name": "c_lime",
      "description": "65280",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_ltgray": {
      "name": "c_ltgray",
      "description": "12632256",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_maroon": {
      "name": "c_maroon",
      "description": "128",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_navy": {
      "name": "c_navy",
      "description": "8388608",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_olive": {
      "name": "c_olive",
      "description": "32896",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_orange": {
      "name": "c_orange",
      "description": "4235519",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_purple": {
      "name": "c_purple",
      "description": "8388736",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_red": {
      "name": "c_red",
      "description": "255",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_silver": {
      "name": "c_silver",
      "description": "12632256",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_teal": {
      "name": "c_teal",
      "description": "8421376",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_white": {
      "name": "c_white",
      "description": "16777215",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "c_yellow": {
      "name": "c_yellow",
      "description": "65535",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm",
      "secondaryDescriptors": null
    },
    "cr_appstart": {
      "name": "cr_appstart",
      "description": "[cr_appstart](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_AppStart.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_arrow": {
      "name": "cr_arrow",
      "description": "[cr_arrow](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Arrow.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_beam": {
      "name": "cr_beam",
      "description": "[cr_beam](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Beam.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_cross": {
      "name": "cr_cross",
      "description": "[cr_cross](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Cross.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_default": {
      "name": "cr_default",
      "description": "[cr_default](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Default.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_drag": {
      "name": "cr_drag",
      "description": "[cr_drag](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Drag.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_handpoint": {
      "name": "cr_handpoint",
      "description": "[cr_handpoint](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Hand.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_hourglass": {
      "name": "cr_hourglass",
      "description": "[cr_hourglass](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Hourglass.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_none": {
      "name": "cr_none",
      "description": "",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_size_all": {
      "name": "cr_size_all",
      "description": "[cr_size_all](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_SizeAll.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_size_nesw": {
      "name": "cr_size_nesw",
      "description": "[cr_size_nesw](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_SizeNeSw.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_size_ns": {
      "name": "cr_size_ns",
      "description": "[cr_size_ns](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_SizeNS.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_size_nwse": {
      "name": "cr_size_nwse",
      "description": "[cr_size_nwse](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_SizeNwSe.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_size_we": {
      "name": "cr_size_we",
      "description": "[cr_size_we](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_SizeWE.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cr_uparrow": {
      "name": "cr_uparrow",
      "description": "[cr_uparrow](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Cameras_Display/cr_Up.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/The_Game_Window/window_set_cursor.htm",
      "secondaryDescriptors": null
    },
    "cull_clockwise": {
      "name": "cull_clockwise",
      "description": "All clockwise triangles will be culled",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
      "secondaryDescriptors": null
    },
    "cull_counterclockwise": {
      "name": "cull_counterclockwise",
      "description": "All counter-clockwise triangles will be culled",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
      "secondaryDescriptors": null
    },
    "cull_noculling": {
      "name": "cull_noculling",
      "description": "No culling will be done",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_cullmode.htm",
      "secondaryDescriptors": null
    },
    "device_emulator": {
      "name": "device_emulator",
      "description": "The device is actually an emulator (Windows Phone or Android)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_ipad": {
      "name": "device_ios_ipad",
      "description": "iPad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_ipad_retina": {
      "name": "device_ios_ipad_retina",
      "description": "Newer iPad with Retina display size of 2048 x 1536",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_iphone": {
      "name": "device_ios_iphone",
      "description": "Older iPhone/iPod Touch (480 x 320 screen) *or* Android phone",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_iphone5": {
      "name": "device_ios_iphone5",
      "description": "iPhone5 with display size 640 x 1136)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_iphone6": {
      "name": "device_ios_iphone6",
      "description": "iPhone6 with display size 1334 x 750",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_iphone6plus": {
      "name": "device_ios_iphone6plus",
      "description": "Larger iPhone 6 with display 1920 x 1080",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_iphone_retina": {
      "name": "device_ios_iphone_retina",
      "description": "Newer iPhone/iPod Touch with Retina display of 960 x 640",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_ios_unknown": {
      "name": "device_ios_unknown",
      "description": "Unknown or not iOS",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "device_tablet": {
      "name": "device_tablet",
      "description": "Android tablet",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_device.htm",
      "secondaryDescriptors": null
    },
    "display_landscape": {
      "name": "display_landscape",
      "description": "The device is being held horizontally ie: The longest edge is from left to right, and the menu button is on the right.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
      "secondaryDescriptors": null
    },
    "display_landscape_flipped": {
      "name": "display_landscape_flipped",
      "description": "As above, only now the menu button is on the left.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
      "secondaryDescriptors": null
    },
    "display_portrait": {
      "name": "display_portrait",
      "description": "The device is being held vertically ie: The longest edge is from top to bottom, and the menu button is at the bottom.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
      "secondaryDescriptors": null
    },
    "display_portrait_flipped": {
      "name": "display_portrait_flipped",
      "description": "As above, only now the menu button is at the top.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_orientation.htm",
      "secondaryDescriptors": null
    },
    "dll_cdecl": {
      "name": "dll_cdecl",
      "description": "This is the default C, C++ call",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
      "secondaryDescriptors": null
    },
    "dll_stdcall": {
      "name": "dll_stdcall",
      "description": "This is the standard WinAPI call (Windows `dll` only)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
      "secondaryDescriptors": null
    },
    "ds_type_grid": {
      "name": "ds_type_grid",
      "description": "A  [grid](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Grids/DS_Grids.htm) data structure",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
      "secondaryDescriptors": null
    },
    "ds_type_list": {
      "name": "ds_type_list",
      "description": "A  [list](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm) data structure",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
      "secondaryDescriptors": null
    },
    "ds_type_map": {
      "name": "ds_type_map",
      "description": "A  [map](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm) data structure",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
      "secondaryDescriptors": null
    },
    "ds_type_priority": {
      "name": "ds_type_priority",
      "description": "A  [priority](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Priority_Queues/DS_Priority_Queues.htm) data structure",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
      "secondaryDescriptors": null
    },
    "ds_type_queue": {
      "name": "ds_type_queue",
      "description": "A  [queue](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Queues/DS_Queues.htm) data structure",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
      "secondaryDescriptors": null
    },
    "ds_type_stack": {
      "name": "ds_type_stack",
      "description": "A  [stack](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/DS_Stacks/DS_Stacks.htm) data structure",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Data_Structures/ds_exists.htm",
      "secondaryDescriptors": null
    },
    "ef_cloud": {
      "name": "ef_cloud",
      "description": "An effect that creates random cloud particles of varying sizes",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[cloud effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_cloud.png)"
      }
    },
    "ef_ellipse": {
      "name": "ef_ellipse",
      "description": "An effect that creates expanding ellipses",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[ellipse effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_ellipse.png)"
      }
    },
    "ef_explosion": {
      "name": "ef_explosion",
      "description": "An effect that creates expanding fading explosions",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[explosion effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_explosion.png)"
      }
    },
    "ef_firework": {
      "name": "ef_firework",
      "description": "An effect that creates multiple small particles to generate a firework explosion",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[firework effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_firework.png)"
      }
    },
    "ef_flare": {
      "name": "ef_flare",
      "description": "An effect that generates a brilliant point that flares up and fades out",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[flare effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_flare.png)"
      }
    },
    "ef_rain": {
      "name": "ef_rain",
      "description": "An effect that generates rain particles coming down from the top of the screen",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[rain effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_rain.png)"
      }
    },
    "ef_ring": {
      "name": "ef_ring",
      "description": "An effect that generates expanding and fading circles",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[circle effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_ring.png)"
      }
    },
    "ef_smoke": {
      "name": "ef_smoke",
      "description": "An effect that generates little puffs of smoke",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[smoke effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_smoke.png)"
      }
    },
    "ef_smokeup": {
      "name": "ef_smokeup",
      "description": "An effect that creates a smoke plume that rises up the screen",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[rising smoke effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_smokeup.png)"
      }
    },
    "ef_snow": {
      "name": "ef_snow",
      "description": "An effect that generates multiple snow particles falling down the screen",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[snow effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_snow.png)"
      }
    },
    "ef_spark": {
      "name": "ef_spark",
      "description": "An effect that generates a small spark",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[spark effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_spark.png)"
      }
    },
    "ef_star": {
      "name": "ef_star",
      "description": "An effect that generates star particles",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/effect_create_below.htm",
      "secondaryDescriptors": {
        "Example": "[star effect example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/ef_star.png)"
      }
    },
    "ev_alarm": {
      "name": "ev_alarm",
      "description": "Alarm event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_async_audio_playback": {
      "name": "ev_async_audio_playback",
      "description": "Audio Playback event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_audio_recording": {
      "name": "ev_async_audio_recording",
      "description": "Audio Recording event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_dialog": {
      "name": "ev_async_dialog",
      "description": "Dialog event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_push_notification": {
      "name": "ev_async_push_notification",
      "description": "Push Notification event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_save_load": {
      "name": "ev_async_save_load",
      "description": "Save/Load Event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_social": {
      "name": "ev_async_social",
      "description": "Social event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_system_event": {
      "name": "ev_async_system_event",
      "description": "System event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_web": {
      "name": "ev_async_web",
      "description": "HTTP event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_web_cloud": {
      "name": "ev_async_web_cloud",
      "description": "Cloud event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_web_iap": {
      "name": "ev_async_web_iap",
      "description": "In-App Purchase event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_web_image_load": {
      "name": "ev_async_web_image_load",
      "description": "Image Loaded event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_web_networking": {
      "name": "ev_async_web_networking",
      "description": "Networking event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_async_web_steam": {
      "name": "ev_async_web_steam",
      "description": "Steam event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform_async.htm",
      "secondaryDescriptors": null
    },
    "ev_cleanup": {
      "name": "ev_cleanup",
      "description": "Clean Up Event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_collision": {
      "name": "ev_collision",
      "description": "Collision with an object",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_create": {
      "name": "ev_create",
      "description": "Create event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_destroy": {
      "name": "ev_destroy",
      "description": "Destroy event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_draw": {
      "name": "ev_draw",
      "description": "Draw event. NOTE** ***This event cannot be forced outside of a draw event and the constants and the constants are only for identifying the event when performed in these cases.*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_gesture": {
      "name": "ev_gesture",
      "description": "A gesture event (Tap, Drag, Flick, Pinch or Rotate)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_keyboard, ev_keypress, ev_keyrelease": {
      "name": "ev_keyboard, ev_keypress, ev_keyrelease",
      "description": "Keyboard/Keyboard Pressed/Keyboard Released",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_mouse": {
      "name": "ev_mouse",
      "description": "Mouse event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_other": {
      "name": "ev_other",
      "description": "One of the actions listed under 'Other'",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "ev_step": {
      "name": "ev_step",
      "description": "Step event",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_perform.htm",
      "secondaryDescriptors": null
    },
    "fa_archive": {
      "name": "fa_archive",
      "description": "Archived files",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
      "secondaryDescriptors": null
    },
    "fa_bottom": {
      "name": "fa_bottom",
      "description": "[fa_bottom example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/fa_bottom.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
      "secondaryDescriptors": null
    },
    "fa_center": {
      "name": "fa_center",
      "description": "[fa_center example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/fa_center.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
      "secondaryDescriptors": null
    },
    "fa_directory": {
      "name": "fa_directory",
      "description": "Directories",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
      "secondaryDescriptors": null
    },
    "fa_hidden": {
      "name": "fa_hidden",
      "description": "Hidden files",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
      "secondaryDescriptors": null
    },
    "fa_left": {
      "name": "fa_left",
      "description": "[fa_left example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/fa_left.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
      "secondaryDescriptors": null
    },
    "fa_middle": {
      "name": "fa_middle",
      "description": "[fa_middle example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/fa_middle.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
      "secondaryDescriptors": null
    },
    "fa_readonly": {
      "name": "fa_readonly",
      "description": "Read-only files",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
      "secondaryDescriptors": null
    },
    "fa_right": {
      "name": "fa_right",
      "description": "[fa_right example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/fa_right.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_halign.htm",
      "secondaryDescriptors": null
    },
    "fa_sysfile": {
      "name": "fa_sysfile",
      "description": "System files",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
      "secondaryDescriptors": null
    },
    "fa_top": {
      "name": "fa_top",
      "description": "[fa_top example](https://manual.yoyogames.com/assets/Images/Scripting_Reference/GML/Reference/Drawing/fa_top.png)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Text/draw_get_valign.htm",
      "secondaryDescriptors": null
    },
    "fa_volumeid": {
      "name": "fa_volumeid",
      "description": "Volume-id files",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/File_Handling/File_System/file_attributes.htm",
      "secondaryDescriptors": null
    },
    "false": {
      "name": "false",
      "description": "This constant represents the value 0, which is what GameMaker Studio will evaluate as a boolean \"false\" (note that any value less than or equal to 0 will evaluate as false).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "gamespeed_fps": {
      "name": "gamespeed_fps",
      "description": "Gets the game speed using frames per second.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_get_speed.htm",
      "secondaryDescriptors": null
    },
    "gamespeed_microseconds": {
      "name": "gamespeed_microseconds",
      "description": "Gets the game speed using microseconds per frame.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/General_Game_Control/game_get_speed.htm",
      "secondaryDescriptors": null
    },
    "gm_AlphaRefValue": {
      "name": "gm_AlphaRefValue",
      "description": "This can be used to get the current alpha testing reference value. See `gpu_set_alphatestref()` for more information on the alpha test reference.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_AlphaTestEnabled": {
      "name": "gm_AlphaTestEnabled",
      "description": "This can be used to get alpha testing in the shader. See `gpu_set_alphatestenable()` for more information on alpha testing.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_BaseTexture": {
      "name": "gm_BaseTexture",
      "description": "This is a 2D sampler constant that returns the texture of the current object, as set by GameMaker Studio 2. So it would be the current sprite, surface or texture that would normally be used when drawing without the shader being called.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_FogColour": {
      "name": "gm_FogColour",
      "description": "This can be used to get the fog colour used by GameMaker Studio 2.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_FogStart": {
      "name": "gm_FogStart",
      "description": "This can be used to get the distance where polygons start to be blended with the fog colour.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_LightingEnabled": {
      "name": "gm_LightingEnabled",
      "description": "This can be used to get or set the GameMaker Studio 2 lighting when using 3D.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_Matrices[matrix]": {
      "name": "gm_Matrices[matrix]",
      "description": "This array constant returns a transform matrix and is one of the available pre-defined uniforms that GameMaker Studio 2 creates for you to use within the shader code editor. The array index is chosen from one of the above listed constants.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_PS_FogEnabled": {
      "name": "gm_PS_FogEnabled",
      "description": "This will return `true` or `false` if the GPU has pixel fog enabled or not.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_RcpFogRange": {
      "name": "gm_RcpFogRange",
      "description": "This can be used to get the distance at which fog is maximal and nothing can be seen anymore.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gm_VS_FogEnabled": {
      "name": "gm_VS_FogEnabled",
      "description": "This will return `true` or `false` if the GPU has vertex fog enabled or not.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_acceleration_x": {
      "name": "gp_axis_acceleration_x",
      "description": "The gamepad's acceleration on the X axis",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_acceleration_y": {
      "name": "gp_axis_acceleration_y",
      "description": "The gamepad's acceleration on the Y axis",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_acceleration_z": {
      "name": "gp_axis_acceleration_z",
      "description": "The gamepad's acceleration on the Z axis",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_angular_velocity_x": {
      "name": "gp_axis_angular_velocity_x",
      "description": "The gamepad's angular velocity on the X axis",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_angular_velocity_y": {
      "name": "gp_axis_angular_velocity_y",
      "description": "The gamepad's angular velocity on the Y axis",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_angular_velocity_z": {
      "name": "gp_axis_angular_velocity_z",
      "description": "The gamepad's angular velocity on the Z axis",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_orientation_w": {
      "name": "gp_axis_orientation_w",
      "description": "The gamepad's W orientation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_orientation_x": {
      "name": "gp_axis_orientation_x",
      "description": "The gamepad's X orientation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_orientation_y": {
      "name": "gp_axis_orientation_y",
      "description": "The gamepad's Y orientation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axis_orientation_z": {
      "name": "gp_axis_orientation_z",
      "description": "The gamepad's Z orientation",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/Gamepad_Input.htm",
      "secondaryDescriptors": null
    },
    "gp_axislh": {
      "name": "gp_axislh",
      "description": "Left stick horizontal axis (analogue)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_axislv": {
      "name": "gp_axislv",
      "description": "Left stick vertical axis (analogue)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_axisrh": {
      "name": "gp_axisrh",
      "description": "Right stick horizontal axis (analogue)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_axisrv": {
      "name": "gp_axisrv",
      "description": "Right stick vertical axis (analogue)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_face1": {
      "name": "gp_face1",
      "description": "Top button 1 (this maps to the *\"A\"* on an Xbox 360 controller and the *cross* on a PS controller)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_face2": {
      "name": "gp_face2",
      "description": "Top button 2 (this maps to the *\"B\"* on an Xbox 360 controller and the *circle* on a PS controller)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_face3": {
      "name": "gp_face3",
      "description": "Top button 3 (this maps to the *\"X\"* on an Xbox 360 controller and the *square* on a PS controller)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_face4": {
      "name": "gp_face4",
      "description": "Top button 4 (this maps to the *\"Y\"* on an Xbox 360 controller and the *triangle* on a PS controller)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_padd": {
      "name": "gp_padd",
      "description": "D-pad down",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_padl": {
      "name": "gp_padl",
      "description": "D-pad left",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_padr": {
      "name": "gp_padr",
      "description": "D-pad right",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_padu": {
      "name": "gp_padu",
      "description": "D-pad up",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_select": {
      "name": "gp_select",
      "description": "The select button (on a DS4 controller, this triggers when you press the touchpad down)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_shoulderl": {
      "name": "gp_shoulderl",
      "description": "Left shoulder button",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_shoulderlb": {
      "name": "gp_shoulderlb",
      "description": "Left shoulder trigger",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_shoulderr": {
      "name": "gp_shoulderr",
      "description": "Right shoulder button",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_shoulderrb": {
      "name": "gp_shoulderrb",
      "description": "Right shoulder trigger",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_start": {
      "name": "gp_start",
      "description": "The start button (this is the \"options\" button on a PS4 controller)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_stickl": {
      "name": "gp_stickl",
      "description": "The left stick pressed (as a button)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "gp_stickr": {
      "name": "gp_stickr",
      "description": "The right stick pressed (as a button)",
      "link": "https://manual.yoyogames.com/Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/Gamepad_Actions.htm",
      "secondaryDescriptors": null
    },
    "infinity": {
      "name": "infinity",
      "description": "\n                This constant \n              refers to a number that is considered infinite, such as the result you would get when dividing any floating point value by zero, eg: 1.0/0.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_background": {
      "name": "layerelementtype_background",
      "description": "The element is a background.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_instance": {
      "name": "layerelementtype_instance",
      "description": "The element is an instance.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_particlesystem": {
      "name": "layerelementtype_particlesystem",
      "description": "The element is a particle system.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_sequence": {
      "name": "layerelementtype_sequence",
      "description": "The element is a sequence asset.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_sprite": {
      "name": "layerelementtype_sprite",
      "description": "The element is a sprite asset.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_tile": {
      "name": "layerelementtype_tile",
      "description": "The element is a legacy background tile (this is only valid for projects that have been imported from previous versions of *GameMaker*).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "layerelementtype_tilemap": {
      "name": "layerelementtype_tilemap",
      "description": "The element is a tilemap.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_element_type.htm",
      "secondaryDescriptors": null
    },
    "lb_disp_none": {
      "name": "lb_disp_none",
      "description": "Show the leaderboard \"as is\".",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lb_disp_numeric": {
      "name": "lb_disp_numeric",
      "description": "Show the leaderboard as a numeric display.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lb_disp_time_ms": {
      "name": "lb_disp_time_ms",
      "description": "Show the leaderboard values as times, with the base value being milli-seconds.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lb_disp_time_sec": {
      "name": "lb_disp_time_sec",
      "description": "Show the leaderboard values as times, with the base value being seconds.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lb_sort_ascending": {
      "name": "lb_sort_ascending",
      "description": "Sort the leaderboard in ascending order.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lb_sort_descending": {
      "name": "lb_sort_descending",
      "description": "Sort the leaderboard in descending order.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lb_sort_none": {
      "name": "lb_sort_none",
      "description": "No sorting. The information will be displayed \"as is\".",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Leaderboards/steam_create_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "lighttype_dir": {
      "name": "lighttype_dir",
      "description": "The light is a directional light",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_get.htm",
      "secondaryDescriptors": null
    },
    "lighttype_point": {
      "name": "lighttype_point",
      "description": "The light is a point light",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Lighting/draw_light_get.htm",
      "secondaryDescriptors": null
    },
    "matrix_projection": {
      "name": "matrix_projection",
      "description": "The current projection matrix",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
      "secondaryDescriptors": null
    },
    "matrix_view": {
      "name": "matrix_view",
      "description": "The current view matrix",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
      "secondaryDescriptors": null
    },
    "matrix_world": {
      "name": "matrix_world",
      "description": "The current world matrix",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Matrix_Functions/matrix_set.htm",
      "secondaryDescriptors": null
    },
    "mb_any": {
      "name": "mb_any",
      "description": "Any of the mouse buttons",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mb_left": {
      "name": "mb_left",
      "description": "The left mouse button",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mb_middle": {
      "name": "mb_middle",
      "description": "The middle mouse button (this may not be valid for all target platforms)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mb_none": {
      "name": "mb_none",
      "description": "No mouse button",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mb_right": {
      "name": "mb_right",
      "description": "The right mouse button",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mb_side1*": {
      "name": "mb_side1*",
      "description": "Mouse side button 1",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mb_side2*": {
      "name": "mb_side2*",
      "description": "Mouse side button 2",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Device_Input/Device_Input.htm",
      "secondaryDescriptors": null
    },
    "mip_markedonly": {
      "name": "mip_markedonly",
      "description": "Mipmapping is enabled for textures that have it enabled in the Texture Group options (default).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
      "secondaryDescriptors": null
    },
    "mip_off": {
      "name": "mip_off",
      "description": "Mipmapping is disabled.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
      "secondaryDescriptors": null
    },
    "mip_on": {
      "name": "mip_on",
      "description": "Mipmapping for all textures is enabled.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_set_tex_mip_enable_ext.htm",
      "secondaryDescriptors": null
    },
    "network_config_avoid_time_wait": {
      "name": "network_config_avoid_time_wait",
      "description": "Sets the SO_LINGER timeout value to 0 for an exisiting TCP socket",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
      "secondaryDescriptors": {
        "Setting": "The socket ID to target"
      }
    },
    "network_config_connect_timeout": {
      "name": "network_config_connect_timeout",
      "description": "Set a connection timeout value",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
      "secondaryDescriptors": {
        "Setting": "A value in milliseconds"
      }
    },
    "network_config_disable_reliable_udp": {
      "name": "network_config_disable_reliable_udp",
      "description": "Disables the \"reliable UDP\" protocol for an existing UDP socked.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
      "secondaryDescriptors": {
        "Setting": "The socket ID to target"
      }
    },
    "network_config_enable_reliable_udp": {
      "name": "network_config_enable_reliable_udp",
      "description": "Enables the \"reliable UDP\" protocol for an existing UDP socket",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
      "secondaryDescriptors": {
        "Setting": "The socket ID to target"
      }
    },
    "network_config_use_non_blocking_socket": {
      "name": "network_config_use_non_blocking_socket",
      "description": "Tell GameMaker Studio 2 not to block on connect.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_set_config.htm",
      "secondaryDescriptors": {
        "Setting": "0 = block, 1 = don't block"
      }
    },
    "network_socket_tcp": {
      "name": "network_socket_tcp",
      "description": "Create a socket using TCP.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
      "secondaryDescriptors": null
    },
    "network_socket_udp": {
      "name": "network_socket_udp",
      "description": "Create a socket using UDP.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
      "secondaryDescriptors": null
    },
    "network_socket_ws": {
      "name": "network_socket_ws",
      "description": "Create a WebSocket using TCP.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
      "secondaryDescriptors": null
    },
    "network_socket_wss *": {
      "name": "network_socket_wss *",
      "description": "Create a secure WebSocket using TCP.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Networking/network_create_server.htm",
      "secondaryDescriptors": null
    },
    "network_type_connect": {
      "name": "network_type_connect",
      "description": "The event was triggered by a connection.",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Networking.htm",
      "secondaryDescriptors": null
    },
    "network_type_data": {
      "name": "network_type_data",
      "description": "The event was triggered by incoming data.",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Networking.htm",
      "secondaryDescriptors": null
    },
    "network_type_disconnect": {
      "name": "network_type_disconnect",
      "description": "The event was triggered by a disconnection.",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Networking.htm",
      "secondaryDescriptors": null
    },
    "network_type_non_blocking_connect": {
      "name": "network_type_non_blocking_connect",
      "description": "The event was triggered by a connection configured as non-blocking (you can use the function network_set_config() for this, or\n          connect using network_connect_async() or network_connect_async_raw()).",
      "link": "https://manual.yoyogames.com/The_Asset_Editors/Object_Properties/Async_Events/Networking.htm",
      "secondaryDescriptors": null
    },
    "nineslice_blank": {
      "name": "nineslice_blank",
      "description": "The slice will not be stretched or repeated, resulting in a blank area after it",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_bottom": {
      "name": "nineslice_bottom",
      "description": "The bottom edge slice",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_centre": {
      "name": "nineslice_centre",
      "description": "The centre slice",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_hide": {
      "name": "nineslice_hide",
      "description": "The slice will not appear at all",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_left": {
      "name": "nineslice_left",
      "description": "The left edge slice",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_mirror": {
      "name": "nineslice_mirror",
      "description": "The slice will be repeated by mirroring",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_repeat": {
      "name": "nineslice_repeat",
      "description": "The slice will be repeated",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_right": {
      "name": "nineslice_right",
      "description": "The right edge slice",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_stretch": {
      "name": "nineslice_stretch",
      "description": "The slice will be stretched",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "nineslice_top": {
      "name": "nineslice_top",
      "description": "The top edge slice",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Nine_Slice_Struct.htm",
      "secondaryDescriptors": null
    },
    "os_android": {
      "name": "os_android",
      "description": "Android",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_ios": {
      "name": "os_ios",
      "description": "iOS (iPhone, iPad, iPod Touch)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_linux": {
      "name": "os_linux",
      "description": "Linux",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_macosx": {
      "name": "os_macosx",
      "description": "macOS X",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_operagx": {
      "name": "os_operagx",
      "description": "Opera GX",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_permission_denied": {
      "name": "os_permission_denied",
      "description": "This indicates that the permission has not been granted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_request_permission.htm",
      "secondaryDescriptors": null
    },
    "os_permission_denied_dont_request": {
      "name": "os_permission_denied_dont_request",
      "description": "This indicates that the permission has either been blocked by the phone settings, or that the user has previously denied the request and selected \"Don't ask again\".",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_check_permission.htm",
      "secondaryDescriptors": null
    },
    "os_permission_granted": {
      "name": "os_permission_granted",
      "description": "This indicates that the permission has been granted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_request_permission.htm",
      "secondaryDescriptors": null
    },
    "os_ps4": {
      "name": "os_ps4",
      "description": "Sony PlayStation 4",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_ps5": {
      "name": "os_ps5",
      "description": "Sony PlayStation 5",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_switch": {
      "name": "os_switch",
      "description": "Nintendo Switch",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_tvos": {
      "name": "os_tvos",
      "description": "Apple tvOS",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_unknown": {
      "name": "os_unknown",
      "description": "Unknown OS",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_uwp": {
      "name": "os_uwp",
      "description": "Windows 10 Universal Windows Platform",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_windows": {
      "name": "os_windows",
      "description": "Windows OS",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_xboxone": {
      "name": "os_xboxone",
      "description": "Microsoft Xbox One",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "os_xboxseriesxs": {
      "name": "os_xboxseriesxs",
      "description": "Microsoft Xbox Series X/S",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/os_type.htm",
      "secondaryDescriptors": null
    },
    "ov_achievements": {
      "name": "ov_achievements",
      "description": "The achievements page for your game",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm",
      "secondaryDescriptors": null
    },
    "ov_community": {
      "name": "ov_community",
      "description": "The community page for your game",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm",
      "secondaryDescriptors": null
    },
    "ov_friends": {
      "name": "ov_friends",
      "description": "The friends page for the current user",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm",
      "secondaryDescriptors": null
    },
    "ov_gamegroup": {
      "name": "ov_gamegroup",
      "description": "Opens the Steam Community web browser to the official game group for this game",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm",
      "secondaryDescriptors": null
    },
    "ov_players": {
      "name": "ov_players",
      "description": "The page showing others that are playing the same game or that you have recently played with",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm",
      "secondaryDescriptors": null
    },
    "ov_settings": {
      "name": "ov_settings",
      "description": "The Steam client overlay settings",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_Overlay/steam_activate_overlay.htm",
      "secondaryDescriptors": null
    },
    "path_action_continue": {
      "name": "path_action_continue",
      "description": "start the path again from the current position",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_endaction.htm",
      "secondaryDescriptors": null
    },
    "path_action_restart": {
      "name": "path_action_restart",
      "description": "continue from start position, jumping to the start if the path is not closed",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_endaction.htm",
      "secondaryDescriptors": null
    },
    "path_action_reverse": {
      "name": "path_action_reverse",
      "description": "reverse the speed of the path (run the path in reverse)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_endaction.htm",
      "secondaryDescriptors": null
    },
    "path_action_stop": {
      "name": "path_action_stop",
      "description": "stop the path",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Paths/Path_Variables/path_endaction.htm",
      "secondaryDescriptors": null
    },
    "phy_joint_anchor_1_x": {
      "name": "phy_joint_anchor_1_x",
      "description": "The x coordinate of the first anchor point of the joint *in the room*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_anchor_1_y": {
      "name": "phy_joint_anchor_1_y",
      "description": "The y coordinate of the first anchor point of the joint *in the room*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_anchor_2_x": {
      "name": "phy_joint_anchor_2_x",
      "description": "The x coordinate of the second anchor point of the joint *in the room*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_anchor_2_y": {
      "name": "phy_joint_anchor_2_y",
      "description": "The y coordinate of the second anchor point of the joint *in the room*",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_angle": {
      "name": "phy_joint_angle",
      "description": "The angle that a line between the two anchor points of the joint makes. This is calculated using the *physics world* coordinates ( **not** the GameMaker Studio 2 room\n            coordinates) in radians.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_angle_limits": {
      "name": "phy_joint_angle_limits",
      "description": "Enable or disable angle limiting for the joint. Set the value to `true` to enable or `false` to disable.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_damping_ratio": {
      "name": "phy_joint_damping_ratio",
      "description": "The damping ratio is non-dimensional and defines the \"springiness\" of the joint. The value for this constant is typically between 0 and 1, but can be larger, and at 1, the damping is critical meaning that all oscillations should vanish.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_frequency": {
      "name": "phy_joint_frequency",
      "description": "This will return (or set) the oscillation frequency for the joint, in hertz, and typically the frequency should be less than a half the frequency of the time step, as set by the function `physics_world_update_speed()`.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_length_1": {
      "name": "phy_joint_length_1",
      "description": "This will return the length of the joint from the first local x/y coordinates to the first anchor x/y coordinates (Distance joints only, can only be read from)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_length_2": {
      "name": "phy_joint_length_2",
      "description": "This will return the length of the joint from the second local x/y coordinates to the second anchor x/y coordinates (Distance joints only, can only be written to)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_lower_angle_limit": {
      "name": "phy_joint_lower_angle_limit",
      "description": "The lower angle limit for the joint in degrees.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_max_force": {
      "name": "phy_joint_max_force",
      "description": "The maximum force value for the joint.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_max_length": {
      "name": "phy_joint_max_length",
      "description": "The maximum extension for the connection between the two anchor points.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_max_motor_force": {
      "name": "phy_joint_max_motor_force",
      "description": "The value specified when the joint was created for the maximum motor force",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_max_motor_torque": {
      "name": "phy_joint_max_motor_torque",
      "description": "The value specified when the joint was created for the maximum motor torque",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_max_torque": {
      "name": "phy_joint_max_torque",
      "description": "The maximum torque value for the joint.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_motor_force": {
      "name": "phy_joint_motor_force",
      "description": "The current motor force",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_motor_speed": {
      "name": "phy_joint_motor_speed",
      "description": "The current motor speed",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_joint_motor_torque": {
      "name": "phy_joint_motor_torque",
      "description": "The current motor torque",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_reaction_force_x": {
      "name": "phy_joint_reaction_force_x",
      "description": "This is the reaction force being applied to the second instance in a joint at the x anchor position",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_reaction_force_y": {
      "name": "phy_joint_reaction_force_y",
      "description": "This is the reaction force being applied to the second instance in a joint at the y anchor position",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_reaction_torque": {
      "name": "phy_joint_reaction_torque",
      "description": "This is the torque being applied to the second instance in a joint at the anchor position",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_speed": {
      "name": "phy_joint_speed",
      "description": "The current joint movement speed.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_translation": {
      "name": "phy_joint_translation",
      "description": "Gets the distance between the anchor x/y coordinates and the local x/y coordinates.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "Yes"
      }
    },
    "phy_joint_upper_angle_limit": {
      "name": "phy_joint_upper_angle_limit",
      "description": "The upper angle limit for the joint in degrees.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm",
      "secondaryDescriptors": {
        "Read Only": "No"
      }
    },
    "phy_particle_data_flag_category": {
      "name": "phy_particle_data_flag_category",
      "description": "The particle category (as defined when you created the particle).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
      "secondaryDescriptors": {
        "Data Type": "buffer_u32"
      }
    },
    "phy_particle_data_flag_colour": {
      "name": "phy_particle_data_flag_colour",
      "description": "The colour and alpha value (hexadecimal).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
      "secondaryDescriptors": {
        "Data Type": "buffer_f32"
      }
    },
    "phy_particle_data_flag_position": {
      "name": "phy_particle_data_flag_position",
      "description": "The x and y position of the particle.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
      "secondaryDescriptors": {
        "Data Type": "2 x buffer_f32"
      }
    },
    "phy_particle_data_flag_typeflags": {
      "name": "phy_particle_data_flag_typeflags",
      "description": "The flags value for the particle.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
      "secondaryDescriptors": {
        "Data Type": "buffer_u32"
      }
    },
    "phy_particle_data_flag_velocity": {
      "name": "phy_particle_data_flag_velocity",
      "description": "The horizontal and vertical speed.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_get_data_particle.htm",
      "secondaryDescriptors": {
        "Data Type": "2 x buffer_f32"
      }
    },
    "phy_particle_flag_colourmixing": {
      "name": "phy_particle_flag_colourmixing",
      "description": "Colour-mixing particles take on some of the colour of other particles with which they collide. Note that if only one of the two colliding particles is a colour-mixing one, the other particle retains its pre-collision colour.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_elastic": {
      "name": "phy_particle_flag_elastic",
      "description": "Elastic particles deform and may also bounce when they collide with other rigid bodies in the physics simulation.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_powder": {
      "name": "phy_particle_flag_powder",
      "description": "Powder particles produce a scattering effect such as you might see with sand or dust.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_spring": {
      "name": "phy_particle_flag_spring",
      "description": "Spring particles produce the effect of being attached to one another, as if by a spring. Particles created with this flag are \"connected\" in pairs, with each particle being connected to the one that was closest to it at the time of creation.\n          Once paired, particles do not change \"partners\" , and the farther an external force pulls them from one another, the greater the power with which they will collide when that external force is removed. Note that no matter how far paired\n          particles get from each another, the connection between them will not snap.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_tensile": {
      "name": "phy_particle_flag_tensile",
      "description": "Tensile particles are used to produce the effect of surface tension, or the taut curvature on the surface of a body of liquid. They might be used, for example, to create the surface tension you would see on a drop of water. Once the tension is\n          broken, the particles bounce as if they were elastic, but also continue to attract each other. As a result, particles tend to form clusters as they bounce.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_viscous": {
      "name": "phy_particle_flag_viscous",
      "description": "A viscous particle is one that exhibits \"clinginess\" or \"stickiness\", like oil. Viscous particles will clump and stick together more.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_wall": {
      "name": "phy_particle_flag_wall",
      "description": "This defines the particle as *static*, essentially creating it as an immovable object in the physics simulation, as they will remain in a fixed position no matter what collides with them. You should use this flag rather than set the density\n          to 0.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_water": {
      "name": "phy_particle_flag_water",
      "description": "The default properties for a soft body particle.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_flag_zombie": {
      "name": "phy_particle_flag_zombie",
      "description": "A zombie particle is one that will be destroyed in a single step with all others flagged in this way.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_set_flags.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_group_flag_rigid": {
      "name": "phy_particle_group_flag_rigid",
      "description": "Rigid particle groups are ones whose shape does not change, even when they collide with other fixtures.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_begin.htm",
      "secondaryDescriptors": null
    },
    "phy_particle_group_flag_solid": {
      "name": "phy_particle_group_flag_solid",
      "description": "A solid particle group prevents other fixtures from lodging inside of it. Should anything penetrate it, the solid particle group pushes the offending fixture back out to its surface, making a a solid particle group possess an especially strong\n          repulsive force.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Physics/Soft_Body_Particles/physics_particle_group_begin.htm",
      "secondaryDescriptors": null
    },
    "pi": {
      "name": "pi",
      "description": "This constant represents the value of pi: 3.141592653589793280 etc... although the exact value will depend on various factors like the OS or the platform being targeted.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "pointer_invalid": {
      "name": "pointer_invalid",
      "description": "This constant simply means that the value is not a valid pointer",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "pointer_null": {
      "name": "pointer_null",
      "description": "This constant indicates that the pointer is not pointing to anything meaningful (the same as `NULL` in C++ or null in C#).\n          This value is falsy (tooltip).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "pr_linelist": {
      "name": "pr_linelist",
      "description": "A primitive made up of a individual lines in a list.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
      "secondaryDescriptors": null
    },
    "pr_linestrip": {
      "name": "pr_linestrip",
      "description": "A primitive made up of a consecutive strip of lines.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
      "secondaryDescriptors": null
    },
    "pr_pointlist": {
      "name": "pr_pointlist",
      "description": "A primitive consisting of a list of points.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
      "secondaryDescriptors": null
    },
    "pr_trianglelist": {
      "name": "pr_trianglelist",
      "description": "A primitive made up of individual triangles in a list.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
      "secondaryDescriptors": null
    },
    "pr_trianglestrip": {
      "name": "pr_trianglestrip",
      "description": "A primitive made up of a consecutive strip of triangles.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_submit.htm",
      "secondaryDescriptors": null
    },
    "ps_distr_gaussian": {
      "name": "ps_distr_gaussian",
      "description": "A gaussian distribution where more particles are generated in the center rather than the edges.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "ps_distr_invgaussian": {
      "name": "ps_distr_invgaussian",
      "description": "An inverse gaussian distribution where more particles are generated at the edges than center.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "ps_distr_linear": {
      "name": "ps_distr_linear",
      "description": "A Linear distribution where all particles have an equal chance of appearing anywhere in the area.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "ps_shape_diamond": {
      "name": "ps_shape_diamond",
      "description": "A diamond shape with the points at half width and half height.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "ps_shape_ellipse": {
      "name": "ps_shape_ellipse",
      "description": "An ellipse, with the width and height defined by the area.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "ps_shape_line": {
      "name": "ps_shape_line",
      "description": "A single line, where the start point is the left and top and the end point is the right and bottom.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "ps_shape_rectangle": {
      "name": "ps_shape_rectangle",
      "description": "A rectangular shape that fills the given area.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Emitters/part_emitter_region.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_circle": {
      "name": "pt_shape_circle",
      "description": "A 3px outlined circle.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_cloud": {
      "name": "pt_shape_cloud",
      "description": "A thin cloud, requires up scaling and multiple particles to resemble a cloud.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_disk": {
      "name": "pt_shape_disk",
      "description": "A filled circle.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_explosion": {
      "name": "pt_shape_explosion",
      "description": "A squarish cloud of smoke ' requires multiple colours to resemble an explosion.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_flare": {
      "name": "pt_shape_flare",
      "description": "A harshly glowing point (looks like an actual star in the night).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_line": {
      "name": "pt_shape_line",
      "description": "An 8px wide horizontal line.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_pixel": {
      "name": "pt_shape_pixel",
      "description": "A 1x1 pixel. (This is the default setting.)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_ring": {
      "name": "pt_shape_ring",
      "description": "A circle with an inward glow (looks like a bubble).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_smoke": {
      "name": "pt_shape_smoke",
      "description": "A smooth version of the explosion effect. Use multiple to create a smoke cloud.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_snow": {
      "name": "pt_shape_snow",
      "description": "A generic snowflake shape.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_spark": {
      "name": "pt_shape_spark",
      "description": "A spark effect ' like a star with multiple points fading out.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_sphere": {
      "name": "pt_shape_sphere",
      "description": "A circle with an outward glow ' solid in the middle, glowing outwards.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_square": {
      "name": "pt_shape_square",
      "description": "A filled square.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "pt_shape_star": {
      "name": "pt_shape_star",
      "description": "A five-point filled star.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_shape.htm",
      "secondaryDescriptors": null
    },
    "seq_dir_left": {
      "name": "seq_dir_left",
      "description": "The sequence will play frames in a decremental order from right to left",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headdir.htm",
      "secondaryDescriptors": {
        "Value": "-1"
      }
    },
    "seq_dir_right": {
      "name": "seq_dir_right",
      "description": "The sequence will play frames in an incremental order from left to right",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Sequence_Layers/layer_sequence_headdir.htm",
      "secondaryDescriptors": {
        "Value": "1"
      }
    },
    "seqaudiokey_loop": {
      "name": "seqaudiokey_loop",
      "description": "The sound will loop when played.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Keyframe_Data_Struct.htm",
      "secondaryDescriptors": {
        "Value": "0"
      }
    },
    "seqaudiokey_oneshot": {
      "name": "seqaudiokey_oneshot",
      "description": "The sound will only play once then stop.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Keyframe_Data_Struct.htm",
      "secondaryDescriptors": {
        "Value": "1"
      }
    },
    "seqdir_left": {
      "name": "seqdir_left",
      "description": "The sequence will play frames in a decremental order from right to left",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm",
      "secondaryDescriptors": {
        "Value": "-1"
      }
    },
    "seqdir_right": {
      "name": "seqdir_right",
      "description": "The sequence will play frames in an incremental order from left to right",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm",
      "secondaryDescriptors": {
        "Value": "1"
      }
    },
    "seqplay_loop": {
      "name": "seqplay_loop",
      "description": "The sequence will loop, with the playhead going back to the start when it reaches the end of the playback region.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Object_Struct.htm",
      "secondaryDescriptors": {
        "Value": "1"
      }
    },
    "seqplay_oneshot": {
      "name": "seqplay_oneshot",
      "description": "The sequence will play once then stop when finished.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Object_Struct.htm",
      "secondaryDescriptors": {
        "Value": "0"
      }
    },
    "seqplay_pingpong": {
      "name": "seqplay_pingpong",
      "description": "The sequence will loop, with the playhead reversing direction when it reaches the end of the playback region.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Sequence_Object_Struct.htm",
      "secondaryDescriptors": {
        "Value": "2"
      }
    },
    "seqtracktype_audio": {
      "name": "seqtracktype_audio",
      "description": "This is an audio asset track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "2"
      }
    },
    "seqtracktype_bool": {
      "name": "seqtracktype_bool",
      "description": "Not used currently.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "5"
      }
    },
    "seqtracktype_clipmask": {
      "name": "seqtracktype_clipmask",
      "description": "This is a clip mask group asset track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "8"
      }
    },
    "seqtracktype_clipmask_mask": {
      "name": "seqtracktype_clipmask_mask",
      "description": "This is a clip mask sprite asset track used for generating the clip mask.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "9"
      }
    },
    "seqtracktype_clipmask_subject": {
      "name": "seqtracktype_clipmask_subject",
      "description": "This is a clip mask sprite asset track that is being masked.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "10"
      }
    },
    "seqtracktype_colour": {
      "name": "seqtracktype_colour",
      "description": "This is a colour data parameter track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "4"
      }
    },
    "seqtracktype_empty": {
      "name": "seqtracktype_empty",
      "description": "Not used currently.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "12"
      }
    },
    "seqtracktype_graphic": {
      "name": "seqtracktype_graphic",
      "description": "This is a graphics (sprite) asset track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "1"
      }
    },
    "seqtracktype_group": {
      "name": "seqtracktype_group",
      "description": "This group folder asset track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "11"
      }
    },
    "seqtracktype_instance": {
      "name": "seqtracktype_instance",
      "description": "This is an instance asset track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "14"
      }
    },
    "seqtracktype_message": {
      "name": "seqtracktype_message",
      "description": "This is a broadcast message track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "15"
      }
    },
    "seqtracktype_moment": {
      "name": "seqtracktype_moment",
      "description": "This is an event/moment track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "16"
      }
    },
    "seqtracktype_real": {
      "name": "seqtracktype_real",
      "description": "This is a real number value parameter track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "3"
      }
    },
    "seqtracktype_sequence": {
      "name": "seqtracktype_sequence",
      "description": "This is a sequence asset track.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "7"
      }
    },
    "seqtracktype_spriteframes": {
      "name": "seqtracktype_spriteframes",
      "description": "Not used currently.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "13"
      }
    },
    "seqtracktype_string": {
      "name": "seqtracktype_string",
      "description": "Not used currently.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sequences/Sequence_Structs/The_Track_Struct.htm",
      "secondaryDescriptors": {
        "Value": "6"
      }
    },
    "spritespeed_framespergameframe": {
      "name": "spritespeed_framespergameframe",
      "description": "The sprite was defined with in animation in *frames per game frame*.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_speed.htm",
      "secondaryDescriptors": null
    },
    "spritespeed_framespersecond": {
      "name": "spritespeed_framespersecond",
      "description": "The sprite was defined with animation in *frames per second*.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Manipulation/sprite_set_speed.htm",
      "secondaryDescriptors": null
    },
    "tf_anisotropic": {
      "name": "tf_anisotropic",
      "description": "This means that anisotropic filtering is enabled, which greatly improves texture transition quality and can reduce the blurring visible with other filtering modes, but it has the highest hit on performance.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
      "secondaryDescriptors": null
    },
    "tf_linear": {
      "name": "tf_linear",
      "description": "This means that blending between mipmap levels is enabled (this is also known as *trilinear filtering*), which smooths the texture transitions, but it will give a minor hit to performance.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
      "secondaryDescriptors": null
    },
    "tf_point": {
      "name": "tf_point",
      "description": "This means that blending between mipmap levels is disabled, which can cause visible texture transitions, but gives the best performance.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Mipmapping/gpu_get_tex_mip_filter.htm",
      "secondaryDescriptors": null
    },
    "tile_flip": {
      "name": "tile_flip",
      "description": "Used to set/get the flip bit of a tile data blob.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
      "secondaryDescriptors": null
    },
    "tile_index_mask": {
      "name": "tile_index_mask",
      "description": "A special constant that is for \"and\"-ing with the tile data blob to extract the tile index.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
      "secondaryDescriptors": null
    },
    "tile_mirror": {
      "name": "tile_mirror",
      "description": "Used to set/get the mirror bit of a tile data blob.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
      "secondaryDescriptors": null
    },
    "tile_rotate": {
      "name": "tile_rotate",
      "description": "Used to set/get the rotate bit of a tile data blob.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/tilemap_set_global_mask.htm",
      "secondaryDescriptors": null
    },
    "timezone_local": {
      "name": "timezone_local",
      "description": "use the local time zone as set by the system",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_timezone.htm",
      "secondaryDescriptors": null
    },
    "timezone_utc": {
      "name": "timezone_utc",
      "description": "use Coordinated Universal Time",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Maths_And_Numbers/Date_And_Time/date_get_timezone.htm",
      "secondaryDescriptors": null
    },
    "tm_countvsyncs": {
      "name": "tm_countvsyncs",
      "description": "Use vsync timing as the main timing method (default for all supported platforms)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_timing_method.htm",
      "secondaryDescriptors": null
    },
    "tm_sleep": {
      "name": "tm_sleep",
      "description": "Use the sleep margin value as the main timing method",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_timing_method.htm",
      "secondaryDescriptors": null
    },
    "true": {
      "name": "true",
      "description": "This constant represents the value 1, which is what GameMaker Studio will evaluate as a boolean \"true\" (note that any value equal to or greater than 1 will evaluate as true).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "ty_real": {
      "name": "ty_real",
      "description": "A real number argument",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
      "secondaryDescriptors": null
    },
    "ty_string": {
      "name": "ty_string",
      "description": "a null-terminated string argument",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/OS_And_Compiler/external_define.htm",
      "secondaryDescriptors": null
    },
    "ugc_filetype_community": {
      "name": "ugc_filetype_community",
      "description": "This is used to create files that will be uploaded and made available to anyone in the community.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_item.htm",
      "secondaryDescriptors": null
    },
    "ugc_filetype_microtrans": {
      "name": "ugc_filetype_microtrans",
      "description": "This is used to describe files that are uploaded but intended only for the game to consider adding as official content.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_item.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_Favorited": {
      "name": "ugc_list_Favorited",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_Followed": {
      "name": "ugc_list_Followed",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_Published": {
      "name": "ugc_list_Published",
      "description": "See the  [Steam Documentation](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/https://partner.steamgames.com/documentation/ugc#QueryContent).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_Subscribed": {
      "name": "ugc_list_Subscribed",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_UsedOrPlayed": {
      "name": "ugc_list_UsedOrPlayed",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_VotedDown": {
      "name": "ugc_list_VotedDown",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_VotedOn": {
      "name": "ugc_list_VotedOn",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_VotedUp": {
      "name": "ugc_list_VotedUp",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_list_WillVoteLater": {
      "name": "ugc_list_WillVoteLater",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_AllGuides": {
      "name": "ugc_match_AllGuides",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Artwork": {
      "name": "ugc_match_Artwork",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Collections": {
      "name": "ugc_match_Collections",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_ControllerBindings": {
      "name": "ugc_match_ControllerBindings",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_IntegratedGuides": {
      "name": "ugc_match_IntegratedGuides",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Items": {
      "name": "ugc_match_Items",
      "description": "See the  [Steam Documentation](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/https://partner.steamgames.com/documentation/ugc#QueryContent).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Items_Mtx": {
      "name": "ugc_match_Items_Mtx",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Items_ReadyToUse": {
      "name": "ugc_match_Items_ReadyToUse",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Screenshots": {
      "name": "ugc_match_Screenshots",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_UsableInGame": {
      "name": "ugc_match_UsableInGame",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_Videos": {
      "name": "ugc_match_Videos",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_match_WebGuides": {
      "name": "ugc_match_WebGuides",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_AcceptedForGameRankedByAcceptanceDate": {
      "name": "ugc_query_AcceptedForGameRankedByAcceptanceDate",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_CreatedByFollowedUsersRankedByPublicationDate": {
      "name": "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_CreatedByFriendsRankedByPublicationDate": {
      "name": "ugc_query_CreatedByFriendsRankedByPublicationDate",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_FavoritedByFriendsRankedByPublicationDate": {
      "name": "ugc_query_FavoritedByFriendsRankedByPublicationDate",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_NotYetRated": {
      "name": "ugc_query_NotYetRated",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByNumTimesReported": {
      "name": "ugc_query_RankedByNumTimesReported",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByPublicationDate": {
      "name": "ugc_query_RankedByPublicationDate",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByTextSearch": {
      "name": "ugc_query_RankedByTextSearch",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByTotalVotesAsc": {
      "name": "ugc_query_RankedByTotalVotesAsc",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByTrend": {
      "name": "ugc_query_RankedByTrend",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByVote": {
      "name": "ugc_query_RankedByVote",
      "description": "See the  [Steam Documentation](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/https://partner.steamgames.com/documentation/ugc#QueryContent).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_query_RankedByVotesUp": {
      "name": "ugc_query_RankedByVotesUp",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_all.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_CreationOrderAsc": {
      "name": "ugc_sortorder_CreationOrderAsc",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_CreationOrderDesc": {
      "name": "ugc_sortorder_CreationOrderDesc",
      "description": "See the  [Steam Documentation](https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/https://partner.steamgames.com/documentation/ugc#QueryContent).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_ForModeration": {
      "name": "ugc_sortorder_ForModeration",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_LastUpdatedDesc": {
      "name": "ugc_sortorder_LastUpdatedDesc",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_SubscriptionDateDesc": {
      "name": "ugc_sortorder_SubscriptionDateDesc",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_TitleAsc": {
      "name": "ugc_sortorder_TitleAsc",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_sortorder_VoteScoreDesc": {
      "name": "ugc_sortorder_VoteScoreDesc",
      "description": "-",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_create_query_user_ex.htm",
      "secondaryDescriptors": null
    },
    "ugc_visibility_friends_only": {
      "name": "ugc_visibility_friends_only",
      "description": "Set the item to be visible to only people on the users friends list",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_visibility.htm",
      "secondaryDescriptors": null
    },
    "ugc_visibility_private": {
      "name": "ugc_visibility_private",
      "description": "Set the item to be private",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_visibility.htm",
      "secondaryDescriptors": null
    },
    "ugc_visibility_public": {
      "name": "ugc_visibility_public",
      "description": "Set the item to be publicly visible",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Steam/Steam_UGC/steam_ugc_set_item_visibility.htm",
      "secondaryDescriptors": null
    },
    "undefined": {
      "name": "undefined",
      "description": "This constant is returned when a function has to return *something* but has no appropriate or \"correct\" value to return.\n          This value is falsy (tooltip).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Overview/Variables/Constants.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_communications": {
      "name": "uwp_privilege_communications",
      "description": "Check to see if internet communication is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_fitness_upload": {
      "name": "uwp_privilege_fitness_upload",
      "description": "Check to see if fitness data uploading is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_internet_browsing": {
      "name": "uwp_privilege_internet_browsing",
      "description": "Check to see if internet browsing is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_multiplayer_sessions": {
      "name": "uwp_privilege_multiplayer_sessions",
      "description": "Check to see if online multiplayer sessions are permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_result_aborted": {
      "name": "uwp_privilege_result_aborted",
      "description": "The check was aborted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": {
        "Value": "2"
      }
    },
    "uwp_privilege_result_banned": {
      "name": "uwp_privilege_result_banned",
      "description": "The user is banned",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": {
        "Value": "4"
      }
    },
    "uwp_privilege_result_no_issue": {
      "name": "uwp_privilege_result_no_issue",
      "description": "There are no privilege issues with the user",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": {
        "Value": "0"
      }
    },
    "uwp_privilege_result_purchase_required": {
      "name": "uwp_privilege_result_purchase_required",
      "description": "The user must purchase something additional, usually a subscription, for access",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": {
        "Value": "1"
      }
    },
    "uwp_privilege_result_restricted": {
      "name": "uwp_privilege_result_restricted",
      "description": "The user is restricted from access, usually through parental controls",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": {
        "Value": "8"
      }
    },
    "uwp_privilege_sessions": {
      "name": "uwp_privilege_sessions",
      "description": "Check to see if online sessions are permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_share_kinect_content": {
      "name": "uwp_privilege_share_kinect_content",
      "description": "Check whether sharing the Kinect controller is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_social_network_sharing": {
      "name": "uwp_privilege_social_network_sharing",
      "description": "Check to see if sharing to social networks is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_user_created_content": {
      "name": "uwp_privilege_user_created_content",
      "description": "Check if access to user created content is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "uwp_privilege_video_communications": {
      "name": "uwp_privilege_video_communications",
      "description": "Check to see if video communication is permitted",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/uwp_check_privilege.htm",
      "secondaryDescriptors": null
    },
    "vertex_type_colour": {
      "name": "vertex_type_colour",
      "description": "Four component values (r, g, b, a)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_type_float1": {
      "name": "vertex_type_float1",
      "description": "A single floating point value",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_type_float2": {
      "name": "vertex_type_float2",
      "description": "Two floating point values",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_type_float3": {
      "name": "vertex_type_float3",
      "description": "Three floating point values",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_type_float4": {
      "name": "vertex_type_float4",
      "description": "Four floating point values",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_type_ubyte4": {
      "name": "vertex_type_ubyte4",
      "description": "Four component unsigned byte values (from 0 to 255)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_binormal": {
      "name": "vertex_usage_binormal",
      "description": "binormal values",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_blendindices": {
      "name": "vertex_usage_blendindices",
      "description": "the indices of the matrices to use (for skeletal animation, for example)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_blendweight": {
      "name": "vertex_usage_blendweight",
      "description": "the blendweight of the input matrix (for skeletal animation, for example)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_colour": {
      "name": "vertex_usage_colour",
      "description": "colour values (r, g, b, a)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_depth": {
      "name": "vertex_usage_depth",
      "description": "vertex depth buffer value",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_fog": {
      "name": "vertex_usage_fog",
      "description": "fog values",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_normal": {
      "name": "vertex_usage_normal",
      "description": "vertex normal values (nx, ny, nz)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_position": {
      "name": "vertex_usage_position",
      "description": "position values (x, y, z)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_sample": {
      "name": "vertex_usage_sample",
      "description": "sampler index",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_tangent": {
      "name": "vertex_usage_tangent",
      "description": "tangent values",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vertex_usage_textcoord": {
      "name": "vertex_usage_textcoord",
      "description": "UV coordinates (u, v)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm",
      "secondaryDescriptors": null
    },
    "vk_add": {
      "name": "vk_add",
      "description": "add key on the numeric keypad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_alt": {
      "name": "vk_alt",
      "description": "alt key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_anykey": {
      "name": "vk_anykey",
      "description": "keycode representing that any key is pressed",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_backspace": {
      "name": "vk_backspace",
      "description": "backspace key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_control": {
      "name": "vk_control",
      "description": "either of the control keys",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_decimal": {
      "name": "vk_decimal",
      "description": "decimal dot keys on the numeric keypad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_delete": {
      "name": "vk_delete",
      "description": "delete key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_divide": {
      "name": "vk_divide",
      "description": "divide key on the numeric keypad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_down": {
      "name": "vk_down",
      "description": "keycode for the down arrow key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_end": {
      "name": "vk_end",
      "description": "end key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_enter": {
      "name": "vk_enter",
      "description": "enter key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_escape": {
      "name": "vk_escape",
      "description": "escape key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_f1 ... vk_f12": {
      "name": "vk_f1 ... vk_f12",
      "description": "keycode for the function keys F1 to F12",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_home": {
      "name": "vk_home",
      "description": "home key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_insert": {
      "name": "vk_insert",
      "description": "insert key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_lalt": {
      "name": "vk_lalt",
      "description": "left alt key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_lcontrol": {
      "name": "vk_lcontrol",
      "description": "left control key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_left": {
      "name": "vk_left",
      "description": "keycode for the left arrow key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_lshift": {
      "name": "vk_lshift",
      "description": "left shift key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_multiply": {
      "name": "vk_multiply",
      "description": "multiply key on the numeric keypad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_nokey": {
      "name": "vk_nokey",
      "description": "keycode representing that no key is pressed",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_numpad0 ... vk_numpad9": {
      "name": "vk_numpad0 ... vk_numpad9",
      "description": "number keys on the numeric keypad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_pagedown": {
      "name": "vk_pagedown",
      "description": "pagedown key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_pageup": {
      "name": "vk_pageup",
      "description": "pageup key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_pause": {
      "name": "vk_pause",
      "description": "pause/break key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_printscreen": {
      "name": "vk_printscreen",
      "description": "printscreen/sysrq key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_ralt": {
      "name": "vk_ralt",
      "description": "right alt key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_rcontrol": {
      "name": "vk_rcontrol",
      "description": "right control key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_right": {
      "name": "vk_right",
      "description": "keycode for the right arrow key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_rshift": {
      "name": "vk_rshift",
      "description": "right shift key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_shift": {
      "name": "vk_shift",
      "description": "either of the shift keys",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_space": {
      "name": "vk_space",
      "description": "space key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_subtract": {
      "name": "vk_subtract",
      "description": "subtract key on the numeric keypad",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_tab": {
      "name": "vk_tab",
      "description": "tab key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "vk_up": {
      "name": "vk_up",
      "description": "keycode for the up arrow key",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_achievement_filter_all_players ": {
      "name": "xboxlive_achievement_filter_all_players ",
      "description": "Get all scores for all players.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_achievement_filter_friends_only ": {
      "name": "xboxlive_achievement_filter_friends_only ",
      "description": "Get only the scores of the players friends.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Stats_And_Leaderboards/xboxlive_achievement_load_leaderboard.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_agegroup_adult": {
      "name": "xboxlive_agegroup_adult",
      "description": "The user age group is 18 or over (or 20 and over in South Korea",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_agegroup_child": {
      "name": "xboxlive_agegroup_child",
      "description": "The user age group is between 8 and 12 (inclusive)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_agegroup_teen": {
      "name": "xboxlive_agegroup_teen",
      "description": "The user age group is between 13 and 17 (inclusive, and between 13 and 19 in South Korea)",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_agegroup_unknown": {
      "name": "xboxlive_agegroup_unknown",
      "description": "The age group for the user is unknown",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Users_And_Accounts/xboxlive_agegroup_for_user.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_fileerror_noerror": {
      "name": "xboxlive_fileerror_noerror",
      "description": "The file save or load function was carried out without issues.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_fileerror_outoflocalstorage": {
      "name": "xboxlive_fileerror_outoflocalstorage",
      "description": "If this occurs while saving this means that all available save game space has been used up, and the user has declined the offer (presented by the OS) of freeing up space. The game should confirm with the user that they intend to continue playing without saving. If they still want to be able to save, the game should retry the save operation.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_fileerror_quotaexceeded": {
      "name": "xboxlive_fileerror_quotaexceeded",
      "description": "If this occurs the game should notify the user that they can't save any more data until they free up some space, and then present them with a way of doing this.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Saving_Data/xboxlive_get_file_error.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_match_visibility_open": {
      "name": "xboxlive_match_visibility_open",
      "description": "specifies that the session can be joined by the others.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_match_visibility_private": {
      "name": "xboxlive_match_visibility_private",
      "description": "specifies that the session is not visible to users who are not session members.",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
      "secondaryDescriptors": null
    },
    "xboxlive_match_visibility_usetemplate": {
      "name": "xboxlive_match_visibility_usetemplate",
      "description": "specifies that the value used in the session template should be used (this should normally be used as you can't override a template's value if one has been set in XDP).",
      "link": "https://manual.yoyogames.com/GameMaker_Language/GML_Reference/UWP_And_XBox_Live/Match_Making/xboxlive_matchmaking_create.htm",
      "secondaryDescriptors": null
    }
  }
}
